import { a as createComponent, m as maybeRenderHead, u as unescapeHTML, b as renderTemplate } from './astro/server_Cqa-EqH9.mjs';
import 'clsx';

const html$1y = () => "<p><img src=\"https://assets.roadmap.sh/guest/is-data-science-a-good-career-10j3j.jpg\" alt=\"Is data science a good career choice?\"></p>\n<p>Data science is one of the most talked-about career paths today, but is it the right fit for you?</p>\n<p>With <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> at the intersection of technology, creativity, and impact, it can be a very appealing role. It definitely promises high and competitive salaries, and the chance to solve real-world problems. Who would say “no” to that?!</p>\n<p>But is it the right fit for your skills and aspirations?</p>\n<p>In this guide, I’ll help you uncover the answer to that question by understanding the pros and cons of working as a data scientist. I’ll also look at what the data scientists’ salaries are like and the type of skills you’d need to have to succeed at the job.</p>\n<p>Now sit down, relax, and read carefully, because I’m about to help you answer the question of “Is data science a good career for me?”.</p>\n<h2 id=\"pros-of-a-career-in-data-science\">Pros of a Career in Data Science</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-pros-4ub43.png\" alt=\"Pros of a Career in Data Science\"></p>\n<p>There are plenty of “pros” when it comes to picking data science as your career, but let’s take a closer look at the main ones.</p>\n<h3 id=\"high-demand-and-job-security\">High Demand and Job Security</h3>\n<p>The demand for data scientists has grown exponentially over the past few years and shows no signs of slowing down. According to the <a href=\"https://www.bls.gov/ooh/math/data-scientists.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">U.S. Bureau of Labor Statistics</a>, the data science job market is projected to grow by 36% from 2023 to 2033, far outpacing the average for other fields.</p>\n<p>This surge is partly due to the “explosion” of artificial intelligence, particularly tools like ChatGPT, in recent years, which have amplified the need for skilled data scientists to handle complex machine learning models and big data analysis.</p>\n<h3 id=\"competitive-salaries\">Competitive Salaries</h3>\n<p>One of the most appealing aspects of data science positions is the average data scientist’s salary. Reports from Glassdoor and Indeed highlight that data scientists are among the highest-paid professionals in the technology sector. For example, the national average salary for a data scientist in the United States is approximately $120,000 annually, with experienced professionals earning significantly more.</p>\n<p>These salaries are a reflection of the reality: the high demand for <a href=\"https://roadmap.sh/ai-data-scientist/skills\" target=\"_blank\">data science skills</a> and the technical expertise required for these roles are not easy to come by. What’s even more, companies in high-cost regions, such as Silicon Valley, New York City, and Seattle, tend to offer premium salaries to attract top talent.</p>\n<p>The financial rewards in this field are usually complemented by additional benefits such as opportunities for professional development like research, publishing, patent registration, etc.</p>\n<h3 id=\"intellectual-challenge-and-learning-opportunities\">Intellectual Challenge and Learning Opportunities</h3>\n<p>Data scientists work in a field that demands continuous learning and adaptation to emerging technologies. Their field is rooted in solving complex problems through a combination of technical knowledge, creativity, and critical thinking. In other words, they rarely have any time to get bored.</p>\n<p>What makes data science important and intellectually rewarding, is its ability to address real-world problems. Whether it’s optimizing healthcare systems, enhancing customer experiences in retail, or predicting financial risks, data science applications have a tangible impact on people.</p>\n<p>This makes data science a good career for individuals who are passionate about lifelong learning and intellectual stimulation.</p>\n<h3 id=\"versatility\">Versatility</h3>\n<p>Data science is a good career choice for those who enjoy variety and flexibility. One of the unique aspects of a career in data science is its ability to reach across various industries and domains (I’m talking technology, healthcare, finance, e-commerce, and even entertainment to name a few). This means data scientists can apply their data science skills in almost any sector that generates or relies on data—which is virtually all industries today.</p>\n<h2 id=\"cons-of-a-career-in-data-science\">Cons of a Career in Data Science</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-right-fit-x50z5.png\" alt=\"Cons of a Career in Data Science\"></p>\n<p>The data science job is not without its “cons”, after all, there is no “perfect” role out there. Let’s now review some of the potential challenges that come with the role.</p>\n<h3 id=\"steep-learning-curve\">Steep Learning Curve</h3>\n<p>The steep learning curve in data science is one of the field’s defining characteristics. New data scientists have to develop a deep understanding of technical skills, including proficiency in programming languages like Python, R, and SQL, as well as tools for machine learning and data visualization.</p>\n<p>On top of the already complex subjects to master, data scientists need to find ways of staying current with the constant advancements in the field. This is not optional; it’s a necessity for anyone trying to achieve long-term success in data science. This constant evolution can feel overwhelming, especially for newcomers who are also learning foundational skills.</p>\n<p>Despite these challenges, the steep learning curve can be incredibly rewarding for those who are passionate about solving problems, making data-driven decisions, and contributing to impactful projects.</p>\n<p>While it might sound harsh, it’s important to note that the dedication required to overcome these challenges often results in a fulfilling and (extremely) lucrative career in the world of data science.</p>\n<h3 id=\"high-expectations\">High Expectations</h3>\n<p>Data science positions come with high expectations from organizations. Data scientists usually have the huge responsibility of delivering actionable insights and ensuring these insights are both accurate and timely.</p>\n<p>One of the key challenges data science professionals face is managing the pressure to deliver results under tight deadlines (they’re always tight). Stakeholders often expect instant answers to complex problems, which can lead to unrealistic demands.</p>\n<p>To succeed in such environments, skilled data scientists need strong communication skills to explain their findings and set realistic expectations with stakeholders.</p>\n<h3 id=\"potential-burnout\">Potential Burnout</h3>\n<p>The high demand for data science skills usually translates into heavy workloads and tight deadlines, particularly for data scientists working on high-stakes projects (working extra hours is also not an uncommon scenario).</p>\n<p>Data scientists frequently juggle multiple complex responsibilities, such as modeling data, developing machine learning algorithms, and conducting statistical analysis—often within limited timeframes.</p>\n<p>The intense focus required for these tasks, combined with overlapping priorities (and a small dose of poor project management), can lead to mental fatigue and stress.</p>\n<p>Work-life balance can also be a challenge for data scientists giving them another reason for burnout. Combine that with highly active industries, like finance and you have a very hard-to-balance combination.</p>\n<p>To mitigate the risk of burnout, data scientists can try to prioritize setting boundaries, managing workloads effectively (when that’s an option), and advocating for clearer role definitions (better separation of concerns).</p>\n<h2 id=\"skills-required-for-a-data-science-career\">Skills Required for a Data Science Career</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-skills-6i284.png\" alt=\"Skills Required for a Data Science Career\"></p>\n<p>To develop a successful career in data science, not all of your <a href=\"https://roadmap.sh/ai-data-scientist/skills\" target=\"_blank\">skills</a> need to be technical, you also have to look at soft skills, and domain knowledge and to have a mentality of lifelong learning.</p>\n<p>Let’s take a closer look.</p>\n<h3 id=\"technical-skills\">Technical Skills</h3>\n<p>The field of data requires strong foundational technical skills. At the core of these skills is proficiency in programming languages such as Python, R, and SQL. Python is particularly useful and liked for its versatility and extensive libraries, while SQL is essential for querying and managing database systems. R remains a popular choice for statistical analysis and data visualization.</p>\n<p>In terms of frameworks, look into TensorFlow, PyTorch, or Scikit-learn. They’re all crucial for building predictive models and implementing artificial intelligence solutions. Tools like Tableau, Power BI, and Matplotlib are fantastic for creating clear and effective data visualizations, which play a significant role in presenting actionable insights.</p>\n<h3 id=\"soft-skills\">Soft Skills</h3>\n<p>As I said before, it’s not all about technical skills. Data scientists must develop their soft skills, this is key in the field.</p>\n<p>From problem-solving and analytical thinking to developing your communication skills and your ability to collaborate with others. They all work together to help you communicate complex insights and results to other, non-technical stakeholders, which is going to be a key activity in your day-to-day life.</p>\n<h3 id=\"domain-knowledge\">Domain Knowledge</h3>\n<p>While technical and soft skills are essential, domain knowledge often distinguishes exceptional data scientists from the rest. Understanding industry-specific contexts—such as healthcare regulations, financial market trends, or retail customer behavior—enables data scientists to deliver tailored insights that directly address business needs. If you understand your problem space, you understand the needs of your client and the data you’re dealing with.</p>\n<p>Getting that domain knowledge often involves on-the-job experience, targeted research, or additional certifications.</p>\n<h3 id=\"lifelong-learning\">Lifelong Learning</h3>\n<p>Finally, if you’re going to be a data scientist, you’ll need to embrace a mindset of continuous learning. The field evolves rapidly, with emerging technologies, tools, and methodologies reshaping best practices. Staying competitive requires consistent professional development through online courses, certifications, conferences, and engagement with the broader data science community.</p>\n<p>Lifelong learning is not just a necessity but also an opportunity to remain excited and engaged in a dynamic and rewarding career.</p>\n<h2 id=\"how-to-determine-if-data-science-is-right-for-you\">How to determine if data science is right for you?</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-right-fit-x50z5.png\" alt=\"Is data science right for you?\"></p>\n<p>How can you tell if you’ll actually enjoy working as a data scientist? Even after reading this far, you might still have some doubts. So in this section, I’m going to look at some ways in which you can validate that you’ll enjoy the job of a data scientist before you go through the process of becoming one.</p>\n<h3 id=\"self-assessment-questions\">Self-Assessment Questions</h3>\n<p>Figuring out whether data science is the right career path starts with introspection. Ask yourself the following:</p>\n<ul>\n<li>Do you enjoy working with numbers and solving complex problems?</li>\n<li>Are you comfortable learning and applying programming skills like Python and SQL?</li>\n<li>Are you excited by the idea of using algorithms to create data-driven insights and actionable recommendations?</li>\n<li>Are you willing to commit to continuous learning in a fast-evolving field?</li>\n</ul>\n<p>Take your time while you think about these questions. You don’t even need a full answer, just try to understand how you feel about the idea of each one. If you don’t feel like saying “yes”, then chances are, this might not be the right path for you (and that’s completely fine!).</p>\n<h3 id=\"start-with-small-projects\">Start with Small Projects</h3>\n<p>If self-assessment is not your thing, another great way to explore your interest in data science is to dive into small, manageable projects. Platforms like Kaggle offer competitions and publicly available data sets, allowing you to practice exploratory data analysis, data visualization, and predictive modeling. Working on these projects can help you build a portfolio, develop confidence in your skills, and validate that you effectively like working this way.</p>\n<p>Online courses and certifications in data analytics, machine learning, and programming languages provide a structured way to build foundational knowledge. Resources like Coursera, edX, and DataCamp offer beginner-friendly paths to learning data science fundamentals.</p>\n<h3 id=\"network-and-seek-mentorship\">Network and Seek Mentorship</h3>\n<p>Another great way to understand if you would like to be a data scientist, is to ask other data scientists. It might sound basic, but it’s a very powerful way because you’ll get insights about the field from the source.</p>\n<p>Networking, while not easy for everyone, is a key component of entering the data science field. Go to data science meetups, webinars, or conferences to expand your network and stay updated on emerging trends and technologies.</p>\n<p>If you’re not into big groups, try seeking mentorship from data scientists already working in the field. This can accelerate your learning curve. Mentors can offer guidance on career planning, project selection, and skill development.</p>\n<h2 id=\"alternative-career-paths-to-consider\">Alternative career paths to consider</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-alternatives-l7rtz.png\" alt=\"Alternative career paths to consider\"></p>\n<p>Not everyone who is interested in data science wants to pursue the full spectrum of technical skills or the specific responsibilities of a data scientist. Lucky for you, there are several related career paths that can still scratch your itch for fun and interesting challenges while working within the data ecosystem.</p>\n<h3 id=\"data-adjacent-roles\">Data-Adjacent Roles</h3>\n<ul>\n<li><strong>Data Analyst</strong>: If you enjoy working with data but prefer focusing on interpreting and visualizing it to inform business decisions, a data analyst role might be for you. Data analysts primarily work on identifying trends and providing actionable recommendations without diving deeply into machine learning or predictive modeling.</li>\n<li><strong>Data Engineer</strong>: If you’re more inclined toward building the infrastructure that makes data science possible, consider becoming a data engineer. These data professionals design, build, and maintain data pipelines, ensuring the accessibility and reliability of large data sets for analysis. The role requires expertise in database systems, data structures, and programming.</li>\n</ul>\n<h3 id=\"related-fields\">Related Fields</h3>\n<ul>\n<li><strong>Software Engineering</strong>: For those who enjoy coding and software development but want to remain close to data-related projects, software engineering offers opportunities to build tools, applications, and systems that support data analysis and visualization.</li>\n<li><strong>Cybersecurity</strong>: With the increasing emphasis on data privacy and security, cybersecurity professionals play a critical role in protecting sensitive information. This field combines technical knowledge with policy enforcement, making it appealing to those interested in data protection and regulatory compliance.</li>\n</ul>\n<h3 id=\"non-technical-roles-in-the-data-ecosystem\">Non-Technical Roles in the Data Ecosystem</h3>\n<ul>\n<li><strong>Data Governance</strong>: If instead of transforming data and getting insights, you’d like to focus more on how the data is governed (accessed, controlled, cataloged, etc), then this might be the role for you. This role is essential for ensuring that an organization’s data assets are used effectively and responsibly.</li>\n<li><strong>Data Privacy Office</strong>: In a similar vein to a data governance officer, the data privacy officer cares for the actual privacy of the data. With the rise of AI, data is more relevant than ever, and controlling that you comply with regulations like GDPR and CCPA, is critical for organizations. This role focuses on data privacy strategies, audits, and risk management, making it an excellent fit for those interested in the legal and ethical aspects of data.</li>\n</ul>\n<h2 id=\"next-steps\">Next steps</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-next-steps-o539b.png\" alt=\"Next steps\"></p>\n<p>Data science is a promising career path offering high demand, competitive salaries, and multiple opportunities across various industries. Its ability to address real-world problems, combined with the intellectual challenge it presents, makes it an attractive choice for many. However, it also makes it a very difficult and taxing profession for those who don’t enjoy this type of challenge.</p>\n<p>There are many potential next steps for you to take and answer the question of “Is data science a good career?”.</p>\n<p>For example, you can reflect on your interests and strengths. Ask yourself whether or not you enjoy problem-solving, working with data sets, and learning new technologies. Use this reflection to determine if data science aligns with your career goals.</p>\n<p>You can also consume resources like the <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">AI/Data Scientist roadmap</a> and the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst roadmap</a>, as they offer a clear progression for developing essential skills, so check them out. These tools can help you identify which areas to focus on based on your current expertise and interests.</p>\n<p>In the end, just remember: data science is rapidly evolving so make sure to stay engaged by reading research papers, following industry blogs, or attending conferences. Anything you can do will help, just figure out what works for you and keep doing it.</p>";

				const frontmatter$1y = {"title":"Is Data Science a Good Career? Advice From a Pro","description":"Is data science a good career choice? Learn from a professional about the benefits, growth potential, and how to thrive in this exciting field.","authorId":"fernando","excludedBySlug":"/ai-data-scientist/career-path","seo":{"title":"Is Data Science a Good Career? Advice From a Pro","description":"Is data science a good career choice? Learn from a professional about the benefits, growth potential, and how to thrive in this exciting field.","ogImageUrl":"https://assets.roadmap.sh/guest/is-data-science-a-good-career-10j3j.jpg"},"isNew":false,"type":"textual","date":"2025-01-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1y = "/workspace/src/data/guides/ai-data-scientist-career-path.md";
				const url$1y = undefined;
				function rawContent$1y() {
					return "   \n                                                         \n                                                                                                                                                              \n                  \n                                                \n    \n                                                           \n                                                                                                                                                                \n                                                                                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Is data science a good career choice?](https://assets.roadmap.sh/guest/is-data-science-a-good-career-10j3j.jpg)\n\nData science is one of the most talked-about career paths today, but is it the right fit for you? \n\nWith [data science](https://roadmap.sh/ai-data-scientist) at the intersection of technology, creativity, and impact, it can be a very appealing role. It definitely promises high and competitive salaries, and the chance to solve real-world problems. Who would say “no” to that?\\!\n\nBut is it the right fit for your skills and aspirations?\n\nIn this guide, I’ll help you uncover the answer to that question by understanding the pros and cons of working as a data scientist. I’ll also look at what the data scientists’ salaries are like and the type of skills you’d need to have to succeed at the job.\n\nNow sit down, relax, and read carefully, because I’m about to help you answer the question of “Is data science a good career for me?”.\n\n## Pros of a Career in Data Science\n\n![Pros of a Career in Data Science](https://assets.roadmap.sh/guest/data-science-pros-4ub43.png)\n\nThere are plenty of “pros” when it comes to picking data science as your career, but let’s take a closer look at the main ones.\n\n### High Demand and Job Security\n\nThe demand for data scientists has grown exponentially over the past few years and shows no signs of slowing down. According to the [U.S. Bureau of Labor Statistics](https://www.bls.gov/ooh/math/data-scientists.htm), the data science job market is projected to grow by 36% from 2023 to 2033, far outpacing the average for other fields. \n\nThis surge is partly due to the “explosion” of artificial intelligence, particularly tools like ChatGPT, in recent years, which have amplified the need for skilled data scientists to handle complex machine learning models and big data analysis.\n\n### Competitive Salaries\n\nOne of the most appealing aspects of data science positions is the average data scientist’s salary. Reports from Glassdoor and Indeed highlight that data scientists are among the highest-paid professionals in the technology sector. For example, the national average salary for a data scientist in the United States is approximately $120,000 annually, with experienced professionals earning significantly more.\n\nThese salaries are a reflection of the reality: the high demand for [data science skills](https://roadmap.sh/ai-data-scientist/skills) and the technical expertise required for these roles are not easy to come by. What’s even more, companies in high-cost regions, such as Silicon Valley, New York City, and Seattle, tend to offer premium salaries to attract top talent.\n\nThe financial rewards in this field are usually complemented by additional benefits such as opportunities for professional development like research, publishing, patent registration, etc. \n\n### Intellectual Challenge and Learning Opportunities\n\nData scientists work in a field that demands continuous learning and adaptation to emerging technologies. Their field is rooted in solving complex problems through a combination of technical knowledge, creativity, and critical thinking. In other words, they rarely have any time to get bored.\n\nWhat makes data science important and intellectually rewarding, is its ability to address real-world problems. Whether it's optimizing healthcare systems, enhancing customer experiences in retail, or predicting financial risks, data science applications have a tangible impact on people. \n\nThis makes data science a good career for individuals who are passionate about lifelong learning and intellectual stimulation. \n\n### Versatility\n\nData science is a good career choice for those who enjoy variety and flexibility. One of the unique aspects of a career in data science is its ability to reach across various industries and domains (I’m talking technology, healthcare, finance, e-commerce, and even entertainment to name a few). This means data scientists can apply their data science skills in almost any sector that generates or relies on data—which is virtually all industries today.\n\n## Cons of a Career in Data Science\n\n![Cons of a Career in Data Science](https://assets.roadmap.sh/guest/data-science-right-fit-x50z5.png)\n\nThe data science job is not without its “cons”, after all, there is no “perfect” role out there. Let’s now review some of the potential challenges that come with the role.\n\n### Steep Learning Curve\n\nThe steep learning curve in data science is one of the field’s defining characteristics. New data scientists have to develop a deep understanding of technical skills, including proficiency in programming languages like Python, R, and SQL, as well as tools for machine learning and data visualization.\n\nOn top of the already complex subjects to master, data scientists need to find ways of staying current with the constant advancements in the field. This is not optional; it’s a necessity for anyone trying to achieve long-term success in data science. This constant evolution can feel overwhelming, especially for newcomers who are also learning foundational skills.\n\nDespite these challenges, the steep learning curve can be incredibly rewarding for those who are passionate about solving problems, making data-driven decisions, and contributing to impactful projects. \n\nWhile it might sound harsh, it’s important to note that the dedication required to overcome these challenges often results in a fulfilling and (extremely) lucrative career in the world of data science.\n\n### High Expectations\n\nData science positions come with high expectations from organizations. Data scientists usually have the huge responsibility of delivering actionable insights and ensuring these insights are both accurate and timely.\n\nOne of the key challenges data science professionals face is managing the pressure to deliver results under tight deadlines (they’re always tight). Stakeholders often expect instant answers to complex problems, which can lead to unrealistic demands. \n\nTo succeed in such environments, skilled data scientists need strong communication skills to explain their findings and set realistic expectations with stakeholders. \n\n### Potential Burnout\n\nThe high demand for data science skills usually translates into heavy workloads and tight deadlines, particularly for data scientists working on high-stakes projects (working extra hours is also not an uncommon scenario). \n\nData scientists frequently juggle multiple complex responsibilities, such as modeling data, developing machine learning algorithms, and conducting statistical analysis—often within limited timeframes. \n\nThe intense focus required for these tasks, combined with overlapping priorities (and a small dose of poor project management), can lead to mental fatigue and stress.\n\nWork-life balance can also be a challenge for data scientists giving them another reason for burnout. Combine that with highly active industries, like finance and you have a very hard-to-balance combination. \n\nTo mitigate the risk of burnout, data scientists can try to prioritize setting boundaries, managing workloads effectively (when that’s an option), and advocating for clearer role definitions (better separation of concerns). \n\n## Skills Required for a Data Science Career\n\n![Skills Required for a Data Science Career](https://assets.roadmap.sh/guest/data-science-skills-6i284.png)\n\nTo develop a successful career in data science, not all of your [skills](https://roadmap.sh/ai-data-scientist/skills) need to be technical, you also have to look at soft skills, and domain knowledge and to have a mentality of lifelong learning.\n\nLet’s take a closer look.\n\n### Technical Skills\n\nThe field of data requires strong foundational technical skills. At the core of these skills is proficiency in programming languages such as Python, R, and SQL. Python is particularly useful and liked for its versatility and extensive libraries, while SQL is essential for querying and managing database systems. R remains a popular choice for statistical analysis and data visualization.\n\nIn terms of frameworks, look into TensorFlow, PyTorch, or Scikit-learn. They’re all crucial for building predictive models and implementing artificial intelligence solutions. Tools like Tableau, Power BI, and Matplotlib are fantastic for creating clear and effective data visualizations, which play a significant role in presenting actionable insights.\n\n### Soft Skills\n\nAs I said before, it’s not all about technical skills. Data scientists must develop their soft skills, this is key in the field. \n\nFrom problem-solving and analytical thinking to developing your communication skills and your ability to collaborate with others. They all work together to help you communicate complex insights and results to other, non-technical stakeholders, which is going to be a key activity in your day-to-day life.\n\n### Domain Knowledge\n\nWhile technical and soft skills are essential, domain knowledge often distinguishes exceptional data scientists from the rest. Understanding industry-specific contexts—such as healthcare regulations, financial market trends, or retail customer behavior—enables data scientists to deliver tailored insights that directly address business needs. If you understand your problem space, you understand the needs of your client and the data you’re dealing with. \n\nGetting that domain knowledge often involves on-the-job experience, targeted research, or additional certifications. \n\n### Lifelong Learning\n\nFinally, if you’re going to be a data scientist, you’ll need to embrace a mindset of continuous learning. The field evolves rapidly, with emerging technologies, tools, and methodologies reshaping best practices. Staying competitive requires consistent professional development through online courses, certifications, conferences, and engagement with the broader data science community. \n\nLifelong learning is not just a necessity but also an opportunity to remain excited and engaged in a dynamic and rewarding career.\n\n## How to determine if data science is right for you?\n\n![Is data science right for you?](https://assets.roadmap.sh/guest/data-science-right-fit-x50z5.png)\n\nHow can you tell if you’ll actually enjoy working as a data scientist? Even after reading this far, you might still have some doubts. So in this section, I’m going to look at some ways in which you can validate that you’ll enjoy the job of a data scientist before you go through the process of becoming one.\n\n### Self-Assessment Questions\n\nFiguring out whether data science is the right career path starts with introspection. Ask yourself the following:\n\n* Do you enjoy working with numbers and solving complex problems?  \n* Are you comfortable learning and applying programming skills like Python and SQL?  \n* Are you excited by the idea of using algorithms to create data-driven insights and actionable recommendations?  \n* Are you willing to commit to continuous learning in a fast-evolving field?\n\nTake your time while you think about these questions. You don’t even need a full answer, just try to understand how you feel about the idea of each one. If you don’t feel like saying “yes”, then chances are, this might not be the right path for you (and that’s completely fine\\!).\n\n### Start with Small Projects\n\nIf self-assessment is not your thing, another great way to explore your interest in data science is to dive into small, manageable projects. Platforms like Kaggle offer competitions and publicly available data sets, allowing you to practice exploratory data analysis, data visualization, and predictive modeling. Working on these projects can help you build a portfolio, develop confidence in your skills, and validate that you effectively like working this way.\n\nOnline courses and certifications in data analytics, machine learning, and programming languages provide a structured way to build foundational knowledge. Resources like Coursera, edX, and DataCamp offer beginner-friendly paths to learning data science fundamentals. \n\n### Network and Seek Mentorship\n\nAnother great way to understand if you would like to be a data scientist, is to ask other data scientists. It might sound basic, but it’s a very powerful way because you’ll get insights about the field from the source.\n\nNetworking, while not easy for everyone, is a key component of entering the data science field. Go to data science meetups, webinars, or conferences to expand your network and stay updated on emerging trends and technologies.\n\nIf you’re not into big groups, try seeking mentorship from data scientists already working in the field. This can accelerate your learning curve. Mentors can offer guidance on career planning, project selection, and skill development.\n\n## Alternative career paths to consider\n\n![Alternative career paths to consider](https://assets.roadmap.sh/guest/data-science-alternatives-l7rtz.png)\n\nNot everyone who is interested in data science wants to pursue the full spectrum of technical skills or the specific responsibilities of a data scientist. Lucky for you, there are several related career paths that can still scratch your itch for fun and interesting challenges while working within the data ecosystem.\n\n### Data-Adjacent Roles\n\n* **Data Analyst**: If you enjoy working with data but prefer focusing on interpreting and visualizing it to inform business decisions, a data analyst role might be for you. Data analysts primarily work on identifying trends and providing actionable recommendations without diving deeply into machine learning or predictive modeling.  \n* **Data Engineer**: If you’re more inclined toward building the infrastructure that makes data science possible, consider becoming a data engineer. These data professionals design, build, and maintain data pipelines, ensuring the accessibility and reliability of large data sets for analysis. The role requires expertise in database systems, data structures, and programming.\n\n### Related Fields\n\n* **Software Engineering**: For those who enjoy coding and software development but want to remain close to data-related projects, software engineering offers opportunities to build tools, applications, and systems that support data analysis and visualization.  \n* **Cybersecurity**: With the increasing emphasis on data privacy and security, cybersecurity professionals play a critical role in protecting sensitive information. This field combines technical knowledge with policy enforcement, making it appealing to those interested in data protection and regulatory compliance.\n\n### Non-Technical Roles in the Data Ecosystem\n\n* **Data Governance**: If instead of transforming data and getting insights, you’d like to focus more on how the data is governed (accessed, controlled, cataloged, etc), then this might be the role for you. This role is essential for ensuring that an organization’s data assets are used effectively and responsibly.  \n* **Data Privacy Office**: In a similar vein to a data governance officer, the data privacy officer cares for the actual privacy of the data. With the rise of AI, data is more relevant than ever, and controlling that you comply with regulations like GDPR and CCPA, is critical for organizations. This role focuses on data privacy strategies, audits, and risk management, making it an excellent fit for those interested in the legal and ethical aspects of data.\n\n## Next steps\n\n![Next steps](https://assets.roadmap.sh/guest/data-science-next-steps-o539b.png)\n\nData science is a promising career path offering high demand, competitive salaries, and multiple opportunities across various industries. Its ability to address real-world problems, combined with the intellectual challenge it presents, makes it an attractive choice for many. However, it also makes it a very difficult and taxing profession for those who don’t enjoy this type of challenge. \n\nThere are many potential next steps for you to take and answer the question of “Is data science a good career?”. \n\nFor example, you can reflect on your interests and strengths. Ask yourself whether or not you enjoy problem-solving, working with data sets, and learning new technologies. Use this reflection to determine if data science aligns with your career goals.\n\nYou can also consume resources like the [AI/Data Scientist roadmap](https://roadmap.sh/ai-data-scientist) and the [Data Analyst roadmap](https://roadmap.sh/data-analyst), as they offer a clear progression for developing essential skills, so check them out. These tools can help you identify which areas to focus on based on your current expertise and interests.\n\nIn the end, just remember: data science is rapidly evolving so make sure to stay engaged by reading research papers, following industry blogs, or attending conferences. Anything you can do will help, just figure out what works for you and keep doing it. \n";
				}
				async function compiledContent$1y() {
					return await html$1y();
				}
				function getHeadings$1y() {
					return [{"depth":2,"slug":"pros-of-a-career-in-data-science","text":"Pros of a Career in Data Science"},{"depth":3,"slug":"high-demand-and-job-security","text":"High Demand and Job Security"},{"depth":3,"slug":"competitive-salaries","text":"Competitive Salaries"},{"depth":3,"slug":"intellectual-challenge-and-learning-opportunities","text":"Intellectual Challenge and Learning Opportunities"},{"depth":3,"slug":"versatility","text":"Versatility"},{"depth":2,"slug":"cons-of-a-career-in-data-science","text":"Cons of a Career in Data Science"},{"depth":3,"slug":"steep-learning-curve","text":"Steep Learning Curve"},{"depth":3,"slug":"high-expectations","text":"High Expectations"},{"depth":3,"slug":"potential-burnout","text":"Potential Burnout"},{"depth":2,"slug":"skills-required-for-a-data-science-career","text":"Skills Required for a Data Science Career"},{"depth":3,"slug":"technical-skills","text":"Technical Skills"},{"depth":3,"slug":"soft-skills","text":"Soft Skills"},{"depth":3,"slug":"domain-knowledge","text":"Domain Knowledge"},{"depth":3,"slug":"lifelong-learning","text":"Lifelong Learning"},{"depth":2,"slug":"how-to-determine-if-data-science-is-right-for-you","text":"How to determine if data science is right for you?"},{"depth":3,"slug":"self-assessment-questions","text":"Self-Assessment Questions"},{"depth":3,"slug":"start-with-small-projects","text":"Start with Small Projects"},{"depth":3,"slug":"network-and-seek-mentorship","text":"Network and Seek Mentorship"},{"depth":2,"slug":"alternative-career-paths-to-consider","text":"Alternative career paths to consider"},{"depth":3,"slug":"data-adjacent-roles","text":"Data-Adjacent Roles"},{"depth":3,"slug":"related-fields","text":"Related Fields"},{"depth":3,"slug":"non-technical-roles-in-the-data-ecosystem","text":"Non-Technical Roles in the Data Ecosystem"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$1y = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1y;
					content.file = file$1y;
					content.url = url$1y;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1y())}`;
				});

const __vite_glob_0_0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1y,
	compiledContent: compiledContent$1y,
	default: Content$1y,
	file: file$1y,
	frontmatter: frontmatter$1y,
	getHeadings: getHeadings$1y,
	rawContent: rawContent$1y,
	url: url$1y
}, Symbol.toStringTag, { value: 'Module' }));

const html$1x = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-lifecycle-eib3s.jpg\" alt=\"Data science lifecycle 101\"></p>\n<p>Developing a data science project, from beginning to production is not a trivial task. It involves so many steps and so many complex tasks, that without some guardrails, releasing to production becomes ten times harder.</p>\n<p>Here’s where the data science lifecycle comes into play. It brings a structured approach so that <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data scientists</a>, data analysts, and others can move forward together from raw data to actionable insights.</p>\n<p>In this guide, we’ll cover everything you need to know about the data science lifecycle, its many variants, and how to pick the right one for your project.</p>\n<p>So let’s get going!</p>\n<h2 id=\"core-concepts-of-a-lifecycle\">Core Concepts of a Lifecycle</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/core-concepts-bn8g0.png\" alt=\"Core concepts of a data science lifecycle\"></p>\n<p>To fully understand the concept of the lifecycle, we have to look at the core concepts inside this framework, and how they contribute to the delivery of a successful data science project.</p>\n<h3 id=\"problem-definition\">Problem Definition</h3>\n<p>Every data science project begins with a clear definition of the problem to be solved. This involves collaborating with key stakeholders to identify objectives and desired outcomes. Data scientists must understand the context and scope of the project to ensure that the goals align with business or research needs.</p>\n<h3 id=\"data-collection\">Data Collection</h3>\n<p>In the data collection phase, data scientists and data engineers work together and gather relevant data from diverse data sources. This includes both structured and unstructured data, such as historical records, new data, or data streams.</p>\n<p>The process ensures the integration of all pertinent data, creating a robust dataset for the following stages. Data acquisition tools and strategies play a critical role in this phase.</p>\n<h3 id=\"data-preparation\">Data Preparation</h3>\n<p>This stage addresses the quality of raw data by cleaning and organizing it for analysis. Tasks such as treating inaccurate data, handling missing values, and converting raw data into usable formats are central to this stage. This stage prepares the data for further and more detailed analysis.</p>\n<h3 id=\"exploratory-data-analysis-eda\">Exploratory Data Analysis (EDA)</h3>\n<p>The exploratory data analysis stage is where the “data processing” happens. This stage focuses on uncovering patterns, trends, and relationships within the data. Through data visualization techniques such as bar graphs and statistical models, data scientists perform a thorough data analysis and gain insights into the data’s structure and characteristics.</p>\n<p>Like every stage so far, this one lays the foundation for the upcoming stages. In this particular case, after performing a detailed EDA, data scientists have a much better understanding of the data they have to work with, and a pretty good idea of what they can do with it now.</p>\n<h3 id=\"model-building-and-evaluation\">Model Building and Evaluation</h3>\n<p>The model building phase involves developing predictive or machine learning models tailored to the defined problem. Data scientists experiment with various machine learning algorithms and statistical models to determine the best approach. Here’s where data modeling happens, bridging the insights gained during the exploratory data analysis (EDA) phase with actionable predictions and outcomes used in the deployment phase.</p>\n<p>Model evaluation follows, where the performance and accuracy of these models are tested to ensure reliability.</p>\n<h3 id=\"deployment-and-monitoring\">Deployment and Monitoring</h3>\n<p>The final stage of this generic data science lifecycle involves deploying the model into a production environment. Here, data scientists, machine learning engineers, and quality assurance teams ensure that the model operates effectively within existing software systems.</p>\n<p>After this stage, continuous monitoring and maintenance are essential to address new data or changing conditions, which can impact the performance and accuracy of the model.</p>\n<h2 id=\"exploring-6-popular-lifecycle-variants\">Exploring 6 Popular Lifecycle Variants</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/alternative-lifecycles-wdvp1.png\" alt=\"6 popular data science lifecycles\"></p>\n<p>The data science lifecycle offers various frameworks tailored to specific needs and contexts. Below, we explore six prominent variants:</p>\n<h3 id=\"crisp-dm-cross-industry-standard-process-for-data-mining\">CRISP-DM (Cross Industry Standard Process for Data Mining)</h3>\n<p>CRISP-DM is one of the most widely used frameworks in data science projects, especially within business contexts.</p>\n<p>It organizes the lifecycle into six stages: Business Understanding, Data Understanding, Data Preparation, Modeling, Evaluation, and Deployment.</p>\n<p>This iterative approach allows teams to revisit and refine previous steps as new insights emerge. CRISP-DM is ideal for projects where aligning technical efforts with business goals is very important.</p>\n<p><strong>Example use case</strong>: A retail company wants to improve customer segmentation for targeted marketing campaigns. Using CRISP-DM, the team starts with business understanding to define segmentation goals, gathers transaction and demographic data, prepares and cleans it, builds clustering models, evaluates their performance, and deploys the best model to group customers for personalized offers.</p>\n<h3 id=\"kdd-knowledge-discovery-in-databases\">KDD (Knowledge Discovery in Databases)</h3>\n<p>The KDD process focuses on extracting useful knowledge from large datasets. Its stages include Selection, Preprocessing, Transformation, Data Mining, and Interpretation/Evaluation.</p>\n<p>KDD emphasizes the academic and research-oriented aspects of data science, making it an ideal choice for experimental or exploratory projects in scientific domains. It offers a systematic approach to discovering patterns and insights in complex datasets.</p>\n<p><strong>Example use case:</strong> A research institute analyzes satellite data to study climate patterns. They follow KDD by selecting relevant datasets, preprocessing to remove noise, transforming data to highlight seasonal trends, applying data mining techniques to identify long-term climate changes, and interpreting results to publish findings.</p>\n<h3 id=\"data-analytics-lifecycle\">Data Analytics Lifecycle</h3>\n<p>This specific data science lifecycle is tailored for enterprise-level projects that prioritize actionable insights. It’s composed of six stages: Discovery, Data Preparation, Model Planning, Model Building, Communicating Results, and Operationalizing.</p>\n<p>The framework’s strengths lie in its alignment with business objectives and readiness for model deployment, making it ideal for organizations seeking to integrate data-driven solutions into their operations.</p>\n<p><strong>Example use case:</strong> A financial institution uses the Data Analytics Lifecycle to detect fraudulent transactions. They discover patterns in historical transaction data, prepare it by cleaning and normalizing, plan predictive models, build and test them, communicate results to fraud prevention teams, and operationalize the model to monitor real-time transactions.</p>\n<h3 id=\"semma-sample-explore-modify-model-assess\">SEMMA (Sample, Explore, Modify, Model, Assess)</h3>\n<p>SEMMA is a straightforward and tool-centric framework developed by SAS. It focuses on sampling data, exploring it for patterns, modifying it for analysis, modeling it for predictions, and assessing the outcomes.</p>\n<p>This lifecycle is particularly useful for workflows involving specific analytics tools. Its simplicity and strong emphasis on data exploration make it an excellent choice for teams prioritizing rapid insights.</p>\n<p><strong>Example use case:</strong> A healthcare organization predicts patient readmission rates using SEMMA. They sample data from hospital records, explore patient histories for trends, modify features like patient age and diagnoses, build machine learning models, and assess their accuracy to choose the most effective predictor.</p>\n<h3 id=\"team-data-science-process-tdsp\">Team Data Science Process (TDSP)</h3>\n<p>TDSP offers a collaborative and agile framework that organizes the lifecycle into four key stages: Business Understanding, Data Acquisition, Modeling, and Deployment.</p>\n<p>Designed with team-based workflows in mind, TDSP emphasizes iterative progress and adaptability, ensuring that projects align with business needs while remaining flexible to changes. It’s well-suited for scenarios requiring close collaboration among data scientists, engineers, and stakeholders.</p>\n<p><strong>Example use case:</strong> A logistics company improves delivery route optimization. Using TDSP, the team collaborates to understand business goals, acquires data from GPS and traffic systems, develops routing models, and deploys them to dynamically suggest the fastest delivery routes.</p>\n<h3 id=\"mlops-lifecycle\">MLOps Lifecycle</h3>\n<p>MLOps focuses specifically on machine learning operations and production environments. Its stages include Data Engineering, Model Development, Model Deployment, and Monitoring.</p>\n<p>This lifecycle is essential for projects involving large-scale machine learning systems that demand high scalability and automation.</p>\n<p>MLOps integrates seamlessly with continuous integration and delivery pipelines, ensuring that deployed models remain effective and relevant as new data is introduced.</p>\n<p>Each of these frameworks has its own strengths and is suited to different types of data science operations.</p>\n<p><strong>Example use case:</strong> An e-commerce platform deploys a recommendation engine using MLOps. They engineer data pipelines from user activity logs, develop collaborative filtering models, deploy them on the website, and monitor their performance to retrain models when new user data is added.</p>\n<h2 id=\"how-to-choose-the-right-data-science-lifecycle\">How to Choose the Right Data Science Lifecycle</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/how-to-pick-a-lifecycle-q9t3m.png\" alt=\"How to pick a data science lifecycle\"></p>\n<p>Determining the most suitable data science lifecycle for your data science project requires a systematic approach. After all, not all lifecycles are best suited for all situations.</p>\n<p>You can follow these steps to identify the framework that aligns best with your goals and resources:</p>\n<ol>\n<li><strong>Define your objectives:</strong> Clearly identify the goals of your project. Are you solving a business problem, conducting academic research, or deploying a machine learning model? Understanding the end objective will narrow down your choices.</li>\n<li><strong>Assess project complexity:</strong> Evaluate the scope and intricacy of your project. Simple projects may benefit from streamlined frameworks like SEMMA, while complex projects with iterative requirements might need CRISP-DM or TDSP.</li>\n<li><strong>Evaluate your team composition:</strong> Consider the expertise within your team. A team with strong machine learning skills may benefit from MLOps, whereas a diverse team with varying levels of experience might prefer a more general framework like CRISP-DM.</li>\n<li><strong>Analyze industry and domain requirements:</strong> Different industries may have unique needs. For example, business-driven projects often align with the Data Analytics Lifecycle, while academic projects might find KDD more suitable.</li>\n<li><strong>Examine available tools and resources:</strong> Ensure that the tools, software, and infrastructure you have access to are compatible with your chosen lifecycle. Frameworks like SEMMA may require specific tools such as SAS.</li>\n<li><strong>Match to key stakeholder needs:</strong> Align the lifecycle with the expectations and requirements of stakeholders. A collaborative framework like TDSP can be ideal for projects needing frequent input and iteration with business partners.</li>\n<li><strong>Run a trial phase:</strong> If possible, test a smaller project or a subset of your current project with the selected framework. This will help you assess its effectiveness and make adjustments as needed.</li>\n</ol>\n<p>Follow these steps and you can identify the lifecycle that not only suits your project but also ensures that your data science process is efficient and productive. Each project is unique, so tailoring the lifecycle to its specific demands is critical to success.</p>\n<h2 id=\"generic-framework-for-beginners\">Generic Framework for Beginners</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/basic-lifecycle-nlw8q.png\" alt=\"Generic framework for beginners\"></p>\n<p>While there are many different data science lifecycles and ways to tackle data science projects, if you’re just getting started and you’re trying to push your first project into production, relying on a beginner-friendly lifecycle might be a better idea.</p>\n<p>A generic framework for beginners in data science simplifies the lifecycle into manageable steps, making it easier to understand and implement. You can follow these steps to define your new framework:</p>\n<h3 id=\"1-define-the-problem\">1. Define the problem</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/lifecycle-define-problem-6snat.png\" alt=\"Define the problem\"></p>\n<p>Start by clearly identifying the problem you aim to solve. Consider the objectives and outcomes you want to achieve, and ensure these are aligned with the needs of any stakeholder. This will help focus your efforts during development and set the right expectations with your stakeholders.</p>\n<h3 id=\"2-collect-and-clean-data\">2. Collect and clean data</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/lifecycle-collect-data-8k25a.png\" alt=\"Collect and clean data\"></p>\n<p>Gather data from reliable and relevant sources. During this stage, focus on ensuring data quality by treating inaccurate data, filling in missing values, validating and removing potential data biases and finally, converting raw data into usable formats.</p>\n<h3 id=\"3-analyze-and-visualize\">3. Analyze and visualize</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/lifecycle-analize-visualize-v07ml.png\" alt=\"Analyze and visualize\"></p>\n<p>Explore the data to uncover patterns, trends, and insights. Use simple data visualization techniques such as bar graphs and scatter plots, along with basic statistical methods, to gain a deeper understanding of the dataset’s structure and variables.</p>\n<h3 id=\"4-build-and-evaluate-a-model\">4. Build and evaluate a model</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/lifecycle-build-models-0rn42.png\" alt=\"Build and evaluate a model\"></p>\n<p>Develop a basic predictive model using accessible machine learning or statistical tools. Test the model’s performance to ensure it meets the objectives defined earlier during step 1. For beginners, tools with user-friendly interfaces like Python libraries or Excel can be highly effective.</p>\n<h3 id=\"5-share-results-and-deploy\">5. Share results and deploy</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/lifecycle-share-results-016nc.png\" alt=\"Share results and deploy\"></p>\n<p>Present your findings to stakeholders in a clear and actionable format. If applicable, deploy the model into a small-scale production environment to observe its impact and gather feedback for further improvement.</p>\n<p><strong>Tips for small projects:</strong> Start with a problem you’re familiar with, such as analyzing personal expenses or predicting simple outcomes. Focus on learning the process rather than achieving perfect results. Use open-source tools and resources to experiment and build your confidence.</p>\n<p>Use this framework if this is your first data science project, evaluate your results, and most importantly, reflect on your experience.</p>\n<p>Take those insights into your next project and decide if for that one you would actually benefit from using one of the predefined standard lifecycles mentioned above.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The data science lifecycle is a cornerstone of modern data science. By understanding its stages and principles, professionals can navigate the complexities of data science projects with confidence.</p>\n<p>Regardless of what you’re doing, dealing with unstructured data, creating models, or deploying machine learning algorithms, the lifecycle provides a roadmap for success.</p>\n<p>As data science experts and teams continue to explore and refine their approaches, the lifecycle framework remains a key tool for achieving excellence in any and all operations.</p>\n<p>Finally, remember that if you’re interested in developing your data science career, you have our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data scientist</a> and <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">data analyst</a> roadmaps at your disposal. These roadmaps will help you focus your learning time on the really important and relevant topics.</p>";

				const frontmatter$1x = {"title":"Data Science Lifecycle 101: A Beginners' Ultimate Guide","description":"Discover the Data Science Lifecycle step-by-step: Learn key phases, tools, and techniques in this beginner-friendly guide.","authorId":"fernando","excludedBySlug":"/ai-data-scientist/career-path","seo":{"title":"Data Science Lifecycle 101: A Beginners' Ultimate Guide","description":"Discover the Data Science Lifecycle step-by-step: Learn key phases, tools, and techniques in this beginner-friendly guide.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-lifecycle-eib3s.jpg"},"isNew":false,"type":"textual","date":"2025-01-29T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1x = "/workspace/src/data/guides/ai-data-scientist-lifecycle.md";
				const url$1x = undefined;
				function rawContent$1x() {
					return "   \n                                                                \n                                                                                                                                         \n                  \n                                                \n    \n                                                                  \n                                                                                                                                           \n                                                                                \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science lifecycle 101](https://assets.roadmap.sh/guest/data-science-lifecycle-eib3s.jpg)\n\nDeveloping a data science project, from beginning to production is not a trivial task. It involves so many steps and so many complex tasks, that without some guardrails, releasing to production becomes ten times harder.\n\nHere’s where the data science lifecycle comes into play. It brings a structured approach so that [data scientists](https://roadmap.sh/ai-data-scientist), data analysts, and others can move forward together from raw data to actionable insights.\n\nIn this guide, we’ll cover everything you need to know about the data science lifecycle, its many variants, and how to pick the right one for your project.\n\nSo let’s get going\\!\n\n## Core Concepts of a Lifecycle\n\n![Core concepts of a data science lifecycle](https://assets.roadmap.sh/guest/core-concepts-bn8g0.png)\n\nTo fully understand the concept of the lifecycle, we have to look at the core concepts inside this framework, and how they contribute to the delivery of a successful data science project.\n\n### Problem Definition\n\nEvery data science project begins with a clear definition of the problem to be solved. This involves collaborating with key stakeholders to identify objectives and desired outcomes. Data scientists must understand the context and scope of the project to ensure that the goals align with business or research needs.\n\n### Data Collection\n\nIn the data collection phase, data scientists and data engineers work together and gather relevant data from diverse data sources. This includes both structured and unstructured data, such as historical records, new data, or data streams. \n\nThe process ensures the integration of all pertinent data, creating a robust dataset for the following stages. Data acquisition tools and strategies play a critical role in this phase.\n\n### Data Preparation\n\nThis stage addresses the quality of raw data by cleaning and organizing it for analysis. Tasks such as treating inaccurate data, handling missing values, and converting raw data into usable formats are central to this stage. This stage prepares the data for further and more detailed analysis. \n\n### Exploratory Data Analysis (EDA)\n\nThe exploratory data analysis stage is where the “data processing” happens. This stage focuses on uncovering patterns, trends, and relationships within the data. Through data visualization techniques such as bar graphs and statistical models, data scientists perform a thorough data analysis and gain insights into the data’s structure and characteristics. \n\nLike every stage so far, this one lays the foundation for the upcoming stages. In this particular case, after performing a detailed EDA, data scientists have a much better understanding of the data they have to work with, and a pretty good idea of what they can do with it now.\n\n### Model Building and Evaluation\n\nThe model building phase involves developing predictive or machine learning models tailored to the defined problem. Data scientists experiment with various machine learning algorithms and statistical models to determine the best approach. Here’s where data modeling happens, bridging the insights gained during the exploratory data analysis (EDA) phase with actionable predictions and outcomes used in the deployment phase.\n\nModel evaluation follows, where the performance and accuracy of these models are tested to ensure reliability.\n\n### Deployment and Monitoring\n\nThe final stage of this generic data science lifecycle involves deploying the model into a production environment. Here, data scientists, machine learning engineers, and quality assurance teams ensure that the model operates effectively within existing software systems. \n\nAfter this stage, continuous monitoring and maintenance are essential to address new data or changing conditions, which can impact the performance and accuracy of the model.\n\n## Exploring 6 Popular Lifecycle Variants\n\n![6 popular data science lifecycles](https://assets.roadmap.sh/guest/alternative-lifecycles-wdvp1.png)\n\nThe data science lifecycle offers various frameworks tailored to specific needs and contexts. Below, we explore six prominent variants:\n\n### CRISP-DM (Cross Industry Standard Process for Data Mining)\n\nCRISP-DM is one of the most widely used frameworks in data science projects, especially within business contexts. \n\nIt organizes the lifecycle into six stages: Business Understanding, Data Understanding, Data Preparation, Modeling, Evaluation, and Deployment. \n\nThis iterative approach allows teams to revisit and refine previous steps as new insights emerge. CRISP-DM is ideal for projects where aligning technical efforts with business goals is very important.\n\n**Example use case**: A retail company wants to improve customer segmentation for targeted marketing campaigns. Using CRISP-DM, the team starts with business understanding to define segmentation goals, gathers transaction and demographic data, prepares and cleans it, builds clustering models, evaluates their performance, and deploys the best model to group customers for personalized offers.\n\n### KDD (Knowledge Discovery in Databases)\n\nThe KDD process focuses on extracting useful knowledge from large datasets. Its stages include Selection, Preprocessing, Transformation, Data Mining, and Interpretation/Evaluation. \n\nKDD emphasizes the academic and research-oriented aspects of data science, making it an ideal choice for experimental or exploratory projects in scientific domains. It offers a systematic approach to discovering patterns and insights in complex datasets.\n\n**Example use case:** A research institute analyzes satellite data to study climate patterns. They follow KDD by selecting relevant datasets, preprocessing to remove noise, transforming data to highlight seasonal trends, applying data mining techniques to identify long-term climate changes, and interpreting results to publish findings.\n\n### Data Analytics Lifecycle\n\nThis specific data science lifecycle is tailored for enterprise-level projects that prioritize actionable insights. It’s composed of six stages: Discovery, Data Preparation, Model Planning, Model Building, Communicating Results, and Operationalizing. \n\nThe framework’s strengths lie in its alignment with business objectives and readiness for model deployment, making it ideal for organizations seeking to integrate data-driven solutions into their operations.\n\n**Example use case:** A financial institution uses the Data Analytics Lifecycle to detect fraudulent transactions. They discover patterns in historical transaction data, prepare it by cleaning and normalizing, plan predictive models, build and test them, communicate results to fraud prevention teams, and operationalize the model to monitor real-time transactions.\n\n### SEMMA (Sample, Explore, Modify, Model, Assess)\n\nSEMMA is a straightforward and tool-centric framework developed by SAS. It focuses on sampling data, exploring it for patterns, modifying it for analysis, modeling it for predictions, and assessing the outcomes. \n\nThis lifecycle is particularly useful for workflows involving specific analytics tools. Its simplicity and strong emphasis on data exploration make it an excellent choice for teams prioritizing rapid insights.\n\n**Example use case:** A healthcare organization predicts patient readmission rates using SEMMA. They sample data from hospital records, explore patient histories for trends, modify features like patient age and diagnoses, build machine learning models, and assess their accuracy to choose the most effective predictor.\n\n### Team Data Science Process (TDSP)\n\nTDSP offers a collaborative and agile framework that organizes the lifecycle into four key stages: Business Understanding, Data Acquisition, Modeling, and Deployment. \n\nDesigned with team-based workflows in mind, TDSP emphasizes iterative progress and adaptability, ensuring that projects align with business needs while remaining flexible to changes. It’s well-suited for scenarios requiring close collaboration among data scientists, engineers, and stakeholders.\n\n**Example use case:** A logistics company improves delivery route optimization. Using TDSP, the team collaborates to understand business goals, acquires data from GPS and traffic systems, develops routing models, and deploys them to dynamically suggest the fastest delivery routes.\n\n### MLOps Lifecycle\n\nMLOps focuses specifically on machine learning operations and production environments. Its stages include Data Engineering, Model Development, Model Deployment, and Monitoring. \n\nThis lifecycle is essential for projects involving large-scale machine learning systems that demand high scalability and automation. \n\nMLOps integrates seamlessly with continuous integration and delivery pipelines, ensuring that deployed models remain effective and relevant as new data is introduced.\n\nEach of these frameworks has its own strengths and is suited to different types of data science operations.\n\n**Example use case:** An e-commerce platform deploys a recommendation engine using MLOps. They engineer data pipelines from user activity logs, develop collaborative filtering models, deploy them on the website, and monitor their performance to retrain models when new user data is added.\n\n## How to Choose the Right Data Science Lifecycle\n\n![How to pick a data science lifecycle](https://assets.roadmap.sh/guest/how-to-pick-a-lifecycle-q9t3m.png)\n\nDetermining the most suitable data science lifecycle for your data science project requires a systematic approach. After all, not all lifecycles are best suited for all situations.\n\nYou can follow these steps to identify the framework that aligns best with your goals and resources:\n\n1. **Define your objectives:** Clearly identify the goals of your project. Are you solving a business problem, conducting academic research, or deploying a machine learning model? Understanding the end objective will narrow down your choices.  \n2. **Assess project complexity:** Evaluate the scope and intricacy of your project. Simple projects may benefit from streamlined frameworks like SEMMA, while complex projects with iterative requirements might need CRISP-DM or TDSP.  \n3. **Evaluate your team composition:** Consider the expertise within your team. A team with strong machine learning skills may benefit from MLOps, whereas a diverse team with varying levels of experience might prefer a more general framework like CRISP-DM.  \n4. **Analyze industry and domain requirements:** Different industries may have unique needs. For example, business-driven projects often align with the Data Analytics Lifecycle, while academic projects might find KDD more suitable.  \n5. **Examine available tools and resources:** Ensure that the tools, software, and infrastructure you have access to are compatible with your chosen lifecycle. Frameworks like SEMMA may require specific tools such as SAS.  \n6. **Match to key stakeholder needs:** Align the lifecycle with the expectations and requirements of stakeholders. A collaborative framework like TDSP can be ideal for projects needing frequent input and iteration with business partners.  \n7. **Run a trial phase:** If possible, test a smaller project or a subset of your current project with the selected framework. This will help you assess its effectiveness and make adjustments as needed.\n\nFollow these steps and you can identify the lifecycle that not only suits your project but also ensures that your data science process is efficient and productive. Each project is unique, so tailoring the lifecycle to its specific demands is critical to success.\n\n## Generic Framework for Beginners\n\n![Generic framework for beginners](https://assets.roadmap.sh/guest/basic-lifecycle-nlw8q.png)\n\nWhile there are many different data science lifecycles and ways to tackle data science projects, if you’re just getting started and you’re trying to push your first project into production, relying on a beginner-friendly lifecycle might be a better idea.\n\nA generic framework for beginners in data science simplifies the lifecycle into manageable steps, making it easier to understand and implement. You can follow these steps to define your new framework:\n\n### 1\\. Define the problem\n\n![Define the problem](https://assets.roadmap.sh/guest/lifecycle-define-problem-6snat.png)\n\nStart by clearly identifying the problem you aim to solve. Consider the objectives and outcomes you want to achieve, and ensure these are aligned with the needs of any stakeholder. This will help focus your efforts during development and set the right expectations with your stakeholders.\n\n### 2\\. Collect and clean data\n\n![Collect and clean data](https://assets.roadmap.sh/guest/lifecycle-collect-data-8k25a.png)\n\nGather data from reliable and relevant sources. During this stage, focus on ensuring data quality by treating inaccurate data, filling in missing values, validating and removing potential data biases and finally, converting raw data into usable formats.\n\n### 3\\. Analyze and visualize\n\n![Analyze and visualize](https://assets.roadmap.sh/guest/lifecycle-analize-visualize-v07ml.png)\n\nExplore the data to uncover patterns, trends, and insights. Use simple data visualization techniques such as bar graphs and scatter plots, along with basic statistical methods, to gain a deeper understanding of the dataset’s structure and variables.\n\n### 4\\. Build and evaluate a model\n\n![Build and evaluate a model](https://assets.roadmap.sh/guest/lifecycle-build-models-0rn42.png)\n\nDevelop a basic predictive model using accessible machine learning or statistical tools. Test the model’s performance to ensure it meets the objectives defined earlier during step 1\\. For beginners, tools with user-friendly interfaces like Python libraries or Excel can be highly effective.\n\n### 5\\. Share results and deploy\n\n![Share results and deploy](https://assets.roadmap.sh/guest/lifecycle-share-results-016nc.png)\n\nPresent your findings to stakeholders in a clear and actionable format. If applicable, deploy the model into a small-scale production environment to observe its impact and gather feedback for further improvement.\n\n**Tips for small projects:** Start with a problem you’re familiar with, such as analyzing personal expenses or predicting simple outcomes. Focus on learning the process rather than achieving perfect results. Use open-source tools and resources to experiment and build your confidence.\n\nUse this framework if this is your first data science project, evaluate your results, and most importantly, reflect on your experience. \n\nTake those insights into your next project and decide if for that one you would actually benefit from using one of the predefined standard lifecycles mentioned above.\n\n## Conclusion\n\nThe data science lifecycle is a cornerstone of modern data science. By understanding its stages and principles, professionals can navigate the complexities of data science projects with confidence. \n\nRegardless of what you’re doing, dealing with unstructured data, creating models, or deploying machine learning algorithms, the lifecycle provides a roadmap for success. \n\nAs data science experts and teams continue to explore and refine their approaches, the lifecycle framework remains a key tool for achieving excellence in any and all operations.\n\nFinally, remember that if you’re interested in developing your data science career, you have our [data scientist](https://roadmap.sh/ai-data-scientist) and [data analyst](https://roadmap.sh/data-analyst) roadmaps at your disposal. These roadmaps will help you focus your learning time on the really important and relevant topics.";
				}
				async function compiledContent$1x() {
					return await html$1x();
				}
				function getHeadings$1x() {
					return [{"depth":2,"slug":"core-concepts-of-a-lifecycle","text":"Core Concepts of a Lifecycle"},{"depth":3,"slug":"problem-definition","text":"Problem Definition"},{"depth":3,"slug":"data-collection","text":"Data Collection"},{"depth":3,"slug":"data-preparation","text":"Data Preparation"},{"depth":3,"slug":"exploratory-data-analysis-eda","text":"Exploratory Data Analysis (EDA)"},{"depth":3,"slug":"model-building-and-evaluation","text":"Model Building and Evaluation"},{"depth":3,"slug":"deployment-and-monitoring","text":"Deployment and Monitoring"},{"depth":2,"slug":"exploring-6-popular-lifecycle-variants","text":"Exploring 6 Popular Lifecycle Variants"},{"depth":3,"slug":"crisp-dm-cross-industry-standard-process-for-data-mining","text":"CRISP-DM (Cross Industry Standard Process for Data Mining)"},{"depth":3,"slug":"kdd-knowledge-discovery-in-databases","text":"KDD (Knowledge Discovery in Databases)"},{"depth":3,"slug":"data-analytics-lifecycle","text":"Data Analytics Lifecycle"},{"depth":3,"slug":"semma-sample-explore-modify-model-assess","text":"SEMMA (Sample, Explore, Modify, Model, Assess)"},{"depth":3,"slug":"team-data-science-process-tdsp","text":"Team Data Science Process (TDSP)"},{"depth":3,"slug":"mlops-lifecycle","text":"MLOps Lifecycle"},{"depth":2,"slug":"how-to-choose-the-right-data-science-lifecycle","text":"How to Choose the Right Data Science Lifecycle"},{"depth":2,"slug":"generic-framework-for-beginners","text":"Generic Framework for Beginners"},{"depth":3,"slug":"1-define-the-problem","text":"1. Define the problem"},{"depth":3,"slug":"2-collect-and-clean-data","text":"2. Collect and clean data"},{"depth":3,"slug":"3-analyze-and-visualize","text":"3. Analyze and visualize"},{"depth":3,"slug":"4-build-and-evaluate-a-model","text":"4. Build and evaluate a model"},{"depth":3,"slug":"5-share-results-and-deploy","text":"5. Share results and deploy"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$1x = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1x;
					content.file = file$1x;
					content.url = url$1x;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1x())}`;
				});

const __vite_glob_0_1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1x,
	compiledContent: compiledContent$1x,
	default: Content$1x,
	file: file$1x,
	frontmatter: frontmatter$1x,
	getHeadings: getHeadings$1x,
	rawContent: rawContent$1x,
	url: url$1x
}, Symbol.toStringTag, { value: 'Module' }));

const html$1w = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-skills-to-master-q36qn.jpg\" alt=\"Top data science skills\"></p>\n<p>Data science is becoming more relevant as a field and profession by the day. Part of this constant change is the mind-blowing speed at which AI is evolving these days. Every day a new model is released, every week a new product is built around it, and every month OpenAI releases an earth-shattering change that pushes the field even further than before.</p>\n<p>Data scientists sit at the core of that progress, but what does it take to master the profession?</p>\n<p>Mastering the essential data scientist skills goes beyond just solving complex problems. It includes the ability to handle data workflows, build machine learning models, and interpret data trends effectively.</p>\n<p>In this guide, we’ll explore the top 10 skills that future data scientists must work on to shine brighter than the rest in 2025, setting a foundation for long-term success.</p>\n<p>These are the data scientist skills covered in the article:</p>\n<ul>\n<li>Programming proficiency with <strong>Python, R, and SQL</strong></li>\n<li>Data manipulation and analysis, including <strong>data wrangling</strong> and <strong>exploratory data analysis</strong></li>\n<li>Mastery of <strong>machine learning</strong> and <strong>AI techniques</strong></li>\n<li>Strong statistical and <strong>mathematical</strong> <strong>foundations</strong></li>\n<li>Familiarity with <strong>big data technologies</strong></li>\n<li>Data engineering for infrastructure and <strong>ETL pipelines</strong></li>\n<li>Expertise in <strong>data visualization</strong> with tools like <strong>Plotly</strong> and <strong>D3.js</strong></li>\n<li><strong>Domain knowledge</strong> for aligning data science projects with business goals</li>\n<li><strong>Soft skills</strong> for communication, collaboration, and creativity</li>\n<li><strong>Feature engineering</strong> and selection for <strong>model optimization</strong>.</li>\n<li>Staying current with trends like <strong>MLOps</strong> and <strong>Generative AI.</strong></li>\n</ul>\n<h2 id=\"understanding-data-science\"><strong>Understanding Data Science</strong></h2>\n<p><a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">Data science</a> is an interdisciplinary field that combines multiple disciplines to make sense of data and drive actionable insights. It integrates programming, statistical analysis, and domain knowledge to uncover patterns and trends in both structured and unstructured data. This powerful combination enables data professionals to solve a variety of challenges, such as:</p>\n<ul>\n<li>Building predictive models to forecast sales or identify customer churn.</li>\n<li>Developing optimization techniques to streamline supply chains or allocate resources more effectively.</li>\n<li>Leveraging automation and artificial intelligence to create personalized recommendations or detect fraudulent activity in massive datasets.</li>\n</ul>\n<p>At its core, data science empowers organizations to turn raw data into actionable insights. By interpreting data effectively and applying statistical models, data scientists support data-driven decision-making, ensuring businesses maintain a competitive edge.</p>\n<p>The data science field requires a unique mix of technical skills, analytical prowess, and creativity to handle the vast array of complex data sets encountered in real-world scenarios. In other words, being a data scientist is not for everyone.</p>\n<p><strong>1. Programming Proficiency</strong></p>\n<p><img src=\"https://assets.roadmap.sh/guest/r-sql-python-qqm69.png\" alt=\"Programming proficiency with Python, R and SQL\"></p>\n<p>Programming remains a cornerstone of the data science field, forming the foundation for nearly every task in data science projects. Mastery of programming languages like Python, R, and SQL is crucial for aspiring data scientists to handle data workflows effectively.</p>\n<p>Python is the undisputed leader in data science, thanks to its extensive libraries and frameworks. Pandas, NumPy, and Scikit-learn are essential for tasks ranging from data wrangling and numerical analysis to building machine learning models. Deep learning tools such as TensorFlow and PyTorch make Python indispensable for tackling advanced challenges like developing artificial neural networks for image recognition and natural language processing (NLP).</p>\n<p>R excels in statistical analysis and visualization. Its specialized libraries, like ggplot2 for data visualization and caret for machine learning models, make it a preferred choice for academics and data analysis tasks that require interpreting data trends and creating statistical models.</p>\n<p>SQL is the backbone of database management, which is essential for extracting, querying, and preparing data from structured databases. A strong command of SQL allows data professionals to manage massive datasets efficiently and ensure smooth integration with analytical tools.</p>\n<h2 id=\"2-data-manipulation-and-analysis\"><strong>2. Data Manipulation and Analysis</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-wrangling-zwd5i.png\" alt=\"Data manipulation and wrangling\"></p>\n<p>The ability to manipulate and analyze data lies at the heart of data science skills. These tasks involve transforming raw data into a format suitable for analysis and extracting insights through statistical concepts and exploratory data analysis (EDA).</p>\n<p>Data wrangling is a critical skill for cleaning and preparing raw data, addressing missing values, and reshaping complex data sets. For example, consider a dataset containing customer transaction records with incomplete information. Using tools like Pandas in Python, a data scientist can identify missing values, impute or drop them as appropriate, and restructure the data to focus on specific variables like transaction frequency or total purchase amounts. This process ensures the dataset is ready for meaningful analysis.</p>\n<p>Tools like Pandas, PySpark, and Dask are invaluable for handling unstructured data or working with massive datasets efficiently. These tools allow data scientists to transform complex data sets into manageable and analyzable forms, which is foundational for building machine learning models or conducting advanced statistical analysis.</p>\n<p>Performing exploratory data analysis allows data scientists to identify patterns, correlations, and anomalies within structured data. Visualization libraries like Matplotlib and Seaborn, combined with Python scripts, play a significant role in understanding data insights before building predictive models or statistical models.</p>\n<p><strong>3. Machine Learning and AI</strong></p>\n<p><img src=\"https://assets.roadmap.sh/guest/machine-learning-odmf1.png\" alt=\"Machine learning and AI techniques\"></p>\n<p>Machine learning is a driving force in the data science industry, enabling data-driven decisions across sectors and revolutionizing how organizations interpret data and make predictions. Mastering machine learning algorithms and frameworks are among the top data science skills for aspiring data scientists who wish to excel in analyzing data and creating impactful solutions.</p>\n<p>Data scientists commonly tackle supervised learning tasks, such as predicting housing prices through regression models or identifying fraudulent transactions with classification algorithms. For example, using Scikit-learn, a data scientist can train a decision tree to categorize customer complaints into predefined categories for better issue resolution. Additionally, unsupervised techniques like clustering are applied in market segmentation to group customers based on purchasing patterns, helping businesses make data-driven decisions.</p>\n<p>Deep learning represents the cutting edge of artificial intelligence, utilizing artificial neural networks to manage unstructured data and solve highly complex problems. Frameworks like TensorFlow and PyTorch are essential tools for developing advanced solutions, such as NLP models for chatbot interactions or generative AI for creating realistic images. These tools empower data scientists to push the boundaries of innovation and unlock actionable insights from vast and complex datasets.</p>\n<h2 id=\"4-statistical-and-mathematical-foundations\"><strong>4. Statistical and Mathematical Foundations</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/statistical-analysis-bnkn3.png\" alt=\"Statistical and mathematical foundations\"></p>\n<p>Statistical concepts and mathematical skills form the backbone of building robust data models and interpreting data insights. These foundational skills are indispensable for anyone aiming to succeed in the data science field.</p>\n<p>Probability theory and hypothesis testing play a vital role in understanding uncertainty in data workflows. For instance, a data scientist might use hypothesis testing to evaluate whether a new marketing strategy leads to higher sales compared to the current approach, ensuring data-driven decision-making.</p>\n<p>Linear algebra and calculus are crucial for developing and optimizing machine learning algorithms. Techniques like matrix decomposition and gradient descent are used to train neural networks and enhance their predictive accuracy. These mathematical tools are the engine behind many advanced algorithms, making them essential data scientist skills.</p>\n<p>Advanced statistical analysis, including A/B testing and Bayesian inference, helps validate predictions and understand relationships within complex datasets. For example, A/B testing can determine which website design yields better user engagement, providing actionable insights to businesses.</p>\n<h2 id=\"5-big-data-technologies\"><strong>5. Big Data Technologies</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/big-data-x0rmx.png\" alt=\"Big data technologies\"></p>\n<p>While big data skills are secondary for most data scientists, understanding big data technologies enhances their ability to handle massive datasets efficiently. Familiarity with tools like Apache Spark and Hadoop allows data scientists to process and analyze distributed data, which is especially important for projects involving millions of records. For example, Apache Spark can be used to calculate real-time metrics on user behavior across e-commerce platforms, enabling businesses to personalize experiences dynamically.</p>\n<p>Cloud computing skills, including proficiency with platforms like AWS or GCP, are also valuable for deploying machine learning projects at scale. A data scientist working with GCP’s BigQuery can query massive datasets in seconds, facilitating faster insights for time-sensitive decisions. These technologies, while not the core of a data scientist’s responsibilities, are crucial for ensuring scalability and efficiency in data workflows.</p>\n<h2 id=\"6-data-engineering\"><strong>6. Data Engineering</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-engineering-lqm7i.png\" alt=\"Data engineering\"></p>\n<p>Data engineering complements data science by creating the infrastructure required to analyze data effectively. This skill set ensures that data flows seamlessly through pipelines, enabling analysis and decision-making.</p>\n<p>Designing ETL (Extract, Transform, Load) pipelines is a critical part of data engineering. For instance, a data engineer might create a pipeline to collect raw sales data from multiple sources, transform it by standardizing formats and handling missing values, and load it into a database for further analysis. These workflows are the backbone of data preparation.</p>\n<p>Using tools like Apache Airflow, those workflows can be streamlined, while managing real-time data streaming using Kafka ensures that real-time data—such as social media feeds or IoT sensor data—is processed without delay. For example, a Kafka pipeline could ingest weather data to update forecasts in real-time.</p>\n<p>Finally, storing and querying complex data sets in cloud computing with tools like Snowflake or BigQuery allows data scientists to interact with massive datasets effortlessly.</p>\n<p>These platforms support scalable storage and high-performance queries, enabling faster analysis and actionable insights.</p>\n<h2 id=\"7-data-visualization\"><strong>7. Data Visualization</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-visualization-bkkel.png\" alt=\"Data visualization techniques and tools\"></p>\n<p>Data visualization is a cornerstone of the data science field, as it enables data professionals to present data and communicate findings effectively. While traditional tools like Tableau and Power BI are widely used, aspiring data scientists should prioritize programming-based tools like Plotly and D3.js for greater flexibility and customization.</p>\n<p>For example, using Plotly, a data scientist can create an interactive dashboard to visualize customer purchase trends over time, allowing stakeholders to explore the data dynamically. Similarly, D3.js offers unparalleled control for designing custom visualizations, such as heatmaps or network graphs, that convey complex relationships in a visually compelling manner.</p>\n<p>Applying storytelling techniques further enhances the impact of visualizations. By weaving data insights into a narrative, data scientists can ensure their findings resonate with stakeholders and drive actionable decisions. For instance, a well-crafted story supported by visuals can explain how seasonal demand patterns affect inventory management, bridging the gap between technical analysis and strategic planning.</p>\n<h2 id=\"8-business-and-domain-knowledge\"><strong>8. Business and Domain Knowledge</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/business-and-domain-knowledge-5mnne.PNG\" alt=\"Business and domain knowledge\"></p>\n<p>Domain knowledge enhances the relevance of data science projects by aligning them with organizational goals and addressing unique industry-specific challenges. Understanding the context in which data is applied allows data professionals to make their analysis more impactful and actionable.</p>\n<p>For example, in the finance industry, a data scientist with domain expertise can design predictive models that assess credit risk by analyzing complex data sets of customer transactions, income, and past credit behavior. These models enable financial institutions to make data-driven decisions about lending policies.</p>\n<p>In healthcare, domain knowledge allows data scientists to interpret medical data effectively, such as identifying trends in patient outcomes based on treatment history. By leveraging data models tailored to clinical needs, data professionals can help improve patient care and operational efficiency in hospitals.</p>\n<p>This alignment ensures that insights are not only technically robust but also directly applicable to solving real-world problems, making domain knowledge an indispensable skill for data professionals seeking to maximize their impact.</p>\n<h2 id=\"9-soft-skills\"><strong>9. Soft Skills</strong></h2>\n<p><img src=\"https://assets.roadmap.sh/guest/soft-skills-3y4zs.png\" alt=\"Soft skills for data scientists\"></p>\n<p>Soft skills are as essential as technical skills in the data science field, bridging the gap between complex data analysis and practical implementation. These skills enhance a data scientist’s ability to communicate findings, collaborate with diverse teams, and approach challenges with innovative solutions.</p>\n<p><strong>Communication</strong> is critical for translating data insights into actionable strategies. For example, a data scientist might present the results of an exploratory data analysis to marketing executives, breaking down statistical models into simple, actionable insights that drive campaign strategies. The ability to clearly interpret data ensures that stakeholders understand and trust the findings.</p>\n<p><strong>Collaboration</strong> is equally vital, as data science projects often involve cross-functional teams. For instance, a data scientist might work closely with software engineers to integrate machine learning models into a production environment or partner with domain experts to ensure that data-driven decisions align with business objectives. Effective teamwork ensures seamless data workflows and successful project outcomes.</p>\n<p><strong>Creativity</strong> allows data scientists to find innovative ways to address complex problems. A creative data scientist might devise a novel approach to handling unstructured data, such as using natural language processing (NLP) techniques to extract insights from customer reviews, providing actionable insights that improve product development.</p>\n<p>These critical soft skills complement technical expertise, making data professionals indispensable contributors to their organizations.</p>\n<h2 id=\"10-feature-engineering-and-selection-for-model-optimization\">10. Feature engineering and selection for model optimization</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/feature-engineering-1pit4.png\" alt=\"Feature engineering and selection\"></p>\n<p>For machine learning models to interpret and use any type of data, that data needs to be turned into features. And that is where feature engineering and selection comes into play. These are two critical steps in the data science workflow because they directly influence the performance and accuracy of the models. If you think about it, the better the model understands what data to focus on, the better it’ll perform.</p>\n<p>These processes involve creating, selecting, and transforming raw data into useful features loaded with meaning that help represent the underlying problem for the model.</p>\n<p>For example, imagine building a model to predict house prices. Raw data might include information like the size of the house in square meters, the number of rooms, and the year it was built. Through feature engineering, a data scientist could create new features, such as “price per square meter” or “age of the house,” which make the data more informative for the model. These features can highlight trends that a model might otherwise miss.</p>\n<p>Feature selection, on the other hand, focuses on optimizing the use and dependency on features by identifying the most relevant ones and removing the redundant or irrelevant features. For example, let’s consider a retail scenario where a model is predicting customer churn, here it might benefit from focusing on features like “purchase frequency” and “customer feedback sentiment”, while ignoring less impactful ones like “the time of day purchases are made”. This helps to avoid the model getting overwhelmed by noise, improving both its efficiency and accuracy.</p>\n<p>If you’re looking to improve your data science game, then focusing on feature engineering and selection can definitely have that effect.</p>\n<h2 id=\"11-staying-current\">11. Staying Current</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/stay-current-vnqqq.png\" alt=\"Staying current with data science trends\"></p>\n<p>The data science field evolves at an unprecedented pace, driven by advancements in artificial intelligence, machine learning, and data technologies. Staying current with emerging trends is essential for maintaining a competitive edge and excelling in the industry.</p>\n<p>Joining <strong>data science communities</strong>, such as forums or online groups, provides a platform for exchanging ideas, discussing challenges, and learning from peers. For instance, platforms like Kaggle or GitHub allow aspiring data scientists to collaborate on data science projects and gain exposure to real-world applications.</p>\n<p>Attending <strong>data science conferences</strong> is another effective way to stay informed. Events like NeurIPS, Strata Data Conference, or PyData showcase cutting-edge research and practical case studies, offering insights into the latest advancements in machine learning models, big data technologies, and cloud computing tools.</p>\n<p>Engaging in <strong>open-source projects</strong> not only sharpens technical skills but also helps data professionals contribute to the broader data science community. For example, contributing to an open-source MLOps framework might provide invaluable experience in deploying and monitoring machine learning pipelines.</p>\n<p>Embracing trends like <strong>MLOps</strong> for operationalizing machine learning, <strong>AutoML</strong> for automating model selection, and <strong>Generative AI</strong> for creating synthetic data ensures that data scientists remain at the forefront of innovation. These emerging technologies are reshaping the data science field, making continuous learning a non-negotiable aspect of career growth.</p>\n<p><strong>Summary</strong></p>\n<p>Mastering these essential data scientist skills—from programming languages and machine learning skills to interpreting data insights and statistical models—will future-proof your <a href=\"https://roadmap.sh/ai-data-scientist/career-path\" target=\"_blank\">career path in data science</a>. These include the core skills of data manipulation, statistical analysis, and data visualization, all of which are central to the data science field.</p>\n<p>In addition, while big data technologies and data engineering skills are not the central focus of a data scientist’s role, they serve as valuable, data science-adjacent competencies. Familiarity with big data tools like Apache Spark and cloud computing platforms can enhance scalability and efficiency in handling massive datasets, while data engineering knowledge helps create robust pipelines to support analysis. By building expertise in these areas and maintaining adaptability, you can excel in this dynamic, data-driven industry.</p>\n<p>Check out our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science roadmap</a> next to discover what your potential learning path could look like in this role.</p>";

				const frontmatter$1w = {"title":"Top 11 Data Science Skills to Master in @currentYear@","description":"Looking to excel in data science? Learn the must-have skills for @currentYear@ with our expert guide and advance your data science career.","authorId":"fernando","excludedBySlug":"/ai-data-scientist/skills","seo":{"title":"Top 11 Data Science Skills to Master in @currentYear@","description":"Looking to excel in data science? Learn the must-have skills for @currentYear@ with our expert guide and advance your data science career.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-skills-to-master-q36qn.jpg"},"isNew":false,"type":"textual","date":"2025-01-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1w = "/workspace/src/data/guides/ai-data-scientist-skills.md";
				const url$1w = undefined;
				function rawContent$1w() {
					return "   \n                                                              \n                                                                                                                                                         \n                  \n                                           \n    \n                                                                \n                                                                                                                                                           \n                                                                                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Top data science skills](https://assets.roadmap.sh/guest/data-science-skills-to-master-q36qn.jpg)\n\nData science is becoming more relevant as a field and profession by the day. Part of this constant change is the mind-blowing speed at which AI is evolving these days. Every day a new model is released, every week a new product is built around it, and every month OpenAI releases an earth-shattering change that pushes the field even further than before.\n\nData scientists sit at the core of that progress, but what does it take to master the profession?\n\nMastering the essential data scientist skills goes beyond just solving complex problems. It includes the ability to handle data workflows, build machine learning models, and interpret data trends effectively. \n\nIn this guide, we'll explore the top 10 skills that future data scientists must work on to shine brighter than the rest in 2025, setting a foundation for long-term success.\n\nThese are the data scientist skills covered in the article:\n\n* Programming proficiency with **Python, R, and SQL**  \n* Data manipulation and analysis, including **data wrangling** and **exploratory data analysis**  \n* Mastery of **machine learning** and **AI techniques**  \n* Strong statistical and **mathematical** **foundations**  \n* Familiarity with **big data technologies**  \n* Data engineering for infrastructure and **ETL pipelines**  \n* Expertise in **data visualization** with tools like **Plotly** and **D3.js**  \n* **Domain knowledge** for aligning data science projects with business goals  \n* **Soft skills** for communication, collaboration, and creativity  \n* **Feature engineering** and selection for **model optimization**.  \n* Staying current with trends like **MLOps** and **Generative AI.**\n\n## **Understanding Data Science**\n\n[Data science](https://roadmap.sh/ai-data-scientist) is an interdisciplinary field that combines multiple disciplines to make sense of data and drive actionable insights. It integrates programming, statistical analysis, and domain knowledge to uncover patterns and trends in both structured and unstructured data. This powerful combination enables data professionals to solve a variety of challenges, such as:\n\n* Building predictive models to forecast sales or identify customer churn.  \n* Developing optimization techniques to streamline supply chains or allocate resources more effectively.  \n* Leveraging automation and artificial intelligence to create personalized recommendations or detect fraudulent activity in massive datasets.\n\nAt its core, data science empowers organizations to turn raw data into actionable insights. By interpreting data effectively and applying statistical models, data scientists support data-driven decision-making, ensuring businesses maintain a competitive edge. \n\nThe data science field requires a unique mix of technical skills, analytical prowess, and creativity to handle the vast array of complex data sets encountered in real-world scenarios. In other words, being a data scientist is not for everyone.\n\n**1\\. Programming Proficiency**\n\n![Programming proficiency with Python, R and SQL](https://assets.roadmap.sh/guest/r-sql-python-qqm69.png)\n\nProgramming remains a cornerstone of the data science field, forming the foundation for nearly every task in data science projects. Mastery of programming languages like Python, R, and SQL is crucial for aspiring data scientists to handle data workflows effectively.\n\nPython is the undisputed leader in data science, thanks to its extensive libraries and frameworks. Pandas, NumPy, and Scikit-learn are essential for tasks ranging from data wrangling and numerical analysis to building machine learning models. Deep learning tools such as TensorFlow and PyTorch make Python indispensable for tackling advanced challenges like developing artificial neural networks for image recognition and natural language processing (NLP).\n\nR excels in statistical analysis and visualization. Its specialized libraries, like ggplot2 for data visualization and caret for machine learning models, make it a preferred choice for academics and data analysis tasks that require interpreting data trends and creating statistical models.\n\nSQL is the backbone of database management, which is essential for extracting, querying, and preparing data from structured databases. A strong command of SQL allows data professionals to manage massive datasets efficiently and ensure smooth integration with analytical tools.\n\n## **2\\. Data Manipulation and Analysis**\n\n![Data manipulation and wrangling](https://assets.roadmap.sh/guest/data-wrangling-zwd5i.png)\n\nThe ability to manipulate and analyze data lies at the heart of data science skills. These tasks involve transforming raw data into a format suitable for analysis and extracting insights through statistical concepts and exploratory data analysis (EDA).\n\nData wrangling is a critical skill for cleaning and preparing raw data, addressing missing values, and reshaping complex data sets. For example, consider a dataset containing customer transaction records with incomplete information. Using tools like Pandas in Python, a data scientist can identify missing values, impute or drop them as appropriate, and restructure the data to focus on specific variables like transaction frequency or total purchase amounts. This process ensures the dataset is ready for meaningful analysis.\n\nTools like Pandas, PySpark, and Dask are invaluable for handling unstructured data or working with massive datasets efficiently. These tools allow data scientists to transform complex data sets into manageable and analyzable forms, which is foundational for building machine learning models or conducting advanced statistical analysis.\n\nPerforming exploratory data analysis allows data scientists to identify patterns, correlations, and anomalies within structured data. Visualization libraries like Matplotlib and Seaborn, combined with Python scripts, play a significant role in understanding data insights before building predictive models or statistical models.\n\n**3\\. Machine Learning and AI**\n\n![Machine learning and AI techniques](https://assets.roadmap.sh/guest/machine-learning-odmf1.png)\n\nMachine learning is a driving force in the data science industry, enabling data-driven decisions across sectors and revolutionizing how organizations interpret data and make predictions. Mastering machine learning algorithms and frameworks are among the top data science skills for aspiring data scientists who wish to excel in analyzing data and creating impactful solutions.\n\nData scientists commonly tackle supervised learning tasks, such as predicting housing prices through regression models or identifying fraudulent transactions with classification algorithms. For example, using Scikit-learn, a data scientist can train a decision tree to categorize customer complaints into predefined categories for better issue resolution. Additionally, unsupervised techniques like clustering are applied in market segmentation to group customers based on purchasing patterns, helping businesses make data-driven decisions.\n\nDeep learning represents the cutting edge of artificial intelligence, utilizing artificial neural networks to manage unstructured data and solve highly complex problems. Frameworks like TensorFlow and PyTorch are essential tools for developing advanced solutions, such as NLP models for chatbot interactions or generative AI for creating realistic images. These tools empower data scientists to push the boundaries of innovation and unlock actionable insights from vast and complex datasets.\n\n## **4\\. Statistical and Mathematical Foundations**\n\n![Statistical and mathematical foundations](https://assets.roadmap.sh/guest/statistical-analysis-bnkn3.png)\n\nStatistical concepts and mathematical skills form the backbone of building robust data models and interpreting data insights. These foundational skills are indispensable for anyone aiming to succeed in the data science field.\n\nProbability theory and hypothesis testing play a vital role in understanding uncertainty in data workflows. For instance, a data scientist might use hypothesis testing to evaluate whether a new marketing strategy leads to higher sales compared to the current approach, ensuring data-driven decision-making.\n\nLinear algebra and calculus are crucial for developing and optimizing machine learning algorithms. Techniques like matrix decomposition and gradient descent are used to train neural networks and enhance their predictive accuracy. These mathematical tools are the engine behind many advanced algorithms, making them essential data scientist skills.\n\nAdvanced statistical analysis, including A/B testing and Bayesian inference, helps validate predictions and understand relationships within complex datasets. For example, A/B testing can determine which website design yields better user engagement, providing actionable insights to businesses.\n\n## **5\\. Big Data Technologies**\n\n![Big data technologies](https://assets.roadmap.sh/guest/big-data-x0rmx.png)\n\nWhile big data skills are secondary for most data scientists, understanding big data technologies enhances their ability to handle massive datasets efficiently. Familiarity with tools like Apache Spark and Hadoop allows data scientists to process and analyze distributed data, which is especially important for projects involving millions of records. For example, Apache Spark can be used to calculate real-time metrics on user behavior across e-commerce platforms, enabling businesses to personalize experiences dynamically.\n\nCloud computing skills, including proficiency with platforms like AWS or GCP, are also valuable for deploying machine learning projects at scale. A data scientist working with GCP's BigQuery can query massive datasets in seconds, facilitating faster insights for time-sensitive decisions. These technologies, while not the core of a data scientist's responsibilities, are crucial for ensuring scalability and efficiency in data workflows.\n\n## **6\\. Data Engineering**\n\n![Data engineering](https://assets.roadmap.sh/guest/data-engineering-lqm7i.png)\n\nData engineering complements data science by creating the infrastructure required to analyze data effectively. This skill set ensures that data flows seamlessly through pipelines, enabling analysis and decision-making.\n\nDesigning ETL (Extract, Transform, Load) pipelines is a critical part of data engineering. For instance, a data engineer might create a pipeline to collect raw sales data from multiple sources, transform it by standardizing formats and handling missing values, and load it into a database for further analysis. These workflows are the backbone of data preparation.\n\nUsing tools like Apache Airflow, those workflows can be streamlined, while managing real-time data streaming using Kafka ensures that real-time data—such as social media feeds or IoT sensor data—is processed without delay. For example, a Kafka pipeline could ingest weather data to update forecasts in real-time.\n\nFinally, storing and querying complex data sets in cloud computing with tools like Snowflake or BigQuery allows data scientists to interact with massive datasets effortlessly. \n\nThese platforms support scalable storage and high-performance queries, enabling faster analysis and actionable insights.\n\n## **7\\. Data Visualization**\n\n![Data visualization techniques and tools](https://assets.roadmap.sh/guest/data-visualization-bkkel.png)\n\nData visualization is a cornerstone of the data science field, as it enables data professionals to present data and communicate findings effectively. While traditional tools like Tableau and Power BI are widely used, aspiring data scientists should prioritize programming-based tools like Plotly and D3.js for greater flexibility and customization.\n\nFor example, using Plotly, a data scientist can create an interactive dashboard to visualize customer purchase trends over time, allowing stakeholders to explore the data dynamically. Similarly, D3.js offers unparalleled control for designing custom visualizations, such as heatmaps or network graphs, that convey complex relationships in a visually compelling manner.\n\nApplying storytelling techniques further enhances the impact of visualizations. By weaving data insights into a narrative, data scientists can ensure their findings resonate with stakeholders and drive actionable decisions. For instance, a well-crafted story supported by visuals can explain how seasonal demand patterns affect inventory management, bridging the gap between technical analysis and strategic planning.\n\n## **8\\. Business and Domain Knowledge**\n\n![Business and domain knowledge](https://assets.roadmap.sh/guest/business-and-domain-knowledge-5mnne.PNG)\n\nDomain knowledge enhances the relevance of data science projects by aligning them with organizational goals and addressing unique industry-specific challenges. Understanding the context in which data is applied allows data professionals to make their analysis more impactful and actionable.\n\nFor example, in the finance industry, a data scientist with domain expertise can design predictive models that assess credit risk by analyzing complex data sets of customer transactions, income, and past credit behavior. These models enable financial institutions to make data-driven decisions about lending policies.\n\nIn healthcare, domain knowledge allows data scientists to interpret medical data effectively, such as identifying trends in patient outcomes based on treatment history. By leveraging data models tailored to clinical needs, data professionals can help improve patient care and operational efficiency in hospitals.\n\nThis alignment ensures that insights are not only technically robust but also directly applicable to solving real-world problems, making domain knowledge an indispensable skill for data professionals seeking to maximize their impact.\n\n## **9\\. Soft Skills**\n\n![Soft skills for data scientists](https://assets.roadmap.sh/guest/soft-skills-3y4zs.png)\n\nSoft skills are as essential as technical skills in the data science field, bridging the gap between complex data analysis and practical implementation. These skills enhance a data scientist's ability to communicate findings, collaborate with diverse teams, and approach challenges with innovative solutions.\n\n**Communication** is critical for translating data insights into actionable strategies. For example, a data scientist might present the results of an exploratory data analysis to marketing executives, breaking down statistical models into simple, actionable insights that drive campaign strategies. The ability to clearly interpret data ensures that stakeholders understand and trust the findings.\n\n**Collaboration** is equally vital, as data science projects often involve cross-functional teams. For instance, a data scientist might work closely with software engineers to integrate machine learning models into a production environment or partner with domain experts to ensure that data-driven decisions align with business objectives. Effective teamwork ensures seamless data workflows and successful project outcomes.\n\n**Creativity** allows data scientists to find innovative ways to address complex problems. A creative data scientist might devise a novel approach to handling unstructured data, such as using natural language processing (NLP) techniques to extract insights from customer reviews, providing actionable insights that improve product development.\n\nThese critical soft skills complement technical expertise, making data professionals indispensable contributors to their organizations.\n\n## 10\\. Feature engineering and selection for model optimization\n\n![Feature engineering and selection](https://assets.roadmap.sh/guest/feature-engineering-1pit4.png)\n\nFor machine learning models to interpret and use any type of data, that data needs to be turned into features. And that is where feature engineering and selection comes into play. These are two critical steps in the data science workflow because they directly influence the performance and accuracy of the models. If you think about it, the better the model understands what data to focus on, the better it'll perform.\n\nThese processes involve creating, selecting, and transforming raw data into useful features loaded with meaning that help represent the underlying problem for the model.\n\nFor example, imagine building a model to predict house prices. Raw data might include information like the size of the house in square meters, the number of rooms, and the year it was built. Through feature engineering, a data scientist could create new features, such as \"price per square meter\" or \"age of the house,\" which make the data more informative for the model. These features can highlight trends that a model might otherwise miss.\n\nFeature selection, on the other hand, focuses on optimizing the use and dependency on features by identifying the most relevant ones and removing the redundant or irrelevant features. For example, let's consider a retail scenario where a model is predicting customer churn, here it might benefit from focusing on features like \"purchase frequency\" and \"customer feedback sentiment\", while ignoring less impactful ones like \"the time of day purchases are made\". This helps to avoid the model getting overwhelmed by noise, improving both its efficiency and accuracy.\n\nIf you're looking to improve your data science game, then focusing on feature engineering and selection can definitely have that effect. \n\n## 11\\. Staying Current\n\n![Staying current with data science trends](https://assets.roadmap.sh/guest/stay-current-vnqqq.png)\n\nThe data science field evolves at an unprecedented pace, driven by advancements in artificial intelligence, machine learning, and data technologies. Staying current with emerging trends is essential for maintaining a competitive edge and excelling in the industry.\n\nJoining **data science communities**, such as forums or online groups, provides a platform for exchanging ideas, discussing challenges, and learning from peers. For instance, platforms like Kaggle or GitHub allow aspiring data scientists to collaborate on data science projects and gain exposure to real-world applications.\n\nAttending **data science conferences** is another effective way to stay informed. Events like NeurIPS, Strata Data Conference, or PyData showcase cutting-edge research and practical case studies, offering insights into the latest advancements in machine learning models, big data technologies, and cloud computing tools.\n\nEngaging in **open-source projects** not only sharpens technical skills but also helps data professionals contribute to the broader data science community. For example, contributing to an open-source MLOps framework might provide invaluable experience in deploying and monitoring machine learning pipelines.\n\nEmbracing trends like **MLOps** for operationalizing machine learning, **AutoML** for automating model selection, and **Generative AI** for creating synthetic data ensures that data scientists remain at the forefront of innovation. These emerging technologies are reshaping the data science field, making continuous learning a non-negotiable aspect of career growth.\n\n**Summary**\n\nMastering these essential data scientist skills—from programming languages and machine learning skills to interpreting data insights and statistical models—will future-proof your [career path in data science](https://roadmap.sh/ai-data-scientist/career-path). These include the core skills of data manipulation, statistical analysis, and data visualization, all of which are central to the data science field.\n\nIn addition, while big data technologies and data engineering skills are not the central focus of a data scientist's role, they serve as valuable, data science-adjacent competencies. Familiarity with big data tools like Apache Spark and cloud computing platforms can enhance scalability and efficiency in handling massive datasets, while data engineering knowledge helps create robust pipelines to support analysis. By building expertise in these areas and maintaining adaptability, you can excel in this dynamic, data-driven industry.\n\nCheck out our [data science roadmap](https://roadmap.sh/ai-data-scientist) next to discover what your potential learning path could look like in this role.\n\n";
				}
				async function compiledContent$1w() {
					return await html$1w();
				}
				function getHeadings$1w() {
					return [{"depth":2,"slug":"understanding-data-science","text":"Understanding Data Science"},{"depth":2,"slug":"2-data-manipulation-and-analysis","text":"2. Data Manipulation and Analysis"},{"depth":2,"slug":"4-statistical-and-mathematical-foundations","text":"4. Statistical and Mathematical Foundations"},{"depth":2,"slug":"5-big-data-technologies","text":"5. Big Data Technologies"},{"depth":2,"slug":"6-data-engineering","text":"6. Data Engineering"},{"depth":2,"slug":"7-data-visualization","text":"7. Data Visualization"},{"depth":2,"slug":"8-business-and-domain-knowledge","text":"8. Business and Domain Knowledge"},{"depth":2,"slug":"9-soft-skills","text":"9. Soft Skills"},{"depth":2,"slug":"10-feature-engineering-and-selection-for-model-optimization","text":"10. Feature engineering and selection for model optimization"},{"depth":2,"slug":"11-staying-current","text":"11. Staying Current"}];
				}

				const Content$1w = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1w;
					content.file = file$1w;
					content.url = url$1w;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1w())}`;
				});

const __vite_glob_0_2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1w,
	compiledContent: compiledContent$1w,
	default: Content$1w,
	file: file$1w,
	frontmatter: frontmatter$1w,
	getHeadings: getHeadings$1w,
	rawContent: rawContent$1w,
	url: url$1w
}, Symbol.toStringTag, { value: 'Module' }));

const html$1v = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-1a9w1.jpg\" alt=\"Top data science tools\"></p>\n<p>In case you haven’t noticed, the data science industry is constantly evolving, potentially even faster than the web industry (which says a lot!).</p>\n<p>And 2025 is shaping up to be another transformative year for tools and technologies. Whether you’re exploring machine learning tools, predictive modeling, data management, or data visualization tools, there’s an incredible array of software to enable <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data scientists</a> to analyze data efficiently, manage data effectively, and communicate insights.</p>\n<p>In this article, we dive into the essential data science tools you need to know for 2025, complete with ratings and expert picks to help you navigate the options.</p>\n<h2 id=\"what-is-data-science\">What is Data Science?</h2>\n<p>Data science is an interdisciplinary field that combines mathematics, statistics, computer science, and domain expertise to extract meaningful insights from data. It involves collecting, cleaning, and analyzing large datasets to uncover patterns, trends, and actionable information. At its core, data science aims to solve complex problems through data-driven decision-making, using techniques such as machine learning, predictive modeling, and data visualization.</p>\n<p>The data science process typically involves:</p>\n<ul>\n<li><strong>Data Collection</strong>: Gathering data from various sources, such as databases, APIs, or real-time sensors.</li>\n<li><strong>Data Preparation</strong>: Cleaning and transforming raw data into a usable format for analysis.</li>\n<li><strong>Exploratory Data Analysis (EDA):</strong> Identifying trends, correlations, and outliers within the dataset.</li>\n<li><strong>Modeling</strong>: Using algorithms and statistical methods to make predictions or classify data.</li>\n<li><strong>Interpretation and Communication</strong>: Visualizing results and presenting insights to stakeholders in an understandable manner.</li>\n</ul>\n<p>Data science plays a key role in various industries, including healthcare, finance, marketing, and technology, driving innovation and efficiency by leveraging the power of data.</p>\n<h2 id=\"criteria-for-ratings\">Criteria for Ratings</h2>\n<p>We rated each of the best data science tools on a 5-star scale based on:</p>\n<ul>\n<li><strong>Performance:</strong> How efficiently the tool handles large and complex datasets. This includes speed, resource optimization, and reliability during computation.</li>\n<li><strong>Scalability:</strong> The ability to scale across big data and multiple datasets. Tools were evaluated on their capability to maintain performance as data sizes grow.</li>\n<li><strong>Community and Ecosystem:</strong> Availability of resources, support, and integrations. Tools with strong community support and extensive libraries received higher ratings.</li>\n<li><strong>Learning Curve:</strong> Ease of adoption for new and experienced users. Tools with clear documentation and intuitive interfaces were rated more favorably.</li>\n</ul>\n<h2 id=\"expert-recommendations\">Expert Recommendations<img src=\"https://assets.roadmap.sh/guest/data-science-expert-advice-4lanb.png\" alt=\"Expert Recommendations\"></h2>\n<p>Picking the best tools for your project is never easy, and it’s hard to make an objective decision if you don’t have experience with any of them.</p>\n<p>So to make your life a bit easier, here’s my personal recommendation, you can take it or leave it, it’s up to you, but at least you’ll know where to start:</p>\n<p>While each tool has its strengths, my favorite pick among them is <strong>TensorFlow</strong>. Its perfect scores in performance, scalability, and community support (you’ll see them in a second in the table below), combined with its relatively moderate learning curve, make it an amazing choice for building advanced neural networks and developing predictive analytics systems.  You can do so much with it, like image recognition, natural language processing, and recommendation systems cementing its position as the leading choice (and my personal choice) in 2025.</p>\n<p>Now, to help you understand and compare the rest of the tools from this guide, the table below summarizes their grades across key criteria: performance, scalability, community support, and learning curve. It also highlights the primary use cases for these tools.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Tool</th><th>Performance</th><th>Scalability</th><th>Community</th><th>Learning Curve</th><th>Best For</th></tr></thead><tbody><tr><td>TensorFlow</td><td>5</td><td>5</td><td>5</td><td>4</td><td>Advanced neural networks, predictive analytics</td></tr><tr><td>Apache Spark</td><td>5</td><td>5</td><td>5</td><td>3</td><td>Distributed analytics, real-time streaming</td></tr><tr><td>Jupyter Notebooks</td><td>4</td><td>4</td><td>5</td><td>5</td><td>Exploratory analysis, education</td></tr><tr><td>Julia</td><td>4</td><td>4</td><td>4</td><td>3</td><td>Simulations, statistical modeling</td></tr><tr><td>NumPy</td><td>4</td><td>3</td><td>5</td><td>5</td><td>Numerical arrays, preprocessing workflows</td></tr><tr><td>Polars</td><td>5</td><td>4</td><td>4</td><td>4</td><td>Data preprocessing, ETL acceleration</td></tr><tr><td>Apache Arrow</td><td>5</td><td>5</td><td>4</td><td>3</td><td>Interoperability, streaming analytics</td></tr><tr><td>Streamlit</td><td>4</td><td>4</td><td>5</td><td>5</td><td>Interactive dashboards, rapid deployment</td></tr><tr><td>DuckDB</td><td>4</td><td>4</td><td>4</td><td>5</td><td>SQL queries, lightweight warehousing</td></tr><tr><td>dbt</td><td>4</td><td>4</td><td>5</td><td>4</td><td>SQL transformations, pipeline automation</td></tr><tr><td>Matplotlib</td><td>4</td><td>3</td><td>5</td><td>4</td><td>Advanced visualizations, publication graphics</td></tr></tbody></table>\n<p>Let’s now deep dive into each of these tools to understand in more detail, why they’re in this guide.</p>\n<h2 id=\"data-science-tools-for-ml--deep-learning-tools\">Data science tools for ML &#x26; Deep learning tools</h2>\n<h3 id=\"tensorflow\">TensorFlow</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-tensorflow-exdxy.png\" alt=\"TensorFlow\"></p>\n<p>TensorFlow remains one of the top data science tools for deep learning models and machine learning applications. Developed by Google, this open-source platform excels in building neural networks, predictive analytics, and natural language processing models.</p>\n<ul>\n<li><strong>Performance (★★★★★):</strong> TensorFlow achieves top marks here due to its use of GPU and TPU acceleration, which allows seamless handling of extremely large models. Its ability to train complex networks without compromising on speed solidifies its high-performance ranking.</li>\n<li><strong>Scalability (★★★★★):</strong> TensorFlow scales from single devices to distributed systems effortlessly, enabling use in both prototyping and full-scale production.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> With an active developer community and comprehensive support, TensorFlow offers unmatched resources and third-party integrations.</li>\n<li><strong>Learning Curve (★★★★):</strong> While it offers immense power, mastering TensorFlow’s advanced features requires time, making it slightly less accessible for beginners compared to simpler frameworks.</li>\n</ul>\n<p><strong>Strengths:</strong> TensorFlow is a powerhouse for performance and scalability in the world of machine learning. Its GPU and TPU acceleration allow users to train and deploy complex models faster than many competitors. The massive community ensures constant innovation, with frequent updates, robust third-party integrations, and an ever-growing library of resources. The inclusion of TensorFlow Lite and TensorFlow.js makes it versatile for both edge computing and web applications.</p>\n<p><strong>Best For:</strong> Developing advanced neural networks for image recognition, natural language processing pipelines, building recommendation systems, and creating robust predictive analytics tools for a wide array of industries.</p>\n<p><strong>Used by:</strong> Google itself uses TensorFlow extensively for tasks like search algorithms, image recognition, and natural language processing. Similarly, Amazon employs TensorFlow to power recommendation systems and optimize demand forecasting.</p>\n<h2 id=\"data-science-tools-for-big-data-processing\">Data science tools for big data processing</h2>\n<h3 id=\"apache-spark\">Apache Spark</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-spark-tjoqm.png\" alt=\"Apache Spark\"></p>\n<p>An Apache Software Foundation project, Apache Spark is a powerhouse for big data processing, enabling data scientists to perform batch processing and streaming data analysis. It supports a wide range of programming languages, including Python, Scala, and Java, and integrates well with other big data tools like Hadoop and Kafka.</p>\n<ul>\n<li><strong>Performance (★★★★★):</strong> Spark excels in processing speed thanks to its in-memory computing capabilities, making it a leader in real-time and batch data processing.</li>\n<li><strong>Scalability (★★★★★):</strong> Designed for distributed systems, Spark handles petabytes of data with ease, maintaining efficiency across clusters.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> Spark’s widespread adoption and integration with tools like Kafka and Hadoop make it a staple for big data workflows.</li>\n<li><strong>Learning Curve (★★★):</strong> Beginners may find distributed computing concepts challenging, though excellent documentation helps mitigate this.</li>\n</ul>\n<p><strong>Strengths:</strong> Spark stands out for its lightning-fast processing speed and flexibility. Its in-memory computation ensures minimal delays during large-scale batch or streaming tasks. The compatibility with multiple programming languages and big data tools enhances its integration into diverse tech stacks.</p>\n<p><strong>Best For:</strong> Executing large-scale data analytics in distributed systems, real-time stream processing for IoT applications, running ETL pipelines, and data mining for insights in industries like finance and healthcare.</p>\n<p><strong>Used by:</strong> Apache Spark has been adopted by companies like Uber and Shopify. Uber uses Spark for real-time analytics and stream processing, enabling efficient ride-sharing logistics. Shopify relies on Spark to process large volumes of e-commerce data, supporting advanced analytics and business intelligence workflows.</p>\n<h2 id=\"exploratory--collaborative-tools\">Exploratory &#x26; Collaborative tools</h2>\n<h3 id=\"jupyter-notebooks\">Jupyter Notebooks</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-jupyter-cgfv4.png\" alt=\"Jupyter Notebooks\"></p>\n<p>Jupyter Notebooks are an essential data science tool for creating interactive and shareable documents that combine code, visualizations, and narrative text. With support for over 40 programming languages, including Python, R, and Julia, Jupyter facilitates collaboration and exploratory data analysis.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> Jupyter is designed for interactivity rather than computational intensity, which makes it highly effective for small to medium-scale projects but less suitable for high-performance tasks.</li>\n<li><strong>Scalability (★★★★):</strong> While Jupyter itself isn’t designed for massive datasets, its compatibility with scalable backends like Apache Spark ensures it remains relevant for larger projects.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> Jupyter’s open-source nature and extensive community-driven extensions make it a powerhouse for versatility and support.</li>\n<li><strong>Learning Curve (★★★★★):</strong> Its simple and intuitive interface makes it one of the most accessible tools for beginners and professionals alike</li>\n</ul>\n<p><strong>Strengths:</strong> Jupyter’s flexibility and ease of use make it indispensable for exploratory analysis and education. Its ability to integrate code, output, and explanatory text in a single interface fosters collaboration and transparency.</p>\n<p><strong>Best For:</strong> Creating educational tutorials, performing exploratory data analysis, prototyping machine learning models, and sharing reports that integrate code with rich visualizations.</p>\n<p><strong>Used by:</strong> Jupyter Notebooks have become a staple for exploratory analysis and collaboration. Delivery Hero uses Jupyter to enhance delivery logistics through data analysis and visualization, while Intuit leverages the tool to facilitate financial data analysis in collaborative projects.</p>\n<h2 id=\"data-science-tools-for-statistical-computing\">Data science tools for statistical computing</h2>\n<h3 id=\"julia\">Julia</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-julia-ctqlw.png\" alt=\"Julia\"></p>\n<p>Julia is an emerging open-source programming language tailored for statistical computing and data manipulation. It combines the performance of low-level languages like C with the simplicity of high-level languages like Python. Julia’s strengths lie in its speed for numerical computation and its dynamic type system, making it highly suitable for big data applications and machine learning models. The Julia ecosystem is rapidly growing, offering libraries for data visualization, optimization, and deep learning.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> Julia’s design prioritizes speed for numerical and statistical computing, placing it ahead of many high-level languages in terms of raw performance.</li>\n<li><strong>Scalability (★★★★):</strong> With built-in support for parallel computing, Julia scales well for tasks requiring significant computational power, although its ecosystem is still catching up to Python’s.</li>\n<li><strong>Community and Ecosystem (★★★★):</strong> Julia’s growing community and the increasing availability of libraries make it a solid choice, though it’s not yet as robust as more established ecosystems.</li>\n<li><strong>Learning Curve (★★★):</strong> Julia’s unique syntax, while designed for simplicity, presents a learning barrier for those transitioning from other languages like Python or R.</li>\n</ul>\n<p><strong>Strengths:</strong> Julia’s ability to execute complex numerical tasks at high speed positions it as a top contender in scientific computing. Its built-in support for parallelism allows it to scale efficiently, while its clear syntax lowers barriers for domain experts transitioning from MATLAB or R.</p>\n<p><strong>Best For:</strong> Performing advanced statistical analysis, numerical optimization, developing simulations in physics and finance, and implementing machine learning models for high-performance environments.</p>\n<p><strong>Used by:</strong> The high-performance capabilities of Julia make it a favorite for statistical computing in industries like finance. For example, Capital One uses Julia for risk analytics and modeling, and Aviva employs it to improve actuarial computations and financial modeling processes.</p>\n<h3 id=\"numpy\">NumPy</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-numpy-nrbc7.png\" alt=\"NumPy\"></p>\n<p>A foundational library in the Python ecosystem, NumPy provides powerful tools for managing data structures, numerical computations, and statistical analysis. It is widely used for data preparation, enabling operations on large multi-dimensional arrays and matrices.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> NumPy’s optimized C-based implementation allows it to handle numerical operations with high efficiency, but it relies on integration with other tools for larger or distributed workloads.</li>\n<li><strong>Scalability (★★★):</strong> As a single-machine library, NumPy is best suited for datasets that fit in memory, though it integrates well with scalable tools like Dask for extended use.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> NumPy’s foundational role in Python’s data science ecosystem means extensive resources and near-universal compatibility.</li>\n<li><strong>Learning Curve (★★★★★):</strong> Its straightforward API and clear documentation make NumPy an essential and approachable tool for data preparation and numerical computing.</li>\n</ul>\n<p><strong>Strengths:</strong> NumPy’s versatility and efficiency underpin its widespread adoption in the Python ecosystem. Its array manipulation capabilities—from slicing and reshaping to broadcasting—make it a cornerstone for numerical operations.</p>\n<p><strong>Best For:</strong> Handling numerical arrays for preprocessing, matrix algebra in physics and engineering, foundational operations for machine learning pipelines, and performing basic statistical analysis efficiently.</p>\n<p><strong>Used by:</strong> NumPy serves as the foundation for many Python-based workflows. Spotify uses NumPy for numerical computations within its recommendation algorithms, and Airbnb employs it to optimize pricing strategies and improve customer experience through data analysis.</p>\n<h2 id=\"data-science-tools-for-data-manipulation--preprocessing-tools\"><strong>Data science tools for data manipulation &#x26; preprocessing tools</strong></h2>\n<h3 id=\"polars\">Polars</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-polaris-5u7yt.png\" alt=\"Polars\"></p>\n<p>Polars is a lightning-fast data processing &#x26; manipulation library that enables data scientists to handle complex datasets. Unlike traditional libraries, Polars is written in Rust, offering exceptional performance and low memory usage. Its DataFrame API is intuitive and supports multi-threaded operations, making it a strong choice for large-scale data preprocessing and manipulation tasks.</p>\n<ul>\n<li><strong>Performance</strong> (★★★★★): Polars’ Rust-based architecture ensures exceptional speed and memory efficiency, positioning it as a leading tool for high-performance data manipulation.</li>\n<li><strong>Scalability</strong> (★★★★): While optimized for larger datasets, its scalability is limited to environments supported by multi-threading rather than distributed systems.</li>\n<li><strong>Community and Ecosystem</strong> (★★★★): Though its ecosystem is still growing, Polars’ strong integration with Python and intuitive API provide a solid foundation.</li>\n<li><strong>Learning Curve</strong> (★★★★): With a user-friendly interface inspired by Pandas, Polars is easy to adopt for those familiar with similar tools, though Rust concepts may pose challenges for some.</li>\n</ul>\n<p><strong>Strengths:</strong> Polars stands out due to its unparalleled speed, derived from its Rust-based architecture. Its ability to process data in parallel ensures efficiency even with large datasets, reducing bottlenecks in ETL pipelines. The intuitive API and support for lazy evaluation make it both user-friendly and powerful.</p>\n<p><strong>Best For:</strong> Processing complex datasets for data cleaning, reshaping large-scale tables, and accelerating ETL pipelines in environments requiring high-speed operations.</p>\n<p><strong>Used by:</strong> Polars is gaining traction for its exceptional speed in data preprocessing and ETL workflows. Zillow uses Polars for efficient data preprocessing in real estate market analysis, while Stripe adopts it to accelerate ETL processes for handling financial transaction data.</p>\n<h3 id=\"apache-arrow\">Apache Arrow</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-apache-arrow-6d6mg.png\" alt=\"Apache Arrow\"></p>\n<p>Apache Arrow is revolutionizing how data is stored and transferred for big data applications. Its in-memory columnar format accelerates data processing and integration between multiple datasets and tools. Apache Arrow also acts as a bridge between various programming languages and frameworks, improving the interoperability of data science workflows.</p>\n<ul>\n<li><strong>Performance (★★★★★):</strong> Apache Arrow’s in-memory columnar format delivers unmatched speed for data processing and transfer between tools.</li>\n<li><strong>Scalability (★★★★★):</strong> Its design supports seamless scalability across distributed systems, making it ideal for large-scale workflows.</li>\n<li><strong>Community and Ecosystem (★★★★):</strong> Arrow’s adoption by major data tools ensures growing support, though its standalone ecosystem remains limited compared to broader frameworks.</li>\n<li><strong>Learning Curve (★★★):</strong> Understanding columnar data formats and workflows may require extra effort for beginners but pays off in advanced scenarios.</li>\n</ul>\n<p><strong>Strengths:</strong> Apache Arrow’s columnar format provides a significant boost in performance and compatibility. Its seamless interoperability between tools such as Pandas, Spark, and TensorFlow eliminates data transfer inefficiencies. The library also supports multi-language workflows, making it indispensable for teams leveraging diverse tech stacks.</p>\n<p><strong>Best For:</strong> Ensuring efficient interoperability between data tools, accelerating data lake operations, and supporting real-time data analytics in distributed systems.</p>\n<p><strong>Used by:</strong> Google BigQuery integrates Arrow to enhance data interchange and query performance, and AWS Athena relies on Arrow’s in-memory format to facilitate faster query responses and real-time analytics.</p>\n<h2 id=\"data-science-tools-for-application-development\">Data science tools for application development</h2>\n<h3 id=\"streamlit\">Streamlit</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-streamlit-iq0sl.png\" alt=\"Streamlit\"></p>\n<p>Streamlit is an open-source framework for creating custom data science applications and dashboards. It simplifies the process of building interactive apps by using Python scripts, making it accessible even for those with minimal web development experience. Streamlit’s API enables rapid prototyping of machine learning tools and visualizations.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> Optimized for real-time application development, Streamlit is fast for small to medium-scale projects.</li>\n<li><strong>Scalability (★★★★):</strong> Streamlit scales reasonably well but isn’t designed for massive applications.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> Its active community and constant updates ensure excellent support for users.</li>\n<li><strong>Learning Curve (★★★★★):</strong> With a simple API and Python-centric design, Streamlit is easy for both developers and non-developers.</li>\n</ul>\n<p><strong>Strengths:</strong> Streamlit’s simplicity and speed make it ideal for crafting interactive dashboards with minimal effort. Its integration with popular Python libraries like Pandas and Matplotlib allows users to transform raw data into meaningful insights quickly.</p>\n<p><strong>Best For:</strong> Creating interactive dashboards for sharing machine learning predictions, visualizing complex datasets with minimal development effort, and rapidly deploying prototypes for stakeholder feedback.</p>\n<p><strong>Used by:</strong> Streamlit simplifies the creation of interactive dashboards and data applications. Companies like Snowflake use Streamlit to build client-facing data apps, while Octopus Energy employs it to create dashboards that visualize energy consumption data for their customers.</p>\n<h3 id=\"duckdb\">DuckDB</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-duckdb-iv557.png\" alt=\"DuckDB\"></p>\n<p>DuckDB is an open-source analytics database that simplifies structured queries on raw data. Designed to operate within analytical workflows, it supports SQL-based queries without the need for a dedicated database server. Its efficient storage model makes it ideal for querying structured and unstructured data in ad hoc analysis scenarios, making it highly favored for lightweight data warehousing tasks.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> DuckDB delivers impressive speeds for ad hoc analytics, optimized for single-machine workflows.</li>\n<li><strong>Scalability (★★★★):</strong> Suitable for lightweight to medium-scale tasks, DuckDB integrates well into Python and R environments.</li>\n<li><strong>Community and Ecosystem (★★★★):</strong> Growing adoption and strong SQL compatibility make it increasingly popular.</li>\n<li><strong>Learning Curve (★★★★★):</strong> Its SQL-based interface ensures a smooth learning experience for most users.</li>\n</ul>\n<p><strong>Strengths:</strong> DuckDB’s efficiency and ease of use make it a go-to tool for analysts. Its ability to operate without infrastructure overhead allows rapid deployment, and its SQL compatibility ensures accessibility for non-programmers.</p>\n<p><strong>Best For:</strong> Running interactive SQL queries in development workflows, performing data warehousing tasks without infrastructure overhead, and integrating ad hoc analyses directly into Python-based projects.</p>\n<p><strong>Used by:</strong>  DuckDB’s lightweight and efficient SQL analytics have found applications in various industries. MotherDuck integrates DuckDB to enable fast, in-process analytical queries, and SeMI Technologies leverages DuckDB within its Weaviate platform for high-speed vector search analytics.</p>\n<h3 id=\"dbt-data-build-tool\">dbt (Data Build Tool)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-dbt-cozps.png\" alt=\"dbt\"></p>\n<p>dbt is a development framework for transforming data in warehouses. It allows analysts and engineers to write modular SQL-based transformations and manage data workflows efficiently. With its focus on collaboration and version control, dbt has become an essential tool for teams working on data pipelines.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> dbt’s modular approach allows for efficient and scalable SQL transformations.</li>\n<li><strong>Scalability (★★★★):</strong> Designed for modern data warehouses, dbt handles increasing workloads effectively.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> Its thriving community and vendor support make it indispensable for data pipeline management.</li>\n<li><strong>Learning Curve (★★★★):</strong> Familiarity with SQL simplifies adoption, though pipeline concepts may require additional learning.</li>\n</ul>\n<p><strong>Strengths:</strong> dbt’s modularity and focus on collaboration streamline complex SQL transformations. Its integration with version control systems ensures reproducibility, while the ability to test and document transformations within the tool fosters better collaboration among data teams.</p>\n<p><strong>Best For:</strong> Automating SQL transformations for analytics, managing data warehouse workflows with version control, and creating reusable and modular pipelines for team collaboration.</p>\n<p><strong>Used by:</strong> dbt has become essential for transforming and managing data workflows. JetBlue uses dbt to optimize their data warehouse for improved analytics, and GitLab adopts it to transform raw data into actionable insights, streamlining their analytics operations.</p>\n<h2 id=\"data-science-tools-for-data-visualization\">Data science tools for data visualization</h2>\n<h3 id=\"matplotlib\">Matplotlib</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-tools-matplotlib-b8lpy.png\" alt=\"Matplotlib\"></p>\n<p>Matplotlib is a widely used data visualization library in Python that allows users to create static, animated, and interactive visualizations. Known for its flexibility, Matplotlib supports detailed customization, making it suitable for complex visualizations required in data science projects.</p>\n<ul>\n<li><strong>Performance (★★★★):</strong> Matplotlib handles visualization tasks efficiently for small to medium datasets but may lag with complex or large-scale rendering.</li>\n<li><strong>Scalability (★★★):</strong> Designed for single-threaded use, it integrates with scalable tools for extended capabilities.</li>\n<li><strong>Community and Ecosystem (★★★★★):</strong> A veteran library with vast resources and tutorials ensures comprehensive support.</li>\n<li><strong>Learning Curve (★★★★):</strong> Accessible for beginners, though mastering advanced features takes effort.</li>\n</ul>\n<p><strong>Strengths:</strong> Matplotlib’s extensive customization options allow it to cater to diverse visualization needs, from simple plots to publication-grade graphics. Its compatibility with libraries like NumPy ensures seamless data integration, while the active community provides extensive tutorials and third-party tools. Despite being a veteran library, Matplotlib remains relevant by adapting to modern visualization demands.</p>\n<p><strong>Best For:</strong> Creating publication-quality figures, animating time-series data, developing exploratory charts, and embedding visualizations into data-driven applications.</p>\n<p><strong>Used by:</strong> NASA uses Matplotlib to plot and visualize space mission data, while CERN relies on it for visualizing complex results from particle physics experiments.</p>\n<h2 id=\"how-to-pick-the-right-data-science-tool\">How to Pick the Right Data Science Tool?</h2>\n<p>Choosing the right data science tool can be a daunting task given the vast array of options available. The best tool for your project will depend on several factors, which can be broadly categorized into the evaluation criteria and the context of your specific project.</p>\n<h3 id=\"importance-of-evaluation-criteria\">Importance of Evaluation Criteria</h3>\n<ol>\n<li><strong>Performance</strong>: This determines how well the tool handles large and complex datasets. Tools that offer fast computation, reliable processing, and efficient use of resources are ideal for high-performance environments.</li>\n<li><strong>Scalability</strong>: As data grows, the ability to maintain consistent performance is critical. Tools that scale across big data frameworks or distributed systems ensure longevity and adaptability.</li>\n<li><strong>Community and Ecosystem</strong>: A strong community provides valuable resources such as tutorials, documentation, and support. An extensive ecosystem ensures compatibility with other tools and libraries, making integration seamless.</li>\n<li><strong>Learning Curve</strong>: A tool’s usability can make or break its adoption. Tools with intuitive interfaces and comprehensive documentation enable faster onboarding for teams with diverse expertise.</li>\n</ol>\n<h3 id=\"considering-project-context\">Considering Project Context</h3>\n<p>While evaluation criteria provide a standardized way to compare tools, the context of your project ultimately determines the best fit. Key considerations include:</p>\n<p>Tech Stack: The tools should integrate smoothly with your existing technologies and workflows.</p>\n<p>Team Expertise: The skill levels and experience of your team play a significant role in adoption. A tool with a steep learning curve may not be ideal for a team of beginners.</p>\n<p>Project Deadlines: Time constraints can affect the choice of tools. A tool with extensive setup requirements may not suit a project with tight deadlines.</p>\n<p>Data Complexity and Size: The nature and volume of your data should align with the tool’s capabilities.</p>\n<p>By balancing these evaluation criteria with the unique needs of your project, you can ensure that the chosen tool maximizes efficiency and effectiveness while minimizing challenges.</p>\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n<p>Data science is an exciting and ever-evolving field, and the tools we’ve explored here represent the state-of-the-art of innovation for 2025. Each tool has its own strengths, from high performance and scalability to user-friendly interfaces and robust community support. Whether you’re just starting out in data science or managing complex, large-scale projects, there’s a tool out there that’s just right for you.</p>\n<p>However, choosing that tool isn’t just about star ratings or feature lists—it’s about finding what works best for your specific context.</p>\n<p>And remember, data science is as much about the journey as it is about the results. Exploring new tools, learning from community resources, and iterating on your processes will make you a better data scientist and help your projects thrive.</p>\n<p>Check out our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data scientist roadmap</a> to get a full view of your potential journey ahead!</p>";

				const frontmatter$1v = {"title":"Data Science Tools: Our Top 11 Recommendations for @currentYear@","description":"Master your data science projects with our top 11 tools for 2025! Discover the best platforms for data analysis, visualization, and machine learning.","authorId":"fernando","excludedBySlug":"/ai-data-scientist/tools","seo":{"title":"Data Science Tools: Our Top 11 Recommendations for @currentYear@","description":"Master your data science projects with our top 11 tools for 2025! Discover the best platforms for data analysis, visualization, and machine learning.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-tools-1a9w1.jpg"},"isNew":false,"type":"textual","date":"2025-01-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1v = "/workspace/src/data/guides/ai-data-scientist-tools.md";
				const url$1v = undefined;
				function rawContent$1v() {
					return "   \n                                                                         \n                                                                                                                                                                    \n                  \n                                          \n    \n                                                                           \n                                                                                                                                                                      \n                                                                            \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Top data science tools](https://assets.roadmap.sh/guest/data-science-tools-1a9w1.jpg)\n\nIn case you haven't noticed, the data science industry is constantly evolving, potentially even faster than the web industry (which says a lot\\!).\n\nAnd 2025 is shaping up to be another transformative year for tools and technologies. Whether you're exploring machine learning tools, predictive modeling, data management, or data visualization tools, there's an incredible array of software to enable [data scientists](https://roadmap.sh/ai-data-scientist) to analyze data efficiently, manage data effectively, and communicate insights. \n\nIn this article, we dive into the essential data science tools you need to know for 2025, complete with ratings and expert picks to help you navigate the options.\n\n## What is Data Science?\n\nData science is an interdisciplinary field that combines mathematics, statistics, computer science, and domain expertise to extract meaningful insights from data. It involves collecting, cleaning, and analyzing large datasets to uncover patterns, trends, and actionable information. At its core, data science aims to solve complex problems through data-driven decision-making, using techniques such as machine learning, predictive modeling, and data visualization.\n\nThe data science process typically involves:\n\n* **Data Collection**: Gathering data from various sources, such as databases, APIs, or real-time sensors.  \n* **Data Preparation**: Cleaning and transforming raw data into a usable format for analysis.  \n* **Exploratory Data Analysis (EDA):** Identifying trends, correlations, and outliers within the dataset.  \n* **Modeling**: Using algorithms and statistical methods to make predictions or classify data.  \n* **Interpretation and Communication**: Visualizing results and presenting insights to stakeholders in an understandable manner.\n\nData science plays a key role in various industries, including healthcare, finance, marketing, and technology, driving innovation and efficiency by leveraging the power of data.\n\n## Criteria for Ratings\n\nWe rated each of the best data science tools on a 5-star scale based on:\n\n* **Performance:** How efficiently the tool handles large and complex datasets. This includes speed, resource optimization, and reliability during computation.  \n* **Scalability:** The ability to scale across big data and multiple datasets. Tools were evaluated on their capability to maintain performance as data sizes grow.  \n* **Community and Ecosystem:** Availability of resources, support, and integrations. Tools with strong community support and extensive libraries received higher ratings.  \n* **Learning Curve:** Ease of adoption for new and experienced users. Tools with clear documentation and intuitive interfaces were rated more favorably.\n\n## Expert Recommendations![Expert Recommendations](https://assets.roadmap.sh/guest/data-science-expert-advice-4lanb.png)\n\nPicking the best tools for your project is never easy, and it's hard to make an objective decision if you don't have experience with any of them.\n\nSo to make your life a bit easier, here's my personal recommendation, you can take it or leave it, it's up to you, but at least you'll know where to start:\n\nWhile each tool has its strengths, my favorite pick among them is **TensorFlow**. Its perfect scores in performance, scalability, and community support (you'll see them in a second in the table below), combined with its relatively moderate learning curve, make it an amazing choice for building advanced neural networks and developing predictive analytics systems.  You can do so much with it, like image recognition, natural language processing, and recommendation systems cementing its position as the leading choice (and my personal choice) in 2025\\.\n\nNow, to help you understand and compare the rest of the tools from this guide, the table below summarizes their grades across key criteria: performance, scalability, community support, and learning curve. It also highlights the primary use cases for these tools.\n\n| Tool | Performance | Scalability | Community | Learning Curve | Best For |\n| ----- | ----- | ----- | ----- | ----- | ----- |\n| TensorFlow | 5 | 5 | 5 | 4 | Advanced neural networks, predictive analytics |\n| Apache Spark | 5 | 5 | 5 | 3 | Distributed analytics, real-time streaming |\n| Jupyter Notebooks | 4 | 4 | 5 | 5 | Exploratory analysis, education |\n| Julia | 4 | 4 | 4 | 3 | Simulations, statistical modeling |\n| NumPy | 4 | 3 | 5 | 5 | Numerical arrays, preprocessing workflows |\n| Polars | 5 | 4 | 4 | 4 | Data preprocessing, ETL acceleration |\n| Apache Arrow | 5 | 5 | 4 | 3 | Interoperability, streaming analytics |\n| Streamlit | 4 | 4 | 5 | 5 | Interactive dashboards, rapid deployment |\n| DuckDB | 4 | 4 | 4 | 5 | SQL queries, lightweight warehousing |\n| dbt | 4 | 4 | 5 | 4 | SQL transformations, pipeline automation |\n| Matplotlib | 4 | 3 | 5 | 4 | Advanced visualizations, publication graphics |\n\nLet's now deep dive into each of these tools to understand in more detail, why they're in this guide.\n\n## Data science tools for ML & Deep learning tools\n\n### TensorFlow\n\n![TensorFlow](https://assets.roadmap.sh/guest/data-science-tools-tensorflow-exdxy.png)\n\nTensorFlow remains one of the top data science tools for deep learning models and machine learning applications. Developed by Google, this open-source platform excels in building neural networks, predictive analytics, and natural language processing models. \n\n* **Performance (★★★★★):** TensorFlow achieves top marks here due to its use of GPU and TPU acceleration, which allows seamless handling of extremely large models. Its ability to train complex networks without compromising on speed solidifies its high-performance ranking.  \n* **Scalability (★★★★★):** TensorFlow scales from single devices to distributed systems effortlessly, enabling use in both prototyping and full-scale production.  \n* **Community and Ecosystem (★★★★★):** With an active developer community and comprehensive support, TensorFlow offers unmatched resources and third-party integrations.  \n* **Learning Curve (★★★★):** While it offers immense power, mastering TensorFlow's advanced features requires time, making it slightly less accessible for beginners compared to simpler frameworks.\n\n**Strengths:** TensorFlow is a powerhouse for performance and scalability in the world of machine learning. Its GPU and TPU acceleration allow users to train and deploy complex models faster than many competitors. The massive community ensures constant innovation, with frequent updates, robust third-party integrations, and an ever-growing library of resources. The inclusion of TensorFlow Lite and TensorFlow.js makes it versatile for both edge computing and web applications.\n\n**Best For:** Developing advanced neural networks for image recognition, natural language processing pipelines, building recommendation systems, and creating robust predictive analytics tools for a wide array of industries.\n\n**Used by:** Google itself uses TensorFlow extensively for tasks like search algorithms, image recognition, and natural language processing. Similarly, Amazon employs TensorFlow to power recommendation systems and optimize demand forecasting.\n\n## Data science tools for big data processing\n\n### Apache Spark\n\n![Apache Spark](https://assets.roadmap.sh/guest/data-science-tools-spark-tjoqm.png)\n\nAn Apache Software Foundation project, Apache Spark is a powerhouse for big data processing, enabling data scientists to perform batch processing and streaming data analysis. It supports a wide range of programming languages, including Python, Scala, and Java, and integrates well with other big data tools like Hadoop and Kafka.\n\n* **Performance (★★★★★):** Spark excels in processing speed thanks to its in-memory computing capabilities, making it a leader in real-time and batch data processing.  \n* **Scalability (★★★★★):** Designed for distributed systems, Spark handles petabytes of data with ease, maintaining efficiency across clusters.  \n* **Community and Ecosystem (★★★★★):** Spark's widespread adoption and integration with tools like Kafka and Hadoop make it a staple for big data workflows.  \n* **Learning Curve (★★★):** Beginners may find distributed computing concepts challenging, though excellent documentation helps mitigate this.\n\n**Strengths:** Spark stands out for its lightning-fast processing speed and flexibility. Its in-memory computation ensures minimal delays during large-scale batch or streaming tasks. The compatibility with multiple programming languages and big data tools enhances its integration into diverse tech stacks.\n\n**Best For:** Executing large-scale data analytics in distributed systems, real-time stream processing for IoT applications, running ETL pipelines, and data mining for insights in industries like finance and healthcare.\n\n**Used by:** Apache Spark has been adopted by companies like Uber and Shopify. Uber uses Spark for real-time analytics and stream processing, enabling efficient ride-sharing logistics. Shopify relies on Spark to process large volumes of e-commerce data, supporting advanced analytics and business intelligence workflows.\n\n## Exploratory & Collaborative tools\n\n### Jupyter Notebooks\n\n![Jupyter Notebooks](https://assets.roadmap.sh/guest/data-science-tools-jupyter-cgfv4.png)\n\nJupyter Notebooks are an essential data science tool for creating interactive and shareable documents that combine code, visualizations, and narrative text. With support for over 40 programming languages, including Python, R, and Julia, Jupyter facilitates collaboration and exploratory data analysis. \n\n* **Performance (★★★★):** Jupyter is designed for interactivity rather than computational intensity, which makes it highly effective for small to medium-scale projects but less suitable for high-performance tasks.  \n* **Scalability (★★★★):** While Jupyter itself isn't designed for massive datasets, its compatibility with scalable backends like Apache Spark ensures it remains relevant for larger projects.  \n* **Community and Ecosystem (★★★★★):** Jupyter's open-source nature and extensive community-driven extensions make it a powerhouse for versatility and support.  \n* **Learning Curve (★★★★★):** Its simple and intuitive interface makes it one of the most accessible tools for beginners and professionals alike\n\n**Strengths:** Jupyter's flexibility and ease of use make it indispensable for exploratory analysis and education. Its ability to integrate code, output, and explanatory text in a single interface fosters collaboration and transparency. \n\n**Best For:** Creating educational tutorials, performing exploratory data analysis, prototyping machine learning models, and sharing reports that integrate code with rich visualizations.\n\n**Used by:** Jupyter Notebooks have become a staple for exploratory analysis and collaboration. Delivery Hero uses Jupyter to enhance delivery logistics through data analysis and visualization, while Intuit leverages the tool to facilitate financial data analysis in collaborative projects.\n\n## Data science tools for statistical computing\n\n### Julia\n\n![Julia](https://assets.roadmap.sh/guest/data-science-tools-julia-ctqlw.png)\n\nJulia is an emerging open-source programming language tailored for statistical computing and data manipulation. It combines the performance of low-level languages like C with the simplicity of high-level languages like Python. Julia's strengths lie in its speed for numerical computation and its dynamic type system, making it highly suitable for big data applications and machine learning models. The Julia ecosystem is rapidly growing, offering libraries for data visualization, optimization, and deep learning.\n\n* **Performance (★★★★):** Julia's design prioritizes speed for numerical and statistical computing, placing it ahead of many high-level languages in terms of raw performance.  \n* **Scalability (★★★★):** With built-in support for parallel computing, Julia scales well for tasks requiring significant computational power, although its ecosystem is still catching up to Python's.  \n* **Community and Ecosystem (★★★★):** Julia's growing community and the increasing availability of libraries make it a solid choice, though it's not yet as robust as more established ecosystems.  \n* **Learning Curve (★★★):** Julia's unique syntax, while designed for simplicity, presents a learning barrier for those transitioning from other languages like Python or R.\n\n**Strengths:** Julia's ability to execute complex numerical tasks at high speed positions it as a top contender in scientific computing. Its built-in support for parallelism allows it to scale efficiently, while its clear syntax lowers barriers for domain experts transitioning from MATLAB or R.\n\n**Best For:** Performing advanced statistical analysis, numerical optimization, developing simulations in physics and finance, and implementing machine learning models for high-performance environments.\n\n**Used by:** The high-performance capabilities of Julia make it a favorite for statistical computing in industries like finance. For example, Capital One uses Julia for risk analytics and modeling, and Aviva employs it to improve actuarial computations and financial modeling processes.\n\n### NumPy\n\n![NumPy](https://assets.roadmap.sh/guest/data-science-tools-numpy-nrbc7.png)\n\nA foundational library in the Python ecosystem, NumPy provides powerful tools for managing data structures, numerical computations, and statistical analysis. It is widely used for data preparation, enabling operations on large multi-dimensional arrays and matrices.\n\n* **Performance (★★★★):** NumPy's optimized C-based implementation allows it to handle numerical operations with high efficiency, but it relies on integration with other tools for larger or distributed workloads.  \n* **Scalability (★★★):** As a single-machine library, NumPy is best suited for datasets that fit in memory, though it integrates well with scalable tools like Dask for extended use.  \n* **Community and Ecosystem (★★★★★):** NumPy's foundational role in Python's data science ecosystem means extensive resources and near-universal compatibility.  \n* **Learning Curve (★★★★★):** Its straightforward API and clear documentation make NumPy an essential and approachable tool for data preparation and numerical computing.\n\n**Strengths:** NumPy's versatility and efficiency underpin its widespread adoption in the Python ecosystem. Its array manipulation capabilities—from slicing and reshaping to broadcasting—make it a cornerstone for numerical operations.\n\n**Best For:** Handling numerical arrays for preprocessing, matrix algebra in physics and engineering, foundational operations for machine learning pipelines, and performing basic statistical analysis efficiently.\n\n**Used by:** NumPy serves as the foundation for many Python-based workflows. Spotify uses NumPy for numerical computations within its recommendation algorithms, and Airbnb employs it to optimize pricing strategies and improve customer experience through data analysis.\n\n## **Data science tools for data manipulation & preprocessing tools**\n\n### Polars\n\n![Polars](https://assets.roadmap.sh/guest/data-science-tools-polaris-5u7yt.png)\n\nPolars is a lightning-fast data processing & manipulation library that enables data scientists to handle complex datasets. Unlike traditional libraries, Polars is written in Rust, offering exceptional performance and low memory usage. Its DataFrame API is intuitive and supports multi-threaded operations, making it a strong choice for large-scale data preprocessing and manipulation tasks.\n\n* **Performance** (★★★★★): Polars' Rust-based architecture ensures exceptional speed and memory efficiency, positioning it as a leading tool for high-performance data manipulation.  \n* **Scalability** (★★★★): While optimized for larger datasets, its scalability is limited to environments supported by multi-threading rather than distributed systems.  \n* **Community and Ecosystem** (★★★★): Though its ecosystem is still growing, Polars' strong integration with Python and intuitive API provide a solid foundation.  \n* **Learning Curve** (★★★★): With a user-friendly interface inspired by Pandas, Polars is easy to adopt for those familiar with similar tools, though Rust concepts may pose challenges for some.\n\n**Strengths:** Polars stands out due to its unparalleled speed, derived from its Rust-based architecture. Its ability to process data in parallel ensures efficiency even with large datasets, reducing bottlenecks in ETL pipelines. The intuitive API and support for lazy evaluation make it both user-friendly and powerful.\n\n**Best For:** Processing complex datasets for data cleaning, reshaping large-scale tables, and accelerating ETL pipelines in environments requiring high-speed operations.\n\n**Used by:** Polars is gaining traction for its exceptional speed in data preprocessing and ETL workflows. Zillow uses Polars for efficient data preprocessing in real estate market analysis, while Stripe adopts it to accelerate ETL processes for handling financial transaction data.\n\n### Apache Arrow\n\n![Apache Arrow](https://assets.roadmap.sh/guest/data-science-tools-apache-arrow-6d6mg.png)\n\nApache Arrow is revolutionizing how data is stored and transferred for big data applications. Its in-memory columnar format accelerates data processing and integration between multiple datasets and tools. Apache Arrow also acts as a bridge between various programming languages and frameworks, improving the interoperability of data science workflows.\n\n* **Performance (★★★★★):** Apache Arrow's in-memory columnar format delivers unmatched speed for data processing and transfer between tools.  \n* **Scalability (★★★★★):** Its design supports seamless scalability across distributed systems, making it ideal for large-scale workflows.  \n* **Community and Ecosystem (★★★★):** Arrow's adoption by major data tools ensures growing support, though its standalone ecosystem remains limited compared to broader frameworks.  \n* **Learning Curve (★★★):** Understanding columnar data formats and workflows may require extra effort for beginners but pays off in advanced scenarios.\n\n**Strengths:** Apache Arrow's columnar format provides a significant boost in performance and compatibility. Its seamless interoperability between tools such as Pandas, Spark, and TensorFlow eliminates data transfer inefficiencies. The library also supports multi-language workflows, making it indispensable for teams leveraging diverse tech stacks.\n\n**Best For:** Ensuring efficient interoperability between data tools, accelerating data lake operations, and supporting real-time data analytics in distributed systems.\n\n**Used by:** Google BigQuery integrates Arrow to enhance data interchange and query performance, and AWS Athena relies on Arrow's in-memory format to facilitate faster query responses and real-time analytics.\n\n## Data science tools for application development\n\n### Streamlit\n\n![Streamlit](https://assets.roadmap.sh/guest/data-science-tools-streamlit-iq0sl.png)\n\nStreamlit is an open-source framework for creating custom data science applications and dashboards. It simplifies the process of building interactive apps by using Python scripts, making it accessible even for those with minimal web development experience. Streamlit's API enables rapid prototyping of machine learning tools and visualizations.\n\n* **Performance (★★★★):** Optimized for real-time application development, Streamlit is fast for small to medium-scale projects.  \n* **Scalability (★★★★):** Streamlit scales reasonably well but isn't designed for massive applications.  \n* **Community and Ecosystem (★★★★★):** Its active community and constant updates ensure excellent support for users.  \n* **Learning Curve (★★★★★):** With a simple API and Python-centric design, Streamlit is easy for both developers and non-developers.\n\n**Strengths:** Streamlit's simplicity and speed make it ideal for crafting interactive dashboards with minimal effort. Its integration with popular Python libraries like Pandas and Matplotlib allows users to transform raw data into meaningful insights quickly. \n\n**Best For:** Creating interactive dashboards for sharing machine learning predictions, visualizing complex datasets with minimal development effort, and rapidly deploying prototypes for stakeholder feedback.\n\n**Used by:** Streamlit simplifies the creation of interactive dashboards and data applications. Companies like Snowflake use Streamlit to build client-facing data apps, while Octopus Energy employs it to create dashboards that visualize energy consumption data for their customers.\n\n### DuckDB\n\n![DuckDB](https://assets.roadmap.sh/guest/data-science-tools-duckdb-iv557.png)\n\nDuckDB is an open-source analytics database that simplifies structured queries on raw data. Designed to operate within analytical workflows, it supports SQL-based queries without the need for a dedicated database server. Its efficient storage model makes it ideal for querying structured and unstructured data in ad hoc analysis scenarios, making it highly favored for lightweight data warehousing tasks.\n\n* **Performance (★★★★):** DuckDB delivers impressive speeds for ad hoc analytics, optimized for single-machine workflows.  \n* **Scalability (★★★★):** Suitable for lightweight to medium-scale tasks, DuckDB integrates well into Python and R environments.  \n* **Community and Ecosystem (★★★★):** Growing adoption and strong SQL compatibility make it increasingly popular.  \n* **Learning Curve (★★★★★):** Its SQL-based interface ensures a smooth learning experience for most users.\n\n**Strengths:** DuckDB's efficiency and ease of use make it a go-to tool for analysts. Its ability to operate without infrastructure overhead allows rapid deployment, and its SQL compatibility ensures accessibility for non-programmers.\n\n**Best For:** Running interactive SQL queries in development workflows, performing data warehousing tasks without infrastructure overhead, and integrating ad hoc analyses directly into Python-based projects.\n\n**Used by:**  DuckDB's lightweight and efficient SQL analytics have found applications in various industries. MotherDuck integrates DuckDB to enable fast, in-process analytical queries, and SeMI Technologies leverages DuckDB within its Weaviate platform for high-speed vector search analytics.\n\n### dbt (Data Build Tool)\n\n![dbt](https://assets.roadmap.sh/guest/data-science-tools-dbt-cozps.png)\n\ndbt is a development framework for transforming data in warehouses. It allows analysts and engineers to write modular SQL-based transformations and manage data workflows efficiently. With its focus on collaboration and version control, dbt has become an essential tool for teams working on data pipelines.\n\n* **Performance (★★★★):** dbt's modular approach allows for efficient and scalable SQL transformations.  \n* **Scalability (★★★★):** Designed for modern data warehouses, dbt handles increasing workloads effectively.  \n* **Community and Ecosystem (★★★★★):** Its thriving community and vendor support make it indispensable for data pipeline management.  \n* **Learning Curve (★★★★):** Familiarity with SQL simplifies adoption, though pipeline concepts may require additional learning.\n\n**Strengths:** dbt's modularity and focus on collaboration streamline complex SQL transformations. Its integration with version control systems ensures reproducibility, while the ability to test and document transformations within the tool fosters better collaboration among data teams. \n\n**Best For:** Automating SQL transformations for analytics, managing data warehouse workflows with version control, and creating reusable and modular pipelines for team collaboration.\n\n**Used by:** dbt has become essential for transforming and managing data workflows. JetBlue uses dbt to optimize their data warehouse for improved analytics, and GitLab adopts it to transform raw data into actionable insights, streamlining their analytics operations.\n\n## Data science tools for data visualization\n\n### Matplotlib\n\n![Matplotlib](https://assets.roadmap.sh/guest/data-science-tools-matplotlib-b8lpy.png)\n\nMatplotlib is a widely used data visualization library in Python that allows users to create static, animated, and interactive visualizations. Known for its flexibility, Matplotlib supports detailed customization, making it suitable for complex visualizations required in data science projects.\n\n* **Performance (★★★★):** Matplotlib handles visualization tasks efficiently for small to medium datasets but may lag with complex or large-scale rendering.  \n* **Scalability (★★★):** Designed for single-threaded use, it integrates with scalable tools for extended capabilities.  \n* **Community and Ecosystem (★★★★★):** A veteran library with vast resources and tutorials ensures comprehensive support.  \n* **Learning Curve (★★★★):** Accessible for beginners, though mastering advanced features takes effort.\n\n**Strengths:** Matplotlib's extensive customization options allow it to cater to diverse visualization needs, from simple plots to publication-grade graphics. Its compatibility with libraries like NumPy ensures seamless data integration, while the active community provides extensive tutorials and third-party tools. Despite being a veteran library, Matplotlib remains relevant by adapting to modern visualization demands.\n\n**Best For:** Creating publication-quality figures, animating time-series data, developing exploratory charts, and embedding visualizations into data-driven applications.\n\n**Used by:** NASA uses Matplotlib to plot and visualize space mission data, while CERN relies on it for visualizing complex results from particle physics experiments.\n\n## How to Pick the Right Data Science Tool?\n\nChoosing the right data science tool can be a daunting task given the vast array of options available. The best tool for your project will depend on several factors, which can be broadly categorized into the evaluation criteria and the context of your specific project.\n\n### Importance of Evaluation Criteria\n\n1. **Performance**: This determines how well the tool handles large and complex datasets. Tools that offer fast computation, reliable processing, and efficient use of resources are ideal for high-performance environments.  \n2. **Scalability**: As data grows, the ability to maintain consistent performance is critical. Tools that scale across big data frameworks or distributed systems ensure longevity and adaptability.  \n3. **Community and Ecosystem**: A strong community provides valuable resources such as tutorials, documentation, and support. An extensive ecosystem ensures compatibility with other tools and libraries, making integration seamless.  \n4. **Learning Curve**: A tool's usability can make or break its adoption. Tools with intuitive interfaces and comprehensive documentation enable faster onboarding for teams with diverse expertise.\n\n### Considering Project Context\n\nWhile evaluation criteria provide a standardized way to compare tools, the context of your project ultimately determines the best fit. Key considerations include:\n\nTech Stack: The tools should integrate smoothly with your existing technologies and workflows.\n\nTeam Expertise: The skill levels and experience of your team play a significant role in adoption. A tool with a steep learning curve may not be ideal for a team of beginners.\n\nProject Deadlines: Time constraints can affect the choice of tools. A tool with extensive setup requirements may not suit a project with tight deadlines.\n\nData Complexity and Size: The nature and volume of your data should align with the tool's capabilities.\n\nBy balancing these evaluation criteria with the unique needs of your project, you can ensure that the chosen tool maximizes efficiency and effectiveness while minimizing challenges.\n\n## Final Thoughts\n\nData science is an exciting and ever-evolving field, and the tools we've explored here represent the state-of-the-art of innovation for 2025\\. Each tool has its own strengths, from high performance and scalability to user-friendly interfaces and robust community support. Whether you're just starting out in data science or managing complex, large-scale projects, there's a tool out there that's just right for you.\n\nHowever, choosing that tool isn't just about star ratings or feature lists—it's about finding what works best for your specific context. \n\nAnd remember, data science is as much about the journey as it is about the results. Exploring new tools, learning from community resources, and iterating on your processes will make you a better data scientist and help your projects thrive.\n\nCheck out our [data scientist roadmap](https://roadmap.sh/ai-data-scientist) to get a full view of your potential journey ahead\\!";
				}
				async function compiledContent$1v() {
					return await html$1v();
				}
				function getHeadings$1v() {
					return [{"depth":2,"slug":"what-is-data-science","text":"What is Data Science?"},{"depth":2,"slug":"criteria-for-ratings","text":"Criteria for Ratings"},{"depth":2,"slug":"expert-recommendations","text":"Expert Recommendations"},{"depth":2,"slug":"data-science-tools-for-ml--deep-learning-tools","text":"Data science tools for ML & Deep learning tools"},{"depth":3,"slug":"tensorflow","text":"TensorFlow"},{"depth":2,"slug":"data-science-tools-for-big-data-processing","text":"Data science tools for big data processing"},{"depth":3,"slug":"apache-spark","text":"Apache Spark"},{"depth":2,"slug":"exploratory--collaborative-tools","text":"Exploratory & Collaborative tools"},{"depth":3,"slug":"jupyter-notebooks","text":"Jupyter Notebooks"},{"depth":2,"slug":"data-science-tools-for-statistical-computing","text":"Data science tools for statistical computing"},{"depth":3,"slug":"julia","text":"Julia"},{"depth":3,"slug":"numpy","text":"NumPy"},{"depth":2,"slug":"data-science-tools-for-data-manipulation--preprocessing-tools","text":"Data science tools for data manipulation & preprocessing tools"},{"depth":3,"slug":"polars","text":"Polars"},{"depth":3,"slug":"apache-arrow","text":"Apache Arrow"},{"depth":2,"slug":"data-science-tools-for-application-development","text":"Data science tools for application development"},{"depth":3,"slug":"streamlit","text":"Streamlit"},{"depth":3,"slug":"duckdb","text":"DuckDB"},{"depth":3,"slug":"dbt-data-build-tool","text":"dbt (Data Build Tool)"},{"depth":2,"slug":"data-science-tools-for-data-visualization","text":"Data science tools for data visualization"},{"depth":3,"slug":"matplotlib","text":"Matplotlib"},{"depth":2,"slug":"how-to-pick-the-right-data-science-tool","text":"How to Pick the Right Data Science Tool?"},{"depth":3,"slug":"importance-of-evaluation-criteria","text":"Importance of Evaluation Criteria"},{"depth":3,"slug":"considering-project-context","text":"Considering Project Context"},{"depth":2,"slug":"final-thoughts","text":"Final Thoughts"}];
				}

				const Content$1v = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1v;
					content.file = file$1v;
					content.url = url$1v;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1v())}`;
				});

const __vite_glob_0_3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1v,
	compiledContent: compiledContent$1v,
	default: Content$1v,
	file: file$1v,
	frontmatter: frontmatter$1v,
	getHeadings: getHeadings$1v,
	rawContent: rawContent$1v,
	url: url$1v
}, Symbol.toStringTag, { value: 'Module' }));

const html$1u = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-artificial-intelligence-w7gl5.jpg\" alt=\"Data Science vs AI: What are the differences?\"></p>\n<p>Choosing between specializing in data science and AI comes down to what you like and the problems you want to solve. If you enjoy analyzing data, uncovering insights, and making data-driven decisions, data science might be for you. But artificial intelligence is the way to go if you’re into creating systems that can learn, adapt, and make decisions on their own.</p>\n<p>When I first got into tech, I wasn’t sure which path to take. I spent late nights researching, feeling both excited and overwhelmed. Data science and AI seemed so similar that telling them apart felt impossible, especially since many jobs required skills in both. But as I dug deeper, I realized they have distinct focuses despite their overlap.</p>\n<p>Data science focuses on extracting meaningful insights from data. As a data scientist, you’ll be responsible for designing datasets, building models to analyze data, identifying patterns, and solving complex problems to help businesses make better decisions. You’ll do this using statistical analysis and several machine learning techniques like supervised and unsupervised learning.</p>\n<p>In contrast, artificial intelligence is about developing intelligent systems that can perform tasks that typically require human intelligence. These tasks include pattern recognition, predictive analysis, and language translation. You’ll design algorithms to learn and solve problems without constant human intervention.</p>\n<p>If you don’t know much about data science and AI, don’t worry about it. Check out our beginner’s guide on <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> and <a href=\"https://roadmap.sh/ai-engineer\" target=\"_blank\">AI</a> to get a good overview of both fields. In this guide, I’ll show you what each field is about, the skills you need, and the opportunities they offer. By the end, you’ll know which career path suits you best based on your interests, skills, and goals.</p>\n<h2 id=\"data-science-vs-ai-what-are-the-key-differences\">Data science vs. AI: What are the key differences?</h2>\n<p>When discussing data science and AI, many people often mix them up. While they share similarities, their purposes, tools, and techniques differ. The table below summarizes the key differences between data science and AI:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Characteristics</th><th>Data science</th><th>Artificial intelligence</th></tr></thead><tbody><tr><td>Primary focus</td><td>Extracting insights from data</td><td>Building intelligent systems that mimic human intelligence to perform tasks</td></tr><tr><td>Responsibilities</td><td>Data collection, data cleaning, data analysis, data modeling, data visualization, and building predictive models</td><td>Building and training machine learning models, machine learning algorithms, and artificial intelligence applications</td></tr><tr><td>Tools</td><td>Python, R, SQL, Pandas, Hadoop, TensorFlow, Tableau</td><td>Java, Python, PyTorch, OpenCV, spaCy, GPUs, AWS and Keras</td></tr><tr><td>Educational path</td><td>Bachelor’s in computer science, statistics, or mathematics; master’s in data science</td><td>Bachelor’s in computer science, mathematics, or engineering; master’s in AI or related field</td></tr><tr><td>Career paths</td><td>Data analyst, data scientist, business analyst, machine learning engineer</td><td>AI engineer, machine learning engineer, AI product manager, NLP enginner, AI research scientist</td></tr><tr><td>Applications</td><td>Predictive analytics, fraud detection, customer segmentation, healthcare analytics and more</td><td>Self-driving cars, chatbots, robotics, predictive maintenance, medical imaging analysis and more</td></tr></tbody></table>\n<h2 id=\"primary-focus\">Primary focus</h2>\n<p>One big difference between data science and AI is what they focus on the most. Data science focuses on uncovering insights and solving problems through data analytics. It uses structured data like customer databases to identify patterns and solve complex problems. You’ll use advanced tools and machine learning techniques like computer vision to work with unstructured data like videos and images.</p>\n<p>If you choose data science, you’ll work on extracting valuable insights from data. For example, a data scientist working in finance will use anomaly detection to analyze transactional data. This helps with fraud detection and risk assessment, e.g., unusual login attempts.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/primary-focus-between-data-science-and-ai-l4fv0.png\" alt=\"Data science vs. artificial intelligence: Primary focus\"></p>\n<p>In contrast, if you choose artificial intelligence, you’ll focus on building systems that mimic human intelligence, like learning, reasoning, and solving problems. It uses structured and unstructured data to enable machines to perform tasks like pattern recognition in images and speech and natural language processing. For example, AI virtual assistants like Siri can listen and reply to what you’re saying. They use natural language processing models to recognize and understand your voice (human language). It makes it easy for you to ask and get answers to questions just by talking.</p>\n<h2 id=\"daily-responsibilities\">Daily responsibilities</h2>\n<p>Data scientists and AI engineers have different responsibilities that show their focus areas. As a data scientist, your daily duties will include:</p>\n<ul>\n<li><strong>Data collection</strong>: This is often the first thing you do when extracting insights from data. Your job will be to collect large volumes of data from several sources, such as databases. For example, a healthcare data scientist will collect and analyze patient data to create models to help in diagnosing diseases. It’ll make it easier to predict patient outcomes and make treatment plans better.</li>\n<li><strong>Data cleaning</strong>: After you collect all the data, the next step is to clean the data. Doing this means removing errors from the raw data to prepare it for data analysis.</li>\n<li><strong>Data analysis</strong>: After cleaning, you’ll analyze data to identify patterns and trends. You’ll do this using statistical analysis and machine learning techniques like clustering.</li>\n<li><strong>Building models</strong>: You’ll create predictive models to make future predictions based on historical data. A company like Netflix, for example, uses predictive models to suggest TV shows and movies to you. The data scientist will analyze your past data to see what shows you’ve watched, how you rated them, and more. Then, they will use this data to build a model that suggests similar shows you’ll like.</li>\n<li><strong>Data visualization</strong>: Visualizing data is about presenting complex data in a visual format. As a data scientist, you’ll use data visualization tools like Tableau and Power BI to present data in a way that every team member will understand.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/responsibilities-of-a-data-scientist-and-ai-engineer-wzlzh.png\" alt=\"Data science vs. artificial intelligence: Job responsibilities\"></p>\n<p>On the flip side, AI involves various responsibilities like designing, training, and testing AI models. As an AI engineer, your daily responsibilities will include:</p>\n<ul>\n<li><strong>Data preparation</strong>: You’ll collect, clean, analyze, and work with large amounts of data to train and test AI models (i.e., machine learning models). Yes, as an AI engineer, you’ll also analyze data, although it is the primary duty of the data scientists. Doing this lets you check if the data is good for the AI model and spot any problems that could mess up the training.</li>\n<li><strong>Model training</strong>: You’ll be responsible for developing algorithms that enable machines to learn from data using machine learning techniques like computer vision and neural networks. For example, automotive industries use artificial intelligence to create self-driving cars. They use AI algorithms to analyze sensor data from cameras, radar, and lasers to see what’s around them.</li>\n<li><strong>Review models</strong>: You’ll test and make sure that the models provide reliable results. Imagine you’ve developed a model to identify diseases from analyzing medical images. You’ll use images the model hasn’t seen before to test its accuracy at spotting diseases. If it misses something, that’s your cue to tweak it until it gets better.</li>\n<li><strong>Implementation</strong>: Once you create a model, you need to make sure it works well with other systems. It’s like having a chatbot on a website to handle customer inquiries, using a fraud detection system in a bank to analyze transactions, or incorporating GPS functionality in self-driving cars for navigation. Additionally, you’ll monitor and maintain its performance and update it when needed.</li>\n</ul>\n<h2 id=\"the-tools-youll-use\">The tools you’ll use</h2>\n<p>One important thing to consider when choosing between data science and AI is the tools you’ll use. In data science, you’ll work with programming languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, R, and <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> to extract insights and analyze data. You’ll use Python libraries like Pandas to manipulate data and NumPy to make math calculations.</p>\n<p>As a data scientist, you’ll also use big data technologies like Hadoop to work with large volumes of data. Machine learning libraries like TensorFlow will help you develop advanced machine learning models. Also, you’ll use data visualization tools like Tableau and Power BI when sharing your results.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/tools-for-data-science-and-artificial-intelligence-q6i4v.png\" alt=\"Data science vs. artificial intelligence: tools\"></p>\n<p>On the flip side, artificial intelligence needs more advanced tools to work its magic. You’ll use programming languages like <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a> and <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, like in data science, but you’ll focus on AI frameworks like PyTorch to train deep learning models, especially neural networks. These frameworks can do various machine learning tasks, such as supervised learning (e.g., image classification), unsupervised learning (e.g., anomaly detection), and reinforcement learning (e.g., game playing) when needed.</p>\n<p>Tools like OpenCV will help with computer vision tasks, and libraries like NLTK and spaCy will help with natural language processing. As an AI engineer, you’ll also work with specialized hardware like graphics processing units (GPUs) and tensor processing units (TPUs). These tools provide the computational power to train large neural networks well. Finally, you’ll work with cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a> and Google Cloud AI Platform to deploy and manage your AI models.</p>\n<h2 id=\"how-do-the-skills-you-need-differ\">How do the skills you need differ?</h2>\n<p>Now that you know the differences between data science and artificial intelligence, let’s look at the skills you need. As a data scientist, it’s important to build a solid understanding in the following areas:</p>\n<ul>\n<li>Proficient in programming skills like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> and <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> for data analysis and manipulation.</li>\n<li>Strong understanding of statistics and mathematics to analyze and interpret data.</li>\n<li>Good in data wrangling for cleaning and organizing datasets before analysis.</li>\n<li>Proficient in data mining to extract useful patterns and insights from large datasets.</li>\n<li>Strong data visualization techniques to present valuable insights through tools such as Matplotlib or Tableau.</li>\n<li>Basic understanding of machine learning principles and algorithms to apply predictive analytics and solve business problems.</li>\n<li>Good critical thinking skills to analyze data and provide solutions to business problems using data.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/important-skills-for-data-science-and-ai-sj2nh.png\" alt=\"Skills for data science and artificial intelligence\"></p>\n<p>In contrast, as an AI engineer, you’ll create complex AI systems using the following skills:</p>\n<ul>\n<li>In-depth knowledge of advanced machine learning concepts, including neural networks, to create models for tasks like image recognition or natural language processing.</li>\n<li>Proficiency in programming skills (<a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/c-plus-plus\" target=\"_blank\">C++</a>, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>) for creating complex algorithms.</li>\n<li>Understanding mathematics, e.g., linear algebra and calculus for algorithm development.</li>\n<li>Experience with frameworks like TensorFlow and PyTorch for building and deploying AI models.</li>\n<li>Knowledge of computer vision and natural language processing to create intelligent systems that understand and interact with data.</li>\n</ul>\n<h2 id=\"the-educational-pathway-to-data-science-and-artificial-intelligence-career\">The educational pathway to data science and artificial intelligence career</h2>\n<p>A very good educational foundation is necessary to start a career as a data scientist. The first step is getting your bachelor’s degree in computer science, data science, or artificial intelligence. These fields cover topics like algorithms, machine learning, and software development.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/educational-pathway-to-data-science-and-ai-careers-clcgu.png\" alt=\"Data science vs. artificial intelligence: Educational path\"></p>\n<p>On the other hand, artificial intelligence often requires higher educational qualifications, such as a bachelor’s, master’s, or Ph.D., due to its technically complex and research-oriented nature. You’ll first need a bachelor’s degree in computer science, data science, or artificial intelligence to start a career in this field. This will give you a good understanding of machine learning, mathematics, and statistics. You’ll go into detail on topics like algebra and calculus and learn languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> and <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>. Some AI engineers may pursue a master’s degree if they aim for senior or research positions, but it’s not always necessary.</p>\n<p>Also, you don’t always have to attend a university to learn. Some people who want to become data scientists and AI engineers go to boot camps, take online courses, or get certifications instead. Platforms like <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a> offer detailed <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> and <a href=\"https://roadmap.sh/ai-engineer\" target=\"_blank\">AI courses</a> to help you learn. The platforms are more flexible and focus on practical projects, so you can create a portfolio to showcase your skills.</p>\n<h2 id=\"which-field-offers-better-career-prospects\">Which field offers better career prospects?</h2>\n<p>Data science and artificial intelligence both look promising in terms of job opportunities. Both fields are in high demand, so there are plenty of job opportunities out there for you. However, artificial intelligence jobs usually pay better because they need more advanced skills and technical knowledge in machine learning and algorithm development.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/career-paths-and-industries-for-data-science-and-ai-i333u.png\" alt=\"Data science vs. artificial intelligence: career path\"></p>\n<p>Data science is a recognized field with many uses in industries like finance, healthcare, and marketing. If you’re interested in data science, you could work as a <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">data analyst</a>, business analyst, or data scientist. According to <a href=\"https://www.indeed.com/career/data-scientist/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for a data scientist in the United States (USA) across all industries is $125,495.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-salary-of-a-data-scientist-in-usa-vevcq.png\" alt=\"Average salary of a data scientist in USA\"></p>\n<p>On the other hand, artificial intelligence is in high demand in industries like robotics, automotive, and tech startups. If you’re interested in artificial intelligence, you can work as a machine learning or AI engineer. <a href=\"https://www.indeed.com/career/machine-learning-engineer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">According to Indeed</a>, engineers working in machine learning in the USA make an average of $162,735 annually.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-salary-of-an-engineer-in-machine-learning-ncqpb.png\" alt=\"Average salary of an engineer in machine learning\"></p>\n<p>While salary is important when choosing between data science and artificial intelligence, it shouldn’t be your only factor. For me, it’s less about which field pays more and more about what excites you daily. You’ll enjoy success and work satisfaction when you choose a job that matches your interests.</p>\n<h2 id=\"do-data-science-and-artificial-intelligence-overlap\">Do data science and artificial intelligence overlap?</h2>\n<p>Yes, data science and artificial intelligence overlap. Data science is like the backbone of AI. It supplies the data and insights needed to train and improve artificial intelligence models.</p>\n<p>Many skills overlap between data science and artificial intelligence. For instance, being good at coding in <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, R, and <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> is important in both fields. Both fields also need machine learning, statistics, and data visualization knowledge. Switching from data science to AI or vice versa is straightforward because they share many similarities in skills and tools.</p>\n<h2 id=\"will-ai-replace-data-science\">Will AI replace data science?</h2>\n<p>Will AI replace data science? This is a common concern among many data scientists since there’s been a lot of buzz about AI. The simple answer is no: AI is not replacing data science.</p>\n<p>Artificial intelligence tools can make it easier for data scientists to analyze data and predict trends faster. But we humans make sense of all that data, put it into context, and use it to make decisions for the company. Instead of seeing AI as a rival, think of it as a helpful tool that can help you get better at data science.</p>\n<h2 id=\"next-steps-to-find-your-fit\">Next steps to find your fit</h2>\n<p>If you’re still trying to figure out which path to take, here are a few steps to help you find what feels right for you:</p>\n<h3 id=\"know-your-strengths\">Know your strengths</h3>\n<p>To find out which path is right for you, consider what you’re good at and what excites you. Data science might be a good fit if you love analyzing data and finding out hidden stories behind numbers.</p>\n<p>On the other hand, artificial intelligence might be better if you’re into technology, algorithms, and creating systems that imitate human intelligence.</p>\n<h3 id=\"connect-with-others\">Connect with others</h3>\n<p>Talk to some data science and artificial intelligence professionals and get their advice. Start by attending conferences or joining <a href=\"https://roadmap.sh/discord\" target=\"_blank\">online communities</a> to connect with others.</p>\n<p>You can ask questions, share your thoughts, and learn from others as a community member. When you chat with other professionals, ask them what they enjoy about their work, what their challenges are, and if they have any tips for newcomers. Listening to their stories can give you a better idea of what each job is really like.</p>\n<h3 id=\"dont-be-afraid-to-try\">Don’t be afraid to try</h3>\n<p>Don’t be afraid to try new things and step out of your comfort zone. You might think you’re into data science, but after taking some classes or working on projects, you could realize that artificial intelligence is where your true passion lies. It is completely normal and is part of the learning journey.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>Artificial intelligence and data science have changed how businesses work and make decisions. Both fields have great job opportunities, but the skills needed for each are different. Understanding the basics of these fields will help you pick the right path for you.</p>\n<p>It’s not about figuring out which field is better than the other—it’s about choosing the one that fits your goals, interests, and skills. So relax and take some time to figure out what you’re really into before making any big decisions.</p>\n<p>For continuous learning, visit the roadmap.sh <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> and <a href=\"https://roadmap.sh/ai-engineer\" target=\"_blank\">artificial intelligence</a> guides. Both guides have all the resources you need to start your journey as a data scientist or AI engineer.</p>";

				const frontmatter$1u = {"title":"Data Science vs. AI: How I Would Choose My Path","description":"If you love working with data, should you become a data scientist or an AI engineer? Here's how I made my choice.","authorId":"william","excludedBySlug":"/ai-data-scientist/vs-ai","seo":{"title":"Data Science vs. AI: How I Would Choose My Path","description":"If you love working with data, should you become a data scientist or an AI engineer? Here's how I made my choice.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-artificial-intelligence-w7gl5.jpg"},"isNew":true,"type":"textual","date":"2025-03-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1u = "/workspace/src/data/guides/ai-data-scientist-vs-ai.md";
				const url$1u = undefined;
				function rawContent$1u() {
					return "   \n                                                        \n                                                                                                                                \n                 \n                                          \n    \n                                                          \n                                                                                                                                  \n                                                                                                 \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data Science vs AI: What are the differences?](https://assets.roadmap.sh/guest/data-science-vs-artificial-intelligence-w7gl5.jpg)\n\nChoosing between specializing in data science and AI comes down to what you like and the problems you want to solve. If you enjoy analyzing data, uncovering insights, and making data-driven decisions, data science might be for you. But artificial intelligence is the way to go if you're into creating systems that can learn, adapt, and make decisions on their own.\n\nWhen I first got into tech, I wasn't sure which path to take. I spent late nights researching, feeling both excited and overwhelmed. Data science and AI seemed so similar that telling them apart felt impossible, especially since many jobs required skills in both. But as I dug deeper, I realized they have distinct focuses despite their overlap.\n\nData science focuses on extracting meaningful insights from data. As a data scientist, you'll be responsible for designing datasets, building models to analyze data, identifying patterns, and solving complex problems to help businesses make better decisions. You'll do this using statistical analysis and several machine learning techniques like supervised and unsupervised learning.\n\nIn contrast, artificial intelligence is about developing intelligent systems that can perform tasks that typically require human intelligence. These tasks include pattern recognition, predictive analysis, and language translation. You'll design algorithms to learn and solve problems without constant human intervention.\n\nIf you don't know much about data science and AI, don't worry about it. Check out our beginner's guide on [data science](https://roadmap.sh/ai-data-scientist) and [AI](https://roadmap.sh/ai-engineer) to get a good overview of both fields. In this guide, I'll show you what each field is about, the skills you need, and the opportunities they offer. By the end, you'll know which career path suits you best based on your interests, skills, and goals.\n\n## Data science vs. AI: What are the key differences?\n\nWhen discussing data science and AI, many people often mix them up. While they share similarities, their purposes, tools, and techniques differ. The table below summarizes the key differences between data science and AI:\n\n| Characteristics  | Data science                                                                                                     | Artificial intelligence                                                                                              |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| Primary focus    | Extracting insights from data                                                                                    | Building intelligent systems that mimic human intelligence to perform tasks                                          |\n| Responsibilities | Data collection, data cleaning, data analysis, data modeling, data visualization, and building predictive models | Building and training machine learning models, machine learning algorithms, and artificial intelligence applications |\n| Tools            | Python, R, SQL, Pandas, Hadoop, TensorFlow, Tableau                                                              | Java, Python, PyTorch, OpenCV, spaCy, GPUs, AWS and Keras                                                            |\n| Educational path | Bachelor's in computer science, statistics, or mathematics; master's in data science                             | Bachelor's in computer science, mathematics, or engineering; master's in AI or related field                         |\n| Career paths     | Data analyst, data scientist, business analyst, machine learning engineer                                        | AI engineer, machine learning engineer, AI product manager, NLP enginner, AI research scientist                      |\n| Applications     | Predictive analytics, fraud detection, customer segmentation, healthcare analytics and more                      | Self-driving cars, chatbots, robotics, predictive maintenance, medical imaging analysis and more                     |\n\n## Primary focus\n\nOne big difference between data science and AI is what they focus on the most. Data science focuses on uncovering insights and solving problems through data analytics. It uses structured data like customer databases to identify patterns and solve complex problems. You'll use advanced tools and machine learning techniques like computer vision to work with unstructured data like videos and images.\n\nIf you choose data science, you'll work on extracting valuable insights from data. For example, a data scientist working in finance will use anomaly detection to analyze transactional data. This helps with fraud detection and risk assessment, e.g., unusual login attempts.\n\n![Data science vs. artificial intelligence: Primary focus](https://assets.roadmap.sh/guest/primary-focus-between-data-science-and-ai-l4fv0.png)\n\nIn contrast, if you choose artificial intelligence, you'll focus on building systems that mimic human intelligence, like learning, reasoning, and solving problems. It uses structured and unstructured data to enable machines to perform tasks like pattern recognition in images and speech and natural language processing. For example, AI virtual assistants like Siri can listen and reply to what you're saying. They use natural language processing models to recognize and understand your voice (human language). It makes it easy for you to ask and get answers to questions just by talking.\n\n## Daily responsibilities \n\nData scientists and AI engineers have different responsibilities that show their focus areas. As a data scientist, your daily duties will include:\n\n- **Data collection**: This is often the first thing you do when extracting insights from data. Your job will be to collect large volumes of data from several sources, such as databases. For example, a healthcare data scientist will collect and analyze patient data to create models to help in diagnosing diseases. It'll make it easier to predict patient outcomes and make treatment plans better.\n- **Data cleaning**: After you collect all the data, the next step is to clean the data. Doing this means removing errors from the raw data to prepare it for data analysis.\n- **Data analysis**: After cleaning, you'll analyze data to identify patterns and trends. You'll do this using statistical analysis and machine learning techniques like clustering.\n- **Building models**: You'll create predictive models to make future predictions based on historical data. A company like Netflix, for example, uses predictive models to suggest TV shows and movies to you. The data scientist will analyze your past data to see what shows you've watched, how you rated them, and more. Then, they will use this data to build a model that suggests similar shows you'll like.\n- **Data visualization**: Visualizing data is about presenting complex data in a visual format. As a data scientist, you'll use data visualization tools like Tableau and Power BI to present data in a way that every team member will understand.\n\n![Data science vs. artificial intelligence: Job responsibilities](https://assets.roadmap.sh/guest/responsibilities-of-a-data-scientist-and-ai-engineer-wzlzh.png)\n\nOn the flip side, AI involves various responsibilities like designing, training, and testing AI models. As an AI engineer, your daily responsibilities will include:\n\n- **Data preparation**: You'll collect, clean, analyze, and work with large amounts of data to train and test AI models (i.e., machine learning models). Yes, as an AI engineer, you'll also analyze data, although it is the primary duty of the data scientists. Doing this lets you check if the data is good for the AI model and spot any problems that could mess up the training.\n- **Model training**: You'll be responsible for developing algorithms that enable machines to learn from data using machine learning techniques like computer vision and neural networks. For example, automotive industries use artificial intelligence to create self-driving cars. They use AI algorithms to analyze sensor data from cameras, radar, and lasers to see what's around them.\n- **Review models**: You'll test and make sure that the models provide reliable results. Imagine you've developed a model to identify diseases from analyzing medical images. You'll use images the model hasn't seen before to test its accuracy at spotting diseases. If it misses something, that's your cue to tweak it until it gets better.\n- **Implementation**: Once you create a model, you need to make sure it works well with other systems. It's like having a chatbot on a website to handle customer inquiries, using a fraud detection system in a bank to analyze transactions, or incorporating GPS functionality in self-driving cars for navigation. Additionally, you'll monitor and maintain its performance and update it when needed.\n\n## The tools you'll use\n\nOne important thing to consider when choosing between data science and AI is the tools you'll use. In data science, you'll work with programming languages like [Python](https://roadmap.sh/python), R, and [SQL](https://roadmap.sh/sql) to extract insights and analyze data. You'll use Python libraries like Pandas to manipulate data and NumPy to make math calculations. \n\nAs a data scientist, you'll also use big data technologies like Hadoop to work with large volumes of data. Machine learning libraries like TensorFlow will help you develop advanced machine learning models. Also, you'll use data visualization tools like Tableau and Power BI when sharing your results.\n\n![Data science vs. artificial intelligence: tools](https://assets.roadmap.sh/guest/tools-for-data-science-and-artificial-intelligence-q6i4v.png)\n\nOn the flip side, artificial intelligence needs more advanced tools to work its magic. You'll use programming languages like [Java](https://roadmap.sh/java) and [Python](https://roadmap.sh/python), like in data science, but you'll focus on AI frameworks like PyTorch to train deep learning models, especially neural networks. These frameworks can do various machine learning tasks, such as supervised learning (e.g., image classification), unsupervised learning (e.g., anomaly detection), and reinforcement learning (e.g., game playing) when needed. \n\nTools like OpenCV will help with computer vision tasks, and libraries like NLTK and spaCy will help with natural language processing. As an AI engineer, you'll also work with specialized hardware like graphics processing units (GPUs) and tensor processing units (TPUs). These tools provide the computational power to train large neural networks well. Finally, you'll work with cloud platforms like [AWS](https://roadmap.sh/aws) and Google Cloud AI Platform to deploy and manage your AI models.\n\n## How do the skills you need differ?\n\nNow that you know the differences between data science and artificial intelligence, let's look at the skills you need. As a data scientist, it's important to build a solid understanding in the following areas:\n\n- Proficient in programming skills like [Python](https://roadmap.sh/python) and [SQL](https://roadmap.sh/sql) for data analysis and manipulation.\n- Strong understanding of statistics and mathematics to analyze and interpret data.\n- Good in data wrangling for cleaning and organizing datasets before analysis.\n- Proficient in data mining to extract useful patterns and insights from large datasets.\n- Strong data visualization techniques to present valuable insights through tools such as Matplotlib or Tableau.\n- Basic understanding of machine learning principles and algorithms to apply predictive analytics and solve business problems.\n- Good critical thinking skills to analyze data and provide solutions to business problems using data. \n\n![Skills for data science and artificial intelligence](https://assets.roadmap.sh/guest/important-skills-for-data-science-and-ai-sj2nh.png)\n\nIn contrast, as an AI engineer, you'll create complex AI systems using the following skills:\n\n- In-depth knowledge of advanced machine learning concepts, including neural networks, to create models for tasks like image recognition or natural language processing.\n- Proficiency in programming skills ([Python](https://roadmap.sh/python), [C++](https://roadmap.sh/c-plus-plus), [Java](https://roadmap.sh/java)) for creating complex algorithms.\n- Understanding mathematics, e.g., linear algebra and calculus for algorithm development.\n- Experience with frameworks like TensorFlow and PyTorch for building and deploying AI models.\n- Knowledge of computer vision and natural language processing to create intelligent systems that understand and interact with data.\n\n## The educational pathway to data science and artificial intelligence career\n\nA very good educational foundation is necessary to start a career as a data scientist. The first step is getting your bachelor's degree in computer science, data science, or artificial intelligence. These fields cover topics like algorithms, machine learning, and software development.\n\n![Data science vs. artificial intelligence: Educational path](https://assets.roadmap.sh/guest/educational-pathway-to-data-science-and-ai-careers-clcgu.png)\n\nOn the other hand, artificial intelligence often requires higher educational qualifications, such as a bachelor's, master's, or Ph.D., due to its technically complex and research-oriented nature. You'll first need a bachelor's degree in computer science, data science, or artificial intelligence to start a career in this field. This will give you a good understanding of machine learning, mathematics, and statistics. You'll go into detail on topics like algebra and calculus and learn languages like [Python](https://roadmap.sh/python) and [Java](https://roadmap.sh/java). Some AI engineers may pursue a master's degree if they aim for senior or research positions, but it's not always necessary.\n\nAlso, you don't always have to attend a university to learn. Some people who want to become data scientists and AI engineers go to boot camps, take online courses, or get certifications instead. Platforms like [roadmap.sh](https://roadmap.sh) offer detailed [data science](https://roadmap.sh/ai-data-scientist) and [AI courses](https://roadmap.sh/ai-engineer) to help you learn. The platforms are more flexible and focus on practical projects, so you can create a portfolio to showcase your skills.\n\n## Which field offers better career prospects?\n\nData science and artificial intelligence both look promising in terms of job opportunities. Both fields are in high demand, so there are plenty of job opportunities out there for you. However, artificial intelligence jobs usually pay better because they need more advanced skills and technical knowledge in machine learning and algorithm development.\n\n![Data science vs. artificial intelligence: career path](https://assets.roadmap.sh/guest/career-paths-and-industries-for-data-science-and-ai-i333u.png)\n\nData science is a recognized field with many uses in industries like finance, healthcare, and marketing. If you're interested in data science, you could work as a [data analyst](https://roadmap.sh/data-analyst), business analyst, or data scientist. According to [Indeed](https://www.indeed.com/career/data-scientist/salaries?from=top_sb), the average salary for a data scientist in the United States (USA) across all industries is $125,495.\n\n![Average salary of a data scientist in USA](https://assets.roadmap.sh/guest/average-salary-of-a-data-scientist-in-usa-vevcq.png)\n\nOn the other hand, artificial intelligence is in high demand in industries like robotics, automotive, and tech startups. If you're interested in artificial intelligence, you can work as a machine learning or AI engineer. [According to Indeed](https://www.indeed.com/career/machine-learning-engineer/salaries?from=top_sb), engineers working in machine learning in the USA make an average of $162,735 annually.\n\n![Average salary of an engineer in machine learning](https://assets.roadmap.sh/guest/average-salary-of-an-engineer-in-machine-learning-ncqpb.png)\n\nWhile salary is important when choosing between data science and artificial intelligence, it shouldn't be your only factor. For me, it's less about which field pays more and more about what excites you daily. You'll enjoy success and work satisfaction when you choose a job that matches your interests.\n\n## Do data science and artificial intelligence overlap?\n\nYes, data science and artificial intelligence overlap. Data science is like the backbone of AI. It supplies the data and insights needed to train and improve artificial intelligence models.\n\nMany skills overlap between data science and artificial intelligence. For instance, being good at coding in [Python](https://roadmap.sh/python), R, and [SQL](https://roadmap.sh/sql) is important in both fields. Both fields also need machine learning, statistics, and data visualization knowledge. Switching from data science to AI or vice versa is straightforward because they share many similarities in skills and tools.\n\n## Will AI replace data science?\n\nWill AI replace data science? This is a common concern among many data scientists since there's been a lot of buzz about AI. The simple answer is no: AI is not replacing data science.\n\nArtificial intelligence tools can make it easier for data scientists to analyze data and predict trends faster. But we humans make sense of all that data, put it into context, and use it to make decisions for the company. Instead of seeing AI as a rival, think of it as a helpful tool that can help you get better at data science.\n\n## Next steps to find your fit\n\nIf you're still trying to figure out which path to take, here are a few steps to help you find what feels right for you:\n\n### Know your strengths\n\nTo find out which path is right for you, consider what you're good at and what excites you. Data science might be a good fit if you love analyzing data and finding out hidden stories behind numbers. \n\nOn the other hand, artificial intelligence might be better if you're into technology, algorithms, and creating systems that imitate human intelligence.\n\n### Connect with others\n\nTalk to some data science and artificial intelligence professionals and get their advice. Start by attending conferences or joining [online communities](https://roadmap.sh/discord) to connect with others. \n\nYou can ask questions, share your thoughts, and learn from others as a community member. When you chat with other professionals, ask them what they enjoy about their work, what their challenges are, and if they have any tips for newcomers. Listening to their stories can give you a better idea of what each job is really like.\n\n### Don't be afraid to try\n\nDon't be afraid to try new things and step out of your comfort zone. You might think you're into data science, but after taking some classes or working on projects, you could realize that artificial intelligence is where your true passion lies. It is completely normal and is part of the learning journey.\n\n## What next?\n\nArtificial intelligence and data science have changed how businesses work and make decisions. Both fields have great job opportunities, but the skills needed for each are different. Understanding the basics of these fields will help you pick the right path for you.\n\nIt's not about figuring out which field is better than the other—it's about choosing the one that fits your goals, interests, and skills. So relax and take some time to figure out what you're really into before making any big decisions.\n\nFor continuous learning, visit the roadmap.sh [data science](https://roadmap.sh/ai-data-scientist) and [artificial intelligence](https://roadmap.sh/ai-engineer) guides. Both guides have all the resources you need to start your journey as a data scientist or AI engineer.\n";
				}
				async function compiledContent$1u() {
					return await html$1u();
				}
				function getHeadings$1u() {
					return [{"depth":2,"slug":"data-science-vs-ai-what-are-the-key-differences","text":"Data science vs. AI: What are the key differences?"},{"depth":2,"slug":"primary-focus","text":"Primary focus"},{"depth":2,"slug":"daily-responsibilities","text":"Daily responsibilities"},{"depth":2,"slug":"the-tools-youll-use","text":"The tools you’ll use"},{"depth":2,"slug":"how-do-the-skills-you-need-differ","text":"How do the skills you need differ?"},{"depth":2,"slug":"the-educational-pathway-to-data-science-and-artificial-intelligence-career","text":"The educational pathway to data science and artificial intelligence career"},{"depth":2,"slug":"which-field-offers-better-career-prospects","text":"Which field offers better career prospects?"},{"depth":2,"slug":"do-data-science-and-artificial-intelligence-overlap","text":"Do data science and artificial intelligence overlap?"},{"depth":2,"slug":"will-ai-replace-data-science","text":"Will AI replace data science?"},{"depth":2,"slug":"next-steps-to-find-your-fit","text":"Next steps to find your fit"},{"depth":3,"slug":"know-your-strengths","text":"Know your strengths"},{"depth":3,"slug":"connect-with-others","text":"Connect with others"},{"depth":3,"slug":"dont-be-afraid-to-try","text":"Don’t be afraid to try"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$1u = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1u;
					content.file = file$1u;
					content.url = url$1u;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1u())}`;
				});

const __vite_glob_0_4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1u,
	compiledContent: compiledContent$1u,
	default: Content$1u,
	file: file$1u,
	frontmatter: frontmatter$1u,
	getHeadings: getHeadings$1u,
	rawContent: rawContent$1u,
	url: url$1u
}, Symbol.toStringTag, { value: 'Module' }));

const html$1t = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-and-business-analytics-zxubk.jpg\" alt=\"Data science vs business analytics comparison\"></p>\n<p>If you enjoy coding, working with algorithms, and solving mathematical problems, you’ll likely thrive in <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a>. However, if you prefer analyzing trends, making strategic decisions, and communicating insights, business analytics is a better fit.</p>\n<p>When I was deciding between the two, I kept getting lost in job descriptions and salary comparisons. But what really mattered was how I wanted to work with data. Did I want to build models and predict future trends? Or did I want to interpret existing data to solve business problems?</p>\n<p>If you’re facing the same dilemma, the best way to decide is by understanding what each role actually does and how it fits your strengths. In this guide, I’ll walk you through the key differences, career paths, and real-world examples, so by the end, you’ll have clarity on the right choice for you.</p>\n<p>Before diving in, here’s a quick comparison:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>Data Science</th><th>Business Analytics</th></tr></thead><tbody><tr><td>Key role</td><td>Building data models and using math and programming to analyze complex data and extract insights.</td><td>Analyzing data and digging for insights to solve specific business problems and presenting them to inform strategy.</td></tr><tr><td>Skills</td><td>Machine learning, advanced mathematics, programming, business intelligence, data analytics, and data visualization.</td><td>Data analysis using Excel or Sheets, SQL, visualization, basic statistical modeling, business intelligence, communication, presentation, and problem-solving.</td></tr><tr><td>Tools</td><td>Python, R, SQL, Tableau, PyTorch, Power BI, Tensorflow.</td><td>SQL, Excel, business acumen, data visualization tools, and communication.</td></tr><tr><td>Career paths</td><td>Data scientist, AI researcher, data engineer, machine learning engineer.</td><td>Business analyst, data scientist, operation analyst, data analyst, product analyst, marketing analyst.</td></tr></tbody></table>\n<p>Now, let’s get into the meat. If I were in your shoes, the first step I’d take is to understand the differences and similarities between business analytics and data science.</p>\n<h2 id=\"data-science-vs-business-analytics-what-sets-them-apart\">Data science vs. business analytics: What sets them apart?</h2>\n<p>The difference between data science and business analytics comes down to how you want to work with data.</p>\n<p>When I was making this decision, I had to ask myself: Do I enjoy coding, working with algorithms, and solving mathematical problems? If so, data science was the better fit. Or do I prefer analyzing trends, making strategic decisions, and communicating insights? In that case, business analytics made more sense.</p>\n<p>If you go the data science route, you’ll take a highly technical approach that blends <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science</a>, mathematics, and business knowledge. You’ll work with business analysts to understand key challenges, then clean, explore, and mine unstructured and structured data to improve its quality.</p>\n<p>Once the data is ready, you’ll build and test predictive models using machine learning algorithms to uncover hidden patterns. These models help businesses make data-driven predictions, optimize processes, and automate decision-making.</p>\n<p>When I looked at these responsibilities, I realized data science was all about solving complex problems, discovering trends, and forecasting what’s next. If that excites you, it might be the right path.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-business-analytics-what-sets-them-apart-ineqp.png\" alt=\"Data science vs business analytics: what sets them apart?\"></p>\n<p>Business analytics might be a better fit if you don’t fancy data science. You’ll sit at the intersection of business, data, and operations. You are responsible for evaluating the business’s overall health, identifying gaps, and recommending solutions to improve business operations.</p>\n<p>You’ll also perform basic data cleaning and transformation using tools like <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> and Excel. However, your primary focus is analyzing data to uncover insights, create reports, and present findings to stakeholders.</p>\n<p>Beyond analysis, I realized that business analysts also take action. You’ll recommend strategic next steps based on data insights and collaborate with decision-makers to execute them. This means being involved in change strategy and ensuring that insights lead to tangible business improvements.</p>\n<p>For example, imagine you work for an energy company and notice a drop in residential electricity usage due to increased solar panel adoption. A data scientist will build predictive models to forecast energy demand, optimize distribution, and detect anomalies. A business analyst, meanwhile, will interpret these insights, develop strategies like solar buyback programs, and lead their implementation to drive impact.</p>\n<h2 id=\"what-are-their-similarities\">What Are Their Similarities?</h2>\n<p>Although data science and business analytics have differences, after working in both fields, I realized that they share the same goal. Both disciplines focus on transforming raw data into valuable insights that drive business decisions.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-business-analytics-what-connects-them-z10j8.png\" alt=\"Data science vs business analytics: what connects them?\"></p>\n<p>Think of them as two sides of the same coin. Both fields involve data mining, statistical analysis, data visualization, <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> usage, problem-solving, and stakeholder collaboration. They work together to help businesses make sense of their data, but their approach and execution set them apart.</p>\n<p>The next step to take is to understand what daily tasks may look like and which one you’d prefer.</p>\n<h2 id=\"what-would-your-day-to-day-look-like\">What Would Your Day-to-Day Look Like?</h2>\n<p>Your day-to-day life as a data scientist or business analyst depends on the size of your company and team, industry, and project focus. I’ll break down the primary responsibilities of both fields to give you a clearer picture.</p>\n<p>What are the key responsibilities of a data scientist?\nA data scientist analyzes complex data to extract insights, build predictive models, and support data-driven decision-making.</p>\n<p><strong>Primary tasks:</strong></p>\n<ul>\n<li><strong>Business understanding</strong>: Understand the why behind what you’re building. You’ll often work with stakeholders to define project and business requirements that guide data usage and model development.</li>\n<li><strong>Data ingestion</strong>: Gather raw data from systems. This data is obtained from databases, APIs, IoT sensors, Excel sheets, etc. A data scientist collects all the relevant data needed to solve the current business problem.</li>\n<li><strong>Data processing, migration, and storage</strong>: You’ll spend most of your time cleaning, transforming, and migrating structured and unstructured raw data. The goal is to convert data into suitable formats and structures for analysis and accessibility.</li>\n<li><strong>Data analysis</strong>: Data scientists identify patterns in data behavior using visualization tools and statistical techniques such as Bayesian Inference, A/B testing, and K-means clustering.</li>\n<li><strong>Building machine learning models</strong>: You’ll define the appropriate modeling approach based on business objectives, data characteristics, and analytical requirements. Then, you’ll build, train, validate, and fine-tune the model using historical data to predict future trends or automate workflows. Depending on the use case, you may also leverage pre-trained models or transfer learning for faster deployment.</li>\n<li><strong>Deploying and testing predictive models</strong>: You’ll test your model against business requirements and deploy it to production.</li>\n<li><strong>Reporting</strong>: You also need to present model results to stakeholders using visualizations and clear, concise explanations.</li>\n</ul>\n<p>Data scientists collaborate closely with data engineers to build data extraction and transformation pipelines. You’ll also work with business analysts and other stakeholders to set business requirements and align the model with them.</p>\n<p>You’d perform these responsibilities using tools like TensorFlow, Pandas, Jupyter Notebooks, Scikit-learn, Apache Spark, Hadoop, <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, <a href=\"https://roadmap.sh/git-github\" target=\"_blank\">GitHub/Git</a>, SQL, Tableau, and cloud platforms ([AWS],(<a href=\"https://roadmap.sh/aws\" target=\"_blank\">https://roadmap.sh/aws</a>) Google Cloud, Azure)</p>\n<h3 id=\"what-are-the-key-responsibilities-of-a-business-analyst\">What Are the Key Responsibilities of a Business Analyst?</h3>\n<p>As a business analyst, you’ll bridge the gap between business needs and technical solutions by analyzing data and processes and using these insights to drive strategic decisions. Your primary tasks involve:</p>\n<ul>\n<li><strong>Data manipulation and analysis</strong>: While business analysts don’t need to be expert programmers, you need SQL and Excel for querying databases and lightly analyzing unstructured and structured data. Some business analysts also pick up Python for deeper analysis.</li>\n<li><strong>Business acumen</strong>: You’d need to know how to perform holistic business analysis. This involves asking the right questions: How can I solve business problems with data? What processes benefit from data-driven insights? Do I have the right data? How can I start collecting this data? Understanding how different departments (marketing, sales, finance) operate is necessary to align data insights with business goals.</li>\n<li><strong>Data visualization and reporting</strong>: You’ll create interactive dashboards and reports using visualization tools like Tableau, Power BI, and Google Data Studio.</li>\n<li><strong>Communication and stakeholder management</strong>: You’ll be involved in clearly communicating complex data insights and providing simple and actionable business recommendations. You’ll often present findings to executives who may have little or no technical skills.</li>\n</ul>\n<p>As a business analyst, you’ll perform these responsibilities using Tableau, Power BI, Salesforce, Excel, Google Analytics, <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a>, Microsoft Power BI, Google Sheets, and Looker.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/tools-for-data-science-and-business-anaytics-s7iwy.png\" alt=\"Tools for data science and business analytics\"></p>\n<h2 id=\"career-prospects-what-paths-are-available-to-you\">Career Prospects: What Paths Are Available to You?</h2>\n<p>When choosing a path, I found it helpful to learn about the diverse and promising career options in each field.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/career-paths-for-data-science-and-business-analytics-n0auj.png\" alt=\"Career paths for data science and business analytics\"></p>\n<h3 id=\"data-science-career-paths\">Data Science Career Paths</h3>\n<p>If data science is your focus, you have several options, but I’ll focus on the three leading fields: data science, machine learning engineering, and artificial intelligence.</p>\n<h4 id=\"data-scientist\">Data Scientist</h4>\n<p>This role involves developing machine learning algorithms, analyzing large datasets, and extracting actionable insights to support business decision-making. You’ll work with structured and unstructured data, applying statistical methods and algorithms to uncover patterns, predict trends, and solve complex problems.</p>\n<p>According to <a href=\"https://www.indeed.com/career/data-scientist/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average annual salary for a data scientist in the U.S. is $125,639, with a range between $79,587 and $198,339.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-scientist-salary-in-united-states-1ks00.png\" alt=\"Data scientist salary in United States\"></p>\n<h4 id=\"machine-learning-engineer\">Machine Learning Engineer</h4>\n<p>Machine learning engineers design, optimize, and deploy machine learning algorithms in production environments. Unlike data scientists, you’ll specialize in software engineering, ensuring models are scalable, efficient, and seamlessly integrated into real-world applications.</p>\n<p>According to <a href=\"https://www.indeed.com/career/machine-learning-engineer/salaries?\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, Machine Learning Engineers earn an average salary of $163,390 per year in the U.S.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/machine-learning-engineer-salary-in-united-state-8s0tv.png\" alt=\"Machine learning engineer salary in United States\"></p>\n<h4 id=\"ai-specialist\">AI Specialist</h4>\n<p>AI specialists develop AI-driven solutions, lead artificial intelligence research, and manage business initiatives.</p>\n<p>According to <a href=\"https://www.glassdoor.co.uk/Salaries/ai-specialist-salary-SRCH_KO0%2C13.htm?countryRedirect=true\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Glassdoor</a>, the average salary for an AI Specialist in the U.S. is $134,500 per year.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/ai-specialist-salary-7y3wh.png\" alt=\"AI specialist salary\"></p>\n<p>A computer science or mathematics or data science/AI master’s degree or PhD is often desired for data science career paths.</p>\n<h3 id=\"business-analytics-career-paths\">Business Analytics Career Paths</h3>\n<p>If you choose business analytics instead, several career paths are available, but I’ll discuss three leading ones: business analyst, business intelligence analyst, and operations analyst.</p>\n<h4 id=\"business-analysts\">Business Analysts</h4>\n<p>In this role, you’ll get to interpret data, identify business trends, and recommend strategies to optimize performance. You’ll also work closely with stakeholders to assess business challenges and use data to drive process improvements and cost-saving measures.</p>\n<p>According to <a href=\"https://www.indeed.com/career/business-analyst/salaries?\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for a business analyst in the U.S. is $85,000 per year, with potential earnings exceeding $100,000 for senior-level professionals.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/business-analyst-salary-in-united-state-qxei8.png\" alt=\"Business analyst salary in United States\"></p>\n<h4 id=\"business-intelligence-analysts\">Business Intelligence Analysts</h4>\n<p>This role focuses on data visualization, reporting, and trend analysis. Working in this role involves developing dashboards, creating reports, and helping organizations monitor performance metrics in real-time.</p>\n<p>According to <a href=\"https://www.indeed.com/career/business-intelligence-analyst/salaries?\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, Business intelligence analysts in the U.S. earn an average salary of $97,872 per year, with top earners making over $130,000.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/business-inntelligence-analyst-salary-in-united-states-nwx5v.png\" alt=\"Business intelligence analyst salary in United States\"></p>\n<h4 id=\"operations-analysts\">Operations Analysts</h4>\n<p>Operations analysts focus on optimizing business workflows, improving efficiency, and reducing operational costs through data-driven analysis. This role is common in industries like logistics, finance, and retail, ensuring processes run smoothly and profitably.</p>\n<p>According to <a href=\"https://www.indeed.com/career/operations-analyst/salaries?\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for an operations analyst in the U.S. is $74,648 per year, with potential earnings exceeding $100,000 in industries like finance and technology.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/operations-analyst-salary-in-united-states-neddf.png\" alt=\"Operations analyst salary in United States\"></p>\n<p>Business analytics admission requirements for those interested in this field often include a bachelor’s degree in business, economics, mathematics, or a related field, along with proficiency in statistics, data interpretation, and business intelligence tools.</p>\n<h2 id=\"why-choose-one-over-the-other\">Why Choose One Over the Other?</h2>\n<p>I chose data science because I have loved mathematics since my early school years, and anything AI gives me life.</p>\n<p>As I mentioned earlier, if you enjoy coding, solving technical and mathematical problems, and developing data-driven solutions, data science might be the right path for you—especially if AI, machine learning, and big data interest you. This field focuses on building models, algorithms, and predictive systems to extract meaningful insights from data.</p>\n<p>On the other hand, if you prefer interpreting data, identifying trends, and using insights to drive strategic business decisions, business analytics is a better fit. This path is ideal for those who enjoy working closely with stakeholders to solve real-world business problems through data-driven strategies.</p>\n<p>If you’re still unsure, experimenting with small projects in both fields can help you determine which excites you more. Sometimes, hands-on experience is the best way to find the right path. Also, some business analytics programs focus on ML, allowing you to explore both fields simultaneously.</p>\n<h2 id=\"next-steps\">Next Steps?</h2>\n<p>Once you’ve chosen between data science and business analytics, the best thing you can do is stop second-guessing and start learning. Follow our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">Data Scientist Roadmap</a> as your step-by-step guide from beginner to expert, tracking your progress along the way.</p>\n<p>You can also start with <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, explore data analysis, and learn machine learning basics. But, if your preference is business analytics, master Excel, learn visualization tools like Tableau or Looker, and practice creating dashboards.</p>\n<p>The roadmap also helps you schedule learning time and block study time on your calendar to stay consistent. For a detailed overview of any specific role, join the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> and stay informed!</p>";

				const frontmatter$1t = {"title":"Data Science vs Business Analytics: How I'd Choose My Path","description":"I once struggled to choose between data science and business analytics. If you're in the same boat, I'll guide you to find the right fit.","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-business-analytics","seo":{"title":"Data Science vs Business Analytics: How I'd Choose My Path","description":"I once struggled to choose between data science and business analytics. If you're in the same boat, I'll guide you to find the right fit.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-and-business-analytics-zxubk.jpg"},"isNew":true,"type":"textual","date":"2025-03-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1t = "/workspace/src/data/guides/ai-data-scientist-vs-business-analytics.md";
				const url$1t = undefined;
				function rawContent$1t() {
					return "   \n                                                                   \n                                                                                                                                                        \n               \n                                                          \n    \n                                                                     \n                                                                                                                                                          \n                                                                                             \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs business analytics comparison](https://assets.roadmap.sh/guest/data-science-and-business-analytics-zxubk.jpg)\n\nIf you enjoy coding, working with algorithms, and solving mathematical problems, you'll likely thrive in [data science](https://roadmap.sh/ai-data-scientist). However, if you prefer analyzing trends, making strategic decisions, and communicating insights, business analytics is a better fit.\n\nWhen I was deciding between the two, I kept getting lost in job descriptions and salary comparisons. But what really mattered was how I wanted to work with data. Did I want to build models and predict future trends? Or did I want to interpret existing data to solve business problems?\n\nIf you're facing the same dilemma, the best way to decide is by understanding what each role actually does and how it fits your strengths. In this guide, I'll walk you through the key differences, career paths, and real-world examples, so by the end, you'll have clarity on the right choice for you.\n\nBefore diving in, here's a quick comparison:\n\n|              | Data Science                                                                                                        | Business Analytics                                                                                                                                            |\n| ------------ | ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Key role     | Building data models and using math and programming to analyze complex data and extract insights.                   | Analyzing data and digging for insights to solve specific business problems and presenting them to inform strategy.                                           |\n| Skills       | Machine learning, advanced mathematics, programming, business intelligence, data analytics, and data visualization. | Data analysis using Excel or Sheets, SQL, visualization, basic statistical modeling, business intelligence, communication, presentation, and problem-solving. |\n| Tools        | Python, R, SQL, Tableau, PyTorch, Power BI, Tensorflow.                                                             | SQL, Excel, business acumen, data visualization tools, and communication.                                                                                     |\n| Career paths | Data scientist, AI researcher, data engineer, machine learning engineer.                                            | Business analyst, data scientist, operation analyst, data analyst, product analyst, marketing analyst.                                                        |\n\nNow, let’s get into the meat. If I were in your shoes, the first step I'd take is to understand the differences and similarities between business analytics and data science.\n\n## Data science vs. business analytics: What sets them apart?\n\nThe difference between data science and business analytics comes down to how you want to work with data.\n\nWhen I was making this decision, I had to ask myself: Do I enjoy coding, working with algorithms, and solving mathematical problems? If so, data science was the better fit. Or do I prefer analyzing trends, making strategic decisions, and communicating insights? In that case, business analytics made more sense.\n\nIf you go the data science route, you'll take a highly technical approach that blends [computer science](https://roadmap.sh/computer-science), mathematics, and business knowledge. You'll work with business analysts to understand key challenges, then clean, explore, and mine unstructured and structured data to improve its quality.\n\nOnce the data is ready, you'll build and test predictive models using machine learning algorithms to uncover hidden patterns. These models help businesses make data-driven predictions, optimize processes, and automate decision-making.\n\nWhen I looked at these responsibilities, I realized data science was all about solving complex problems, discovering trends, and forecasting what's next. If that excites you, it might be the right path.\n\n![Data science vs business analytics: what sets them apart?](https://assets.roadmap.sh/guest/data-science-vs-business-analytics-what-sets-them-apart-ineqp.png)\n\nBusiness analytics might be a better fit if you don't fancy data science. You'll sit at the intersection of business, data, and operations. You are responsible for evaluating the business's overall health, identifying gaps, and recommending solutions to improve business operations.\n\nYou'll also perform basic data cleaning and transformation using tools like [SQL](https://roadmap.sh/sql) and Excel. However, your primary focus is analyzing data to uncover insights, create reports, and present findings to stakeholders.\n\nBeyond analysis, I realized that business analysts also take action. You'll recommend strategic next steps based on data insights and collaborate with decision-makers to execute them. This means being involved in change strategy and ensuring that insights lead to tangible business improvements.\n\nFor example, imagine you work for an energy company and notice a drop in residential electricity usage due to increased solar panel adoption. A data scientist will build predictive models to forecast energy demand, optimize distribution, and detect anomalies. A business analyst, meanwhile, will interpret these insights, develop strategies like solar buyback programs, and lead their implementation to drive impact.\n\n## What Are Their Similarities?\n\nAlthough data science and business analytics have differences, after working in both fields, I realized that they share the same goal. Both disciplines focus on transforming raw data into valuable insights that drive business decisions.\n\n![Data science vs business analytics: what connects them?](https://assets.roadmap.sh/guest/data-science-vs-business-analytics-what-connects-them-z10j8.png)\n\nThink of them as two sides of the same coin. Both fields involve data mining, statistical analysis, data visualization, [SQL](https://roadmap.sh/sql) usage, problem-solving, and stakeholder collaboration. They work together to help businesses make sense of their data, but their approach and execution set them apart.\n\nThe next step to take is to understand what daily tasks may look like and which one you’d prefer.\n\n## What Would Your Day-to-Day Look Like?\n\nYour day-to-day life as a data scientist or business analyst depends on the size of your company and team, industry, and project focus. I’ll break down the primary responsibilities of both fields to give you a clearer picture.\n\nWhat are the key responsibilities of a data scientist?\nA data scientist analyzes complex data to extract insights, build predictive models, and support data-driven decision-making.\n\n**Primary tasks:**\n\n- **Business understanding**: Understand the why behind what you're building. You'll often work with stakeholders to define project and business requirements that guide data usage and model development.\n- **Data ingestion**: Gather raw data from systems. This data is obtained from databases, APIs, IoT sensors, Excel sheets, etc. A data scientist collects all the relevant data needed to solve the current business problem.\n- **Data processing, migration, and storage**: You'll spend most of your time cleaning, transforming, and migrating structured and unstructured raw data. The goal is to convert data into suitable formats and structures for analysis and accessibility.\n- **Data analysis**: Data scientists identify patterns in data behavior using visualization tools and statistical techniques such as Bayesian Inference, A/B testing, and K-means clustering.\n- **Building machine learning models**: You'll define the appropriate modeling approach based on business objectives, data characteristics, and analytical requirements. Then, you'll build, train, validate, and fine-tune the model using historical data to predict future trends or automate workflows. Depending on the use case, you may also leverage pre-trained models or transfer learning for faster deployment.\n- **Deploying and testing predictive models**: You'll test your model against business requirements and deploy it to production.\n- **Reporting**: You also need to present model results to stakeholders using visualizations and clear, concise explanations.\n\nData scientists collaborate closely with data engineers to build data extraction and transformation pipelines. You'll also work with business analysts and other stakeholders to set business requirements and align the model with them.\n\nYou'd perform these responsibilities using tools like TensorFlow, Pandas, Jupyter Notebooks, Scikit-learn, Apache Spark, Hadoop, [Docker](https://roadmap.sh/docker), [GitHub/Git](https://roadmap.sh/git-github), SQL, Tableau, and cloud platforms ([AWS],(https://roadmap.sh/aws) Google Cloud, Azure)\n\n### What Are the Key Responsibilities of a Business Analyst?\n\nAs a business analyst, you'll bridge the gap between business needs and technical solutions by analyzing data and processes and using these insights to drive strategic decisions. Your primary tasks involve:\n\n- **Data manipulation and analysis**: While business analysts don't need to be expert programmers, you need SQL and Excel for querying databases and lightly analyzing unstructured and structured data. Some business analysts also pick up Python for deeper analysis.\n- **Business acumen**: You'd need to know how to perform holistic business analysis. This involves asking the right questions: How can I solve business problems with data? What processes benefit from data-driven insights? Do I have the right data? How can I start collecting this data? Understanding how different departments (marketing, sales, finance) operate is necessary to align data insights with business goals.\n- **Data visualization and reporting**: You'll create interactive dashboards and reports using visualization tools like Tableau, Power BI, and Google Data Studio.\n- **Communication and stakeholder management**: You'll be involved in clearly communicating complex data insights and providing simple and actionable business recommendations. You'll often present findings to executives who may have little or no technical skills.\n\nAs a business analyst, you'll perform these responsibilities using Tableau, Power BI, Salesforce, Excel, Google Analytics, [SQL](https://roadmap.sh/sql), Microsoft Power BI, Google Sheets, and Looker.\n\n![Tools for data science and business analytics](https://assets.roadmap.sh/guest/tools-for-data-science-and-business-anaytics-s7iwy.png)\n\n## Career Prospects: What Paths Are Available to You?\n\nWhen choosing a path, I found it helpful to learn about the diverse and promising career options in each field.\n\n![Career paths for data science and business analytics](https://assets.roadmap.sh/guest/career-paths-for-data-science-and-business-analytics-n0auj.png)\n\n### Data Science Career Paths\n\nIf data science is your focus, you have several options, but I'll focus on the three leading fields: data science, machine learning engineering, and artificial intelligence.\n\n#### Data Scientist\n\nThis role involves developing machine learning algorithms, analyzing large datasets, and extracting actionable insights to support business decision-making. You'll work with structured and unstructured data, applying statistical methods and algorithms to uncover patterns, predict trends, and solve complex problems.\n\nAccording to [Indeed](https://www.indeed.com/career/data-scientist/salaries), the average annual salary for a data scientist in the U.S. is $125,639, with a range between $79,587 and $198,339.\n\n![Data scientist salary in United States](https://assets.roadmap.sh/guest/data-scientist-salary-in-united-states-1ks00.png)\n\n#### Machine Learning Engineer\n\nMachine learning engineers design, optimize, and deploy machine learning algorithms in production environments. Unlike data scientists, you'll specialize in software engineering, ensuring models are scalable, efficient, and seamlessly integrated into real-world applications.\n\nAccording to [Indeed](https://www.indeed.com/career/machine-learning-engineer/salaries?), Machine Learning Engineers earn an average salary of $163,390 per year in the U.S.\n\n![Machine learning engineer salary in United States](https://assets.roadmap.sh/guest/machine-learning-engineer-salary-in-united-state-8s0tv.png)\n\n#### AI Specialist\n\nAI specialists develop AI-driven solutions, lead artificial intelligence research, and manage business initiatives.\n\nAccording to [Glassdoor](https://www.glassdoor.co.uk/Salaries/ai-specialist-salary-SRCH_KO0%2C13.htm?countryRedirect=true), the average salary for an AI Specialist in the U.S. is $134,500 per year.\n\n![AI specialist salary](https://assets.roadmap.sh/guest/ai-specialist-salary-7y3wh.png)\n\nA computer science or mathematics or data science/AI master's degree or PhD is often desired for data science career paths.\n\n### Business Analytics Career Paths\n\nIf you choose business analytics instead, several career paths are available, but I'll discuss three leading ones: business analyst, business intelligence analyst, and operations analyst.\n\n#### Business Analysts\n\nIn this role, you'll get to interpret data, identify business trends, and recommend strategies to optimize performance. You'll also work closely with stakeholders to assess business challenges and use data to drive process improvements and cost-saving measures.\n\nAccording to [Indeed](https://www.indeed.com/career/business-analyst/salaries?), the average salary for a business analyst in the U.S. is $85,000 per year, with potential earnings exceeding $100,000 for senior-level professionals.\n\n![Business analyst salary in United States](https://assets.roadmap.sh/guest/business-analyst-salary-in-united-state-qxei8.png)\n\n#### Business Intelligence Analysts\n\nThis role focuses on data visualization, reporting, and trend analysis. Working in this role involves developing dashboards, creating reports, and helping organizations monitor performance metrics in real-time.\n\nAccording to [Indeed](https://www.indeed.com/career/business-intelligence-analyst/salaries?), Business intelligence analysts in the U.S. earn an average salary of $97,872 per year, with top earners making over $130,000.\n\n![Business intelligence analyst salary in United States](https://assets.roadmap.sh/guest/business-inntelligence-analyst-salary-in-united-states-nwx5v.png)\n\n#### Operations Analysts\n\nOperations analysts focus on optimizing business workflows, improving efficiency, and reducing operational costs through data-driven analysis. This role is common in industries like logistics, finance, and retail, ensuring processes run smoothly and profitably.\n\nAccording to [Indeed](https://www.indeed.com/career/operations-analyst/salaries?), the average salary for an operations analyst in the U.S. is $74,648 per year, with potential earnings exceeding $100,000 in industries like finance and technology.\n\n![Operations analyst salary in United States](https://assets.roadmap.sh/guest/operations-analyst-salary-in-united-states-neddf.png)\n\nBusiness analytics admission requirements for those interested in this field often include a bachelor's degree in business, economics, mathematics, or a related field, along with proficiency in statistics, data interpretation, and business intelligence tools.\n\n## Why Choose One Over the Other?\n\nI chose data science because I have loved mathematics since my early school years, and anything AI gives me life.\n\nAs I mentioned earlier, if you enjoy coding, solving technical and mathematical problems, and developing data-driven solutions, data science might be the right path for you—especially if AI, machine learning, and big data interest you. This field focuses on building models, algorithms, and predictive systems to extract meaningful insights from data.\n\nOn the other hand, if you prefer interpreting data, identifying trends, and using insights to drive strategic business decisions, business analytics is a better fit. This path is ideal for those who enjoy working closely with stakeholders to solve real-world business problems through data-driven strategies.\n\nIf you're still unsure, experimenting with small projects in both fields can help you determine which excites you more. Sometimes, hands-on experience is the best way to find the right path. Also, some business analytics programs focus on ML, allowing you to explore both fields simultaneously.\n\n## Next Steps?\n\nOnce you've chosen between data science and business analytics, the best thing you can do is stop second-guessing and start learning. Follow our [Data Scientist Roadmap](https://roadmap.sh/ai-data-scientist) as your step-by-step guide from beginner to expert, tracking your progress along the way.\n\nYou can also start with [Python](https://roadmap.sh/python), explore data analysis, and learn machine learning basics. But, if your preference is business analytics, master Excel, learn visualization tools like Tableau or Looker, and practice creating dashboards.\n\nThe roadmap also helps you schedule learning time and block study time on your calendar to stay consistent. For a detailed overview of any specific role, join the [Discord community](https://roadmap.sh/discord) and stay informed!\n";
				}
				async function compiledContent$1t() {
					return await html$1t();
				}
				function getHeadings$1t() {
					return [{"depth":2,"slug":"data-science-vs-business-analytics-what-sets-them-apart","text":"Data science vs. business analytics: What sets them apart?"},{"depth":2,"slug":"what-are-their-similarities","text":"What Are Their Similarities?"},{"depth":2,"slug":"what-would-your-day-to-day-look-like","text":"What Would Your Day-to-Day Look Like?"},{"depth":3,"slug":"what-are-the-key-responsibilities-of-a-business-analyst","text":"What Are the Key Responsibilities of a Business Analyst?"},{"depth":2,"slug":"career-prospects-what-paths-are-available-to-you","text":"Career Prospects: What Paths Are Available to You?"},{"depth":3,"slug":"data-science-career-paths","text":"Data Science Career Paths"},{"depth":4,"slug":"data-scientist","text":"Data Scientist"},{"depth":4,"slug":"machine-learning-engineer","text":"Machine Learning Engineer"},{"depth":4,"slug":"ai-specialist","text":"AI Specialist"},{"depth":3,"slug":"business-analytics-career-paths","text":"Business Analytics Career Paths"},{"depth":4,"slug":"business-analysts","text":"Business Analysts"},{"depth":4,"slug":"business-intelligence-analysts","text":"Business Intelligence Analysts"},{"depth":4,"slug":"operations-analysts","text":"Operations Analysts"},{"depth":2,"slug":"why-choose-one-over-the-other","text":"Why Choose One Over the Other?"},{"depth":2,"slug":"next-steps","text":"Next Steps?"}];
				}

				const Content$1t = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1t;
					content.file = file$1t;
					content.url = url$1t;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1t())}`;
				});

const __vite_glob_0_5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1t,
	compiledContent: compiledContent$1t,
	default: Content$1t,
	file: file$1t,
	frontmatter: frontmatter$1t,
	getHeadings: getHeadings$1t,
	rawContent: rawContent$1t,
	url: url$1t
}, Symbol.toStringTag, { value: 'Module' }));

const html$1s = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-computer-science-rudoc.jpg\" alt=\"Data science vs computer science comparison?\"></p>\n<p>If you love uncovering patterns in data and using those insights to solve real-world problems, <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> might be the right fit for you. On the other hand, if you’re drawn to creating systems, writing code, and building the tools that power today’s technology, <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science</a> could be your path.</p>\n<p>From my experience working on projects in both fields, I’ve seen how they overlap and where they differ. As a data scientist, you’ll focus on analyzing complex data using math, programming, and problem-solving skills. Your work might include building models to extract meaningful insights from data, enabling you to identify patterns, predict trends, detect fraud, or improve recommendations.</p>\n<p>Computer science, in contrast, focuses on understanding how computing systems work. You’ll write code, design algorithms, and develop programs to solve problems. You might create web applications and software tools or even dive into artificial intelligence and cybersecurity.</p>\n<p>Although these fields overlap in areas like programming, they cater to different interests and career goals. In this guide, I’ll walk you through what each field involves, the skills you need, and the opportunities they offer. By the end, you’ll have the clarity to make an informed choice about your future based on which path suits you best.</p>\n<h2 id=\"data-science-vs-computer-science-what-are-the-key-differences\">Data science vs. computer science: What are the key differences?</h2>\n<p>First, let’s look at this table that summarizes the differences. Then, we’ll discuss each one in more detail.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Characteristics</th><th>Data science</th><th>Computer science</th></tr></thead><tbody><tr><td>Primary focus</td><td>Extracting insights from data</td><td>Building computer systems to perform tasks</td></tr><tr><td>Industries</td><td>Finance, healthcare, marketing, e-commerce</td><td>cybersecurity, gaming, education</td></tr><tr><td>Career paths</td><td>Data analysts, data scientists, machine learning engineers, data engineers</td><td>Software engineers, computer scientists, cybersecurity analyst</td></tr><tr><td>Key areas and specializations</td><td>Machine learning, data mining, data visualization, statistical analysis</td><td>Data structures, software development, artificial intelligence</td></tr><tr><td>Tools and technologies</td><td>Python (Pandas, NumPy), R, SQL, TensorFlow</td><td>Python, Java, C++, JavaScript, Git, Vs code, databases (MySQL and MongoDB)</td></tr><tr><td>Educational background</td><td>Mathematics, economics, computer science, data science, physics</td><td>computer science, mathematics, electrical engineering</td></tr></tbody></table>\n<p><strong>Your primary focus</strong>\nThe big difference between data science and computer science is their primary focus. If you choose data science, your role will involve extracting insights and helpful information from datasets. You’ll use different tools and techniques to interpret and analyze data. The aim is to help businesses make data-driven decisions. Netflix, for example, uses machine learning and data science to learn your viewing history. Data scientists then analyze data to predict what shows you’ll like and suggest movies.</p>\n<p>In contrast, if you choose computer science, you’ll focus on building computer systems to perform tasks. You’ll create tools that make computers, web apps, data analysis, etc, work better. For example, a company like Google uses computer science to create algorithms that make search engines work. Computer scientists then create software systems and algorithms that will give you accurate results when you search online.</p>\n<p><strong>Your career path</strong>\nComputer science and data science have very different career paths. As a data science professional, you’ll use data to help make decisions and solve business problems. You’ll work in various industries, like finance and healthcare, and take on roles such as:</p>\n<ul>\n<li><strong>Data analyst</strong>: Collect and analyze data to help businesses make intelligent decisions. For example, as a data analyst in healthcare, you would use data analysis to know which treatments work best for a specific illness.</li>\n<li><strong>Data scientists</strong>: Build predictive models to predict outcomes. As a data scientist in finance, you’ll use data analysis to forecast how the stock market might go.</li>\n<li><strong>Data engineers</strong>: Build and maintain data systems that enable data analysis.</li>\n<li><strong>Machine learning engineer</strong>: Design and build machine learning models to solve everyday problems. As a machine learning engineer at a robotic car company, you’ll create models to spot people, roads, traffic lights, and other cars. You’ll be responsible for designing machine learning algorithms to help the car make fast decisions.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/career-paths-and-industries-for-data-science-and-computer-science-0tzlq.png\" alt=\"Data science vs. computer science: Career paths\"></p>\n<p>In contrast, as a computer science professional, you’ll build the tools data engineers use to get work done. You’ll also work in different industries, such as cybersecurity and gaming, and take on roles like:</p>\n<ul>\n<li><strong>Software engineers</strong>: Build and maintain software systems, including gaming platforms like Steam.</li>\n<li><strong>Computer scientists:</strong> Study computer systems’ theoretical and practical aspects to create applications.</li>\n<li><strong>Cybersecurity analyst</strong>: Monitor and address possible security threats like data breaches.</li>\n</ul>\n<p><strong>Your key areas</strong> <strong>of</strong> <strong>specialization</strong>\nData science focuses on machine learning, data mining, statistical analysis, and more**.** As a data scientist, you’ll use these specializations to understand trends and make better decisions.</p>\n<p>In contrast, computer science focuses on artificial intelligence, <a href=\"https://roadmap.sh/datastructures-and-algorithms\" target=\"_blank\">data structures</a>, and software development. As a computer scientist, you’ll study these fields to create the tools that data scientists use.</p>\n<p><strong>The</strong> <strong>tools and technologies</strong> <strong>you’ll</strong> <strong>use</strong>\nChoosing data science requires using different tools and technologies to manipulate data. These tools include machine learning libraries <strong>(TensorFlow)</strong> and languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\"><strong>Python</strong></a> <strong>and R</strong>. Python libraries like Pandas will help you with data manipulation and NumPy for math calculations. As a data scientist, you’ll also use big data technologies like Hadoop to work with huge amounts of data.</p>\n<p>On the other hand, computer science focuses on software development. As a computer scientist, you’ll use programming languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/cpp\" target=\"_blank\">C++</a>, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> to create different web applications. You’ll also use tools like <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/git-github\" target=\"_blank\">Git</a>, databases <strong>(MySQL and</strong> <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\"><strong>MongoDB</strong></a><strong>)</strong>, and IDEs <strong>(VS code)</strong> to write and test codes.</p>\n<h2 id=\"what-education-do-you-need-for-computer-and-data-science-careers\">What education do you need for computer and data science careers?</h2>\n<p>Getting a computer science degree gives you a solid foundation for software development. It will help you understand computer science principles and how to code and solve issues. Examples of these principles include programming languages, data structures, and operating systems. As a computer science graduate, you’ll have a strong foundation that will help you land various tech jobs.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/what-education-do-you-need-for-a-computer-and-data-science-career-xbujx.png\" alt=\"Data science vs. computer science: Educational background\"></p>\n<p>Many universities offer specializations in data science within their computer science programs. Others treat data science as a separate program, recognizing it as a field in its own right. They teach you all about machine learning, data visualization, statistics, and more. These data science programs combine ideas from computer science, mathematics, and other fields. At the end of the program, you’ll get a data science degree and the necessary skills to get a tech job.</p>\n<p>Studying at a university is not the only way to get a data and computer science education. Many computer science students and aspiring data scientists attend boot camps and learn via certifications or online tutorials. For instance, you can find many <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science courses</a> on <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> and learn at your own pace.</p>\n<p>Learning this way is more flexible and can work with all kinds of schedules and ways of learning. For instance, you can juggle work and study at the same time, which is much harder to do when you study at a university. If you go for a traditional degree like a data science degree, you’ll need to invest more time, but you’ll get a broad education.</p>\n<p>With these educational paths in mind, a common question arises: <strong>D**</strong>o you need a computer science degree to pursue a career in data science?** The answer is a simple no.</p>\n<p>A computer science degree is not always required for computer and data science positions. It can help you start your career in data science, for example, by giving you a solid programming foundation. However, you can study other fields like mathematics, physics, and economics and still be a successful data scientist. You can also go through boot camps and online tutorials on data analysis, machine learning, and data visualization to gain the necessary skills.</p>\n<p>Also, having some practical skills and constant practicing will give you more experience. When practicing, work on personal and open-source projects and build your portfolio to increase your chances of getting a job. Create time to attend meetups and <a href=\"https://discord.com/invite/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">join online communities</a> to chat with other professionals.</p>\n<h2 id=\"what-are-the-essential-skills-youll-need\">What are the essential skills you’ll need?</h2>\n<p>Computer science and data science have a broad range of specialized skill sets. Some of these skills are relevant in both fields, and others are unique.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/essential-skills-for-computer-science-and-data-science-k8p58.png\" alt=\"Computer science and data science skills\"></p>\n<p>Even though computer science and data science are not the same, they do have some skills in common. These shared skills make it easy to switch between the two fields. Yes, it’s true; you can transition from computer to data science and vice versa. The following are some examples of these shared skills:</p>\n<ul>\n<li><strong>Programming skills</strong>: Programming skills are a crucial common ground for both fields. Knowing how to code to solve problems as a computer or data scientist is important. The process involves learning programming languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, having a deep understanding of data structures, and more. It lets you do software development <strong>(computer science)</strong> or data manipulation <strong>(data science)</strong>. However, it is worth noting that some tasks, like data visualization, do not require coding.</li>\n<li><strong>Solving problems:</strong> As a computer or data scientist, it is important to be able to solve problems. This helps you to create software, fix errors, and understand data.</li>\n<li><strong>Mathematics and statistics</strong>: Knowledge of mathematics and statistics will help you to solve problems in both fields. Computer science uses math principles in areas like algorithms and data structures. They will help you as a computer scientist make fast and better software and solve coding issues. As a data scientist, you use statistics to analyze data and machine learning.</li>\n</ul>\n<h3 id=\"what-skills-do-you-need-for-computer-science\">What skills do you need for computer science?</h3>\n<ul>\n<li><strong>Programming languages:</strong> Computer scientists use programming languages to give instructions to computers**.** Knowing one or more of these programming languages <strong>(JavaScript, Java, etc.)</strong> will help you to be successful in this field.</li>\n<li><strong>System architecture:</strong> Knowledge of system architecture will help you build reliable computer systems**.**</li>\n<li><strong>Software development methodologies:</strong> Software methodologies help you to plan and manage software projects. These methodologies <strong>(agile, scrum, etc.)</strong> will help you collaborate better with others when creating software.</li>\n</ul>\n<h3 id=\"what-skills-do-you-need-for-data-science\">What skills do you need for data science?</h3>\n<ul>\n<li><strong>Machine learning techniques</strong>: Machine learning techniques are important skills in data science. A deep understanding of machine learning techniques will help you build prediction models. Among the many examples of these techniques are clustering and decision trees. They allow computers to make predictions and recognize patterns without instructions from anyone.</li>\n<li><strong>Data analytics:</strong> To get into the data science field, you must know data analytics. It is the starting point for many data science tasks, e.g., building machine learning models. Data analytics allows you to understand data, find patterns, and draw conclusions.</li>\n<li><strong>Data visualization techniques</strong>: These help present data results in clear visual stories. As a data scientist, they allow you to show patterns that might be hard to see in raw numbers in pictures or graphs. You do this using tools like Tableau, Matplotlib, or Power BI. Some examples of these techniques include bar charts, histograms, and scatter plots.</li>\n</ul>\n<h2 id=\"how-to-choose-between-data-science-and-computer-science\">How to choose between data science and computer science</h2>\n<p>Let’s get into the details to help you decide which field fits you best. Choosing between both fields involves understanding your strengths, interests, and the job market.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/how-to-choose-between-data-science-and-computer-science-zo7p5.png\" alt=\"How to choose between computer and data science\"></p>\n<p><strong>Your strengths and educational background</strong>\nThe path you choose boils down to what you’re into, what you’re good at, and your educational background. Computer science might be a good fit if you’re into how computers work and creating software systems. An academic background in computer science or engineering also makes you a good fit.</p>\n<p>If you like finding hidden patterns in data and solving problems, then data science could be for you. You’ll also be a good fit if you’ve studied mathematics, economics, or computer science.</p>\n<p><strong>Earning potential and industry demand</strong>\nMany people ask: <strong>Which pays more, data science or computer science?</strong> Well, both fields pay high salaries and are in high demand in the industry.</p>\n<p>Data scientists are in high demand across various sectors, like healthcare and finance. <a href=\"https://www.indeed.com/career/data-scientist/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">According to Indeed</a>, the average salary for a data scientist in the United States (USA) across all industries is <strong>$123,141.</strong></p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-salary-for-a-data-scientist-vnv54.png\" alt=\"Average salary for a data scientist\"></p>\n<p>Computer science professionals like software engineers and software developers are also in demand. <a href=\"https://www.indeed.com/career/computer-scientist/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">According to Indeed</a>, computer scientists in the USA make around $121,452 a year on average.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-salary-for-a-computer-scientist-88wog.png\" alt=\"Average salary for a computer scientist\"></p>\n<p>How much money you earn can depend on where you live, your field, and your skills. roadmap.sh provides <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer</a> and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> resources to help you improve in both fields.</p>\n<h2 id=\"faq-data-science-or-computer-science\">FAQ: Data science or computer science?</h2>\n<p>The following are answers to common questions to help you start your career as a computer and data scientist.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/faq-data-science-or-computer-science-he3pu.png\" alt=\"Frequently asked questions about computer and data science\"></p>\n<p><strong>Is data science harder than computer science?</strong>\nData science and computer science are challenging fields in their different ways. So, it is difficult to say one field is harder than another. The difficulty level varies based on personal viewpoints, interests, and capabilities.</p>\n<p><strong>Is data science still in demand in 2025?</strong>\nYes, data science is still in demand in 2025. <a href=\"https://www.bls.gov/ooh/math/data-scientists.htm#:~:text=in%20May%202023.-,Job%20Outlook,on%20average%2C%20over%20the%20decade.\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">The US Bureau of Labor Statistics</a> predicts a 36% increase in data science jobs from 2023 to 2033.</p>\n<p><strong>How long does it take to complete most computer science programs?</strong>\nComputer science programs like a bachelor’s degree often take four years to complete. Master’s programs take one to three years, depending on your pace or the school. Bootcamps and online certifications, however, may take less time.</p>\n<p><strong>Is data science more focused on mathematics or computer science?</strong>\nBoth fields are important parts of data science—you can’t have one without the other! It uses statistics and mathematical concepts to analyze data and computer science for handling data and building models. The balance may vary depending on the specific role, project, or focus within data science.</p>\n<h2 id=\"what-next\">What Next?</h2>\n<p>Deciding between data science and computer science does not need to be a difficult task. Figure out what works best for you by thinking about what you like, what you’re good at, and what you want to achieve.</p>\n<p>Also, you don’t have to limit yourself to just one field. Many people use data and computer science skills to solve problems daily. So, it is very normal to be good in both fields.</p>\n<p>However, if you’re a beginner, focus on improving at one before learning another. <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> provides roadmap guides for you to learn <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer</a> and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a>. Both roadmaps contain resources and everything you need to get started.</p>";

				const frontmatter$1s = {"title":"Data Science vs. Computer Science: Which Path to Choose","description":"Data science or computer science? Learn the tools, roles, and paths in each field to decide which fits your strengths and career goals.","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-computer-science","seo":{"title":"Data Science vs. Computer Science: Which Path to Choose","description":"Data science or computer science? Learn the tools, roles, and paths in each field to decide which fits your strengths and career goals.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-computer-science-rudoc.jpg"},"isNew":false,"type":"textual","date":"2025-02-06T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1s = "/workspace/src/data/guides/ai-data-scientist-vs-computer-science.md";
				const url$1s = undefined;
				function rawContent$1s() {
					return "   \n                                                                \n                                                                                                                                                      \n               \n                                                        \n    \n                                                                  \n                                                                                                                                                        \n                                                                                          \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs computer science comparison?](https://assets.roadmap.sh/guest/data-science-vs-computer-science-rudoc.jpg)\n\nIf you love uncovering patterns in data and using those insights to solve real-world problems, [data science](https://roadmap.sh/ai-data-scientist) might be the right fit for you. On the other hand, if you're drawn to creating systems, writing code, and building the tools that power today's technology, [computer science](https://roadmap.sh/computer-science) could be your path.\n\nFrom my experience working on projects in both fields, I've seen how they overlap and where they differ. As a data scientist, you'll focus on analyzing complex data using math, programming, and problem-solving skills. Your work might include building models to extract meaningful insights from data, enabling you to identify patterns, predict trends, detect fraud, or improve recommendations.\n\nComputer science, in contrast, focuses on understanding how computing systems work. You'll write code, design algorithms, and develop programs to solve problems. You might create web applications and software tools or even dive into artificial intelligence and cybersecurity.\n\nAlthough these fields overlap in areas like programming, they cater to different interests and career goals. In this guide, I'll walk you through what each field involves, the skills you need, and the opportunities they offer. By the end, you'll have the clarity to make an informed choice about your future based on which path suits you best.\n\n## Data science vs. computer science: What are the key differences?\n\nFirst, let's look at this table that summarizes the differences. Then, we'll discuss each one in more detail.\n\n| Characteristics               | Data science                                                               | Computer science                                                           |\n| ----------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- |\n| Primary focus                 | Extracting insights from data                                              | Building computer systems to perform tasks                                 |\n| Industries                    | Finance, healthcare, marketing, e-commerce                                 | cybersecurity, gaming, education                                           |\n| Career paths                  | Data analysts, data scientists, machine learning engineers, data engineers | Software engineers, computer scientists, cybersecurity analyst             |\n| Key areas and specializations | Machine learning, data mining, data visualization, statistical analysis    | Data structures, software development, artificial intelligence             |\n| Tools and technologies        | Python (Pandas, NumPy), R, SQL, TensorFlow                                 | Python, Java, C++, JavaScript, Git, Vs code, databases (MySQL and MongoDB) |\n| Educational background        | Mathematics, economics, computer science, data science, physics            | computer science, mathematics, electrical engineering                      |\n\n**Your primary focus**\nThe big difference between data science and computer science is their primary focus. If you choose data science, your role will involve extracting insights and helpful information from datasets. You'll use different tools and techniques to interpret and analyze data. The aim is to help businesses make data-driven decisions. Netflix, for example, uses machine learning and data science to learn your viewing history. Data scientists then analyze data to predict what shows you'll like and suggest movies.\n\nIn contrast, if you choose computer science, you'll focus on building computer systems to perform tasks. You'll create tools that make computers, web apps, data analysis, etc, work better. For example, a company like Google uses computer science to create algorithms that make search engines work. Computer scientists then create software systems and algorithms that will give you accurate results when you search online.\n\n**Your career path**\nComputer science and data science have very different career paths. As a data science professional, you'll use data to help make decisions and solve business problems. You'll work in various industries, like finance and healthcare, and take on roles such as:\n\n- **Data analyst**: Collect and analyze data to help businesses make intelligent decisions. For example, as a data analyst in healthcare, you would use data analysis to know which treatments work best for a specific illness.\n- **Data scientists**: Build predictive models to predict outcomes. As a data scientist in finance, you'll use data analysis to forecast how the stock market might go.\n- **Data engineers**: Build and maintain data systems that enable data analysis.\n- **Machine learning engineer**: Design and build machine learning models to solve everyday problems. As a machine learning engineer at a robotic car company, you'll create models to spot people, roads, traffic lights, and other cars. You'll be responsible for designing machine learning algorithms to help the car make fast decisions.\n\n![Data science vs. computer science: Career paths](https://assets.roadmap.sh/guest/career-paths-and-industries-for-data-science-and-computer-science-0tzlq.png)\n\nIn contrast, as a computer science professional, you'll build the tools data engineers use to get work done. You'll also work in different industries, such as cybersecurity and gaming, and take on roles like:\n\n- **Software engineers**: Build and maintain software systems, including gaming platforms like Steam.\n- **Computer scientists:** Study computer systems' theoretical and practical aspects to create applications.\n- **Cybersecurity analyst**: Monitor and address possible security threats like data breaches.\n\n**Your key areas** **of** **specialization**\nData science focuses on machine learning, data mining, statistical analysis, and more**.** As a data scientist, you'll use these specializations to understand trends and make better decisions.\n\nIn contrast, computer science focuses on artificial intelligence, [data structures](https://roadmap.sh/datastructures-and-algorithms), and software development. As a computer scientist, you'll study these fields to create the tools that data scientists use.\n\n**The** **tools and technologies** **you'll** **use**\nChoosing data science requires using different tools and technologies to manipulate data. These tools include machine learning libraries **(TensorFlow)** and languages like [**Python**](https://roadmap.sh/python) **and R**. Python libraries like Pandas will help you with data manipulation and NumPy for math calculations. As a data scientist, you'll also use big data technologies like Hadoop to work with huge amounts of data.\n\nOn the other hand, computer science focuses on software development. As a computer scientist, you'll use programming languages like [Python](https://roadmap.sh/python), [C++](https://roadmap.sh/cpp), and [JavaScript](https://roadmap.sh/javascript) to create different web applications. You'll also use tools like [React](https://roadmap.sh/react), [Git](https://roadmap.sh/git-github), databases **(MySQL and** [**MongoDB**](https://roadmap.sh/mongodb)**)**, and IDEs **(VS code)** to write and test codes.\n\n## What education do you need for computer and data science careers?\n\nGetting a computer science degree gives you a solid foundation for software development. It will help you understand computer science principles and how to code and solve issues. Examples of these principles include programming languages, data structures, and operating systems. As a computer science graduate, you'll have a strong foundation that will help you land various tech jobs.\n\n![Data science vs. computer science: Educational background](https://assets.roadmap.sh/guest/what-education-do-you-need-for-a-computer-and-data-science-career-xbujx.png)\n\nMany universities offer specializations in data science within their computer science programs. Others treat data science as a separate program, recognizing it as a field in its own right. They teach you all about machine learning, data visualization, statistics, and more. These data science programs combine ideas from computer science, mathematics, and other fields. At the end of the program, you'll get a data science degree and the necessary skills to get a tech job.\n\nStudying at a university is not the only way to get a data and computer science education. Many computer science students and aspiring data scientists attend boot camps and learn via certifications or online tutorials. For instance, you can find many [data science courses](https://roadmap.sh/ai-data-scientist) on [roadmap.sh](http://roadmap.sh) and learn at your own pace.\n\nLearning this way is more flexible and can work with all kinds of schedules and ways of learning. For instance, you can juggle work and study at the same time, which is much harder to do when you study at a university. If you go for a traditional degree like a data science degree, you'll need to invest more time, but you'll get a broad education.\n\nWith these educational paths in mind, a common question arises: **D\\*\\***o you need a computer science degree to pursue a career in data science?\\*\\* The answer is a simple no.\n\nA computer science degree is not always required for computer and data science positions. It can help you start your career in data science, for example, by giving you a solid programming foundation. However, you can study other fields like mathematics, physics, and economics and still be a successful data scientist. You can also go through boot camps and online tutorials on data analysis, machine learning, and data visualization to gain the necessary skills.\n\nAlso, having some practical skills and constant practicing will give you more experience. When practicing, work on personal and open-source projects and build your portfolio to increase your chances of getting a job. Create time to attend meetups and [join online communities](https://discord.com/invite/cJpEt5Qbwa) to chat with other professionals.\n\n## What are the essential skills you'll need?\n\nComputer science and data science have a broad range of specialized skill sets. Some of these skills are relevant in both fields, and others are unique.\n\n![Computer science and data science skills](https://assets.roadmap.sh/guest/essential-skills-for-computer-science-and-data-science-k8p58.png)\n\nEven though computer science and data science are not the same, they do have some skills in common. These shared skills make it easy to switch between the two fields. Yes, it's true; you can transition from computer to data science and vice versa. The following are some examples of these shared skills:\n\n- **Programming skills**: Programming skills are a crucial common ground for both fields. Knowing how to code to solve problems as a computer or data scientist is important. The process involves learning programming languages like [Python](https://roadmap.sh/python), having a deep understanding of data structures, and more. It lets you do software development **(computer science)** or data manipulation **(data science)**. However, it is worth noting that some tasks, like data visualization, do not require coding.\n- **Solving problems:** As a computer or data scientist, it is important to be able to solve problems. This helps you to create software, fix errors, and understand data.\n- **Mathematics and statistics**: Knowledge of mathematics and statistics will help you to solve problems in both fields. Computer science uses math principles in areas like algorithms and data structures. They will help you as a computer scientist make fast and better software and solve coding issues. As a data scientist, you use statistics to analyze data and machine learning.\n\n### What skills do you need for computer science?\n\n- **Programming languages:** Computer scientists use programming languages to give instructions to computers**.** Knowing one or more of these programming languages **(JavaScript, Java, etc.)** will help you to be successful in this field.\n- **System architecture:** Knowledge of system architecture will help you build reliable computer systems**.**\n- **Software development methodologies:** Software methodologies help you to plan and manage software projects. These methodologies **(agile, scrum, etc.)** will help you collaborate better with others when creating software.\n\n### What skills do you need for data science?\n\n- **Machine learning techniques**: Machine learning techniques are important skills in data science. A deep understanding of machine learning techniques will help you build prediction models. Among the many examples of these techniques are clustering and decision trees. They allow computers to make predictions and recognize patterns without instructions from anyone.\n- **Data analytics:** To get into the data science field, you must know data analytics. It is the starting point for many data science tasks, e.g., building machine learning models. Data analytics allows you to understand data, find patterns, and draw conclusions.\n- **Data visualization techniques**: These help present data results in clear visual stories. As a data scientist, they allow you to show patterns that might be hard to see in raw numbers in pictures or graphs. You do this using tools like Tableau, Matplotlib, or Power BI. Some examples of these techniques include bar charts, histograms, and scatter plots.\n\n## How to choose between data science and computer science\n\nLet's get into the details to help you decide which field fits you best. Choosing between both fields involves understanding your strengths, interests, and the job market.\n\n![How to choose between computer and data science](https://assets.roadmap.sh/guest/how-to-choose-between-data-science-and-computer-science-zo7p5.png)\n\n**Your strengths and educational background**\nThe path you choose boils down to what you're into, what you're good at, and your educational background. Computer science might be a good fit if you're into how computers work and creating software systems. An academic background in computer science or engineering also makes you a good fit.\n\nIf you like finding hidden patterns in data and solving problems, then data science could be for you. You'll also be a good fit if you've studied mathematics, economics, or computer science.\n\n**Earning potential and industry demand**\nMany people ask: **Which pays more, data science or computer science?** Well, both fields pay high salaries and are in high demand in the industry.\n\nData scientists are in high demand across various sectors, like healthcare and finance. [According to Indeed](https://www.indeed.com/career/data-scientist/salaries?from=top_sb), the average salary for a data scientist in the United States (USA) across all industries is **$123,141.**\n\n![Average salary for a data scientist](https://assets.roadmap.sh/guest/average-salary-for-a-data-scientist-vnv54.png)\n\nComputer science professionals like software engineers and software developers are also in demand. [According to Indeed](https://www.indeed.com/career/computer-scientist/salaries?from=top_sb), computer scientists in the USA make around $121,452 a year on average.\n\n![Average salary for a computer scientist](https://assets.roadmap.sh/guest/average-salary-for-a-computer-scientist-88wog.png)\n\nHow much money you earn can depend on where you live, your field, and your skills. roadmap.sh provides [computer](https://roadmap.sh/computer-science) and [data science](https://roadmap.sh/ai-data-scientist) resources to help you improve in both fields.\n\n## FAQ: Data science or computer science?\n\nThe following are answers to common questions to help you start your career as a computer and data scientist.\n\n![Frequently asked questions about computer and data science](https://assets.roadmap.sh/guest/faq-data-science-or-computer-science-he3pu.png)\n\n**Is data science harder than computer science?**\nData science and computer science are challenging fields in their different ways. So, it is difficult to say one field is harder than another. The difficulty level varies based on personal viewpoints, interests, and capabilities.\n\n**Is data science still in demand in 2025?**\nYes, data science is still in demand in 2025. [The US Bureau of Labor Statistics](https://www.bls.gov/ooh/math/data-scientists.htm#:~:text=in%20May%202023.-,Job%20Outlook,on%20average%2C%20over%20the%20decade.) predicts a 36% increase in data science jobs from 2023 to 2033.\n\n**How long does it take to complete most computer science programs?**\nComputer science programs like a bachelor's degree often take four years to complete. Master's programs take one to three years, depending on your pace or the school. Bootcamps and online certifications, however, may take less time.\n\n**Is data science more focused on mathematics or computer science?**\nBoth fields are important parts of data science—you can't have one without the other! It uses statistics and mathematical concepts to analyze data and computer science for handling data and building models. The balance may vary depending on the specific role, project, or focus within data science.\n\n## What Next?\n\nDeciding between data science and computer science does not need to be a difficult task. Figure out what works best for you by thinking about what you like, what you're good at, and what you want to achieve.\n\nAlso, you don't have to limit yourself to just one field. Many people use data and computer science skills to solve problems daily. So, it is very normal to be good in both fields.\n\nHowever, if you're a beginner, focus on improving at one before learning another. [roadmap.sh](http://roadmap.sh) provides roadmap guides for you to learn [computer](https://roadmap.sh/computer-science) and [data science](https://roadmap.sh/ai-data-scientist). Both roadmaps contain resources and everything you need to get started.\n";
				}
				async function compiledContent$1s() {
					return await html$1s();
				}
				function getHeadings$1s() {
					return [{"depth":2,"slug":"data-science-vs-computer-science-what-are-the-key-differences","text":"Data science vs. computer science: What are the key differences?"},{"depth":2,"slug":"what-education-do-you-need-for-computer-and-data-science-careers","text":"What education do you need for computer and data science careers?"},{"depth":2,"slug":"what-are-the-essential-skills-youll-need","text":"What are the essential skills you’ll need?"},{"depth":3,"slug":"what-skills-do-you-need-for-computer-science","text":"What skills do you need for computer science?"},{"depth":3,"slug":"what-skills-do-you-need-for-data-science","text":"What skills do you need for data science?"},{"depth":2,"slug":"how-to-choose-between-data-science-and-computer-science","text":"How to choose between data science and computer science"},{"depth":2,"slug":"faq-data-science-or-computer-science","text":"FAQ: Data science or computer science?"},{"depth":2,"slug":"what-next","text":"What Next?"}];
				}

				const Content$1s = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1s;
					content.file = file$1s;
					content.url = url$1s;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1s())}`;
				});

const __vite_glob_0_6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1s,
	compiledContent: compiledContent$1s,
	default: Content$1s,
	file: file$1s,
	frontmatter: frontmatter$1s,
	getHeadings: getHeadings$1s,
	rawContent: rawContent$1s,
	url: url$1s
}, Symbol.toStringTag, { value: 'Module' }));

const html$1r = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-xjcfh.jpg\" alt=\"Data Science and Cyber Security compared\"></p>\n<p>Data science and cyber security are two of the most in-demand career options in IT. Both career paths deal with analyzing complex data and come with various challenges. For beginners, a structured learning path in <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> or <a href=\"https://roadmap.sh/cyber-security\" target=\"_blank\">cybersecurity</a> can be a great starting point. However, if you already have good knowledge of both fields but find it difficult to choose the right one for your career, this guide will definitely help.</p>\n<p>If you want to analyze large volumes of data and uncover deep insights, data science is a great fit for you. On the other hand, if you are passionate about protecting digital assets, preventing cyber threats, and ensuring information security, cyber security might be the better path for you.</p>\n<p>Data science vs. cyber security is a common debate among tech professionals when choosing a career path, as both fields offer high salaries, strong career growth, and essential roles in modern businesses. This results in confusion among career switchers and younger graduates struggling with the choice of cyber security or data science. So, let’s compare the two based on these factors to make it easier for you to choose a career path.</p>\n<p>In this guide, you’ll learn the job responsibilities of cyber security and data science, the required skills, and career prospects.</p>\n<h2 id=\"differences-between-data-science-and-cyber-security\">Differences between data science and cyber security</h2>\n<p>The following table provides a quick comparison between cyber security and data science.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th><strong>Data Science</strong></th><th><strong>Cyber Security</strong></th></tr></thead><tbody><tr><td><strong>Key role</strong></td><td>Data Scientists use computer science and statistical analysis and organizational data to analyze and solve complex business problems.</td><td>Cyber security professionals use security tools, networking fundamentals, and incorporate risk management strategies to prevent security breaches and threats.</td></tr><tr><td><strong>Industries</strong></td><td>Healthcare, technology, finance.</td><td>Software and SaaS companies, healthcare, government, etc.</td></tr><tr><td><strong>Tools</strong></td><td>TensorFlow, Pandas, Jupyter Notebooks.</td><td>Firewalls, SIEM systems, intrusion detection tools, and encryption software.</td></tr><tr><td><strong>Skills</strong></td><td>Expertise in programming, machine learning skills, statistics, data visualization, big data, natural language processing, data manipulation and data wrangling.</td><td>Knowledge of security protocols, networking fundamentals, risk management skills, incident response, penetration testing and ethical hacking.</td></tr><tr><td><strong>Career paths</strong></td><td>Data scientists, machine learning engineer, AI analysts, data engineer, data analyst.</td><td>Security analyst, cyber security engineer, information security manager, network engineer, security auditor.</td></tr><tr><td><strong>Salary range</strong></td><td>For the data science field, the salary ranges from $53,925 to $161,715 per year.</td><td>For cyber security professionals, the salary ranges from $91,123 to $136,104 per year.</td></tr></tbody></table>\n<h2 id=\"what-are-data-science-and-cyber-security\">What are data science and cyber security?</h2>\n<p>Data science is a multidisciplinary field focused on extracting knowledge and insights from data to solve business problems. It involves statistical methods, programming, machine learning, data analytics. and domain expertise to build models and analyze structured and unstructured data while ensuring data integrity. This field is widely applied across industries such as healthcare, tech, and finance.</p>\n<p>Cyber security, on the other hand, focuses on protecting data and systems from cyber threats and unauthorized access. As a cybersecurity professional, you will use firewalls, intrusion detection systems, and encryption to secure systems and data while maintaining data integrity. Cyber security is crucial in software companies, SaaS platforms, healthcare, and government sectors.</p>\n<p>Despite their differences, both data science and cyber security rely on data. For example, if you work as a data scientist in an eCommerce company, you may analyze consumer related data to recommend products and drive sales. If you are a cyber security expert in the same company, your job will be to detect and prevent fraud by analyzing transaction patterns for suspicious activity. While data science focuses on using secure data to generate insights, cybersecurity relies on large datasets to identify threats and vulnerabilities.</p>\n<p>As data grows in volume and importance, the demand for data scientists and cyber security professionals will continue to rise. If you’re considering a career in either field, you’ll find plenty of opportunities.</p>\n<p>Now, let’s look at the skills you need to get started in each field.</p>\n<h2 id=\"data-science-vs-cyber-security-skills-and-tools-required-for-each-field\">Data science vs. cyber security: Skills and tools required for each field</h2>\n<p>The data science role generally involves building predictive models based on the analyzed datasets, data cleaning, and visualizations. Cyber security, on the other hand, involves tasks like monitoring systems and performing risk assessments to protect digital assets.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-skills-e6x9b.png\" alt=\"Data science vs. cyber security: Skills\"></p>\n<p>Let’s go into detail and explain the different skill sets and tools that aspiring data scientists and cyber security experts must have.</p>\n<h3 id=\"skills-and-tools-for-data-science\">Skills and tools for data science</h3>\n<p>The process of extracting data, which encompasses both structured and unstructured information, requires fundamental skills and tools that can handle the initial analysis and management challenges effectively. If you’re preparing for a data science job, you must have the technical skills to perform analyses and the interpersonal skills to communicate your findings effectively to stakeholders and team members.</p>\n<p>Some of the key skills an interviewer looks for in a data scientist profile include:</p>\n<ul>\n<li><strong>Expertise in programming languages:</strong> A certified data scientist must be good at different programming languages, including <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, R, SAS, and <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a>. You must know the basics of these languages to sort, analyze, and manage large datasets easily.</li>\n<li><strong>Machine learning skills:</strong> You should be able to sort and synthesize data while making better predictions based on your collected data. Additionally, you should be able to implement appropriate algorithms to solve complex problems.</li>\n<li><strong>Statistics:</strong> The data scientist’s role involves to build models based on analysis and draw actionable insights. You must know how to use statistical analysis concepts like probability distribution and linear regression to write high-quality models and algorithms for your project.</li>\n<li><strong>Data visualization:</strong> Apart from analyzing data, you must also learn skills on how to represent your work to stakeholders. So, to create charts and graphs, you must know how to use data visualization tools like Tableau and Power BI.</li>\n<li><strong>Data wrangling:</strong> Expertise in techniques like cleaning and organizing complex data and pattern recognition to ease the analysis process.</li>\n</ul>\n<p>If you’re applying for a data science role, you should have expertise in tools such as TensorFlow, Pandas, Jupyter Notebooks, and Tableau.</p>\n<h3 id=\"skills-and-tools-for-cybersecurity\">Skills and tools for cybersecurity</h3>\n<p>As a cyber security expert, you must have the technical expertise and skills to identify and respond to threats in real time.</p>\n<p>You must excel in the following cyber security skills and tools to qualify for different career opportunities within the cyber security field:</p>\n<ul>\n<li><strong>Networking:</strong> You must deeply understand network protocols, operating systems, security concepts, and architectures to assess vulnerabilities before attackers exploit systems.</li>\n<li><strong>Risk management:</strong> Expertise in managing and mitigating cyber security risks is essential. These skills allow you to better assess the likelihood and impact of incoming known threats.</li>\n<li><strong>Ethical hacking:</strong> As an ethical hacker, you’ll use the same tools and techniques as malicious hackers but with permission from the system owner. By knowing how they act and their strategies, you can improve your network security and overall security posture.</li>\n<li><strong>Knowledge of security protocols:</strong> A strong understanding of the various security protocols, like encryption protocols, network security protocols, authentication protocols, etc., is a must.</li>\n</ul>\n<p>In addition, you must know how to use firewalls, security information and event management (SIEM) systems, intrusion detection tools, and encryption software to qualify for different career options in cybersecurity. Managing data security is not a simple task; it requires a sharp mind and analytical thinking to beat cyber threats and respond to security breaches.</p>\n<p>Let’s move forward to learn about the salary range for each job position to make it easier for you to compare and select based on your requirements.</p>\n<h2 id=\"career-opportunities-and-salary-insights\">Career opportunities and salary insights</h2>\n<p>As more businesses use data to make decisions, the demand for data science professionals is high among different industries. Cyber security experts are also in constant demand with the introduction of new and advanced technologies like artificial intelligence (AI) and cloud computing.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-career-opportunities-adyg5.png\" alt=\"Data science vs cyber security: Career opportunities\"></p>\n<p>Let’s investigate the salary insights and career options available in both fields to identify your area of interest.</p>\n<h3 id=\"data-science-career-paths-and-salary-insights\">Data science career paths and salary insights</h3>\n<p>Planning to proceed with the data science field? If yes, the following career options are available for consideration:</p>\n<ul>\n<li>Data scientist</li>\n<li>Machine learning engineer</li>\n<li>AI specialist</li>\n</ul>\n<p><strong>Data scientist:</strong> In this role, you’ll find patterns in complex datasets, create algorithms and data models, deploy data tools, perform data analysis, and predict solutions to stakeholders based on the analysis. You can incorporate machine learning and deep learning practices to improve data quality and predict outcomes. As a data scientist, you must have a good command of your communication skills apart from technical skills and statistical modeling expertise.</p>\n<p>The average salary of an employee pursuing a career as a senior data scientist in the United States is $123,069 per year.</p>\n<p><strong>Machine learning engineer:</strong> If you apply for this position, your task will be to research and build machine learning algorithms and artificial intelligence systems. Machine learning professionals are also responsible for optimizing frameworks and performing statistical analysis.</p>\n<p>The average salary for this job role in the United States ranges around $161,715 annually.</p>\n<p><strong>AI specialist:</strong> Your role as an AI specialist is to develop and optimize AI systems. Hence, ensure you know the basics of AI concepts and programming. In addition, you might be responsible for AI system integration, designing AI strategies, and reinforcement learning.</p>\n<p>According to ZipRecruiter, the average salary for an AI Specialist in the United States is $53,925 a year.</p>\n<p>Data engineer, data analyst, and data architect are a few more job roles within data science that you can apply for.</p>\n<h3 id=\"cyber-security-career-paths-and-salary-insights\">Cyber security career paths and salary insights</h3>\n<p>If you have an interest in cybersecurity, you can choose from the following career path options:</p>\n<ul>\n<li>Security analyst</li>\n<li>Cyber security engineer</li>\n<li>Information security manager</li>\n</ul>\n<p><strong>Security analyst:</strong> As a Cyber security analyst, your main role is to identify and troubleshoot problems within security systems and protect sensitive data. Security analyst professionals monitor systems and perform compliance control testing to minimize security risks. Based on their analysis, you can also recommend reducing risk and securing systems.</p>\n<p>According to Indeed, the average salary of a cyber security analyst in the United States is $91,123 per year.</p>\n<p><strong>Cyber security engineers:</strong> Cyber security engineers are the front warriors who design and configure solutions against cyber criminals. You will have to act as an ethical hacker to strategize and identify vulnerabilities before attackers exploit them.</p>\n<p>ZipRecruiter states that the average salary of an employee pursuing a career in this position in the United States is $122,890 per year.</p>\n<p><strong>Information security manager:</strong> In this role, your main focus will be on developing and implementing security policies. You will also handle incident response plans, threat monitoring, and the implementation of security best practices for protecting computer systems.</p>\n<p>According to ZipRecruiter, the average salary of a Certified Information Security Manager in the United States is $136,104 per year.</p>\n<p>Let’s dive in and take a closer look at the work environment in both fields to help you decide which one is best for you.</p>\n<h2 id=\"work-environment-differences\">Work environment differences</h2>\n<p>The work environments in data science and cyber security differ significantly, appealing to distinct personalities and work styles.</p>\n<p>Data science typically offers a more collaborative and research-oriented atmosphere. Imagine teams of data analysts, data science professionals, and researchers brainstorming, analyzing historical data, sharing insights, and working together to find solutions for complex datasets.</p>\n<p>Flexibility is often a key feature, both in terms of working hours and location. While deadlines exist in data science, the project-based nature often allows for a more measured pace, with timelines that can stretch over weeks or months. This allows for deep dives into data, thorough data analysis, and the development of sophisticated models.</p>\n<p>You will be more attracted to the data science field if you enjoy intellectual exploration and the satisfaction of uncovering hidden patterns. Data science is great if you like intellectual exploration, problem solving and finding hidden patterns. It’s creative and encourages deep analysis of complex problems, so if you like structured but exploratory work, it’s a good fit.</p>\n<p>Cyber security, on the other hand, is a high-stakes, fast-paced world. The focus is on real-time threat prevention, monitoring security infrastructure, and rapid response to security incidents.</p>\n<p>Security professionals need to be on high alert, anticipating and countering attacks on systems. It’s intense work, with split second decisions and big consequences.</p>\n<p>The nature of cyber security often demands irregular hours, especially during security crises. A major breach can require teams to work around the clock to contain the damage and restore systems. While this can be incredibly demanding, it can also be immensely rewarding for those who thrive in high-pressure situations and enjoy the thrill of the chase.</p>\n<p>Whether you are planning for cyber security or data science, consider all aspects, including the work environment.</p>\n<h2 id=\"cyber-security-and-data-science-which-path-is-best-for-you\">Cyber security and data science: Which path is best for you?</h2>\n<p>It’s best to keep your interests, skills, and personality in mind when selecting between cyber security and data science.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-9bhbk.png\" alt=\"Data science vs. cybersecurity: Which is better?\"></p>\n<p>If you find yourself drawn to the world of data, enjoy the challenge of extracting meaning from raw data, and prefer coding and statistical analysis over other practices, data science might be the right path for you. Do you get excited about building predictive models, uncovering trends, and using data to solve real-world problems? If so, you’ll likely find the intellectual challenges of data science stimulating.</p>\n<p>On the other hand, if your passion lies in protecting systems, staying one step ahead of hackers, and responding to high-stakes challenges, cybersecurity could be a more fulfilling career choice. If you love understanding cybercriminals’ psychology and preventing them from achieving their goals, this one could be your career goal.</p>\n<p>If you still have questions about cyber security and data science, try taking online courses or doing small projects in each field to find your real interest. You can also work with datasets, experiment with different algorithms, connect with a data engineer, or explore basic cyber security concepts. This hands-on experience will give you valuable insights into your preferences.</p>\n<h2 id=\"whats-next\">What’s Next?</h2>\n<p>Cyber security or data science, whichever path you choose, make sure it fulfills your needs and interests. If working on numbers and models is your thing, data science is the right path for you. However, cyber security could be a better option if you are more inclined toward protecting systems and taking on challenges.</p>\n<p>Choosing between cyber security and data science can be a difficult decision, but this guide has provided key insights to help you evaluate your interests. To further explore your options, check out <a href=\"https://roadmap.sh/cyber-security\" target=\"_blank\">cyber security</a> and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> roadmaps to gain deeper insights into each field. You can also join online courses and get relevant certifications or connect with our experts on the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> to stay up-to-date!</p>";

				const frontmatter$1r = {"title":"Data Science vs. Cyber Security: Which Is Best for You?","description":"Cyber security fights threats. Data science uncovers insights. If you're deciding between them, here's a practical guide based on skills, job roles, and career growth.","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-cyber-security","seo":{"title":"Data Science vs. Cyber Security: Which Is Best for You?","description":"Cyber security fights threats. Data science uncovers insights. If you're deciding between them, here's a practical guide based on skills, job roles, and career growth.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-xjcfh.jpg"},"isNew":true,"type":"textual","date":"2025-04-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1r = "/workspace/src/data/guides/ai-data-scientist-vs-cyber-security.md";
				const url$1r = undefined;
				function rawContent$1r() {
					return "   \n                                                                \n                                                                                                                                                                                      \n               \n                                                      \n    \n                                                                  \n                                                                                                                                                                                        \n                                                                                       \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data Science and Cyber Security compared](https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-xjcfh.jpg)\n\nData science and cyber security are two of the most in-demand career options in IT. Both career paths deal with analyzing complex data and come with various challenges. For beginners, a structured learning path in [data science](https://roadmap.sh/ai-data-scientist) or [cybersecurity](https://roadmap.sh/cyber-security) can be a great starting point. However, if you already have good knowledge of both fields but find it difficult to choose the right one for your career, this guide will definitely help.\n\nIf you want to analyze large volumes of data and uncover deep insights, data science is a great fit for you. On the other hand, if you are passionate about protecting digital assets, preventing cyber threats, and ensuring information security, cyber security might be the better path for you.\n\nData science vs. cyber security is a common debate among tech professionals when choosing a career path, as both fields offer high salaries, strong career growth, and essential roles in modern businesses. This results in confusion among career switchers and younger graduates struggling with the choice of cyber security or data science. So, let's compare the two based on these factors to make it easier for you to choose a career path.\n\nIn this guide, you'll learn the job responsibilities of cyber security and data science, the required skills, and career prospects.\n\n## Differences between data science and cyber security\n\nThe following table provides a quick comparison between cyber security and data science.\n\n|                  | **Data Science**                                                                                                                                                | **Cyber Security**                                                                                                                                     |\n| ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Key role**     | Data Scientists use computer science and statistical analysis and organizational data to analyze and solve complex business problems.                           | Cyber security professionals use security tools, networking fundamentals, and incorporate risk management strategies to prevent security breaches and threats. |\n| **Industries**   | Healthcare, technology, finance.                                                                                                                                | Software and SaaS companies, healthcare, government, etc.                                                                                                  |\n| **Tools**        | TensorFlow, Pandas, Jupyter Notebooks.                                                                                                                          | Firewalls, SIEM systems, intrusion detection tools, and encryption software.                                                                                   |\n| **Skills**       | Expertise in programming, machine learning skills, statistics, data visualization, big data, natural language processing, data manipulation and data wrangling. | Knowledge of security protocols, networking fundamentals, risk management skills, incident response, penetration testing and ethical hacking.                  |\n| **Career paths** | Data scientists, machine learning engineer, AI analysts, data engineer, data analyst.                                                                           | Security analyst, cyber security engineer, information security manager, network engineer, security auditor.                                                   |\n| **Salary range** | For the data science field, the salary ranges from $53,925 to $161,715 per year.                                                                                | For cyber security professionals, the salary ranges from $91,123 to $136,104 per year.                                                                         |\n\n## What are data science and cyber security?\n\nData science is a multidisciplinary field focused on extracting knowledge and insights from data to solve business problems. It involves statistical methods, programming, machine learning, data analytics. and domain expertise to build models and analyze structured and unstructured data while ensuring data integrity. This field is widely applied across industries such as healthcare, tech, and finance.\n\nCyber security, on the other hand, focuses on protecting data and systems from cyber threats and unauthorized access. As a cybersecurity professional, you will use firewalls, intrusion detection systems, and encryption to secure systems and data while maintaining data integrity. Cyber security is crucial in software companies, SaaS platforms, healthcare, and government sectors.\n\nDespite their differences, both data science and cyber security rely on data. For example, if you work as a data scientist in an eCommerce company, you may analyze consumer related data to recommend products and drive sales. If you are a cyber security expert in the same company, your job will be to detect and prevent fraud by analyzing transaction patterns for suspicious activity. While data science focuses on using secure data to generate insights, cybersecurity relies on large datasets to identify threats and vulnerabilities.\n\nAs data grows in volume and importance, the demand for data scientists and cyber security professionals will continue to rise. If you're considering a career in either field, you'll find plenty of opportunities.\n\nNow, let's look at the skills you need to get started in each field.\n\n## Data science vs. cyber security: Skills and tools required for each field\n\nThe data science role generally involves building predictive models based on the analyzed datasets, data cleaning, and visualizations. Cyber security, on the other hand, involves tasks like monitoring systems and performing risk assessments to protect digital assets.\n\n![Data science vs. cyber security: Skills](https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-skills-e6x9b.png)\n\nLet's go into detail and explain the different skill sets and tools that aspiring data scientists and cyber security experts must have.\n\n### Skills and tools for data science\n\nThe process of extracting data, which encompasses both structured and unstructured information, requires fundamental skills and tools that can handle the initial analysis and management challenges effectively. If you're preparing for a data science job, you must have the technical skills to perform analyses and the interpersonal skills to communicate your findings effectively to stakeholders and team members.\n\nSome of the key skills an interviewer looks for in a data scientist profile include:\n\n- **Expertise in programming languages:** A certified data scientist must be good at different programming languages, including [Python](https://roadmap.sh/python), R, SAS, and [SQL](https://roadmap.sh/sql). You must know the basics of these languages to sort, analyze, and manage large datasets easily.\n- **Machine learning skills:** You should be able to sort and synthesize data while making better predictions based on your collected data. Additionally, you should be able to implement appropriate algorithms to solve complex problems.\n- **Statistics:** The data scientist's role involves to build models based on analysis and draw actionable insights. You must know how to use statistical analysis concepts like probability distribution and linear regression to write high-quality models and algorithms for your project.\n- **Data visualization:** Apart from analyzing data, you must also learn skills on how to represent your work to stakeholders. So, to create charts and graphs, you must know how to use data visualization tools like Tableau and Power BI.\n- **Data wrangling:** Expertise in techniques like cleaning and organizing complex data and pattern recognition to ease the analysis process.\n\nIf you're applying for a data science role, you should have expertise in tools such as TensorFlow, Pandas, Jupyter Notebooks, and Tableau.\n\n### Skills and tools for cybersecurity\n\nAs a cyber security expert, you must have the technical expertise and skills to identify and respond to threats in real time. \n\nYou must excel in the following cyber security skills and tools to qualify for different career opportunities within the cyber security field:\n\n- **Networking:** You must deeply understand network protocols, operating systems, security concepts, and architectures to assess vulnerabilities before attackers exploit systems.\n- **Risk management:** Expertise in managing and mitigating cyber security risks is essential. These skills allow you to better assess the likelihood and impact of incoming known threats.\n- **Ethical hacking:** As an ethical hacker, you'll use the same tools and techniques as malicious hackers but with permission from the system owner. By knowing how they act and their strategies, you can improve your network security and overall security posture.\n- **Knowledge of security protocols:** A strong understanding of the various security protocols, like encryption protocols, network security protocols, authentication protocols, etc., is a must.\n\nIn addition, you must know how to use firewalls, security information and event management (SIEM) systems, intrusion detection tools, and encryption software to qualify for different career options in cybersecurity. Managing data security is not a simple task; it requires a sharp mind and analytical thinking to beat cyber threats and respond to security breaches. \n\nLet's move forward to learn about the salary range for each job position to make it easier for you to compare and select based on your requirements.\n\n## Career opportunities and salary insights\n\nAs more businesses use data to make decisions, the demand for data science professionals is high among different industries. Cyber security experts are also in constant demand with the introduction of new and advanced technologies like artificial intelligence (AI) and cloud computing.\n\n![Data science vs cyber security: Career opportunities](https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-career-opportunities-adyg5.png)\n\nLet's investigate the salary insights and career options available in both fields to identify your area of interest.\n\n### Data science career paths and salary insights\n\nPlanning to proceed with the data science field? If yes, the following career options are available for consideration:\n\n- Data scientist\n- Machine learning engineer\n- AI specialist\n\n**Data scientist:** In this role, you'll find patterns in complex datasets, create algorithms and data models, deploy data tools, perform data analysis, and predict solutions to stakeholders based on the analysis. You can incorporate machine learning and deep learning practices to improve data quality and predict outcomes. As a data scientist, you must have a good command of your communication skills apart from technical skills and statistical modeling expertise.\n\nThe average salary of an employee pursuing a career as a senior data scientist in the United States is $123,069 per year.\n\n**Machine learning engineer:** If you apply for this position, your task will be to research and build machine learning algorithms and artificial intelligence systems. Machine learning professionals are also responsible for optimizing frameworks and performing statistical analysis.\n\nThe average salary for this job role in the United States ranges around $161,715 annually.\n\n**AI specialist:** Your role as an AI specialist is to develop and optimize AI systems. Hence, ensure you know the basics of AI concepts and programming. In addition, you might be responsible for AI system integration, designing AI strategies, and reinforcement learning.\n\nAccording to ZipRecruiter, the average salary for an AI Specialist in the United States is $53,925 a year. \n\nData engineer, data analyst, and data architect are a few more job roles within data science that you can apply for.\n\n### Cyber security career paths and salary insights\n\nIf you have an interest in cybersecurity, you can choose from the following career path options:\n\n- Security analyst\n- Cyber security engineer\n- Information security manager\n\n**Security analyst:** As a Cyber security analyst, your main role is to identify and troubleshoot problems within security systems and protect sensitive data. Security analyst professionals monitor systems and perform compliance control testing to minimize security risks. Based on their analysis, you can also recommend reducing risk and securing systems.\n\nAccording to Indeed, the average salary of a cyber security analyst in the United States is $91,123 per year.\n\n**Cyber security engineers:** Cyber security engineers are the front warriors who design and configure solutions against cyber criminals. You will have to act as an ethical hacker to strategize and identify vulnerabilities before attackers exploit them. \n\nZipRecruiter states that the average salary of an employee pursuing a career in this position in the United States is $122,890 per year.\n\n**Information security manager:** In this role, your main focus will be on developing and implementing security policies. You will also handle incident response plans, threat monitoring, and the implementation of security best practices for protecting computer systems.\n\nAccording to ZipRecruiter, the average salary of a Certified Information Security Manager in the United States is $136,104 per year.\n\nLet's dive in and take a closer look at the work environment in both fields to help you decide which one is best for you.\n\n## Work environment differences\n\nThe work environments in data science and cyber security differ significantly, appealing to distinct personalities and work styles.\n\nData science typically offers a more collaborative and research-oriented atmosphere. Imagine teams of data analysts, data science professionals, and researchers brainstorming, analyzing historical data, sharing insights, and working together to find solutions for complex datasets. \n\nFlexibility is often a key feature, both in terms of working hours and location. While deadlines exist in data science, the project-based nature often allows for a more measured pace, with timelines that can stretch over weeks or months. This allows for deep dives into data, thorough data analysis, and the development of sophisticated models.\n\nYou will be more attracted to the data science field if you enjoy intellectual exploration and the satisfaction of uncovering hidden patterns. Data science is great if you like intellectual exploration, problem solving and finding hidden patterns. It's creative and encourages deep analysis of complex problems, so if you like structured but exploratory work, it's a good fit.\n\nCyber security, on the other hand, is a high-stakes, fast-paced world. The focus is on real-time threat prevention, monitoring security infrastructure, and rapid response to security incidents. \n\nSecurity professionals need to be on high alert, anticipating and countering attacks on systems. It's intense work, with split second decisions and big consequences.\n\nThe nature of cyber security often demands irregular hours, especially during security crises. A major breach can require teams to work around the clock to contain the damage and restore systems. While this can be incredibly demanding, it can also be immensely rewarding for those who thrive in high-pressure situations and enjoy the thrill of the chase. \n\nWhether you are planning for cyber security or data science, consider all aspects, including the work environment.\n\n## Cyber security and data science: Which path is best for you?\n\nIt's best to keep your interests, skills, and personality in mind when selecting between cyber security and data science.\n\n![Data science vs. cybersecurity: Which is better?](https://assets.roadmap.sh/guest/data-science-vs-cybersecurity-9bhbk.png)\n\nIf you find yourself drawn to the world of data, enjoy the challenge of extracting meaning from raw data, and prefer coding and statistical analysis over other practices, data science might be the right path for you. Do you get excited about building predictive models, uncovering trends, and using data to solve real-world problems? If so, you'll likely find the intellectual challenges of data science stimulating.\n\nOn the other hand, if your passion lies in protecting systems, staying one step ahead of hackers, and responding to high-stakes challenges, cybersecurity could be a more fulfilling career choice. If you love understanding cybercriminals' psychology and preventing them from achieving their goals, this one could be your career goal. \n\nIf you still have questions about cyber security and data science, try taking online courses or doing small projects in each field to find your real interest. You can also work with datasets, experiment with different algorithms, connect with a data engineer, or explore basic cyber security concepts. This hands-on experience will give you valuable insights into your preferences.\n\n## What's Next?\n\nCyber security or data science, whichever path you choose, make sure it fulfills your needs and interests. If working on numbers and models is your thing, data science is the right path for you. However, cyber security could be a better option if you are more inclined toward protecting systems and taking on challenges.\n\nChoosing between cyber security and data science can be a difficult decision, but this guide has provided key insights to help you evaluate your interests. To further explore your options, check out [cyber security](https://roadmap.sh/cyber-security) and [data science](https://roadmap.sh/ai-data-scientist) roadmaps to gain deeper insights into each field. You can also join online courses and get relevant certifications or connect with our experts on the [Discord community](https://roadmap.sh/discord) to stay up-to-date!\n\n";
				}
				async function compiledContent$1r() {
					return await html$1r();
				}
				function getHeadings$1r() {
					return [{"depth":2,"slug":"differences-between-data-science-and-cyber-security","text":"Differences between data science and cyber security"},{"depth":2,"slug":"what-are-data-science-and-cyber-security","text":"What are data science and cyber security?"},{"depth":2,"slug":"data-science-vs-cyber-security-skills-and-tools-required-for-each-field","text":"Data science vs. cyber security: Skills and tools required for each field"},{"depth":3,"slug":"skills-and-tools-for-data-science","text":"Skills and tools for data science"},{"depth":3,"slug":"skills-and-tools-for-cybersecurity","text":"Skills and tools for cybersecurity"},{"depth":2,"slug":"career-opportunities-and-salary-insights","text":"Career opportunities and salary insights"},{"depth":3,"slug":"data-science-career-paths-and-salary-insights","text":"Data science career paths and salary insights"},{"depth":3,"slug":"cyber-security-career-paths-and-salary-insights","text":"Cyber security career paths and salary insights"},{"depth":2,"slug":"work-environment-differences","text":"Work environment differences"},{"depth":2,"slug":"cyber-security-and-data-science-which-path-is-best-for-you","text":"Cyber security and data science: Which path is best for you?"},{"depth":2,"slug":"whats-next","text":"What’s Next?"}];
				}

				const Content$1r = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1r;
					content.file = file$1r;
					content.url = url$1r;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1r())}`;
				});

const __vite_glob_0_7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1r,
	compiledContent: compiledContent$1r,
	default: Content$1r,
	file: file$1r,
	frontmatter: frontmatter$1r,
	getHeadings: getHeadings$1r,
	rawContent: rawContent$1r,
	url: url$1r
}, Symbol.toStringTag, { value: 'Module' }));

const html$1q = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-data-analytics-3ol7o.jpg\" alt=\"Data science vs data analytics comparison\"></p>\n<p>If you enjoy spotting patterns, analyzing trends, and driving business strategies, a career in <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">data analytics</a> might be your ideal fit. On the other hand, if algorithms, coding, and diving into uncharted territory excite you, a career in <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> could be the better path.</p>\n<p>As someone whose work spans both fields and involves managing data to solve business challenges, I’ve seen how both data science and analytics shape business success.</p>\n<p>Businesses rely heavily on insights, whether streamlining operations, predicting future trends, or crafting innovative strategies. Both data analytics and data science are pivotal to this process, but they approach problems differently.</p>\n<p>As a data analyst, you’ll focus on making sense of data through trends, visualizations, and actionable insights. As a data scientist, you’ll work on building predictive data models and solving complex problems using advanced machine learning techniques.</p>\n<p>But the big question is: Which path aligns with your goals?</p>\n<p>The answer lies in your interests, strengths, and career aspirations. In this guide, I’ll take you through the key differences between data science and data analytics and show you how they complement each other. You’ll learn which skills are needed in each role and what career paths and opportunities they offer. By the end, you’ll clearly know which role fits you best and how to start building your future.</p>\n<p>The table below summarizes the key differences between data science and data analytics.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th><strong>Data Science</strong></th><th><strong>Data Analytics</strong></th></tr></thead><tbody><tr><td><strong>Key Role</strong></td><td>Uses statistical analysis and computational methods to gain insights from complex, structured and unstructured data.</td><td>Analyzes data collected from different sources, generates insights, and makes smart data-driven decisions.</td></tr><tr><td><strong>Skills</strong></td><td>Machine learning, reinforcement learning techniques, data wrangling, big data technologies, cloud computing, and predictive analytics.</td><td>Proficient in data collection, SQL, knowledge of advanced Excel functions, data visualization, critical thinking, and create visual presentations.</td></tr><tr><td><strong>Tools</strong></td><td>TensorFlow, PyTorch, Jupyter Notebooks, and GitHub/Git.</td><td>SQL, Excel, Tableau, Power BI, OpenRefine or Google Analytics</td></tr><tr><td><strong>Career Paths</strong></td><td>Data Scientist > Machine Learning Engineer > AI Specialist</td><td>Data Analyst > Business Intelligence Manager > Chief Data Officer (CDO)</td></tr><tr><td><strong>Salary Range</strong></td><td>For data scientist job positions, salary ranges from $119,040 to $158,747 per year.</td><td>For data analysis job positions, salary ranges from $82,000 to $86,200 per year.</td></tr></tbody></table>\n<h2 id=\"what-are-data-science-and-data-analytics\">What are data science and data analytics?</h2>\n<p>Data science and data analytics are two multidisciplinary fields that share the goal of helping organizations make smarter decisions, but they achieve this in different ways.</p>\n<p>Data science uses advanced tools like machine learning and AI to extract insights from large, complex data sets. As a data scientist, your role is to uncover patterns and build predictive models that solve problems like fraud detection, ad optimization, and trend forecasting. Tools like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, Apache Spark, and <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> are key to this work.</p>\n<p>Data analytics, meanwhile, focuses on interpreting existing data to uncover trends and deliver actionable insights. As a data analyst, you’ll use data analytics tools like Excel, Tableau, and Power BI to identify patterns, forecast sales, analyze customer behavior, and guide strategy. This work is grounded in understanding what has already happened to influence future business decisions.</p>\n<p>By understanding the distinct purposes of these roles, we can examine how they interact to drive meaningful results.</p>\n<h2 id=\"how-do-data-science-and-data-analytics-complement-each-other\">How do data science and data analytics complement each other?</h2>\n<p>For example, consider an ecommerce business whose sales have declined over the past quarter. A data analyst would start by examining historical sales data using tools like Excel or SQL to identify patterns and uncover potential causes, such as price changes or shifting customer demographics. These findings would then inform the data science team.</p>\n<p>The data scientists would take this further by building predictive models to analyze future sales trends. They might incorporate additional features, like customer feedback or competitor pricing, to provide proactive recommendations that could reverse the decline, such as adjusting pricing strategies or launching targeted campaigns.</p>\n<p>Therefore, data analytics helps you answer the “<strong>what</strong>,** why**, and <strong>where</strong>” questions. For example, you can use it to ask, “what caused past sales?” or “why did customer churn go up in Q1?” or “where is our main revenue coming from?” By looking at historical data, data analytics gives you the answers you need to improve and build better strategies.</p>\n<p>The data science process takes it a step further by answering the “<strong>why</strong>” and <strong>“how</strong>” questions, like why sales went down and how to fix it. Data science leverages machine learning algorithms and predictive techniques to provide you with the right solutions to move forward.</p>\n<p>Next, explore the specific job roles and responsibilities in data science and data analytics.</p>\n<h2 id=\"data-science-vs-data-analytics-job-role-and-responsibilities\"><strong>Data science vs. data analytics:</strong> <strong>Job role and responsibilities</strong></h2>\n<p>Here are the primary responsibilities that define the role of a data analyst and how they contribute to enabling data-informed business decisions.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-analysts-vs-data-science-role-and-responsibilities-0p0wv.png\" alt=\"Data science &#x26; data analytics: Roles and responsibilities\"></p>\n<p><strong>Key responsibilities of data scientist</strong>\nAs a data scientist, you’ll work on complex tasks, such as building models, designing algorithms, and experimenting with data to uncover unknown outcomes. For example, to predict which customers are likely to cancel their subscriptions, you will analyze past customer behavior using predictive models to identify patterns.</p>\n<p>Here is a quick overview of your key responsibilities as a data scientist:</p>\n<ul>\n<li><strong>Data collection and management:</strong> Collect data from many sources, often dealing with structured and unstructured data. Your focus will be on getting the data for analysis, which can be simple to very complex, depending on the problem.</li>\n<li><strong>Build predictive models:</strong> Apply machine learning techniques to predict future behaviors, such as customer churn or sales demand.</li>\n<li><strong>Design algorithms:</strong> Develop new algorithms to optimize business operations, such as fraud detection systems or creating personalized recommendations for customers.</li>\n<li><strong>Data experimentation:</strong> Identify hidden patterns and extract meaningful insights from large and unstructured data sets.</li>\n</ul>\n<p><strong>Key responsibilities of data analyst</strong>\nAs a data analyst, you focus on understanding structured data to answer specific business queries and make smart decisions. For example, to identify sales trends over the past year, you will perform the following tasks:</p>\n<ul>\n<li><strong>Data collection and processing:</strong> Gather information from different sources and remove inaccuracies or unnecessary data. Use data-cleaning method to maintain accuracy and prepare data for analysis.</li>\n<li><strong>Data analysis:</strong> Interpret formatted and cleaned data using statistical tools and advanced modeling techniques.</li>\n<li><strong>Data reporting:</strong> Create clear and concise reports to share with business.</li>\n<li><strong>Business recommendations:</strong> Provide recommendations based on what you found to improve sales, efficiency, and performance.</li>\n</ul>\n<p>Let’s dig into the tools and skills needed for your selected job role.</p>\n<h2 id=\"data-science-vs-data-analytics-skills-and-tools\"><strong>Data science vs. data analytics: Skills and</strong> <strong>tools</strong></h2>\n<p>When you choose between becoming a data analyst or a data scientist, understanding the essential skills and tools for each role is crucial. Both positions demand analytical proficiency, but their technical requirements and focus areas differ significantly.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-analytics-vs-data-science-skills-ftf50.png\" alt=\"Data science &#x26; data analytics: Skills\"></p>\n<p>Let’s explore the key skills and tools to help you make the right decision.</p>\n<p><strong>Data scientist skills and tools</strong>\nAs a data scientist, you’ll have technical, analytical, and problem-solving skills to handle large and complex datasets. Some of the main skills and tools that interviewers look for are:</p>\n<ul>\n<li><strong>Programming skills:</strong> Mastery of Python and R is essential for data science tasks, including statistical analysis and machine learning model development.</li>\n<li><strong>Machine learning expertise:</strong> Knowledge of supervision and reinforcement learning techniques. Additionally, you should have an understanding of algorithms and clustering methods.</li>\n<li><strong>Big data tools:</strong> Hadoop and Apache Spark are a must for distributed storage and big data analysis.</li>\n<li><strong>Mathematics and statistics</strong>: Advanced knowledge of mathematics and statistics is essential for building models and deriving insights.</li>\n</ul>\n<p>You should also focus on mastering tools like <a href=\"https://roadmap.sh/cpp/libraries/tensorflow\" target=\"_blank\">TensorFlow</a>, PyTorch, Jupyter Notebooks, <a href=\"https://roadmap.sh/git-github\" target=\"_blank\">GitHub/Git</a>, SQL, Apache Spark, Hadoop, <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>, and Tableau. Data visualization, Scikit-learn, and version control systems are also important for data science.</p>\n<p><strong>Data analyst skills and tools</strong>\nAs a data analyst, your role focuses on data interpretation for business decisions. Some of the main skills and tool proficiencies you’ll need to excel in this role are:</p>\n<ul>\n<li><strong>SQL (Structured Query Language):</strong> Knowledge of SQL is necessary for querying, managing and retrieving data from databases.</li>\n<li><strong>Advanced Excel skills:</strong> Strong Excel skills, including pivot tables, VLOOKUP, and data analysis functions, are necessary to organize and analyze data.</li>\n<li><strong>Data visualization:</strong> Ability to create good-looking charts and dashboards using tools like Tableau and Power BI is a must for presenting insights in a clear and effective way.</li>\n<li><strong>Critical thinking:</strong> Strong analytical and critical thinking skills to identify trends and derive meaning from data.</li>\n</ul>\n<p>Check out the <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">Data Scientist</a> and <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst</a> roadmaps for a structured approach. These will help you decide what to learn and where to focus. By following them, you can prioritize what to learn, focus on high-demand areas, and not feel overwhelmed. Also, join local or online meetups to connect with professionals and participate in hackathons to get hands-on experience and add to your portfolio.</p>\n<p>Let’s move forward to understand different career trajectories that fall under data science and data analysis. Also, check out the salary ranges for each job profile.</p>\n<h2 id=\"data-science-vs-data-analytics-career-paths-and-salary-insights\"><strong>Data science vs. data analytics: Career paths and salary insights</strong></h2>\n<p>If you’re looking into data science or data analytics careers, you’re entering a field with huge growth. Both have their own focus, but there’s a lot of overlap in skills, tools, and methodologies, so it’s easier to move between roles or expand your skills across both domains.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-scentists-vs-data-analysts-career-paths-and-salary-insights-oclgw.png\" alt=\"Data science vs. data analytics: Career paths and salary insights\"></p>\n<p>Here is a quick overview of role transitions, salary ranges, and the steps you can take to advance your career as a data scientist and data analyst.</p>\n<p><strong>Data science career paths and salary insights</strong>\nAs a data scientist engineer, these are the roles that are typically available to you throughout your career:</p>\n<ul>\n<li>Data scientist</li>\n<li>Machine learning engineer</li>\n<li>AI specialist</li>\n</ul>\n<p><strong>Data scientist:</strong> As a data scientist, you will analyze large datasets, develop predictive data models, and implement algorithms to extract insights. Additionally, you must have knowledge of machine learning basics, structured data, statistical modeling, and communication skills.</p>\n<p>In 2024, the <a href=\"https://www.datacamp.com/blog/data-science-salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> for a data scientist is $123,069 per year in the United States.</p>\n<p><strong>Machine learning engineer:</strong> In this role, you’ll focus on developing and deploying machine learning models in production environments. This role requires technical expertise in software engineering, computer science, big data technologies, and scalable systems. You must have knowledge of advanced machine learning, computer science, cloud computing, and software development lifecycle (SDLC) knowledge.</p>\n<p>According to <a href=\"https://www.indeed.com/career/machine-learning-engineer/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for a machine learning engineer in the United States is $161,715 per year.</p>\n<p><strong>AI specialist:</strong> You’ll focus on designing cutting-edge AI solutions, managing teams of data professionals, and driving strategic artificial intelligence initiatives for organizations. You even perform research on emerging spot trends and implement AI frameworks.</p>\n<p>According to <a href=\"https://www.glassdoor.co.in/Salaries/us-ai-specialist-salary-SRCH_IL.0,2_IN1_KO3,16.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Glassdoor,</a> the estimated salary of an AI specialist job profile in the US is $129,337 per year, with an average salary of $105,981 per year.</p>\n<p><strong>Data analytics career paths and salary insights</strong>\nIf you’re leaning towards data analytics, here are some common job titles for you, along with salary details for each role:</p>\n<ul>\n<li>Data analyst</li>\n<li>Business intelligence manager</li>\n<li>Chief data officer</li>\n</ul>\n<p><strong>Data analyst:</strong> This role involves collecting, cleaning, and analyzing data to generate actionable insights. You’ll work on dashboards, reporting, and descriptive analytics using tools like Excel and Tableau. Additionally, you must have basic programming knowledge, data visualization, and data mining skills.</p>\n<p>In 2024, the estimated <a href=\"https://www.indeed.com/career/data-analyst/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a data analyst ranges around $80,811 per year depending on experience, location, and specific skills in demand.</p>\n<p><strong>Business intelligence manager:</strong> As a business intelligence manager, you’ll lead data reporting and visualization strategies, manage data accuracy, and design scalable solutions. Communication skills and proficiency in business intelligence tools are key to this role.</p>\n<p><a href=\"https://www.ziprecruiter.com/Salaries/Business-Intelligence-Manager-Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ZipRecruiter</a> reported that the salary of a business intelligence manager in the US ranges from $29,500 to $158,500.</p>\n<p><strong>Chief data officer (CDO):</strong> Responsible for an organization’s data strategy, data governance, and data leveraging for competitive advantage. For this job role, you must have the necessary skills, such as data governance, data strategy, data engineering, and management of complex architecture.</p>\n<p>In 2024, the estimated total pay for a chief <a href=\"https://www.glassdoor.co.in/Salaries/us-chief-data-officer-salary-SRCH_IL.0,2_IN1_KO3,21.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">data officer</a> is $373,952 per year in the US.</p>\n<h2 id=\"what-next\"><strong>What</strong> <strong>Next</strong></h2>\n<p>Once you’ve decided to pursue a career in data science or data analytics, the next step is figuring out where to start. Our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">AI-Data Scientist</a> and <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst roadmap</a> are designed to help you with that by breaking down the skills, tools and concepts into smaller steps. Whether you are drawn to the complexity of algorithms or analyzing trends, both paths offer rewarding opportunities for personal and professional growth, these roadmaps will give you a clear structure to build a solid foundation and move forward with confidence.</p>\n<p>Remember, the key to success in both fields is a commitment to continuous learning. For detailed overview of any specific role, join the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> and stay informed!</p>";

				const frontmatter$1q = {"title":"Data Science vs. Data Analytics: Which is Right for You?","description":"Data science vs. Data analytics? This guide breaks down roles, tools, and growth opportunities for aspiring data professionals.","authorId":"william","excludedBySlug":"/ai-data-scientist/vs-data-analytics","seo":{"title":"Data Science vs. Data Analytics: Which is Right for You?","description":"Data science vs. Data analytics? This guide breaks down roles, tools, and growth opportunities for aspiring data professionals.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-data-analytics-3ol7o.jpg"},"isNew":false,"type":"textual","date":"2025-02-06T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1q = "/workspace/src/data/guides/ai-data-scientist-vs-data-analytics.md";
				const url$1q = undefined;
				function rawContent$1q() {
					return "   \n                                                                 \n                                                                                                                                              \n                 \n                                                      \n    \n                                                                   \n                                                                                                                                                \n                                                                                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs data analytics comparison](https://assets.roadmap.sh/guest/data-science-vs-data-analytics-3ol7o.jpg)\n\nIf you enjoy spotting patterns, analyzing trends, and driving business strategies, a career in [data analytics](https://roadmap.sh/data-analyst) might be your ideal fit. On the other hand, if algorithms, coding, and diving into uncharted territory excite you, a career in [data science](https://roadmap.sh/ai-data-scientist) could be the better path.\n\nAs someone whose work spans both fields and involves managing data to solve business challenges, I've seen how both data science and analytics shape business success.\n\nBusinesses rely heavily on insights, whether streamlining operations, predicting future trends, or crafting innovative strategies. Both data analytics and data science are pivotal to this process, but they approach problems differently.\n\nAs a data analyst, you'll focus on making sense of data through trends, visualizations, and actionable insights. As a data scientist, you'll work on building predictive data models and solving complex problems using advanced machine learning techniques.\n\nBut the big question is: Which path aligns with your goals?\n\nThe answer lies in your interests, strengths, and career aspirations. In this guide, I'll take you through the key differences between data science and data analytics and show you how they complement each other. You'll learn which skills are needed in each role and what career paths and opportunities they offer. By the end, you'll clearly know which role fits you best and how to start building your future.\n\nThe table below summarizes the key differences between data science and data analytics.\n\n|                      | **Data Science**                                                                                                                       | **Data Analytics**                                                                                                                                 |\n|---------------------|----------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Key Role**        | Uses statistical analysis and computational methods to gain insights from complex, structured and unstructured data.                     | Analyzes data collected from different sources, generates insights, and makes smart data-driven decisions.                                           |\n| **Skills**          | Machine learning, reinforcement learning techniques, data wrangling, big data technologies, cloud computing, and predictive analytics.   | Proficient in data collection, SQL, knowledge of advanced Excel functions, data visualization, critical thinking, and create visual presentations.   |\n| **Tools**           | TensorFlow, PyTorch, Jupyter Notebooks, and GitHub/Git.                                                                                 | SQL, Excel, Tableau, Power BI, OpenRefine or Google Analytics                                                                                       |\n| **Career Paths**    | Data Scientist > Machine Learning Engineer > AI Specialist                                                                              | Data Analyst > Business Intelligence Manager > Chief Data Officer (CDO)                                                                             |\n| **Salary Range**    | For data scientist job positions, salary ranges from $119,040 to $158,747 per year.                                                     | For data analysis job positions, salary ranges from $82,000 to $86,200 per year.                                                                    |\n\n## What are data science and data analytics?\n\nData science and data analytics are two multidisciplinary fields that share the goal of helping organizations make smarter decisions, but they achieve this in different ways.\n\nData science uses advanced tools like machine learning and AI to extract insights from large, complex data sets. As a data scientist, your role is to uncover patterns and build predictive models that solve problems like fraud detection, ad optimization, and trend forecasting. Tools like [Python](https://roadmap.sh/python), Apache Spark, and [SQL](https://roadmap.sh/sql) are key to this work.\n\nData analytics, meanwhile, focuses on interpreting existing data to uncover trends and deliver actionable insights. As a data analyst, you'll use data analytics tools like Excel, Tableau, and Power BI to identify patterns, forecast sales, analyze customer behavior, and guide strategy. This work is grounded in understanding what has already happened to influence future business decisions.\n\nBy understanding the distinct purposes of these roles, we can examine how they interact to drive meaningful results.\n\n## How do data science and data analytics complement each other?\n\nFor example, consider an ecommerce business whose sales have declined over the past quarter. A data analyst would start by examining historical sales data using tools like Excel or SQL to identify patterns and uncover potential causes, such as price changes or shifting customer demographics. These findings would then inform the data science team.\n\nThe data scientists would take this further by building predictive models to analyze future sales trends. They might incorporate additional features, like customer feedback or competitor pricing, to provide proactive recommendations that could reverse the decline, such as adjusting pricing strategies or launching targeted campaigns.\n\nTherefore, data analytics helps you answer the \"**what**,** why**, and **where**\" questions. For example, you can use it to ask, \"what caused past sales?\" or \"why did customer churn go up in Q1?\" or \"where is our main revenue coming from?\" By looking at historical data, data analytics gives you the answers you need to improve and build better strategies.\n\nThe data science process takes it a step further by answering the \"**why**\" and **\"how**\" questions, like why sales went down and how to fix it. Data science leverages machine learning algorithms and predictive techniques to provide you with the right solutions to move forward.\n\nNext, explore the specific job roles and responsibilities in data science and data analytics.\n\n## **Data science vs. data analytics:** **Job role and responsibilities**\n\nHere are the primary responsibilities that define the role of a data analyst and how they contribute to enabling data-informed business decisions.\n\n![Data science & data analytics: Roles and responsibilities](https://assets.roadmap.sh/guest/data-analysts-vs-data-science-role-and-responsibilities-0p0wv.png)\n\n**Key responsibilities of data scientist**\nAs a data scientist, you'll work on complex tasks, such as building models, designing algorithms, and experimenting with data to uncover unknown outcomes. For example, to predict which customers are likely to cancel their subscriptions, you will analyze past customer behavior using predictive models to identify patterns.\n\nHere is a quick overview of your key responsibilities as a data scientist:\n\n- **Data collection and management:** Collect data from many sources, often dealing with structured and unstructured data. Your focus will be on getting the data for analysis, which can be simple to very complex, depending on the problem.\n- **Build predictive models:** Apply machine learning techniques to predict future behaviors, such as customer churn or sales demand.\n- **Design algorithms:** Develop new algorithms to optimize business operations, such as fraud detection systems or creating personalized recommendations for customers.\n- **Data experimentation:** Identify hidden patterns and extract meaningful insights from large and unstructured data sets.\n\n**Key responsibilities of data analyst**\nAs a data analyst, you focus on understanding structured data to answer specific business queries and make smart decisions. For example, to identify sales trends over the past year, you will perform the following tasks:\n\n- **Data collection and processing:** Gather information from different sources and remove inaccuracies or unnecessary data. Use data-cleaning method to maintain accuracy and prepare data for analysis.\n- **Data analysis:** Interpret formatted and cleaned data using statistical tools and advanced modeling techniques.\n- **Data reporting:** Create clear and concise reports to share with business.\n- **Business recommendations:** Provide recommendations based on what you found to improve sales, efficiency, and performance.\n\nLet's dig into the tools and skills needed for your selected job role.\n\n## **Data science vs. data analytics: Skills and** **tools**\n\nWhen you choose between becoming a data analyst or a data scientist, understanding the essential skills and tools for each role is crucial. Both positions demand analytical proficiency, but their technical requirements and focus areas differ significantly.\n\n![Data science & data analytics: Skills](https://assets.roadmap.sh/guest/data-analytics-vs-data-science-skills-ftf50.png)\n\nLet's explore the key skills and tools to help you make the right decision.\n\n**Data scientist skills and tools**\nAs a data scientist, you'll have technical, analytical, and problem-solving skills to handle large and complex datasets. Some of the main skills and tools that interviewers look for are:\n\n- **Programming skills:** Mastery of Python and R is essential for data science tasks, including statistical analysis and machine learning model development.\n- **Machine learning expertise:** Knowledge of supervision and reinforcement learning techniques. Additionally, you should have an understanding of algorithms and clustering methods.\n- **Big data tools:** Hadoop and Apache Spark are a must for distributed storage and big data analysis.\n- **Mathematics and statistics**: Advanced knowledge of mathematics and statistics is essential for building models and deriving insights.\n\nYou should also focus on mastering tools like [TensorFlow](https://roadmap.sh/cpp/libraries/tensorflow), PyTorch, Jupyter Notebooks, [GitHub/Git](https://roadmap.sh/git-github), SQL, Apache Spark, Hadoop, [Docker](https://roadmap.sh/docker), [Kubernetes](https://roadmap.sh/kubernetes), and Tableau. Data visualization, Scikit-learn, and version control systems are also important for data science.\n\n**Data analyst skills and tools**\nAs a data analyst, your role focuses on data interpretation for business decisions. Some of the main skills and tool proficiencies you'll need to excel in this role are:\n\n- **SQL (Structured Query Language):** Knowledge of SQL is necessary for querying, managing and retrieving data from databases.\n- **Advanced Excel skills:** Strong Excel skills, including pivot tables, VLOOKUP, and data analysis functions, are necessary to organize and analyze data.\n- **Data visualization:** Ability to create good-looking charts and dashboards using tools like Tableau and Power BI is a must for presenting insights in a clear and effective way.\n- **Critical thinking:** Strong analytical and critical thinking skills to identify trends and derive meaning from data.\n\nCheck out the [Data Scientist](https://roadmap.sh/ai-data-scientist) and [Data Analyst](https://roadmap.sh/data-analyst) roadmaps for a structured approach. These will help you decide what to learn and where to focus. By following them, you can prioritize what to learn, focus on high-demand areas, and not feel overwhelmed. Also, join local or online meetups to connect with professionals and participate in hackathons to get hands-on experience and add to your portfolio.\n\nLet's move forward to understand different career trajectories that fall under data science and data analysis. Also, check out the salary ranges for each job profile.\n\n## **Data science vs. data analytics: Career paths and salary insights**\n\nIf you're looking into data science or data analytics careers, you're entering a field with huge growth. Both have their own focus, but there's a lot of overlap in skills, tools, and methodologies, so it's easier to move between roles or expand your skills across both domains.\n\n![Data science vs. data analytics: Career paths and salary insights](https://assets.roadmap.sh/guest/data-scentists-vs-data-analysts-career-paths-and-salary-insights-oclgw.png)\n\nHere is a quick overview of role transitions, salary ranges, and the steps you can take to advance your career as a data scientist and data analyst.\n\n**Data science career paths and salary insights**\nAs a data scientist engineer, these are the roles that are typically available to you throughout your career:\n\n- Data scientist\n- Machine learning engineer\n- AI specialist\n\n**Data scientist:** As a data scientist, you will analyze large datasets, develop predictive data models, and implement algorithms to extract insights. Additionally, you must have knowledge of machine learning basics, structured data, statistical modeling, and communication skills.\n\nIn 2024, the [average salary](https://www.datacamp.com/blog/data-science-salaries) for a data scientist is $123,069 per year in the United States.\n\n**Machine learning engineer:** In this role, you'll focus on developing and deploying machine learning models in production environments. This role requires technical expertise in software engineering, computer science, big data technologies, and scalable systems. You must have knowledge of advanced machine learning, computer science, cloud computing, and software development lifecycle (SDLC) knowledge.\n\nAccording to [Indeed](https://www.indeed.com/career/machine-learning-engineer/salaries), the average salary for a machine learning engineer in the United States is $161,715 per year.\n\n**AI specialist:** You'll focus on designing cutting-edge AI solutions, managing teams of data professionals, and driving strategic artificial intelligence initiatives for organizations. You even perform research on emerging spot trends and implement AI frameworks.\n\nAccording to [Glassdoor,](https://www.glassdoor.co.in/Salaries/us-ai-specialist-salary-SRCH_IL.0,2_IN1_KO3,16.htm) the estimated salary of an AI specialist job profile in the US is $129,337 per year, with an average salary of $105,981 per year.\n\n**Data analytics career paths and salary insights**\nIf you're leaning towards data analytics, here are some common job titles for you, along with salary details for each role:\n\n- Data analyst\n- Business intelligence manager\n- Chief data officer\n\n**Data analyst:** This role involves collecting, cleaning, and analyzing data to generate actionable insights. You'll work on dashboards, reporting, and descriptive analytics using tools like Excel and Tableau. Additionally, you must have basic programming knowledge, data visualization, and data mining skills.\n\nIn 2024, the estimated [average salary](https://www.indeed.com/career/data-analyst/salaries) of a data analyst ranges around $80,811 per year depending on experience, location, and specific skills in demand.\n\n**Business intelligence manager:** As a business intelligence manager, you'll lead data reporting and visualization strategies, manage data accuracy, and design scalable solutions. Communication skills and proficiency in business intelligence tools are key to this role.\n\n[ZipRecruiter](https://www.ziprecruiter.com/Salaries/Business-Intelligence-Manager-Salary) reported that the salary of a business intelligence manager in the US ranges from $29,500 to $158,500.\n\n**Chief data officer (CDO):** Responsible for an organization's data strategy, data governance, and data leveraging for competitive advantage. For this job role, you must have the necessary skills, such as data governance, data strategy, data engineering, and management of complex architecture.\n\nIn 2024, the estimated total pay for a chief [data officer](https://www.glassdoor.co.in/Salaries/us-chief-data-officer-salary-SRCH_IL.0,2_IN1_KO3,21.htm) is $373,952 per year in the US.\n\n## **What** **Next**\n\nOnce you've decided to pursue a career in data science or data analytics, the next step is figuring out where to start. Our [AI-Data Scientist](https://roadmap.sh/ai-data-scientist) and [Data Analyst roadmap](https://roadmap.sh/data-analyst) are designed to help you with that by breaking down the skills, tools and concepts into smaller steps. Whether you are drawn to the complexity of algorithms or analyzing trends, both paths offer rewarding opportunities for personal and professional growth, these roadmaps will give you a clear structure to build a solid foundation and move forward with confidence.\n\nRemember, the key to success in both fields is a commitment to continuous learning. For detailed overview of any specific role, join the [Discord community](https://roadmap.sh/discord) and stay informed!\n";
				}
				async function compiledContent$1q() {
					return await html$1q();
				}
				function getHeadings$1q() {
					return [{"depth":2,"slug":"what-are-data-science-and-data-analytics","text":"What are data science and data analytics?"},{"depth":2,"slug":"how-do-data-science-and-data-analytics-complement-each-other","text":"How do data science and data analytics complement each other?"},{"depth":2,"slug":"data-science-vs-data-analytics-job-role-and-responsibilities","text":"Data science vs. data analytics: Job role and responsibilities"},{"depth":2,"slug":"data-science-vs-data-analytics-skills-and-tools","text":"Data science vs. data analytics: Skills and tools"},{"depth":2,"slug":"data-science-vs-data-analytics-career-paths-and-salary-insights","text":"Data science vs. data analytics: Career paths and salary insights"},{"depth":2,"slug":"what-next","text":"What Next"}];
				}

				const Content$1q = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1q;
					content.file = file$1q;
					content.url = url$1q;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1q())}`;
				});

const __vite_glob_0_8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1q,
	compiledContent: compiledContent$1q,
	default: Content$1q,
	file: file$1q,
	frontmatter: frontmatter$1q,
	getHeadings: getHeadings$1q,
	rawContent: rawContent$1q,
	url: url$1q
}, Symbol.toStringTag, { value: 'Module' }));

const html$1p = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-data-engineering-bychp.jpg\" alt=\"Data science vs data engineering explained\"></p>\n<p>Many aspiring professionals wonder about the difference between data science and data engineering. Although both fields involve working with data, they focus on different aspects of the data lifecycle.</p>\n<p>When I started my tech career, I was torn between data science and data engineering. I spent weeks researching and experimenting with projects to find where my strengths fit best. Both fields are closely related but yet distinct.</p>\n<p>If you love working with data, solving complex problems, and using data to guide decisions, you should consider <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a>, but if you enjoy building and maintaining data infrastructure and systems, I suggest you consider data engineering.</p>\n<p>In this guide, I will share the key lessons I learned, the challenges I faced, and how you can decide which career is right for you.</p>\n<p>The table below summarizes the differences between data science and data engineering.</p>\n<h2 id=\"differences-between-data-science-and-data-engineering\">Differences between data science and data engineering</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>Data science</th><th>Data engineering</th></tr></thead><tbody><tr><td>Focus</td><td>Analyzing and interpreting data using statistical models, machine learning, and analytics to obtain value and make predictions.</td><td>Designing, building, and maintaining data pipelines and infrastructure for data storage and accessibility.</td></tr><tr><td>Skills</td><td>Machine learning, statistics, data visualization, and predictive models.</td><td>Knowledge of data infrastructure, database management, and cloud tools.</td></tr><tr><td>Tools</td><td>Python, R, SQL, Tableau, PyTorch, Power BI, Tensorflow.</td><td>Python, Scala, R, Java, Apache Spark, Kafka, Snowflake, Databricks.</td></tr><tr><td>Educational background</td><td>Computer science, statistics, and mathematics.</td><td>Computer science, computer engineering, and software engineering.</td></tr><tr><td>Career paths</td><td>Data scientist, <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data analyst</a>, Machine learning engineer.</td><td>Data engineer, Big data engineer, Data architect.</td></tr></tbody></table>\n<h2 id=\"what-is-data-science-and-data-engineering\">What is data science and data engineering?</h2>\n<p>When I worked on my first data-driven project, I realized how much I enjoyed working with raw data. But I also saw how much effort went into setting up pipelines and structuring data before I could analyze it. That’s when I understood the fundamental difference: Data engineers build the highways, while data scientists drive on them to find insights.</p>\n<p>Data science is a field that combines mathematics, statistics, analytics, artificial intelligence, and machine learning to analyze large amounts of data to detect hidden patterns, generate actionable insights, and predict trends. As a data scientist, you’ll analyze and interpret complex data to help organizations and businesses make informed decisions.</p>\n<p>On the other hand, data engineering involves designing and building systems for aggregating, storing, and analyzing data. As a data engineer, you’ll build data warehouses to empower data-driven decisions. You will focus on developing pipelines to collect, clean, and transform data, ensuring it is accessible for analysis by the data science team.</p>\n<h2 id=\"key-responsibilities-of-a-data-scientist\">Key responsibilities of a data scientist</h2>\n<p>Your responsibilities as a data scientist will vary depending on the industry, company size, and project focus. To provide more context, I will explain the responsibilities of a data scientist using a project I worked on during my career. The project involved customer churn analysis for a client in the hospitality industry.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-scientist-skills-and-tools-wi5tz.png\" alt=\"Data Scientist Responsibilities\"></p>\n<ol>\n<li>\n<p><strong>Business understanding:</strong> As a data scientist, you’ll work closely with stakeholders to understand the context and gain business insights.\nIn the customer churn analysis project, I worked closely with the client to understand the business context and gain insights. This provided an in-depth understanding of the hospitality sector and the different terms used. Without this, solving the business problem would have been almost impossible.</p>\n</li>\n<li>\n<p><strong>Data ingestion:</strong> Your work as a data scientist involves gathering raw data from different sources. It is your responsibility as a data scientist to collect all the relevant data to solve the current business problem.</p>\n</li>\n</ol>\n<p>When I worked on the customer churn analysis project, I had to pull data from multiple sources (customer transaction logs, website analytics, and CRM tools). But before I could even begin the analysis, the data engineers had to build ETL pipelines to collect and clean this data.</p>\n<ol start=\"3\">\n<li><strong>Data processing and data storage:</strong> This is one of your core responsibilities as a data scientist. It involves cleaning and transforming the ingested data into suitable formats for analysis and saving data storage systems.</li>\n</ol>\n<p>In the customer churn analysis project, the data ingested were unusable and had to be cleaned so they could be used for analysis. I used tools like Python and NumPy to process the data and saved the processed data in a database.</p>\n<ol start=\"4\">\n<li>\n<p><strong>Data analysis:</strong> As a data scientist, you’ll analyze processed data using statistical analysis and data visualization tools like Matplotlib, Seaborn, and Pandas. You’ll explore the data to understand relationships, hidden patterns, characteristics, and anomalies. You will use charts and graphs to make the data more understandable and easier to comprehend.</p>\n<p>In the customer churning analysis project, I analyzed the data by identifying the number of returning customers, the customers who came only once, the day of the week with the most customers, and so on. With this analysis, I could identify a trend in the data, which helped in predictive model building.</p>\n</li>\n<li>\n<p><strong>Model building:</strong> As a data scientist, you’ll build predictive models and machine learning algorithms to forecast future trends. The machine learning algorithms you build can be categorized into two types:</p>\n<ul>\n<li>Supervised learning: Examples include linear regression, decision trees, and k-nearest neighbors.</li>\n<li>Unsupervised learning: Examples include clustering and dimensionality reduction.</li>\n</ul>\n</li>\n<li>\n<p><strong>Reporting:</strong> As a data scientist, it is your responsibility to interpret and communicate the results of data analysis and predictions. It is not enough to analyze and explore the data; you have to communicate them clearly so that the key stakeholders easily understand them, influence decision-making, and achieve business goals.</p>\n</li>\n</ol>\n<h2 id=\"skills-and-tools-needed-to-succeed-as-a-data-scientist\">Skills and tools needed to succeed as a data scientist</h2>\n<p>To succeed as a data scientist, you need to have a balance of technical and analytical skills. Some of these skills and tools I recommend include:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-scientist-skills-and-tools-7fjnk.png\" alt=\"Data Scientist Skills and Tools\"></p>\n<ol>\n<li>\n<p><strong>Programming languages:</strong> As a data scientist, you should know some programming. The two most common programming languages data scientists use are <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> and R.</p>\n</li>\n<li>\n<p><strong>Mathematics and statistics:</strong> To succeed as a data scientist, you must know mathematics and statistics. They help you understand your data and know which statistical model to apply. Knowledge of mathematical concepts like calculus, probability theory, and linear algebra are fundamental to your success as a data scientist.</p>\n</li>\n<li>\n<p><strong>Data visualization:</strong> This involves using graphs, charts, and maps to present data in an understandable and accessible format. It is important to know how to visualize data. Some of the tools used to create visualizations include Matplotlib, Seaborn, ggplot2, and Pandas.</p>\n</li>\n<li>\n<p><strong>Database management systems:</strong> Database management systems are applications that interact with users, other applications, and the database to fetch and analyze data. As a data scientist, you will interact a lot with databases, and you should know how to write queries to communicate with them.</p>\n</li>\n</ol>\n<p><a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> is a programming language used to manage and communicate with relational databases. Examples of relational databases are MySQL, <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>, and Microsoft Server SQL. There are also NoSQL databases that store unstructured data. Examples include <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>, Neo4j, and Cassandra.</p>\n<ol start=\"5\">\n<li><strong>Machine learning and artificial intelligence:</strong> As a data scientist, you should have an understanding of machine learning. Machine learning can be divided into supervised, unsupervised, deep, and reinforced learning. Some key tools used by data scientists include Scikit-learn, TensorFlow, and PyTorch.</li>\n</ol>\n<h2 id=\"key-responsibilities-of-a-data-engineer\">Key responsibilities of a data engineer</h2>\n<p>To explain the key responsibilities of a data engineer, I will use an IoT project I worked on to provide more context. The project involved developing an IoT data pipeline to transmit data from a customer’s IoT devices in the field to a storage system. Your key responsibilities as a data engineer include:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-engineer-job-description-i0k7i.png\" alt=\"Data Engineer Responsibilities\"></p>\n<ol>\n<li>\n<p><strong>Data pipeline development:</strong> A data pipeline is a method of ingesting data from different data sources, transforming the data, and then transferring it to storage and processing systems. You are responsible for building and maintaining data pipelines as a data engineer. The different types of data pipelines include:</p>\n<ul>\n<li>Batch processing pipelines</li>\n<li>Data streaming pipelines</li>\n<li>Data integration pipelines</li>\n<li>Cloud-native data pipelines\nIn the IoT project, the data engineers designed the data pipeline used to transmit data from the IoT devices to the data storage system. The pipeline was a messaging system into which the IoT devices published data, which was ingested and stored in a database.</li>\n</ul>\n</li>\n<li>\n<p><strong>Data architecture design:</strong> As a data engineer, you will build, design, and manage data lakes and warehouses for data storage and retrieval. You will work with cloud platforms (<a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, GCP, Azure) to develop scalable and reliable storage solutions.</p>\n</li>\n<li>\n<p><strong>Database management:</strong> As a data engineer, you’ll manage and optimize storage solutions, which include relational databases, document databases, and data lakes. These data storage solutions store big data for analysis and prediction for data integrity, performance, and accessibility.</p>\n</li>\n<li>\n<p><strong>ETL processes development:</strong> Extract, Transform, Load (ETL) is a process that cleans and organizes data from multiple data sources into a single and consistent data set for storage and further processing. As a data engineer, you are responsible for developing and maintaining the ETL process for proper data integration and onward passage of the data to be used by data scientists.</p>\n<p>The data from the IoT devices was in different formats, so the data engineers had to build an ETL process to transform the data for onward processing and storage.</p>\n</li>\n<li>\n<p><strong>Real-time data streaming:</strong> Data engineers process real-time data from different data sources, which can be triggered via events or observers. As a data engineer, you design systems that respond to real-time data, and use tools like Google Publish and Subscribe and Azure Publish and Subscribe to transmit and process it.</p>\n<p>The data sent from the IoT devices was real-time data, and the data engineers built the messaging system that streamed the data.</p>\n</li>\n<li>\n<p><strong>Data governance and security:</strong> Data engineers are responsible for compliance with data privacy laws. They implement data validation and integrity checks, which results in clean data and data reliability. They also make sure that sensitive user data is protected and not exposed without sufficient clearance.</p>\n</li>\n</ol>\n<h2 id=\"skills-and-tools-needed-to-succeed-as-a-data-engineer\">Skills and tools needed to succeed as a data engineer</h2>\n<p>To succeed as a data engineer, you need a combination of programming, data management, data pipelines, and cloud computing skills. I will explain the skills below.</p>\n<ol>\n<li>\n<p><strong>Programming languages:</strong> You should know programming and scripting. Python is one of the most common programming languages you will use as a data engineer. Python is used for data processing, creating ETL pipelines, and automation. Other programming languages used are <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a>, and Scala. Bash scripting is also a necessary skill you should have for workflow automation.</p>\n</li>\n<li>\n<p><strong>Databases:</strong> As a data engineer, you are expected to know how to design and maintain database management systems. You will use relational databases and NoSQL databases to store and retrieve data. Examples of relational databases include PostgreSQL, MySQL, and Microsoft SQL Server. Examples of NoSQL databases include <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>, <a href=\"https://roadmap.sh/redis\" target=\"_blank\">Redis</a>, and DynamoDB. NoSQL databases are used to store unstructured data.</p>\n</li>\n<li>\n<p><strong>Data warehouses:</strong> A data warehouse is a system that gathers data from different sources and stores them in a central location. It help prepare data for data analytics, machine learning, and artificial intelligence.</p>\n<p>As a data engineer, you should know how to work with data warehouses and also design and maintain them. There are cloud-based data warehouses and on-premise data warehouses. Cloud-based data warehouses are provided by cloud platforms and they include Amazon Redshift, Google BigQuery, and Azure Synapse Analytics. Examples of on-premise data warehouses include SAP BW/4HANA and IBM Db2 Warehouse.</p>\n</li>\n<li>\n<p><strong>Data lakes:</strong> Data engineers use data lakes to store structured and unstructured data in their original formats. They store various types of data in different formats and provide a central repository for data analysis workloads. Examples of data lakes include AWS S3, Azure Data Lake, and Google Cloud Storage.</p>\n</li>\n<li>\n<p><strong>ETL processes:</strong> Data engineers use ETL processes to automate the storage and retrieval of data in a database. The data is extracted from its source, transformed into the required format using automated scripts and programs, and then loaded to its destination. As a data engineer, you should know how to design ETL processes and build data pipelines.</p>\n</li>\n</ol>\n<p><img src=\"https://assets.roadmap.sh/guest/data-engineer-skills-and-tools-rqgpa.png\" alt=\"Data Engineer Skills and Tools\"></p>\n<h2 id=\"data-scientist-vs-data-engineer-what-career-opportunities-are-available-to-you\">Data scientist vs. Data engineer: What career opportunities are available to you?</h2>\n<p>Both professionals are in high demand in several industries, including health care, tech, finance, and retail.</p>\n<p>The typical career path in data science includes:</p>\n<ul>\n<li>Junior data scientist</li>\n<li>Data scientist</li>\n<li>Senior data scientist</li>\n<li>Machine learning engineer</li>\n</ul>\n<p>The career path of a data engineer is similar to that of a data scientist. A typical data engineering career path includes:</p>\n<ul>\n<li>Junior data engineer</li>\n<li>Data engineer</li>\n<li>Senior data engineer</li>\n<li>Data architect</li>\n<li>Senior data architect</li>\n</ul>\n<h2 id=\"salaries-and-job-market-trends\">Salaries and job market trends</h2>\n<p>One thing that surprised me was how salaries vary depending on industry and specialization. In my experience, companies in finance and healthcare tend to pay data scientists more, while big tech firms offer strong compensation for data engineers working on large-scale infrastructure.</p>\n<p>According to Indeed, the average annual <a href=\"https://www.indeed.com/career/data-scientist/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">data scientist salary</a> in the US is $125,156 with a range between $79,612 and $196,755.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-scientist-salary-in-the-united-states-of-america-97xy4.png\" alt=\"Data Scientist Salary in the United States\"></p>\n<p>The average <a href=\"https://www.indeed.com/career/data-engineer/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">data engineer salary</a> in the US is $125,758, with a range between $82,340 and $192,069.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-engineer-salary-in-the-united-states-of-america-1f12t.png\" alt=\"Data Engineer Salary in the United States\"></p>\n<p>Both data scientist and data engineer roles are in high demand with the rise in AI. Companies are constantly hiring data scientists and data engineers. On Indeed, there are more than 10,000 openings for data scientists and more than 5,000 in the US alone.</p>\n<p>Data scientists and data engineers will also be very instrumental and in high demand in the future. According to the <a href=\"https://www.bls.gov/ooh/math/data-scientists.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">US Bureau of Labour Statistics</a>, there will be 20,800 new openings for data scientists each year for the next decade.</p>\n<h2 id=\"data-science-vs-data-engineering-which-path-fits-you-better\">Data science vs. Data engineering: Which path fits you better?</h2>\n<p>Deciding whether to pursue data science or data engineering depends on your interests, strengths, and career goals.</p>\n<p>If you enjoy solving analytical problems, working with algorithms, and guiding business decision processes, then you should consider data science. Do you enjoy building large-scale systems and data infrastructure and ensuring data pipelines run smoothly? Then, you should consider data engineering.</p>\n<p>Do you understand statistics, mathematics, data analysis, and visualization well? Data science is well-suited for you. Data engineering is the right fit if you have strong programming skills and are knowledgeable in system design and architecture.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>If I had to start over, I’d begin with small projects. My first real learning moment came when I built a basic recommendation system for movie ratings using <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> and Pandas. If you’re considering data engineering, setting up an ETL pipeline with Apache Airflow is a great starting point. Don’t just read—build.</p>\n<p>You should also follow a structured learning path. roadmap.sh provides you a structured <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> roadmap where you can track your progress and share it on your profile. You could also customize your roadmap based on your learning needs.</p>";

				const frontmatter$1p = {"title":"Data Science vs. Data Engineering: Lessons from My Journey","description":"I’ve worked on both data science and data engineering projects - here’s what I’ve learned and how you can choose the best path for your career.","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-data-engineering","seo":{"title":"Data Science vs. Data Engineering: Lessons from My Journey","description":"I’ve worked on both data science and data engineering projects - here’s what I’ve learned and how you can choose the best path for your career.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-data-engineering-bychp.jpg"},"isNew":true,"type":"textual","date":"2025-03-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1p = "/workspace/src/data/guides/ai-data-scientist-vs-data-engineering.md";
				const url$1p = undefined;
				function rawContent$1p() {
					return "   \n                                                                   \n                                                                                                                                                              \n               \n                                                        \n    \n                                                                     \n                                                                                                                                                                \n                                                                                          \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs data engineering explained](https://assets.roadmap.sh/guest/data-science-vs-data-engineering-bychp.jpg)\n\nMany aspiring professionals wonder about the difference between data science and data engineering. Although both fields involve working with data, they focus on different aspects of the data lifecycle.\n\nWhen I started my tech career, I was torn between data science and data engineering. I spent weeks researching and experimenting with projects to find where my strengths fit best. Both fields are closely related but yet distinct.\n\nIf you love working with data, solving complex problems, and using data to guide decisions, you should consider [data science](https://roadmap.sh/ai-data-scientist), but if you enjoy building and maintaining data infrastructure and systems, I suggest you consider data engineering.\n\nIn this guide, I will share the key lessons I learned, the challenges I faced, and how you can decide which career is right for you.\n\nThe table below summarizes the differences between data science and data engineering.\n\n## Differences between data science and data engineering\n\n|                        | Data science                                                                                                                    | Data engineering                                                                                           |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| Focus                  | Analyzing and interpreting data using statistical models, machine learning, and analytics to obtain value and make predictions. | Designing, building, and maintaining data pipelines and infrastructure for data storage and accessibility. |\n| Skills                 | Machine learning, statistics, data visualization, and predictive models.                                                        | Knowledge of data infrastructure, database management, and cloud tools.                                    |\n| Tools                  | Python, R, SQL, Tableau, PyTorch, Power BI, Tensorflow.                                                                         | Python, Scala, R, Java, Apache Spark, Kafka, Snowflake, Databricks.                                        |\n| Educational background | Computer science, statistics, and mathematics.                                                                                  | Computer science, computer engineering, and software engineering.                                          |\n| Career paths           | Data scientist, [Data analyst](https://roadmap.sh/data-analyst), Machine learning engineer.                                                                        | Data engineer, Big data engineer, Data architect.                                                          |\n\n## What is data science and data engineering?\n\nWhen I worked on my first data-driven project, I realized how much I enjoyed working with raw data. But I also saw how much effort went into setting up pipelines and structuring data before I could analyze it. That’s when I understood the fundamental difference: Data engineers build the highways, while data scientists drive on them to find insights.\n\nData science is a field that combines mathematics, statistics, analytics, artificial intelligence, and machine learning to analyze large amounts of data to detect hidden patterns, generate actionable insights, and predict trends. As a data scientist, you’ll analyze and interpret complex data to help organizations and businesses make informed decisions.\n\nOn the other hand, data engineering involves designing and building systems for aggregating, storing, and analyzing data. As a data engineer, you’ll build data warehouses to empower data-driven decisions. You will focus on developing pipelines to collect, clean, and transform data, ensuring it is accessible for analysis by the data science team.\n\n## Key responsibilities of a data scientist\n\nYour responsibilities as a data scientist will vary depending on the industry, company size, and project focus. To provide more context, I will explain the responsibilities of a data scientist using a project I worked on during my career. The project involved customer churn analysis for a client in the hospitality industry.\n\n\n![Data Scientist Responsibilities](https://assets.roadmap.sh/guest/data-scientist-skills-and-tools-wi5tz.png)\n\n\n1. **Business understanding:** As a data scientist, you’ll work closely with stakeholders to understand the context and gain business insights. \n  In the customer churn analysis project, I worked closely with the client to understand the business context and gain insights. This provided an in-depth understanding of the hospitality sector and the different terms used. Without this, solving the business problem would have been almost impossible.\n\n2. **Data ingestion:** Your work as a data scientist involves gathering raw data from different sources. It is your responsibility as a data scientist to collect all the relevant data to solve the current business problem.\n  \n  When I worked on the customer churn analysis project, I had to pull data from multiple sources (customer transaction logs, website analytics, and CRM tools). But before I could even begin the analysis, the data engineers had to build ETL pipelines to collect and clean this data.\n    \n3. **Data processing and data storage:** This is one of your core responsibilities as a data scientist. It involves cleaning and transforming the ingested data into suitable formats for analysis and saving data storage systems.\n\n  In the customer churn analysis project, the data ingested were unusable and had to be cleaned so they could be used for analysis. I used tools like Python and NumPy to process the data and saved the processed data in a database.\n    \n4. **Data analysis:** As a data scientist, you’ll analyze processed data using statistical analysis and data visualization tools like Matplotlib, Seaborn, and Pandas. You’ll explore the data to understand relationships, hidden patterns, characteristics, and anomalies. You will use charts and graphs to make the data more understandable and easier to comprehend.\n\n    In the customer churning analysis project, I analyzed the data by identifying the number of returning customers, the customers who came only once, the day of the week with the most customers, and so on. With this analysis, I could identify a trend in the data, which helped in predictive model building.\n\n5. **Model building:** As a data scientist, you’ll build predictive models and machine learning algorithms to forecast future trends. The machine learning algorithms you build can be categorized into two types: \n    - Supervised learning: Examples include linear regression, decision trees, and k-nearest neighbors.\n    - Unsupervised learning: Examples include clustering and dimensionality reduction.\n\n 6. **Reporting:** As a data scientist, it is your responsibility to interpret and communicate the results of data analysis and predictions. It is not enough to analyze and explore the data; you have to communicate them clearly so that the key stakeholders easily understand them, influence decision-making, and achieve business goals.\n\n## Skills and tools needed to succeed as a data scientist\n\nTo succeed as a data scientist, you need to have a balance of technical and analytical skills. Some of these skills and tools I recommend include:\n\n![Data Scientist Skills and Tools](https://assets.roadmap.sh/guest/data-scientist-skills-and-tools-7fjnk.png)\n\n\n1. **Programming languages:** As a data scientist, you should know some programming. The two most common programming languages data scientists use are [Python](https://roadmap.sh/python) and R.\n\n2. **Mathematics and statistics:** To succeed as a data scientist, you must know mathematics and statistics. They help you understand your data and know which statistical model to apply. Knowledge of mathematical concepts like calculus, probability theory, and linear algebra are fundamental to your success as a data scientist.\n\n3. **Data visualization:** This involves using graphs, charts, and maps to present data in an understandable and accessible format. It is important to know how to visualize data. Some of the tools used to create visualizations include Matplotlib, Seaborn, ggplot2, and Pandas.\n\n4. **Database management systems:** Database management systems are applications that interact with users, other applications, and the database to fetch and analyze data. As a data scientist, you will interact a lot with databases, and you should know how to write queries to communicate with them. \n\n  [SQL](https://roadmap.sh/sql) is a programming language used to manage and communicate with relational databases. Examples of relational databases are MySQL, [PostgreSQL](https://roadmap.sh/postgresql-dba), and Microsoft Server SQL. There are also NoSQL databases that store unstructured data. Examples include [MongoDB](https://roadmap.sh/mongodb), Neo4j, and Cassandra.\n\n5. **Machine learning and artificial intelligence:** As a data scientist, you should have an understanding of machine learning. Machine learning can be divided into supervised, unsupervised, deep, and reinforced learning. Some key tools used by data scientists include Scikit-learn, TensorFlow, and PyTorch.\n\n## Key responsibilities of a data engineer\n\nTo explain the key responsibilities of a data engineer, I will use an IoT project I worked on to provide more context. The project involved developing an IoT data pipeline to transmit data from a customer’s IoT devices in the field to a storage system. Your key responsibilities as a data engineer include:\n\n![Data Engineer Responsibilities](https://assets.roadmap.sh/guest/data-engineer-job-description-i0k7i.png)\n\n1. **Data pipeline development:** A data pipeline is a method of ingesting data from different data sources, transforming the data, and then transferring it to storage and processing systems. You are responsible for building and maintaining data pipelines as a data engineer. The different types of data pipelines include:\n    - Batch processing pipelines \n    - Data streaming pipelines\n    - Data integration pipelines\n    - Cloud-native data pipelines\n    In the IoT project, the data engineers designed the data pipeline used to transmit data from the IoT devices to the data storage system. The pipeline was a messaging system into which the IoT devices published data, which was ingested and stored in a database.\n\n2. **Data architecture design:** As a data engineer, you will build, design, and manage data lakes and warehouses for data storage and retrieval. You will work with cloud platforms ([AWS](https://roadmap.sh/aws), GCP, Azure) to develop scalable and reliable storage solutions.\n\n3. **Database management:** As a data engineer, you’ll manage and optimize storage solutions, which include relational databases, document databases, and data lakes. These data storage solutions store big data for analysis and prediction for data integrity, performance, and accessibility. \n\n4. **ETL processes development:** Extract, Transform, Load (ETL) is a process that cleans and organizes data from multiple data sources into a single and consistent data set for storage and further processing. As a data engineer, you are responsible for developing and maintaining the ETL process for proper data integration and onward passage of the data to be used by data scientists.\n\n    The data from the IoT devices was in different formats, so the data engineers had to build an ETL process to transform the data for onward processing and storage.\n\n5. **Real-time data streaming:** Data engineers process real-time data from different data sources, which can be triggered via events or observers. As a data engineer, you design systems that respond to real-time data, and use tools like Google Publish and Subscribe and Azure Publish and Subscribe to transmit and process it.\n\n    The data sent from the IoT devices was real-time data, and the data engineers built the messaging system that streamed the data. \n\n6. **Data governance and security:** Data engineers are responsible for compliance with data privacy laws. They implement data validation and integrity checks, which results in clean data and data reliability. They also make sure that sensitive user data is protected and not exposed without sufficient clearance.\n\n## Skills and tools needed to succeed as a data engineer\n\nTo succeed as a data engineer, you need a combination of programming, data management, data pipelines, and cloud computing skills. I will explain the skills below.\n\n\n1. **Programming languages:** You should know programming and scripting. Python is one of the most common programming languages you will use as a data engineer. Python is used for data processing, creating ETL pipelines, and automation. Other programming languages used are [Java](https://roadmap.sh/java), [SQL](https://roadmap.sh/sql), and Scala. Bash scripting is also a necessary skill you should have for workflow automation.\n\n2. **Databases:** As a data engineer, you are expected to know how to design and maintain database management systems. You will use relational databases and NoSQL databases to store and retrieve data. Examples of relational databases include PostgreSQL, MySQL, and Microsoft SQL Server. Examples of NoSQL databases include [MongoDB](https://roadmap.sh/mongodb), [Redis](https://roadmap.sh/redis), and DynamoDB. NoSQL databases are used to store unstructured data.\n\n3. **Data warehouses:** A data warehouse is a system that gathers data from different sources and stores them in a central location. It help prepare data for data analytics, machine learning, and artificial intelligence. \n\n    As a data engineer, you should know how to work with data warehouses and also design and maintain them. There are cloud-based data warehouses and on-premise data warehouses. Cloud-based data warehouses are provided by cloud platforms and they include Amazon Redshift, Google BigQuery, and Azure Synapse Analytics. Examples of on-premise data warehouses include SAP BW/4HANA and IBM Db2 Warehouse.\n\n4. **Data lakes:** Data engineers use data lakes to store structured and unstructured data in their original formats. They store various types of data in different formats and provide a central repository for data analysis workloads. Examples of data lakes include AWS S3, Azure Data Lake, and Google Cloud Storage.\n\n5. **ETL processes:** Data engineers use ETL processes to automate the storage and retrieval of data in a database. The data is extracted from its source, transformed into the required format using automated scripts and programs, and then loaded to its destination. As a data engineer, you should know how to design ETL processes and build data pipelines.\n\n![Data Engineer Skills and Tools](https://assets.roadmap.sh/guest/data-engineer-skills-and-tools-rqgpa.png)\n\n## Data scientist vs. Data engineer: What career opportunities are available to you?\n\nBoth professionals are in high demand in several industries, including health care, tech, finance, and retail.\n\nThe typical career path in data science includes:\n\n- Junior data scientist\n- Data scientist\n- Senior data scientist\n- Machine learning engineer\n\nThe career path of a data engineer is similar to that of a data scientist. A typical data engineering career path includes:\n\n- Junior data engineer\n- Data engineer\n- Senior data engineer\n- Data architect\n- Senior data architect\n\n## Salaries and job market trends\n\nOne thing that surprised me was how salaries vary depending on industry and specialization. In my experience, companies in finance and healthcare tend to pay data scientists more, while big tech firms offer strong compensation for data engineers working on large-scale infrastructure.\n\nAccording to Indeed, the average annual [data scientist salary](https://www.indeed.com/career/data-scientist/salaries) in the US is $125,156 with a range between $79,612 and $196,755.\n\n![Data Scientist Salary in the United States](https://assets.roadmap.sh/guest/data-scientist-salary-in-the-united-states-of-america-97xy4.png)\n\nThe average [data engineer salary](https://www.indeed.com/career/data-engineer/salaries) in the US is $125,758, with a range between $82,340 and $192,069.\n\n![Data Engineer Salary in the United States](https://assets.roadmap.sh/guest/data-engineer-salary-in-the-united-states-of-america-1f12t.png)\n\nBoth data scientist and data engineer roles are in high demand with the rise in AI. Companies are constantly hiring data scientists and data engineers. On Indeed, there are more than 10,000 openings for data scientists and more than 5,000 in the US alone. \n\nData scientists and data engineers will also be very instrumental and in high demand in the future. According to the [US Bureau of Labour Statistics](https://www.bls.gov/ooh/math/data-scientists.htm), there will be 20,800 new openings for data scientists each year for the next decade.\n\n## Data science vs. Data engineering: Which path fits you better?\n\nDeciding whether to pursue data science or data engineering depends on your interests, strengths, and career goals. \n\nIf you enjoy solving analytical problems, working with algorithms, and guiding business decision processes, then you should consider data science. Do you enjoy building large-scale systems and data infrastructure and ensuring data pipelines run smoothly? Then, you should consider data engineering.\n\nDo you understand statistics, mathematics, data analysis, and visualization well? Data science is well-suited for you. Data engineering is the right fit if you have strong programming skills and are knowledgeable in system design and architecture.\n\n## Next steps\n\nIf I had to start over, I’d begin with small projects. My first real learning moment came when I built a basic recommendation system for movie ratings using [Python](https://roadmap.sh/python) and Pandas. If you're considering data engineering, setting up an ETL pipeline with Apache Airflow is a great starting point. Don't just read—build.\n\nYou should also follow a structured learning path. roadmap.sh provides you a structured [data science](https://roadmap.sh/ai-data-scientist) roadmap where you can track your progress and share it on your profile. You could also customize your roadmap based on your learning needs.\n";
				}
				async function compiledContent$1p() {
					return await html$1p();
				}
				function getHeadings$1p() {
					return [{"depth":2,"slug":"differences-between-data-science-and-data-engineering","text":"Differences between data science and data engineering"},{"depth":2,"slug":"what-is-data-science-and-data-engineering","text":"What is data science and data engineering?"},{"depth":2,"slug":"key-responsibilities-of-a-data-scientist","text":"Key responsibilities of a data scientist"},{"depth":2,"slug":"skills-and-tools-needed-to-succeed-as-a-data-scientist","text":"Skills and tools needed to succeed as a data scientist"},{"depth":2,"slug":"key-responsibilities-of-a-data-engineer","text":"Key responsibilities of a data engineer"},{"depth":2,"slug":"skills-and-tools-needed-to-succeed-as-a-data-engineer","text":"Skills and tools needed to succeed as a data engineer"},{"depth":2,"slug":"data-scientist-vs-data-engineer-what-career-opportunities-are-available-to-you","text":"Data scientist vs. Data engineer: What career opportunities are available to you?"},{"depth":2,"slug":"salaries-and-job-market-trends","text":"Salaries and job market trends"},{"depth":2,"slug":"data-science-vs-data-engineering-which-path-fits-you-better","text":"Data science vs. Data engineering: Which path fits you better?"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$1p = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1p;
					content.file = file$1p;
					content.url = url$1p;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1p())}`;
				});

const __vite_glob_0_9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1p,
	compiledContent: compiledContent$1p,
	default: Content$1p,
	file: file$1p,
	frontmatter: frontmatter$1p,
	getHeadings: getHeadings$1p,
	rawContent: rawContent$1p,
	url: url$1p
}, Symbol.toStringTag, { value: 'Module' }));

const html$1o = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-machine-learning-gaa7s.jpg\" alt=\"Data science vs machine learning comparison\"></p>\n<p>If you’re excited by the idea of extracting insights from data to guide decisions, a career in <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> might be for you. On the other hand, if you’re drawn to creating the algorithms behind AI systems and building intelligent applications, machine learning could be your ideal path.</p>\n<p>Both fields are at the forefront of innovation, driving transformative technologies like ChatGPT, DALL-E, and Gemini. These advancements, used across industries like healthcare, finance, and tech, owe their success to the growing collaboration between data science and machine learning. As AI becomes more accessible with tools from companies like OpenAI and AWS, the demand for experts in these fields is only increasing.</p>\n<p>So, how do you choose between these high-demand, rewarding careers? As an ML Engineer with experience on projects that span across data science and machine learning, I have gained a deep understanding of the overlaps and differences between these fields. In this guide, I will explain the responsibilities of each role, highlight their key differences, and outline the essential skills for success. By the end, you’ll be better equipped to pick the path that matches your interests, strengths, and career goals.</p>\n<p>The table below summarizes the key differences between data science and machine learning you should consider to help you evaluate which one best fits your career goals:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Aspect</strong></th><th><strong>Data science</strong></th><th><strong>Machine learning</strong></th></tr></thead><tbody><tr><td><strong>Ideal for you</strong> <strong>i**</strong>f*<strong>*…</strong></td><td>You enjoy exploring and analyzing data to extract insights and inform decisions.</td><td>You are passionate about creating algorithms and systems that learn and improve automatically.</td></tr><tr><td><strong>Educational background</strong></td><td>Strong foundation in statistics, data analysis, and visualization tools.</td><td>Strong foundation in mathematics, programming, and AI techniques.</td></tr><tr><td><strong>Career opportunities</strong></td><td>Data scientist, <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst</a>, Business Intelligence Analyst.</td><td>Machine learning Engineer, AI Researcher, Deep Learning Specialist.</td></tr><tr><td><strong>Industries</strong></td><td>Healthcare, finance, marketing, e-commerce, and government sectors.</td><td>Technology, autonomous systems, robotics, fintech, and R&#x26;D labs.</td></tr><tr><td><strong>Skills you’ll need</strong></td><td>Data cleaning, exploratory analysis, storytelling, and domain expertise.</td><td>Proficiency in machine learning libraries, algorithm design, and optimization.</td></tr><tr><td><strong>Growth potential</strong></td><td>Strong demand across industries as companies seek to become more data-driven.</td><td>High demand in tech-driven fields as AI adoption accelerates.</td></tr><tr><td><strong>Creativity vs. technical</strong></td><td>Balances creativity in visualizations with technical skills in data processing.</td><td>Heavily focused on technical and mathematical skills for problem-solving and predictive analytics.</td></tr><tr><td><strong>Long-term vision</strong></td><td>Perfect if you want to lead data-driven strategy or explore business analytics.</td><td>Ideal if you aim to innovate in AI, robotics, or advanced tech solutions.</td></tr></tbody></table>\n<p>Before looking at these features in detail, let’s take a closer look at these two fields.</p>\n<h2 id=\"what-is-data-science\">What is data science?</h2>\n<p>Data science is a field that combines techniques from statistics, domain knowledge, computer science, and data analysis to gain insights from structured and unstructured data. As a data scientist, you’ll use tools, machine learning models, and algorithms to understand data and drive decision-making. You’ll use these insights to help businesses increase profits, create innovative products and services, improve systems, and solve problems across various industries.</p>\n<p><strong>Key Components of Data Science</strong>\nThe key components of data science involve the following processes:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-process-flow-57cx5.png\" alt=\"Data science Components\"></p>\n<ol>\n<li><strong>Data collection</strong>: The first step is to gather raw data from various sources such as APIs, sensors, databases, and web scraping.</li>\n<li><strong>Data cleaning and preparation</strong>: After collecting the raw data, it must be cleaned by removing inaccuracies, handling missing values, and formatting it for analysis.</li>\n<li><strong>Exploratory Data Analysis (EDA)</strong>: Use statistical methods and visualization techniques to explore the data, identify trends, patterns, and anomalies, and gain a better understanding of the dataset.</li>\n<li><strong>Data modeling and machine learning</strong>: Apply machine learning algorithms to build models that can identify patterns, predict outcomes, and automate processes.</li>\n<li><strong>Data visualization</strong>: Use tools like charts, graphs, and dashboards to present insights and communicate findings clearly to stakeholders.</li>\n<li><strong>Deployment and monitoring</strong>: Implement data models in real-world applications and continuously monitor their performance to ensure they remain accurate and effective.</li>\n</ol>\n<h3 id=\"essential-skills-and-tools-you-need-for-a-successful-data-science-career\">Essential Skills and Tools You Need for a Successful Data Science Career</h3>\n<p>To build a successful career in data science, knowledge of a programming language like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> is essential. Beyond that, as a data scientist, you’ll need to develop expertise in the following skills and tools:</p>\n<ul>\n<li><strong>Programming languages</strong>: You’ll need proficiency in <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a>, R, SAS, and others to collect, manipulate, and manage both structured and unstructured data.</li>\n<li><strong>Mathematics, statistics, and probability</strong>: A strong grasp of these concepts will enable you to build accurate models and make data-driven decisions with confidence.</li>\n<li><strong>Data wrangling and visualization</strong>: You’ll be responsible for cleaning, transforming, and visualizing data using tools like Matplotlib, Seaborn, Power BI, and Tableau to present insights effectively.</li>\n<li><strong>Machine learning and predictive modeling</strong>: Knowledge of machine learning algorithms and techniques for building models that can make predictions and automate decision-making processes.</li>\n<li><strong>Data analysis tools</strong>: Familiarity with tools like Jupyter Notebooks, Pandas, NumPy, Apache Spark, and Scikit-learn will help you analyze and process data with ease.</li>\n<li><strong>Cloud platforms</strong>: Experience with cloud platforms such as <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, and Google Cloud will enable you to leverage cloud resources for scalable computing and efficient model deployment.</li>\n</ul>\n<h2 id=\"what-is-machine-learning\">What is machine learning?</h2>\n<p>Machine learning is a branch of Artificial Intelligence (AI) that enables computers to learn from data and make predictions without being explicitly programmed. Rather than manually coding rules for every scenario, machine learning models learn from available data to perform tasks such as fraud detection, recommendation systems, natural language processing, and image recognition. It can be broadly categorized into the following types:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/machine-learning-classification-szzk0.png\" alt=\"Illustration representing machine learning\"></p>\n<ul>\n<li><strong>Supervised learning</strong>: In supervised learning, you train a model labeled data to predict outcomes and identify patterns. For example, you can use a dataset with details like location, square footage, and other factors to teach the model how to predict house prices.</li>\n<li><strong>Unsupervised learning</strong>: In unsupervised learning, the model is trained on unlabeled data and discovers patterns or groupings on its own. For example, you can use it to segment customers based on their purchasing habits without specifying predefined categories.</li>\n<li><strong>Reinforcement learning</strong>: In reinforcement learning, you train a model through a trial-and-error process to achieve the best outcomes. For instance, self-driving cars use reinforcement learning by continuously learning to recognize obstacles, road signs, and blockages through repeated experiences.</li>\n</ul>\n<h3 id=\"key-components-of-machine-learning\">Key Components of Machine Learning</h3>\n<p>The key components of machine learning involve the following processes:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/machine-learning-pipeline-v5daz.png\" alt=\"Machine Learning Pipeline\"></p>\n<ol>\n<li><strong>Data processing</strong>: The foundation of any machine learning system is data. For the model to work effectively, it requires selecting and preparing the right data for training.</li>\n<li><strong>Feature engineering</strong>: This step involves selecting the right variables (features) that the model can use to make accurate predictions. For example, a housing price prediction model would need features like the number of bedrooms, square footage, and location to make reliable predictions.</li>\n<li><strong>Model selection</strong>: Choosing the appropriate model for a specific task is crucial. For instance, a <strong>Linear Regression</strong> model is suitable for predicting continuous values, while <strong>Neural Networks</strong> are better suited for tasks like image recognition.</li>\n<li><strong>Model training</strong>: In this process, the selected model is fed with training data to help it learn patterns. The model’s internal parameters are adjusted to minimize prediction errors.</li>\n<li><strong>Validation and testing</strong>: After training, the model’s performance is evaluated using a separate validation dataset. A final test dataset is used to ensure the model performs well in real-world scenarios.</li>\n<li><strong>Deployment</strong>: Once the model is ready, it is integrated into real-world applications or deployed on cloud platforms to be accessed by third party users.</li>\n<li><strong>Model monitoring and maintenance</strong>: After deployment, the model must be regularly monitored and updated to maintain accuracy and adapt to changes over time.</li>\n</ol>\n<h3 id=\"essential-skills-and-tools-you-need-for-a-successful-machine-learning-career\">Essential Skills and Tools You Need for a Successful Machine Learning Career</h3>\n<p>To build a successful career in machine learning, you’ll need to develop the following essential skills and become familiar with key tools:</p>\n<ul>\n<li><strong>Strong understanding of mathematics and statistics</strong>: You’ll need a solid understanding of linear algebra, calculus, probability, and statistics to grasp how machine learning algorithms function.</li>\n<li><strong>Proficiency in programming languages</strong>: Python and R are must-haves for implementing machine learning models and handling data efficiently.</li>\n<li><strong>Data handling and preprocessing skills</strong>: You need a solid understanding of how to clean, preprocess, and transform raw data into a format suitable for training models.</li>\n<li><strong>Knowledge of machine learning algorithms</strong>: Understanding algorithms like Linear Regression, Q-learning, and K-means and knowing when to apply them will help you tackle diverse challenges.</li>\n<li><strong>Model evaluation and tuning</strong>: You need to master techniques to evaluate model performance (e.g., accuracy, precision, recall) and fine-tune hyperparameters to improve results.</li>\n<li><strong>Familiarity with libraries and frameworks</strong>: Hands-on experience with Scikit-learn, TensorFlow, Keras, and other popular libraries and frameworks will help you build and deploy machine learning models efficiently.</li>\n<li><strong>Cloud Platforms for Infrastructure</strong>: Familiarity with cloud platforms like AWS, Google Cloud, and Azure will let you manage the infrastructure needed for large-scale machine learning projects.</li>\n</ul>\n<p>While data science and machine learning share common skills, tools, and workflows, they differ significantly in their approaches, methodologies, and focus areas. The table below summarizes the key differences between machine learning and data science:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Category</strong></th><th><strong>Data science</strong></th><th><strong>Machine learning</strong></th></tr></thead><tbody><tr><td><strong>Mathematics and statistics</strong></td><td>Strong knowledge of statistics, probability, and linear algebra.</td><td>Deep understanding of calculus, linear algebra, and optimization techniques.</td></tr><tr><td><strong>Programming languages</strong></td><td>Python, R, and SQL for data manipulation, statistical analysis, and visualization.</td><td>Python, <a href=\"https://roadmap.sh/cpp\" target=\"_blank\">C++</a>, and <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a> for implementing machine learning algorithms.</td></tr><tr><td><strong>Data handling</strong></td><td>Data wrangling, data cleaning, and data visualization.</td><td>Data preprocessing, feature engineering, and handling large datasets.</td></tr><tr><td><strong>Machine learning basics</strong></td><td>Basic understanding of supervised, unsupervised learning, and regression.</td><td>Advanced knowledge of machine learning algorithms, including deep learning.</td></tr><tr><td><strong>Business acumen</strong></td><td>Ability to translate business problems into data solutions.</td><td>Focus on technical problem-solving without a primary business context.</td></tr><tr><td><strong>Tools and frameworks</strong></td><td>Tableau, Excel, Hadoop, Pandas, Matplotlib, and Scikit-learn.</td><td>TensorFlow, PyTorch, Scikit-learn, Keras, and XGBoost.</td></tr><tr><td><strong>Data visualization</strong></td><td>Building dashboards, reports, and storytelling through data.</td><td>Creating visualizations primarily for model performance evaluation.</td></tr><tr><td><strong>Communication skills</strong></td><td>Strong emphasis on presenting insights to non-technical stakeholders.</td><td>Less focus on communication; more technical documentation.</td></tr><tr><td><strong>Problem-solving approach</strong></td><td>Emphasis on interpreting data to guide decisions.</td><td>Emphasis on building models to automate decision-making.</td></tr><tr><td><strong>Domain knowledge</strong></td><td>Domain expertise in industries like healthcare, finance, marketing, etc.</td><td>Less reliance on specific domain knowledge; more generalizable algorithms.</td></tr><tr><td><strong>Software engineering</strong></td><td>Less focus on software engineering practices.</td><td>Strong focus on scalable system design and code optimization.</td></tr><tr><td><strong>Algorithm understanding</strong></td><td>Basic knowledge of algorithms for data analysis.</td><td>Deep understanding of algorithms, including neural networks and gradient descent.</td></tr></tbody></table>\n<p>Now that we’ve covered data science and machine learning regarding processes, tools, similarities, and differences, let’s explore the key points you should consider to make the right career decision.</p>\n<h2 id=\"data-science-vs-machine-learning-which-career-path-fits-your-background\">Data science vs. machine learning: Which career path fits your background?</h2>\n<p>If you have a background in statistics, data analysis, and business intelligence, data science could be the perfect match for you. Data science is all about turning raw data into valuable insights that businesses can act on. Your familiarity with working with data makes it easier to spot patterns and trends, which is a key part of what data scientists do. It’s a role that requires both creative problem-solving and analytical thinking.</p>\n<p>Machine learning, on the other hand, is better suited for you if you have a strong foundation in mathematics, programming, and computer science. A machine learning expert builds algorithms that can learn from data without explicitly programming them. It requires a solid grasp of concepts like linear algebra, calculus, probability, and algorithm design. If these are skills you already have, this path is a natural fit for you.</p>\n<h2 id=\"data-science-vs-machine-learning-which-path-pays-off-in-the-long-run\">Data science vs. machine learning: Which path pays off in the long run?</h2>\n<p>Both machine learning and data science offer exciting and rewarding career paths, especially with the growing demand for AI across industries.</p>\n<p>In data science, you typically start your career with entry-level positions like Data Analyst or Business Intelligence Analyst and can evolve into leadership roles like Chief Data Officer. This career path is appealing because it allows you to collaborate with both technical teams and business stakeholders, solving real-world problems with data-driven insights.</p>\n<p>A typical career progression in data science involves:</p>\n<ul>\n<li>Data Analyst</li>\n<li>Data Scientist</li>\n<li>Senior Data Scientist</li>\n<li>Analytics Manager</li>\n<li>Chief Data Officer</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/average-data-scientist-salary-in-the-us-i48ea.png\" alt=\"Average data scientist salary in the US\"></p>\n<p>Machine learning careers tend to offer slightly higher salaries due to the specialized skills in programming and algorithm design. A machine learning professional typically starts as a machine learning engineer and can progress to advanced roles like Head of AI/ML, focusing on developing intelligent systems and cutting-edge AI solutions.</p>\n<p>A typical career progression in machine learning involves:</p>\n<ul>\n<li>Machine Learning Engineer</li>\n<li>AI Specialist</li>\n<li>Deep Learning Engineer</li>\n<li>AI Research Scientist</li>\n<li>Head of AI/ML</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/average-machine-learning-engineer-salary-in-the-us-zdz8c.png\" alt=\"Average machine learning Engineer salary in the US\"></p>\n<p>Both paths provide excellent growth opportunities, but your choice should align with your background and long-term career goals.</p>\n<h2 id=\"data-science-vs-machine-learning-which-opportunities-are-available-for-you\">Data science vs. machine learning: Which opportunities are available for you?</h2>\n<p>In terms of opportunities, data scientist are in higher demand across various industries that need data-driven insight to make decisions and improve their processes. These include companies within healthcare, finance, marketing, retail, and e-commerce. So, if your goal is to work in diverse industries that rely on data insights, then data science is an ideal choice.</p>\n<p>Machine learning, on the other hand, is more likely to work in technology-focused sectors where prediction, automation, and intelligence systems are at the core of their operation. These include industries like robotics, research and development labs, and autonomous vehicles. As a result, opportunities in machine learning may be harder to come by compared to data science, as machine learning professionals often work in more specialized and focused environments. However, if you’re drawn to tech-driven fields involving autonomous systems or AI research, machine learning could be an ideal path for you.</p>\n<h2 id=\"machine-learning-vs-data-science-which-balances-creativity-and-tech-better\">Machine learning vs. data science: Which balances creativity and tech better?</h2>\n<p>Data science strikes a balance between technical expertise and creativity. It’s all about taking complex data and transforming it into meaningful insights that non-technical stakeholders can easily understand. If you enjoy solving problems creatively and telling compelling stories with data, data science would be a great fit for you.</p>\n<p>Machine learning, on the other hand, is more technical and involves developing algorithms. It involves designing, training, and optimizing models that enable machines to learn and make predictions. If you love tackling technical challenges like developing algorithms and building AI models from the ground up, then a career in machine learning would be ideal for you.</p>\n<p>As a rule of thumb, use the decision tree table to choose between data science and machine learning:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-analytics-vs-data-science-skills-ftf50.png\" alt=\"Data Science vs Machine Learning Decision Tree\"></p>\n<p>Choosing between data science and machine learning ultimately depends on your interests and career goals. Both fields offer rewarding opportunities and career growth. The key is to understand what excites you most: extracting meaning from data or building intelligent systems.</p>\n<p>If you’re considering starting a career as a data scientist, explore our comprehensive <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science roadmap</a> for actionable steps and valuable resources to get started.</p>";

				const frontmatter$1o = {"title":"Data Science vs Machine Learning: How are they different?","description":"Excited about a career in data science or machine learning? Learn the differences, key skills, tools, and how to choose the role that aligns with your ambitions","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-machine-learning","seo":{"title":"Data Science vs Machine Learning: How are they different?","description":"Excited about a career in data science or machine learning? Learn the differences, key skills, tools, and how to choose the role that aligns with your ambitions.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-machine-learning-gaa7s.jpg"},"isNew":false,"type":"textual","date":"2025-02-06T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1o = "/workspace/src/data/guides/ai-data-scientist-vs-machine-learning.md";
				const url$1o = undefined;
				function rawContent$1o() {
					return "   \n                                                                  \n                                                                                                                                                                               \n               \n                                                        \n    \n                                                                    \n                                                                                                                                                                                  \n                                                                                          \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs machine learning comparison](https://assets.roadmap.sh/guest/data-science-vs-machine-learning-gaa7s.jpg)\n\nIf you're excited by the idea of extracting insights from data to guide decisions, a career in [data science](https://roadmap.sh/ai-data-scientist) might be for you. On the other hand, if you're drawn to creating the algorithms behind AI systems and building intelligent applications, machine learning could be your ideal path.\n\nBoth fields are at the forefront of innovation, driving transformative technologies like ChatGPT, DALL-E, and Gemini. These advancements, used across industries like healthcare, finance, and tech, owe their success to the growing collaboration between data science and machine learning. As AI becomes more accessible with tools from companies like OpenAI and AWS, the demand for experts in these fields is only increasing.\n\nSo, how do you choose between these high-demand, rewarding careers? As an ML Engineer with experience on projects that span across data science and machine learning, I have gained a deep understanding of the overlaps and differences between these fields. In this guide, I will explain the responsibilities of each role, highlight their key differences, and outline the essential skills for success. By the end, you'll be better equipped to pick the path that matches your interests, strengths, and career goals.\n\nThe table below summarizes the key differences between data science and machine learning you should consider to help you evaluate which one best fits your career goals:\n\n| **Aspect**                            | **Data science**                                                                                | **Machine learning**                                                                               |\n| ------------------------------------- | ----------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| **Ideal for you** **i\\*\\***f\\***\\*…** | You enjoy exploring and analyzing data to extract insights and inform decisions.                | You are passionate about creating algorithms and systems that learn and improve automatically.     |\n| **Educational background**            | Strong foundation in statistics, data analysis, and visualization tools.                        | Strong foundation in mathematics, programming, and AI techniques.                                  |\n| **Career opportunities**              | Data scientist, [Data Analyst](https://roadmap.sh/data-analyst), Business Intelligence Analyst. | Machine learning Engineer, AI Researcher, Deep Learning Specialist.                                |\n| **Industries**                        | Healthcare, finance, marketing, e-commerce, and government sectors.                             | Technology, autonomous systems, robotics, fintech, and R&D labs.                                   |\n| **Skills you'll need**                | Data cleaning, exploratory analysis, storytelling, and domain expertise.                        | Proficiency in machine learning libraries, algorithm design, and optimization.                     |\n| **Growth potential**                  | Strong demand across industries as companies seek to become more data-driven.                   | High demand in tech-driven fields as AI adoption accelerates.                                      |\n| **Creativity vs. technical**          | Balances creativity in visualizations with technical skills in data processing.                 | Heavily focused on technical and mathematical skills for problem-solving and predictive analytics. |\n| **Long-term vision**                  | Perfect if you want to lead data-driven strategy or explore business analytics.                 | Ideal if you aim to innovate in AI, robotics, or advanced tech solutions.                          |\n\nBefore looking at these features in detail, let's take a closer look at these two fields.\n\n## What is data science?\n\nData science is a field that combines techniques from statistics, domain knowledge, computer science, and data analysis to gain insights from structured and unstructured data. As a data scientist, you'll use tools, machine learning models, and algorithms to understand data and drive decision-making. You'll use these insights to help businesses increase profits, create innovative products and services, improve systems, and solve problems across various industries.\n\n**Key Components of Data Science**\nThe key components of data science involve the following processes:\n\n![Data science Components](https://assets.roadmap.sh/guest/data-science-process-flow-57cx5.png)\n\n1. **Data collection**: The first step is to gather raw data from various sources such as APIs, sensors, databases, and web scraping.\n2. **Data cleaning and preparation**: After collecting the raw data, it must be cleaned by removing inaccuracies, handling missing values, and formatting it for analysis.\n3. **Exploratory Data Analysis (EDA)**: Use statistical methods and visualization techniques to explore the data, identify trends, patterns, and anomalies, and gain a better understanding of the dataset.\n4. **Data modeling and machine learning**: Apply machine learning algorithms to build models that can identify patterns, predict outcomes, and automate processes.\n5. **Data visualization**: Use tools like charts, graphs, and dashboards to present insights and communicate findings clearly to stakeholders.\n6. **Deployment and monitoring**: Implement data models in real-world applications and continuously monitor their performance to ensure they remain accurate and effective.\n\n### Essential Skills and Tools You Need for a Successful Data Science Career\n\nTo build a successful career in data science, knowledge of a programming language like [Python](https://roadmap.sh/python) is essential. Beyond that, as a data scientist, you'll need to develop expertise in the following skills and tools:\n\n- **Programming languages**: You'll need proficiency in [SQL](https://roadmap.sh/sql), R, SAS, and others to collect, manipulate, and manage both structured and unstructured data.\n- **Mathematics, statistics, and probability**: A strong grasp of these concepts will enable you to build accurate models and make data-driven decisions with confidence.\n- **Data wrangling and visualization**: You'll be responsible for cleaning, transforming, and visualizing data using tools like Matplotlib, Seaborn, Power BI, and Tableau to present insights effectively.\n- **Machine learning and predictive modeling**: Knowledge of machine learning algorithms and techniques for building models that can make predictions and automate decision-making processes.\n- **Data analysis tools**: Familiarity with tools like Jupyter Notebooks, Pandas, NumPy, Apache Spark, and Scikit-learn will help you analyze and process data with ease.\n- **Cloud platforms**: Experience with cloud platforms such as [AWS](https://roadmap.sh/aws), Azure, and Google Cloud will enable you to leverage cloud resources for scalable computing and efficient model deployment.\n\n## What is machine learning?\n\nMachine learning is a branch of Artificial Intelligence (AI) that enables computers to learn from data and make predictions without being explicitly programmed. Rather than manually coding rules for every scenario, machine learning models learn from available data to perform tasks such as fraud detection, recommendation systems, natural language processing, and image recognition. It can be broadly categorized into the following types:\n\n![Illustration representing machine learning](https://assets.roadmap.sh/guest/machine-learning-classification-szzk0.png)\n\n- **Supervised learning**: In supervised learning, you train a model labeled data to predict outcomes and identify patterns. For example, you can use a dataset with details like location, square footage, and other factors to teach the model how to predict house prices.\n- **Unsupervised learning**: In unsupervised learning, the model is trained on unlabeled data and discovers patterns or groupings on its own. For example, you can use it to segment customers based on their purchasing habits without specifying predefined categories.\n- **Reinforcement learning**: In reinforcement learning, you train a model through a trial-and-error process to achieve the best outcomes. For instance, self-driving cars use reinforcement learning by continuously learning to recognize obstacles, road signs, and blockages through repeated experiences.\n\n### Key Components of Machine Learning\n\nThe key components of machine learning involve the following processes:\n\n![Machine Learning Pipeline](https://assets.roadmap.sh/guest/machine-learning-pipeline-v5daz.png)\n\n1. **Data processing**: The foundation of any machine learning system is data. For the model to work effectively, it requires selecting and preparing the right data for training.\n2. **Feature engineering**: This step involves selecting the right variables (features) that the model can use to make accurate predictions. For example, a housing price prediction model would need features like the number of bedrooms, square footage, and location to make reliable predictions.\n3. **Model selection**: Choosing the appropriate model for a specific task is crucial. For instance, a **Linear Regression** model is suitable for predicting continuous values, while **Neural Networks** are better suited for tasks like image recognition.\n4. **Model training**: In this process, the selected model is fed with training data to help it learn patterns. The model's internal parameters are adjusted to minimize prediction errors.\n5. **Validation and testing**: After training, the model's performance is evaluated using a separate validation dataset. A final test dataset is used to ensure the model performs well in real-world scenarios.\n6. **Deployment**: Once the model is ready, it is integrated into real-world applications or deployed on cloud platforms to be accessed by third party users.\n7. **Model monitoring and maintenance**: After deployment, the model must be regularly monitored and updated to maintain accuracy and adapt to changes over time.\n\n### Essential Skills and Tools You Need for a Successful Machine Learning Career\n\nTo build a successful career in machine learning, you'll need to develop the following essential skills and become familiar with key tools:\n\n- **Strong understanding of mathematics and statistics**: You'll need a solid understanding of linear algebra, calculus, probability, and statistics to grasp how machine learning algorithms function.\n- **Proficiency in programming languages**: Python and R are must-haves for implementing machine learning models and handling data efficiently.\n- **Data handling and preprocessing skills**: You need a solid understanding of how to clean, preprocess, and transform raw data into a format suitable for training models.\n- **Knowledge of machine learning algorithms**: Understanding algorithms like Linear Regression, Q-learning, and K-means and knowing when to apply them will help you tackle diverse challenges.\n- **Model evaluation and tuning**: You need to master techniques to evaluate model performance (e.g., accuracy, precision, recall) and fine-tune hyperparameters to improve results.\n- **Familiarity with libraries and frameworks**: Hands-on experience with Scikit-learn, TensorFlow, Keras, and other popular libraries and frameworks will help you build and deploy machine learning models efficiently.\n- **Cloud Platforms for Infrastructure**: Familiarity with cloud platforms like AWS, Google Cloud, and Azure will let you manage the infrastructure needed for large-scale machine learning projects.\n\nWhile data science and machine learning share common skills, tools, and workflows, they differ significantly in their approaches, methodologies, and focus areas. The table below summarizes the key differences between machine learning and data science:\n\n| **Category**                   | **Data science**                                                                   | **Machine learning**                                                                                                     |\n| ------------------------------ | ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| **Mathematics and statistics** | Strong knowledge of statistics, probability, and linear algebra.                   | Deep understanding of calculus, linear algebra, and optimization techniques.                                             |\n| **Programming languages**      | Python, R, and SQL for data manipulation, statistical analysis, and visualization. | Python, [C++](https://roadmap.sh/cpp), and [Java](https://roadmap.sh/java) for implementing machine learning algorithms. |\n| **Data handling**              | Data wrangling, data cleaning, and data visualization.                             | Data preprocessing, feature engineering, and handling large datasets.                                                    |\n| **Machine learning basics**    | Basic understanding of supervised, unsupervised learning, and regression.          | Advanced knowledge of machine learning algorithms, including deep learning.                                              |\n| **Business acumen**            | Ability to translate business problems into data solutions.                        | Focus on technical problem-solving without a primary business context.                                                   |\n| **Tools and frameworks**       | Tableau, Excel, Hadoop, Pandas, Matplotlib, and Scikit-learn.                      | TensorFlow, PyTorch, Scikit-learn, Keras, and XGBoost.                                                                   |\n| **Data visualization**         | Building dashboards, reports, and storytelling through data.                       | Creating visualizations primarily for model performance evaluation.                                                      |\n| **Communication skills**       | Strong emphasis on presenting insights to non-technical stakeholders.              | Less focus on communication; more technical documentation.                                                               |\n| **Problem-solving approach**   | Emphasis on interpreting data to guide decisions.                                  | Emphasis on building models to automate decision-making.                                                                 |\n| **Domain knowledge**           | Domain expertise in industries like healthcare, finance, marketing, etc.           | Less reliance on specific domain knowledge; more generalizable algorithms.                                               |\n| **Software engineering**       | Less focus on software engineering practices.                                      | Strong focus on scalable system design and code optimization.                                                            |\n| **Algorithm understanding**    | Basic knowledge of algorithms for data analysis.                                   | Deep understanding of algorithms, including neural networks and gradient descent.                                        |\n\nNow that we've covered data science and machine learning regarding processes, tools, similarities, and differences, let's explore the key points you should consider to make the right career decision.\n\n## Data science vs. machine learning: Which career path fits your background?\n\nIf you have a background in statistics, data analysis, and business intelligence, data science could be the perfect match for you. Data science is all about turning raw data into valuable insights that businesses can act on. Your familiarity with working with data makes it easier to spot patterns and trends, which is a key part of what data scientists do. It's a role that requires both creative problem-solving and analytical thinking.\n\nMachine learning, on the other hand, is better suited for you if you have a strong foundation in mathematics, programming, and computer science. A machine learning expert builds algorithms that can learn from data without explicitly programming them. It requires a solid grasp of concepts like linear algebra, calculus, probability, and algorithm design. If these are skills you already have, this path is a natural fit for you.\n\n## Data science vs. machine learning: Which path pays off in the long run?\n\nBoth machine learning and data science offer exciting and rewarding career paths, especially with the growing demand for AI across industries.\n\nIn data science, you typically start your career with entry-level positions like Data Analyst or Business Intelligence Analyst and can evolve into leadership roles like Chief Data Officer. This career path is appealing because it allows you to collaborate with both technical teams and business stakeholders, solving real-world problems with data-driven insights.\n\nA typical career progression in data science involves:\n\n- Data Analyst\n- Data Scientist\n- Senior Data Scientist\n- Analytics Manager\n- Chief Data Officer\n\n![Average data scientist salary in the US](https://assets.roadmap.sh/guest/average-data-scientist-salary-in-the-us-i48ea.png)\n\nMachine learning careers tend to offer slightly higher salaries due to the specialized skills in programming and algorithm design. A machine learning professional typically starts as a machine learning engineer and can progress to advanced roles like Head of AI/ML, focusing on developing intelligent systems and cutting-edge AI solutions.\n\nA typical career progression in machine learning involves:\n\n- Machine Learning Engineer\n- AI Specialist\n- Deep Learning Engineer\n- AI Research Scientist\n- Head of AI/ML\n\n![Average machine learning Engineer salary in the US](https://assets.roadmap.sh/guest/average-machine-learning-engineer-salary-in-the-us-zdz8c.png)\n\nBoth paths provide excellent growth opportunities, but your choice should align with your background and long-term career goals.\n\n## Data science vs. machine learning: Which opportunities are available for you?\n\nIn terms of opportunities, data scientist are in higher demand across various industries that need data-driven insight to make decisions and improve their processes. These include companies within healthcare, finance, marketing, retail, and e-commerce. So, if your goal is to work in diverse industries that rely on data insights, then data science is an ideal choice.\n\nMachine learning, on the other hand, is more likely to work in technology-focused sectors where prediction, automation, and intelligence systems are at the core of their operation. These include industries like robotics, research and development labs, and autonomous vehicles. As a result, opportunities in machine learning may be harder to come by compared to data science, as machine learning professionals often work in more specialized and focused environments. However, if you're drawn to tech-driven fields involving autonomous systems or AI research, machine learning could be an ideal path for you.\n\n## Machine learning vs. data science: Which balances creativity and tech better?\n\nData science strikes a balance between technical expertise and creativity. It's all about taking complex data and transforming it into meaningful insights that non-technical stakeholders can easily understand. If you enjoy solving problems creatively and telling compelling stories with data, data science would be a great fit for you.\n\nMachine learning, on the other hand, is more technical and involves developing algorithms. It involves designing, training, and optimizing models that enable machines to learn and make predictions. If you love tackling technical challenges like developing algorithms and building AI models from the ground up, then a career in machine learning would be ideal for you.\n\nAs a rule of thumb, use the decision tree table to choose between data science and machine learning:\n\n![Data Science vs Machine Learning Decision Tree](https://assets.roadmap.sh/guest/data-analytics-vs-data-science-skills-ftf50.png)\n\nChoosing between data science and machine learning ultimately depends on your interests and career goals. Both fields offer rewarding opportunities and career growth. The key is to understand what excites you most: extracting meaning from data or building intelligent systems.\n\nIf you're considering starting a career as a data scientist, explore our comprehensive [data science roadmap](https://roadmap.sh/ai-data-scientist) for actionable steps and valuable resources to get started.\n";
				}
				async function compiledContent$1o() {
					return await html$1o();
				}
				function getHeadings$1o() {
					return [{"depth":2,"slug":"what-is-data-science","text":"What is data science?"},{"depth":3,"slug":"essential-skills-and-tools-you-need-for-a-successful-data-science-career","text":"Essential Skills and Tools You Need for a Successful Data Science Career"},{"depth":2,"slug":"what-is-machine-learning","text":"What is machine learning?"},{"depth":3,"slug":"key-components-of-machine-learning","text":"Key Components of Machine Learning"},{"depth":3,"slug":"essential-skills-and-tools-you-need-for-a-successful-machine-learning-career","text":"Essential Skills and Tools You Need for a Successful Machine Learning Career"},{"depth":2,"slug":"data-science-vs-machine-learning-which-career-path-fits-your-background","text":"Data science vs. machine learning: Which career path fits your background?"},{"depth":2,"slug":"data-science-vs-machine-learning-which-path-pays-off-in-the-long-run","text":"Data science vs. machine learning: Which path pays off in the long run?"},{"depth":2,"slug":"data-science-vs-machine-learning-which-opportunities-are-available-for-you","text":"Data science vs. machine learning: Which opportunities are available for you?"},{"depth":2,"slug":"machine-learning-vs-data-science-which-balances-creativity-and-tech-better","text":"Machine learning vs. data science: Which balances creativity and tech better?"}];
				}

				const Content$1o = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1o;
					content.file = file$1o;
					content.url = url$1o;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1o())}`;
				});

const __vite_glob_0_10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1o,
	compiledContent: compiledContent$1o,
	default: Content$1o,
	file: file$1o,
	frontmatter: frontmatter$1o,
	getHeadings: getHeadings$1o,
	rawContent: rawContent$1o,
	url: url$1o
}, Symbol.toStringTag, { value: 'Module' }));

const html$1n = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-software-engineering-t7okw.jpg\" alt=\"Data Science and Software Engineering compared\"></p>\n<p>Software engineering and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> aren’t completely separate; they’re more like two overlapping fields. They share similarities, but each has its own focus. Software engineering centers on creating functional products and systems, while data science focuses on extracting insights from data and building predictive models.</p>\n<p>You might want to pick software over data science if you’re good at or interested in building applications, solving engineering problems, and working on system architecture. Otherwise, you might want to go for data science if you’re good at or interested in analyzing data, finding patterns, and developing models to make data-driven decisions.</p>\n<p>So, how do you choose between these two exciting and in-demand careers? When I started my career, I constantly switched between writing software that powered applications and analyzing data to drive decisions. Both fields fascinated me, but they required different skill sets and ways of thinking. If you’re torn between data science and software engineering, this guide will help you understand their key differences and choose the path that aligns with your strengths and interests.</p>\n<h2 id=\"data-science-vs-software-engineering\">Data science vs software engineering</h2>\n<p>The table below highlights the major differences between software engineering and data science to help you evaluate which one might be the right fit for you:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Aspect</strong></th><th><strong>Software Engineering</strong></th><th><strong>Data Science</strong></th></tr></thead><tbody><tr><td><strong>Focus</strong></td><td>Software engineers focus on building, maintaining, and scaling software applications</td><td>Data scientists focus on analyzing data to extract insights and build predictive models</td></tr><tr><td><strong>Key skills</strong></td><td>Programming, system design, DevOps, cloud computing</td><td>Statistics, machine learning, data visualization</td></tr><tr><td><strong>Languages</strong></td><td>Python, Java, Go, JavaScript, C#</td><td>Python, R, SQL, Scala</td></tr><tr><td><strong>Tools and frameworks</strong></td><td>Git, Docker, Kubernetes, React, Spring Boot</td><td>TensorFlow, PyTorch, Pandas, Jupyter, Spark</td></tr><tr><td><strong>Primary goal</strong></td><td>Deliver reliable and scalable software systems</td><td>Extract meaningful insights from data</td></tr><tr><td><strong>Work environment</strong></td><td>Agile development, collaboration with product teams</td><td>Research-oriented, collaboration with analysts and business teams</td></tr><tr><td><strong>Mathematical intensity</strong></td><td>Moderate (algorithms, data structures)</td><td>High (statistics, probability, linear algebra)</td></tr><tr><td><strong>Problem-solving type</strong></td><td>Debugging, optimizing performance, scalability</td><td>Pattern recognition, prediction, optimization</td></tr><tr><td><strong>Typical output</strong></td><td>Websites, mobile apps, cloud platforms, APIs</td><td>Reports, machine learning models, dashboards</td></tr><tr><td><strong>Career paths</strong></td><td>Backend Developer, Frontend Developer, DevOps Engineer</td><td>Data Analyst, Data Scientist, ML Engineer</td></tr><tr><td><strong>Best for people who</strong></td><td>Enjoy building and improving systems that users interact with</td><td>Love working with data, uncovering patterns, and making predictions</td></tr></tbody></table>\n<p>Before looking at these aspects in detail, let’s take a closer look at these two fields.</p>\n<h2 id=\"what-is-software-engineering\">What is software engineering?</h2>\n<p>Software engineering is the process of designing, building, testing, and maintaining computer programs. It involves using structured methodologies, programming knowledge, and best practices to develop software that is reliable, efficient, and easy to maintain.</p>\n<p>For example, when you work on an app like WhatsApp as a software engineer, you work on different parts, like handling how messages are sent, how the app looks and feels, and much more.</p>\n<h2 id=\"key-components-of-software-engineering\">Key components of software engineering</h2>\n<p>The key aspects of software engineering involve the following:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/key-components-of-software-engineering-pll8t.png\" alt=\"Key components of software engineering\"></p>\n<ol>\n<li><strong>Software development lifecycle (SDLC)</strong>: Every application goes through several stages before it’s ready for use:\n<ol>\n<li><strong>Planning and requirements</strong>: Define what the software should do and identify the necessary tools.</li>\n<li><strong>Design</strong>: Outline how the software will function and how different parts will interact.</li>\n<li><strong>Coding</strong>: Write the actual program using languages like <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, or <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>.</li>\n<li><strong>Testing</strong>: Find and fix bugs before launching.</li>\n<li><strong>Deployment</strong>: Release the software for users.</li>\n<li><strong>Maintenance</strong>: Update and improve the software by adding features or fixing issues.</li>\n</ol>\n</li>\n<li><strong>Software design and architecture</strong>: This involves structuring the software and deciding how different components work together. It’s like designing a building. You need a solid foundation and a layout that’s organized and easy to navigate.</li>\n<li><strong>Programming and Development</strong>: Writing code is a major part of software engineering. You’ll use languages like Python, JavaScript, or Java to develop web, mobile, and backend applications.</li>\n<li><strong>Testing and Quality Assurance</strong>: Before releasing software, testing helps identify and fix bugs so users don’t run into problems.</li>\n<li><strong>Deployment and DevOps</strong>: Once the software is ready, it needs to be deployed properly. This includes setting up <strong>CI/CD pipelines</strong> for automated testing and deployment, as well as monitoring systems to track performance and apply updates when needed.</li>\n</ol>\n<h2 id=\"essential-skills-you-need-for-a-successful-software-engineering-career\">Essential skills you need for a successful software engineering career</h2>\n<p>To build a successful career in software engineering, you’ll need a mix of technical and soft skills like:</p>\n<ul>\n<li><strong>Programming languages</strong>: Coding is the heart of software engineering. A strong grasp of languages like JavaScript, Python, and Java will help you build both frontend and backend systems.</li>\n<li><strong>System design</strong>: This involves architecting software so that they are scalable, maintainable, and efficient. You’ll make key decisions about databases, API structures, and how different services communicate within an application.</li>\n<li><strong>Database management</strong>: Data is an essential part of your application. You’ll need to know how to structure it, optimize queries, and keep it secure. For example, in an <strong>online banking system</strong>, customer balances must be stored securely while still allowing fast retrieval for transactions.</li>\n<li><strong>Cloud platforms</strong>: Cloud computing enables businesses to run applications without managing physical servers. Familiarity with platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Google Cloud, or Azure will help you deploy and scale applications efficiently.</li>\n<li><strong>Communication and teamwork</strong>: You’ll often need to explain technical concepts to non-technical stakeholders, write clear documentation, and collaborate with teams across different functions. Strong communication skills will help you work effectively and drive projects forward.</li>\n</ul>\n<h2 id=\"what-is-data-science\">What is data science?</h2>\n<p>Data science is the process of collecting, analyzing, and interpreting large amounts of data to find useful insights. It combines programming, statistics, and problem-solving to help businesses and organizations make better decisions.</p>\n<p>For example, when Netflix suggests movies based on what you’ve watched before, it’s using data science to predict what you might like.</p>\n<h2 id=\"key-components-of-data-science\">Key components of data science</h2>\n<p>The key aspects of data science involve the following:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/key-components-of-data-science-ahbrz.png\" alt=\"Key components of data science\"></p>\n<ol>\n<li><strong>Data collection</strong>: This is the first step in a data science project. As a data scientist, you’ll gather information from sources like websites, databases, and sensors for further analysis. For example, in an e-commerce project, you’ll collect data on products people buy to understand shopping trends.</li>\n<li><strong>Data cleansing and preparation</strong>: The data you collect from various sources are raw and won’t come in ready for analysis. You need to clean and organize the raw data to remove missing entries, duplicated items, and missing headers.</li>\n<li><strong>Data analysis and visualization</strong>: This involves the use of charts and graphs to find patterns and trends. For example, you can analyze social media company data to see how many users are active at different times of the day.</li>\n<li><strong>Machine learning and predictions</strong>: Beyond manually identifying trends and patterns, you’ll also use machine learning algorithms to train computers to recognize patterns and make predictions. For instance, a data scientist working in a bank can use machine learning to detect fraud by spotting unusual transactions.</li>\n</ol>\n<h2 id=\"essential-skills-you-need-for-a-successful-data-science-career\">Essential skills you need for a successful data science career</h2>\n<p>To build a successful career in data science, you’ll need a mix of technical and soft skills like:</p>\n<ul>\n<li><strong>Programming languages</strong>: A solid understanding of Python or R is essential for data analysis, machine learning, and automation. SQL is also crucial for retrieving and managing data from databases.</li>\n<li><strong>Statistics and mathematics</strong>: You need a strong grasp of probability, distributions, and calculus, as they come in handy when interpreting data and building accurate models.</li>\n<li><strong>Data visualization and machine learning</strong>: You need a solid understanding of how to transform complex numbers into easy-to-understand visuals like bar charts, line graphs, and heat maps. Beyond visualization, you also need a good understanding of how to build models that enable computers to recognize patterns and make predictions without being explicitly programmed.</li>\n<li><strong>Big data tools</strong>: You need a good knowledge of big data technologies like Hadoop and Spark that let businesses process and analyze large datasets quickly. For example, you can use Spark to analyze millions of users data on a social media platform to personalize content recommendations.</li>\n<li><strong>Problem solving and critical thinking</strong>: As a data scientist, you’ll need to question data sources, uncover hidden insights, identify biases, and draw accurate conclusions from complex datasets.</li>\n<li><strong>Communication and teamwork</strong>: Even the best insights are useless if they aren’t clearly communicated. You’ll need to translate technical findings into actionable insights that business teams can understand and act on.</li>\n</ul>\n<p>Now that we’ve covered software engineering and data science regarding processes, tools, and required skills, let’s explore why software engineering might be a better option for you or if data science is better suited.</p>\n<h2 id=\"what-your-day-to-day-involves\">What your day-to-day involves</h2>\n<p>If you’re excited by how big tech companies like Uber or Netflix design, develop, and maintain mobile apps, backend systems, or large distributed systems, then software engineering might be a great fit for you. As a software engineer, you will focus on building functional and efficient digital products, using and developing the technical skills that interest you.</p>\n<p>If you’re more interested in extracting insights from data rather than building software systems, data science might be a better fit. As a data scientist, your core focus will be analyzing large datasets, applying machine learning models, and deriving actionable business insights. Unlike software engineering, this role involves more statistical modeling and data interpretation than designing or developing applications.</p>\n<h2 id=\"what-skills-and-background-do-you-currently-have\">What skills and background do you currently have?</h2>\n<p>Are you familiar with a programming language? Have you taken any courses related to computer science or how the Internet works?</p>\n<p>If your answer to some of these questions is <strong>“YES,”</strong> and you enjoyed learning these skills, software engineering might be a great fit. Your existing knowledge and background will be valuable as you build your career in software development.</p>\n<p>However, data science might be worth considering if you’re more comfortable working with numbers, statistics, or data visualization rather than building software systems. A strong foundation in statistics, data analysis, and business intelligence is key in this field, making it a good fit for you as you enjoy working with data rather than writing application logic.</p>\n<h2 id=\"do-you-enjoy-working-in-a-collaborative-environment\">Do you enjoy working in a collaborative environment?</h2>\n<p>As a software engineer, you will work in teams that include both technical (software developers, product managers, and designers) and non-technical (sales and marketing) stakeholders. A typical workday involves writing code, fixing bugs, reviewing pull requests, and discussing features. If you enjoy working collaboratively and like having teammates with whom to brainstorm ideas, then software engineering could be a great fit for you.</p>\n<p>While data scientists also collaborate with other stakeholders, their teams are usually smaller, especially in startups or smaller companies. In many cases, a single person or a very lean team often handles data-related tasks, meaning the role may involve more independent research, analysis, and reporting rather than large-scale team collaboration. If you prefer deep, focused work with fewer distractions, data science might be the better choice.</p>\n<h2 id=\"data-science-vs-software-engineering-where-do-you-see-yourself-in-the-future\">Data science vs software engineering: Where do you see yourself in the future?</h2>\n<p>Both software engineering and data science are rewarding career paths with diverse opportunities for growth and specialization.</p>\n<p>In software engineering, you can work across various industries that continuously adapt and innovate with technology. You also have the flexibility to explore related career paths like:</p>\n<ul>\n<li>Frontend developer</li>\n<li>Backend developer</li>\n<li>Fullstack developer</li>\n<li>DevOps engineer</li>\n<li>Senior software engineer</li>\n<li>Cloud engineer</li>\n<li>Software architect</li>\n</ul>\n<p>This broad range of roles increases your chances of landing a job, as there are many positions to apply for.</p>\n<p>The average salary of a software engineer in the US is about <a href=\"https://www.indeed.com/career/software-engineer/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">$105,596 per annum</a>, and software engineers tend to earn even more with experience and specialized skills.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-software-engineer-salary-in-the-us-n2eha.png\" alt=\"Average software engineer salary in the US\"></p>\n<p>In data science, the career path is more specialized, with key roles like:</p>\n<ul>\n<li>Data analyst</li>\n<li>Machine learning engineer</li>\n<li>Business intelligence analyst</li>\n<li>AI researcher</li>\n</ul>\n<p>While the average salary for a data scientist may be slightly higher than that of a software engineer, software engineering offers greater career flexibility and a wider range of job opportunities. If you’re unsure which path to take, consider whether you enjoy building systems (software engineering) or analyzing data to extract valuable insights (data science).</p>\n<p>The average salary of a data scientist in the US is about <a href=\"https://www.indeed.com/career/data-scientist/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">$123,111 per annum</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-data-scientist-salary-in-the-us-1-qcl4f.png\" alt=\"Average data scientist salary in the US\"></p>\n<p>While data science is leading in AI adoption, software engineering is just as important. Data scientists focus on tasks like collecting, cleaning, and preparing data and training machine learning (ML) models that power AI systems.</p>\n<p>But AI isn’t just about data science; software engineers play a key role too. They build the infrastructure and pipelines needed to deploy and manage these models, making it possible to run them efficiently on large datasets.</p>\n<p>Plus, AI APIs have made it much easier for software engineers to integrate AI into applications without deep expertise in machine learning. So, if you’re worried about missing out on the AI wave, don’t be. You can still do amazing work in the space.</p>\n<p>Ultimately, both software engineering and data science are rewarding careers. To determine which one suits you best, consider doing a litmus test:</p>\n<ul>\n<li>Try building a small application using version control and deploying it to see if software engineering interests you.</li>\n<li>Analyze a dataset with Python, create visualizations, and experiment with basic machine learning to see if data science excites you.</li>\n</ul>\n<p>If you’re leaning toward software engineering, check out our software development roadmaps for <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend</a>, <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a>, or <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack</a> development. If data science resonates with you, explore our <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science roadmap</a> to get started.</p>";

				const frontmatter$1n = {"title":"Data Science vs Software Engineering: Which to Choose?","description":"Both software engineering and data science offer exciting opportunities, but they require different skill sets. This breakdown helps you find your ideal fit.","authorId":"william","excludedBySlug":"/ai-data-scientist/vs-software-engineering","seo":{"title":"Data Science vs Software Engineering: Which to Choose?","description":"Both software engineering and data science offer exciting opportunities, but they require different skill sets. This breakdown helps you find your ideal fit.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-software-engineering-t7okw.jpg"},"isNew":true,"type":"textual","date":"2025-04-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1n = "/workspace/src/data/guides/ai-data-scientist-vs-software-engineering.md";
				const url$1n = undefined;
				function rawContent$1n() {
					return "   \n                                                               \n                                                                                                                                                                            \n                 \n                                                            \n    \n                                                                 \n                                                                                                                                                                              \n                                                                                              \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data Science and Software Engineering compared](https://assets.roadmap.sh/guest/data-science-vs-software-engineering-t7okw.jpg)\n\nSoftware engineering and [data science](https://roadmap.sh/ai-data-scientist) aren't completely separate; they're more like two overlapping fields. They share similarities, but each has its own focus. Software engineering centers on creating functional products and systems, while data science focuses on extracting insights from data and building predictive models.\n\nYou might want to pick software over data science if you're good at or interested in building applications, solving engineering problems, and working on system architecture. Otherwise, you might want to go for data science if you're good at or interested in analyzing data, finding patterns, and developing models to make data-driven decisions.\n\nSo, how do you choose between these two exciting and in-demand careers? When I started my career, I constantly switched between writing software that powered applications and analyzing data to drive decisions. Both fields fascinated me, but they required different skill sets and ways of thinking. If you're torn between data science and software engineering, this guide will help you understand their key differences and choose the path that aligns with your strengths and interests.\n\n## Data science vs software engineering\n\nThe table below highlights the major differences between software engineering and data science to help you evaluate which one might be the right fit for you:\n\n| **Aspect**                 | **Software Engineering**                                                             | **Data Science**                                                                        |\n| -------------------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------- |\n| **Focus**                  | Software engineers focus on building, maintaining, and scaling software applications | Data scientists focus on analyzing data to extract insights and build predictive models |\n| **Key skills**             | Programming, system design, DevOps, cloud computing                                  | Statistics, machine learning, data visualization                                        |\n| **Languages**              | Python, Java, Go, JavaScript, C#                                                     | Python, R, SQL, Scala                                                                   |\n| **Tools and frameworks**   | Git, Docker, Kubernetes, React, Spring Boot                                          | TensorFlow, PyTorch, Pandas, Jupyter, Spark                                             |\n| **Primary goal**           | Deliver reliable and scalable software systems                                       | Extract meaningful insights from data                                                   |\n| **Work environment**       | Agile development, collaboration with product teams                                  | Research-oriented, collaboration with analysts and business teams                       |\n| **Mathematical intensity** | Moderate (algorithms, data structures)                                               | High (statistics, probability, linear algebra)                                          |\n| **Problem-solving type**   | Debugging, optimizing performance, scalability                                       | Pattern recognition, prediction, optimization                                           |\n| **Typical output**         | Websites, mobile apps, cloud platforms, APIs                                         | Reports, machine learning models, dashboards                                            |\n| **Career paths**           | Backend Developer, Frontend Developer, DevOps Engineer                               | Data Analyst, Data Scientist, ML Engineer                                               |\n| **Best for people who**    | Enjoy building and improving systems that users interact with                        | Love working with data, uncovering patterns, and making predictions                     |\n\nBefore looking at these aspects in detail, let's take a closer look at these two fields.\n\n## What is software engineering?\n\nSoftware engineering is the process of designing, building, testing, and maintaining computer programs. It involves using structured methodologies, programming knowledge, and best practices to develop software that is reliable, efficient, and easy to maintain.\n\nFor example, when you work on an app like WhatsApp as a software engineer, you work on different parts, like handling how messages are sent, how the app looks and feels, and much more.\n\n## Key components of software engineering\n\nThe key aspects of software engineering involve the following:\n\n![Key components of software engineering](https://assets.roadmap.sh/guest/key-components-of-software-engineering-pll8t.png)\n\n1. **Software development lifecycle (SDLC)**: Every application goes through several stages before it's ready for use:\n    1. **Planning and requirements**: Define what the software should do and identify the necessary tools.\n    2. **Design**: Outline how the software will function and how different parts will interact.\n    3. **Coding**: Write the actual program using languages like [Java](https://roadmap.sh/java), [Python](https://roadmap.sh/python), or [JavaScript](https://roadmap.sh/javascript).\n    4. **Testing**: Find and fix bugs before launching.\n    5. **Deployment**: Release the software for users.\n    6. **Maintenance**: Update and improve the software by adding features or fixing issues.\n2. **Software design and architecture**: This involves structuring the software and deciding how different components work together. It's like designing a building. You need a solid foundation and a layout that's organized and easy to navigate.\n3. **Programming and Development**: Writing code is a major part of software engineering. You'll use languages like Python, JavaScript, or Java to develop web, mobile, and backend applications.\n4. **Testing and Quality Assurance**: Before releasing software, testing helps identify and fix bugs so users don't run into problems.\n5. **Deployment and DevOps**: Once the software is ready, it needs to be deployed properly. This includes setting up **CI/CD pipelines** for automated testing and deployment, as well as monitoring systems to track performance and apply updates when needed.\n\n## Essential skills you need for a successful software engineering career\n\nTo build a successful career in software engineering, you'll need a mix of technical and soft skills like:\n\n- **Programming languages**: Coding is the heart of software engineering. A strong grasp of languages like JavaScript, Python, and Java will help you build both frontend and backend systems.\n- **System design**: This involves architecting software so that they are scalable, maintainable, and efficient. You'll make key decisions about databases, API structures, and how different services communicate within an application.\n- **Database management**: Data is an essential part of your application. You'll need to know how to structure it, optimize queries, and keep it secure. For example, in an **online banking system**, customer balances must be stored securely while still allowing fast retrieval for transactions.\n- **Cloud platforms**: Cloud computing enables businesses to run applications without managing physical servers. Familiarity with platforms like [AWS](https://roadmap.sh/aws), Google Cloud, or Azure will help you deploy and scale applications efficiently.\n- **Communication and teamwork**: You'll often need to explain technical concepts to non-technical stakeholders, write clear documentation, and collaborate with teams across different functions. Strong communication skills will help you work effectively and drive projects forward.\n\n## What is data science?\n\nData science is the process of collecting, analyzing, and interpreting large amounts of data to find useful insights. It combines programming, statistics, and problem-solving to help businesses and organizations make better decisions.\n\nFor example, when Netflix suggests movies based on what you've watched before, it's using data science to predict what you might like.\n\n## Key components of data science\n\nThe key aspects of data science involve the following:\n\n![Key components of data science](https://assets.roadmap.sh/guest/key-components-of-data-science-ahbrz.png)\n\n1. **Data collection**: This is the first step in a data science project. As a data scientist, you'll gather information from sources like websites, databases, and sensors for further analysis. For example, in an e-commerce project, you'll collect data on products people buy to understand shopping trends.\n2. **Data cleansing and preparation**: The data you collect from various sources are raw and won't come in ready for analysis. You need to clean and organize the raw data to remove missing entries, duplicated items, and missing headers.\n3. **Data analysis and visualization**: This involves the use of charts and graphs to find patterns and trends. For example, you can analyze social media company data to see how many users are active at different times of the day.\n4. **Machine learning and predictions**: Beyond manually identifying trends and patterns, you'll also use machine learning algorithms to train computers to recognize patterns and make predictions. For instance, a data scientist working in a bank can use machine learning to detect fraud by spotting unusual transactions.\n\n## Essential skills you need for a successful data science career\n\nTo build a successful career in data science, you'll need a mix of technical and soft skills like:\n\n- **Programming languages**: A solid understanding of Python or R is essential for data analysis, machine learning, and automation. SQL is also crucial for retrieving and managing data from databases.\n- **Statistics and mathematics**: You need a strong grasp of probability, distributions, and calculus, as they come in handy when interpreting data and building accurate models.\n- **Data visualization and machine learning**: You need a solid understanding of how to transform complex numbers into easy-to-understand visuals like bar charts, line graphs, and heat maps. Beyond visualization, you also need a good understanding of how to build models that enable computers to recognize patterns and make predictions without being explicitly programmed.\n- **Big data tools**: You need a good knowledge of big data technologies like Hadoop and Spark that let businesses process and analyze large datasets quickly. For example, you can use Spark to analyze millions of users data on a social media platform to personalize content recommendations.\n- **Problem solving and critical thinking**: As a data scientist, you'll need to question data sources, uncover hidden insights, identify biases, and draw accurate conclusions from complex datasets.\n- **Communication and teamwork**: Even the best insights are useless if they aren't clearly communicated. You'll need to translate technical findings into actionable insights that business teams can understand and act on.\n\nNow that we've covered software engineering and data science regarding processes, tools, and required skills, let's explore why software engineering might be a better option for you or if data science is better suited.\n\n## What your day-to-day involves\n\nIf you're excited by how big tech companies like Uber or Netflix design, develop, and maintain mobile apps, backend systems, or large distributed systems, then software engineering might be a great fit for you. As a software engineer, you will focus on building functional and efficient digital products, using and developing the technical skills that interest you.\n\nIf you're more interested in extracting insights from data rather than building software systems, data science might be a better fit. As a data scientist, your core focus will be analyzing large datasets, applying machine learning models, and deriving actionable business insights. Unlike software engineering, this role involves more statistical modeling and data interpretation than designing or developing applications.\n\n## What skills and background do you currently have?\n\nAre you familiar with a programming language? Have you taken any courses related to computer science or how the Internet works?\n\nIf your answer to some of these questions is **\"YES,\"** and you enjoyed learning these skills, software engineering might be a great fit. Your existing knowledge and background will be valuable as you build your career in software development.\n\nHowever, data science might be worth considering if you're more comfortable working with numbers, statistics, or data visualization rather than building software systems. A strong foundation in statistics, data analysis, and business intelligence is key in this field, making it a good fit for you as you enjoy working with data rather than writing application logic.\n\n## Do you enjoy working in a collaborative environment?\n\nAs a software engineer, you will work in teams that include both technical (software developers, product managers, and designers) and non-technical (sales and marketing) stakeholders. A typical workday involves writing code, fixing bugs, reviewing pull requests, and discussing features. If you enjoy working collaboratively and like having teammates with whom to brainstorm ideas, then software engineering could be a great fit for you.\n\nWhile data scientists also collaborate with other stakeholders, their teams are usually smaller, especially in startups or smaller companies. In many cases, a single person or a very lean team often handles data-related tasks, meaning the role may involve more independent research, analysis, and reporting rather than large-scale team collaboration. If you prefer deep, focused work with fewer distractions, data science might be the better choice.\n\n## Data science vs software engineering: Where do you see yourself in the future?\n\nBoth software engineering and data science are rewarding career paths with diverse opportunities for growth and specialization.\n\nIn software engineering, you can work across various industries that continuously adapt and innovate with technology. You also have the flexibility to explore related career paths like:\n\n- Frontend developer\n- Backend developer\n- Fullstack developer\n- DevOps engineer\n- Senior software engineer\n- Cloud engineer\n- Software architect\n\nThis broad range of roles increases your chances of landing a job, as there are many positions to apply for.\n\nThe average salary of a software engineer in the US is about [$105,596 per annum](https://www.indeed.com/career/software-engineer/salaries), and software engineers tend to earn even more with experience and specialized skills.\n\n![Average software engineer salary in the US](https://assets.roadmap.sh/guest/average-software-engineer-salary-in-the-us-n2eha.png)\n\nIn data science, the career path is more specialized, with key roles like:\n\n- Data analyst\n- Machine learning engineer\n- Business intelligence analyst\n- AI researcher\n\nWhile the average salary for a data scientist may be slightly higher than that of a software engineer, software engineering offers greater career flexibility and a wider range of job opportunities. If you're unsure which path to take, consider whether you enjoy building systems (software engineering) or analyzing data to extract valuable insights (data science).\n\nThe average salary of a data scientist in the US is about [$123,111 per annum](https://www.indeed.com/career/data-scientist/salaries?from=top_sb).\n\n![Average data scientist salary in the US](https://assets.roadmap.sh/guest/average-data-scientist-salary-in-the-us-1-qcl4f.png)\n\nWhile data science is leading in AI adoption, software engineering is just as important. Data scientists focus on tasks like collecting, cleaning, and preparing data and training machine learning (ML) models that power AI systems.\n\nBut AI isn't just about data science; software engineers play a key role too. They build the infrastructure and pipelines needed to deploy and manage these models, making it possible to run them efficiently on large datasets.\n\nPlus, AI APIs have made it much easier for software engineers to integrate AI into applications without deep expertise in machine learning. So, if you're worried about missing out on the AI wave, don't be. You can still do amazing work in the space.\n\nUltimately, both software engineering and data science are rewarding careers. To determine which one suits you best, consider doing a litmus test:\n\n- Try building a small application using version control and deploying it to see if software engineering interests you.\n- Analyze a dataset with Python, create visualizations, and experiment with basic machine learning to see if data science excites you.\n\nIf you're leaning toward software engineering, check out our software development roadmaps for [frontend](https://roadmap.sh/frontend), [backend](https://roadmap.sh/backend), or [full stack](https://roadmap.sh/full-stack) development. If data science resonates with you, explore our [data science roadmap](https://roadmap.sh/ai-data-scientist) to get started.\n\n";
				}
				async function compiledContent$1n() {
					return await html$1n();
				}
				function getHeadings$1n() {
					return [{"depth":2,"slug":"data-science-vs-software-engineering","text":"Data science vs software engineering"},{"depth":2,"slug":"what-is-software-engineering","text":"What is software engineering?"},{"depth":2,"slug":"key-components-of-software-engineering","text":"Key components of software engineering"},{"depth":2,"slug":"essential-skills-you-need-for-a-successful-software-engineering-career","text":"Essential skills you need for a successful software engineering career"},{"depth":2,"slug":"what-is-data-science","text":"What is data science?"},{"depth":2,"slug":"key-components-of-data-science","text":"Key components of data science"},{"depth":2,"slug":"essential-skills-you-need-for-a-successful-data-science-career","text":"Essential skills you need for a successful data science career"},{"depth":2,"slug":"what-your-day-to-day-involves","text":"What your day-to-day involves"},{"depth":2,"slug":"what-skills-and-background-do-you-currently-have","text":"What skills and background do you currently have?"},{"depth":2,"slug":"do-you-enjoy-working-in-a-collaborative-environment","text":"Do you enjoy working in a collaborative environment?"},{"depth":2,"slug":"data-science-vs-software-engineering-where-do-you-see-yourself-in-the-future","text":"Data science vs software engineering: Where do you see yourself in the future?"}];
				}

				const Content$1n = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1n;
					content.file = file$1n;
					content.url = url$1n;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1n())}`;
				});

const __vite_glob_0_11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1n,
	compiledContent: compiledContent$1n,
	default: Content$1n,
	file: file$1n,
	frontmatter: frontmatter$1n,
	getHeadings: getHeadings$1n,
	rawContent: rawContent$1n,
	url: url$1n
}, Symbol.toStringTag, { value: 'Module' }));

const html$1m = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-statistics-e3rtw.jpg\" alt=\"Data science vs statistics compared\"></p>\n<p>Data science and statistics are promising career paths that offer great opportunities to work with data to solve problems and guide decision-making in various industries. But how do you determine which one is a good career for you? If you’re new to these fields, learning about their core concepts and career opportunities can help you get started. If you are a student or professional exploring data-driven careers, this guide will help clear up confusion and determine the path that aligns with your goals.</p>\n<p>When choosing between the two, think about the types of problems you like to solve. If you’re interested in understanding why and how an issue occurred, uncovering insights from raw data, and building models to predict future outcomes, data science may be the right fit for you. On the other hand, if you prefer analyzing and interpreting quantitative data, identifying patterns, and making statistical predictions, statistics could be the better path.</p>\n<p>At first, data science and statistics might seem interchangeable. But as we dig deeper, you’ll see how they differ. Statistics provides the foundation by defining methods, probabilities, and models. Data science builds on that foundation to extract insights from complex data and solve real-world problems.</p>\n<p>In this guide, I’ll explain where <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a> and statistics connect and differ. You’ll learn more about the skills and tools necessary for each role and gain more clarity into the career prospects and opportunities they offer. By the time you finish, you’ll have a clear vision of your ideal role and the confidence to start shaping your future.</p>\n<p>The following table provides a comparison of data science and statistics.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>Data Science</th><th>Statistics</th></tr></thead><tbody><tr><td>Key role</td><td>Uses statistics, computer science, and domain expertise to interpret complex datasets.</td><td>Uses statistical methods to analyze and make predictions for small, structured datasets.</td></tr><tr><td>Data processing</td><td>Handles large and complex datasets (big data).</td><td>Works with smaller datasets, emphasizes sampling techniques.</td></tr><tr><td>Tools</td><td>Python, R, SQL, Hadoop, and TensorFlow.</td><td>Statistical software like SAS, R, SPSS, and mathematical models.</td></tr><tr><td>Skills</td><td>Machine learning knowledge, programming skills, data mining, data visualization, business intelligence, and predictive analytics.</td><td>Proficient in probability, mathematical theory, statistical modeling, data analysis, and survey design.</td></tr><tr><td>Career paths</td><td>Data scientist, machine learning engineer, data analysts.</td><td>Statistician, biostatistician, research analyst.</td></tr><tr><td>Salary range</td><td>For data science career options, salary ranges from $81,273 to $161,715 per year.</td><td>For statistics career trajectories, salary ranges from $75,789 to $101,789 per year.</td></tr></tbody></table>\n<p>Data science vs. statistics: What sets them apart?</p>\n<p>Data science and statistics are two different areas of analytics, each with its role and methodology. Both use statistical methods, but the key difference lies in their application and purpose.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-statistics-uxnkp.png\" alt=\"Data science vs. statistics\"></p>\n<p>Data science is a blend of statistics, computer science, and domain expertise. It focuses on analyzing large, complex datasets to uncover trends, predict outcomes, and drive business decisions. As a data scientist, you’ll use machine learning, programming, and big data tools to solve real-world problems.</p>\n<p>Statistics, on the other hand, is rooted in mathematical theory and inference. As a statistician, you’ll design experiments, develop models, and test hypotheses to draw conclusions from structured datasets. You’ll work in industries like finance, healthcare, government, and research.</p>\n<p>The key difference is application. Statistics is theoretical and inference-driven, while data science applies statistical techniques in a computational, business-focused way.</p>\n<p>To get a clearer picture of both roles, let’s look at the day-to-day tasks involved in each field.</p>\n<h2 id=\"job-roles-and-responsibilities\">Job roles and responsibilities</h2>\n<p>Both data science and statistics rely on statistical methods and tools, but your day-to-day activities in each field will differ significantly. As a statistician, you focus on collecting, analyzing, and interpreting data to uncover patterns. As a data scientist, you go beyond that by leveraging machine learning, big data technologies, and programming to extract actionable insights.</p>\n<p>Now, let’s take a closer look at their specific roles and responsibilities through a shared case study.</p>\n<h3 id=\"key-responsibilities-of-data-scientists\">Key responsibilities of data scientists</h3>\n<p>As a data scientist, you’ll extract actionable insights from raw data to solve complex business problems. For example, imagine a pharmaceutical company is developing a new drug. As a data scientist, you might be analyzing clinical trial data to predict treatment efficacy for different patient groups. By applying machine learning models, you can find hidden patterns in patient responses, segment populations, and optimize treatment recommendations.</p>\n<p>The following are some of your day-to-day responsibilities as a data scientist:</p>\n<ul>\n<li>Discovery: Understanding patient demographics, health conditions, and genetic factors to segment target groups.</li>\n<li>Data collection: Gathering patient records, clinical trial results, and external medical research data for analysis.</li>\n<li>Generate insights: Finding trends in treatment responses using advanced analytics and predictive modeling.</li>\n<li>Model large data sets: Using machine learning to forecast drug effectiveness across different conditions.</li>\n<li>Design algorithms: Building AI-driven models to personalize medication plans and optimize trial outcomes.</li>\n</ul>\n<h3 id=\"key-responsibilities-of-a-statistician\">Key responsibilities of a statistician</h3>\n<p>As a statistician, your focus is on designing experiments, analyzing data and applying statistical methods to evaluate results.</p>\n<p>Using the same pharmaceutical company case, as a statistician, you might be responsible for ensuring the clinical trial design is statistically sound and the results are statistically valid before regulatory approval. You would be conducting hypothesis testing, confidence interval analysis, and regression models to confirm that the drug is effective and safe.</p>\n<p>Your day-to-day responsibilities might include:</p>\n<ul>\n<li>Designing surveys and experiments: Design a clinical trial or questionnaires for the new drug to verify it is statistically sound</li>\n<li>Testing hypotheses: Choosing the right statistical test based on the data type.</li>\n<li>Analyzing structured datasets: Summarizing data, analyzing, and modeling relationships between variables to predict outcomes.</li>\n<li>Data reporting: Using charts, graphs, and other visual aids to report complex information effectively.</li>\n<li>Business recommendations: Provide valuable insight and production strategies based on trial results.</li>\n</ul>\n<p>Let’s dig into a few tools and skills you must be proficient in for your selected job role.</p>\n<h2 id=\"essential-skills-and-tools\">Essential skills and tools</h2>\n<p>Whether you are planning to choose data science or statistics as your career, it is important to know the right tools and essential skills for future challenges.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-science-vs-statistics-skills-tbnm7.png\" alt=\"Data science vs statistics: Skills\"></p>\n<p>Both data science and statistics require a strong foundation in mathematics and analytical thinking skills. Professionals in these fields often pursue advanced degrees, such as a Master’s or Ph.D., to enhance their expertise. Let’s examine a few key skills and tools essential for each job profile.</p>\n<h3 id=\"skills-and-tools-of-a-data-scientist\">Skills and tools of a data scientist</h3>\n<p>Handling complex datasets, including both unstructured and structured data, requires a data scientist to possess strong technical and problem-solving skills. You should have the following skills for a data scientist job profile:</p>\n<ul>\n<li><strong>Programming Skills:</strong> To perform data science tasks smoothly, you must be proficient in <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a>, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, and R programming languages. Additionally, you must be good at statistical analysis and mathematics.</li>\n<li><strong>Machine learning knowledge:</strong> You should be able to choose and implement appropriate algorithms, such as linear regression, logistic regression, decision trees, random forests, and neural networks, based on the specific problem and dataset.</li>\n<li><strong>Data mining:</strong> Knowledge of techniques like data cleaning, preprocessing, feature engineering, and pattern recognition are essential to extracting meaningful insights from big data.</li>\n<li><strong>Data visualization:</strong> Tools like Tableau and Power BI can help create compelling charts and graphs for your big data. You must know how to use these tools effectively to communicate data insights.</li>\n<li><strong>Business intelligence:</strong> Understanding business contexts and translating data insights into actionable business decisions is key. You must have strong communication skills and domain knowledge.</li>\n</ul>\n<p>Hadoop, Docker, TensorFlow, GitHub/Git, SQL, and Tableau are important for a data science job profile. Interviewers often prioritize candidates with educational qualifications in computer science, programming, and practical applications of data analysis techniques.</p>\n<h3 id=\"skills-and-tools-of-a-statistician\">Skills and tools of a statistician</h3>\n<p>A statistician’s main responsibility is to analyze data to predict future events or trends. To achieve this goal, you must excel in the following skills and tools:</p>\n<ul>\n<li>Mathematical theory: A strong understanding of mathematical concepts like linear algebra, calculus, etc., is essential to measure quantitative data.</li>\n<li>Probability: Proficiency in probability theory is essential for understanding and modeling uncertainty in data.</li>\n<li>Statistical modeling: Experience with various statistical models, such as time series analysis and linear regression, is also valuable.</li>\n<li>Survey design: Knowledge of designing questionnaires or sampling techniques is necessary to collect information from a group of people.</li>\n</ul>\n<p>R, SAS, SPSS, and Excel are a few popular tools you should master to perform statistical analysis and generate graphics. Also, candidates with qualifications in advanced statistical modeling, mathematical and statistical theory, and research methodologies have a better chance of getting selected.</p>\n<p>Let’s move forward to different career options available under data science and statistics. Learning about their salary ranges will provide valuable insight into earning potential, helping you make an informed career decision. By comparing salaries, you can assess financial stability, ensuring that your chosen path aligns with your long-term financial goals.</p>\n<h2 id=\"career-prospects-for-both-fields\">Career prospects for both fields</h2>\n<p>Data science is experiencing explosive growth across numerous industries, whereas the demand for statisticians remains strong and consistent. Let’s explore the various job roles available in both fields and their salary ranges.</p>\n<h3 id=\"data-science-career-paths-and-salary-insights\">Data science career paths and salary insights</h3>\n<p>You can choose from the following careers if you are planning to proceed with data science:</p>\n<ul>\n<li>Data scientist</li>\n<li>Machine learning engineer</li>\n<li>Data analyst</li>\n</ul>\n<p><strong>Data scientist:</strong> A career in data science offers opportunities in various industries, including finance, healthcare, and technology. As a data scientist, you’ll tackle unique problems, using statistical modeling and machine learning to drive business decisions and outcomes. You need to have a deep understanding of data manipulation and how data relates to the real world.</p>\n<p>Many data scientists use machine learning algorithms to build predictive models, identify trends, and make data-driven decisions. Strong communication skills and expertise in statistical modeling are essential for success in this field. You may start as a junior data scientist and improve your knowledge to lead as Head of Data Science over time.</p>\n<p>In the United States, the <a href=\"https://www.datacamp.com/blog/data-science-salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a data scientist is $123,069 per year.</p>\n<p><strong>Machine learning engineer:</strong> A career as a machine learning engineer involves designing, building, and optimizing machine learning models used in various applications, from recommendation systems to fraud detection. Professionals in this field work on improving machine learning frameworks, monitoring model performance, and solving complex computational problems. To succeed, you need expertise in advanced machine learning, cloud computing, and the software development lifecycle (SDLC).</p>\n<p>Machine learning engineers are in high demand across finance, healthcare, e-commerce, and technology industries. You can start by working on implementing basic machine learning models; as you improve your skills and gain more knowledge, you can work towards a role overseeing ML infrastructure, defining best practices, and leading technical teams.</p>\n<p>In the United States, the <a href=\"https://www.indeed.com/career/machine-learning-engineer/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> for a machine learning engineer is $161,715 per year.</p>\n<p><strong>Data analyst:</strong> <a href=\"https://roadmap.sh/ai-data-scientist/vs-data-analytics\" target=\"_blank\">Data analysts</a> play a crucial role in helping businesses make informed decisions by collecting, filtering, and analyzing data to answer specific business questions. You can use data visualization tools to present insights clearly to stakeholders.</p>\n<p>A career as a data analyst offers opportunities across various industries, including marketing, finance, and healthcare, making it a versatile and in-demand profession. The data analyst job profile includes various positions and levels, from basic reporting and performing deeper data analysis to making data-driven decisions for an organization.</p>\n<p>According to <a href=\"https://www.indeed.com/career/data-analyst/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for a data analyst job profile in the United States is $81,273 annually.</p>\n<h3 id=\"statistics-career-paths-and-salary-insights\">Statistics career paths and salary insights</h3>\n<p>If you’re interested in statistics, here are a few job positions you can choose from:</p>\n<ul>\n<li>Statistician</li>\n<li>Biostatistician</li>\n<li>Research Analyst</li>\n</ul>\n<p><strong>Statistician:</strong> As a statistician, you will design and conduct statistical analysis, interpret data, and communicate findings to researchers and other stakeholders. Many statisticians work on research projects, clinical trials, and large-scale surveys, helping organizations make data-driven decisions.</p>\n<p>There are different levels in the statistician job profile, from applying statistical techniques for data interpretation to leading statistical research and influencing policy decisions. Strong analytical skills and a solid understanding of statistical methods are essential for this career path.</p>\n<p>According to <a href=\"https://www.indeed.com/career/statistician/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary of a statistician in the United States is $89,126 per year.</p>\n<p><strong>Biostatistician:</strong> Biostatisticians apply statistical methods to biological and medical research, making significant contributions to the healthcare and pharmaceutical industries. If you are planning to pursue a career in this field, you will design and analyze clinical trials, ensuring the accuracy and reliability of biomedical research. This career path offers opportunities in hospitals, government agencies, research institutions, and pharmaceutical companies.</p>\n<p>The <a href=\"https://www.indeed.com/career/biostatistician/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> for a biostatistician is $101,789 per year in the United States.</p>\n<p><strong>Research analyst:</strong> In this role, you will use statistical and analytical methods to collect and interpret information to support business decisions. You will also identify trends, generate insights, and present detailed reports summarizing your research for stakeholders.</p>\n<p>According to <a href=\"https://www.indeed.com/career/research-analyst/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Indeed</a>, the average salary for a research analyst in the United States is $75,789 per year.</p>\n<h2 id=\"are-data-science-and-statistics-interconnected\">Are data science and statistics interconnected?</h2>\n<p>A statistician uses statistical tools and mathematical models to analyze customer data and distinct customer segments with similar characteristics. This analysis will help stakeholders understand the factors responsible for customer churn rates. Data scientists, meanwhile, will collect big data and use machine learning models to perform predictive analysis.</p>\n<p>Statistics answer questions like “Why did customer churn get high in the first quarter?” or “What is the reason behind the sudden downfall”? Data science, on the other hand, answers “How can this issue be fixed?”.</p>\n<p>So yes, data science and statistics are deeply interconnected.</p>\n<p>Statistics provides the foundation for analyzing data, such as finding patterns and trends. Data science professionals, on the other hand, create sophisticated models and present insights through data visualization. Data science is an extended version of statistics that uses statistical methods, scientific methods, machine learning, and artificial intelligence to manage unstructured or semi-structured data.</p>\n<p>Data science further leverages predictive modeling and other advanced techniques to understand past events, predict future trends, identify potential risks, solve real-world problems, and develop improvement strategies.</p>\n<p>Additionally, statistics doesn’t require computational skills but an understanding of basic mathematical models to analyze and predict results.</p>\n<h2 id=\"next-step\">Next Step?</h2>\n<p>Choosing between data science and statistics can be a tough call. Hopefully, this guide has helped clarify which career path is the best for you. Once you’ve made a decision, the next step is to get started.</p>\n<p>To help you with your journey, I encourage you to explore the <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">comprehensive resources</a> that delve deeper into the specifics of each path. Whether you are interested in programming and solving complex datasets or theoretical analysis and working with structured data, we have great resources for each career option.</p>\n<p>You can apply for internships or join online courses to gain more experience or sharpen your knowledge. If you still have queries or doubts about these fields, join the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> to stay up-to-date!</p>";

				const frontmatter$1m = {"title":"Data Science vs Statistics: How do they compare?","description":"Not sure whether to pursue data science or statistics? This guide breaks down the key differences, career paths, and skills you need to make an informed choice.","authorId":"ekene","excludedBySlug":"/ai-data-scientist/vs-statistics","seo":{"title":"Data Science vs Statistics: How do they compare?","description":"Not sure whether to pursue data science or statistics? This guide breaks down the key differences, career paths, and skills you need to make an informed choice.","ogImageUrl":"https://assets.roadmap.sh/guest/data-science-vs-statistics-e3rtw.jpg"},"isNew":false,"type":"textual","date":"2025-03-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1m = "/workspace/src/data/guides/ai-data-scientist-vs-statistics.md";
				const url$1m = undefined;
				function rawContent$1m() {
					return "   \n                                                         \n                                                                                                                                                                               \n               \n                                                  \n    \n                                                           \n                                                                                                                                                                                 \n                                                                                    \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Data science vs statistics compared](https://assets.roadmap.sh/guest/data-science-vs-statistics-e3rtw.jpg)\n\nData science and statistics are promising career paths that offer great opportunities to work with data to solve problems and guide decision-making in various industries. But how do you determine which one is a good career for you? If you're new to these fields, learning about their core concepts and career opportunities can help you get started. If you are a student or professional exploring data-driven careers, this guide will help clear up confusion and determine the path that aligns with your goals.\n\nWhen choosing between the two, think about the types of problems you like to solve. If you're interested in understanding why and how an issue occurred, uncovering insights from raw data, and building models to predict future outcomes, data science may be the right fit for you. On the other hand, if you prefer analyzing and interpreting quantitative data, identifying patterns, and making statistical predictions, statistics could be the better path.\n\nAt first, data science and statistics might seem interchangeable. But as we dig deeper, you'll see how they differ. Statistics provides the foundation by defining methods, probabilities, and models. Data science builds on that foundation to extract insights from complex data and solve real-world problems.\n\nIn this guide, I'll explain where [data science](https://roadmap.sh/ai-data-scientist) and statistics connect and differ. You'll learn more about the skills and tools necessary for each role and gain more clarity into the career prospects and opportunities they offer. By the time you finish, you'll have a clear vision of your ideal role and the confidence to start shaping your future.\n\nThe following table provides a comparison of data science and statistics.\n\n|                 | Data Science                                                                                                                      | Statistics                                                                                              |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| Key role        | Uses statistics, computer science, and domain expertise to interpret complex datasets.                                            | Uses statistical methods to analyze and make predictions for small, structured datasets.                |\n| Data processing | Handles large and complex datasets (big data).                                                                                    | Works with smaller datasets, emphasizes sampling techniques.                                            |\n| Tools           | Python, R, SQL, Hadoop, and TensorFlow.                                                                                           | Statistical software like SAS, R, SPSS, and mathematical models.                                        |\n| Skills          | Machine learning knowledge, programming skills, data mining, data visualization, business intelligence, and predictive analytics. | Proficient in probability, mathematical theory, statistical modeling, data analysis, and survey design. |\n| Career paths    | Data scientist, machine learning engineer, data analysts.                                                                         | Statistician, biostatistician, research analyst.                                                        |\n| Salary range    | For data science career options, salary ranges from $81,273 to $161,715 per year.                                                 | For statistics career trajectories, salary ranges from $75,789 to $101,789 per year.                    |\n\nData science vs. statistics: What sets them apart?\n\nData science and statistics are two different areas of analytics, each with its role and methodology. Both use statistical methods, but the key difference lies in their application and purpose.\n\n\n![Data science vs. statistics](https://assets.roadmap.sh/guest/data-science-vs-statistics-uxnkp.png)\n\n\nData science is a blend of statistics, computer science, and domain expertise. It focuses on analyzing large, complex datasets to uncover trends, predict outcomes, and drive business decisions. As a data scientist, you'll use machine learning, programming, and big data tools to solve real-world problems.\n\nStatistics, on the other hand, is rooted in mathematical theory and inference. As a statistician, you'll design experiments, develop models, and test hypotheses to draw conclusions from structured datasets. You'll work in industries like finance, healthcare, government, and research.\n\nThe key difference is application. Statistics is theoretical and inference-driven, while data science applies statistical techniques in a computational, business-focused way.\n\nTo get a clearer picture of both roles, let's look at the day-to-day tasks involved in each field.\n\n## Job roles and responsibilities\n\nBoth data science and statistics rely on statistical methods and tools, but your day-to-day activities in each field will differ significantly. As a statistician, you focus on collecting, analyzing, and interpreting data to uncover patterns. As a data scientist, you go beyond that by leveraging machine learning, big data technologies, and programming to extract actionable insights.\n\nNow, let's take a closer look at their specific roles and responsibilities through a shared case study.\n\n### Key responsibilities of data scientists\n\nAs a data scientist, you'll extract actionable insights from raw data to solve complex business problems. For example, imagine a pharmaceutical company is developing a new drug. As a data scientist, you might be analyzing clinical trial data to predict treatment efficacy for different patient groups. By applying machine learning models, you can find hidden patterns in patient responses, segment populations, and optimize treatment recommendations.\n\nThe following are some of your day-to-day responsibilities as a data scientist:\n\n* Discovery: Understanding patient demographics, health conditions, and genetic factors to segment target groups.\n* Data collection: Gathering patient records, clinical trial results, and external medical research data for analysis.\n* Generate insights: Finding trends in treatment responses using advanced analytics and predictive modeling.\n* Model large data sets: Using machine learning to forecast drug effectiveness across different conditions.\n* Design algorithms: Building AI-driven models to personalize medication plans and optimize trial outcomes.\n\n### Key responsibilities of a statistician\n\nAs a statistician, your focus is on designing experiments, analyzing data and applying statistical methods to evaluate results.\n\nUsing the same pharmaceutical company case, as a statistician, you might be responsible for ensuring the clinical trial design is statistically sound and the results are statistically valid before regulatory approval. You would be conducting hypothesis testing, confidence interval analysis, and regression models to confirm that the drug is effective and safe.\n\nYour day-to-day responsibilities might include:\n\n* Designing surveys and experiments: Design a clinical trial or questionnaires for the new drug to verify it is statistically sound\n* Testing hypotheses: Choosing the right statistical test based on the data type.\n* Analyzing structured datasets: Summarizing data, analyzing, and modeling relationships between variables to predict outcomes.\n* Data reporting: Using charts, graphs, and other visual aids to report complex information effectively.\n* Business recommendations: Provide valuable insight and production strategies based on trial results.\n\nLet's dig into a few tools and skills you must be proficient in for your selected job role.\n\n## Essential skills and tools\n\nWhether you are planning to choose data science or statistics as your career, it is important to know the right tools and essential skills for future challenges.\n\n![Data science vs statistics: Skills](https://assets.roadmap.sh/guest/data-science-vs-statistics-skills-tbnm7.png)\n\nBoth data science and statistics require a strong foundation in mathematics and analytical thinking skills. Professionals in these fields often pursue advanced degrees, such as a Master's or Ph.D., to enhance their expertise. Let's examine a few key skills and tools essential for each job profile.\n\n### Skills and tools of a data scientist\n\nHandling complex datasets, including both unstructured and structured data, requires a data scientist to possess strong technical and problem-solving skills. You should have the following skills for a data scientist job profile:\n\n* **Programming Skills:** To perform data science tasks smoothly, you must be proficient in [Python](https://roadmap.sh/python), [SQL](https://roadmap.sh/sql), [Java](https://roadmap.sh/java), and R programming languages. Additionally, you must be good at statistical analysis and mathematics.\n* **Machine learning knowledge:** You should be able to choose and implement appropriate algorithms, such as linear regression, logistic regression, decision trees, random forests, and neural networks, based on the specific problem and dataset.\n* **Data mining:** Knowledge of techniques like data cleaning, preprocessing, feature engineering, and pattern recognition are essential to extracting meaningful insights from big data.\n* **Data visualization:** Tools like Tableau and Power BI can help create compelling charts and graphs for your big data. You must know how to use these tools effectively to communicate data insights.\n* **Business intelligence:** Understanding business contexts and translating data insights into actionable business decisions is key. You must have strong communication skills and domain knowledge.\n\nHadoop, Docker, TensorFlow, GitHub/Git, SQL, and Tableau are important for a data science job profile. Interviewers often prioritize candidates with educational qualifications in computer science, programming, and practical applications of data analysis techniques.\n\n### Skills and tools of a statistician\n\nA statistician's main responsibility is to analyze data to predict future events or trends. To achieve this goal, you must excel in the following skills and tools:\n\n* Mathematical theory: A strong understanding of mathematical concepts like linear algebra, calculus, etc., is essential to measure quantitative data.\n* Probability: Proficiency in probability theory is essential for understanding and modeling uncertainty in data.\n* Statistical modeling: Experience with various statistical models, such as time series analysis and linear regression, is also valuable.\n* Survey design: Knowledge of designing questionnaires or sampling techniques is necessary to collect information from a group of people.\n\nR, SAS, SPSS, and Excel are a few popular tools you should master to perform statistical analysis and generate graphics. Also, candidates with qualifications in advanced statistical modeling, mathematical and statistical theory, and research methodologies have a better chance of getting selected.\n\nLet's move forward to different career options available under data science and statistics. Learning about their salary ranges will provide valuable insight into earning potential, helping you make an informed career decision. By comparing salaries, you can assess financial stability, ensuring that your chosen path aligns with your long-term financial goals.\n\n## Career prospects for both fields\n\nData science is experiencing explosive growth across numerous industries, whereas the demand for statisticians remains strong and consistent. Let's explore the various job roles available in both fields and their salary ranges.\n\n### Data science career paths and salary insights\nYou can choose from the following careers if you are planning to proceed with data science:\n\n* Data scientist\n* Machine learning engineer\n* Data analyst\n\n**Data scientist:** A career in data science offers opportunities in various industries, including finance, healthcare, and technology. As a data scientist, you'll tackle unique problems, using statistical modeling and machine learning to drive business decisions and outcomes. You need to have a deep understanding of data manipulation and how data relates to the real world.\n\nMany data scientists use machine learning algorithms to build predictive models, identify trends, and make data-driven decisions. Strong communication skills and expertise in statistical modeling are essential for success in this field. You may start as a junior data scientist and improve your knowledge to lead as Head of Data Science over time.\n\nIn the United States, the [average salary](https://www.datacamp.com/blog/data-science-salaries) of a data scientist is $123,069 per year.\n\n**Machine learning engineer:** A career as a machine learning engineer involves designing, building, and optimizing machine learning models used in various applications, from recommendation systems to fraud detection. Professionals in this field work on improving machine learning frameworks, monitoring model performance, and solving complex computational problems. To succeed, you need expertise in advanced machine learning, cloud computing, and the software development lifecycle (SDLC). \n\nMachine learning engineers are in high demand across finance, healthcare, e-commerce, and technology industries. You can start by working on implementing basic machine learning models; as you improve your skills and gain more knowledge, you can work towards a role overseeing ML infrastructure, defining best practices, and leading technical teams.\n\nIn the United States, the [average salary](https://www.indeed.com/career/machine-learning-engineer/salaries) for a machine learning engineer is $161,715 per year.\n\n**Data analyst:** [Data analysts](https://roadmap.sh/ai-data-scientist/vs-data-analytics) play a crucial role in helping businesses make informed decisions by collecting, filtering, and analyzing data to answer specific business questions. You can use data visualization tools to present insights clearly to stakeholders. \n\nA career as a data analyst offers opportunities across various industries, including marketing, finance, and healthcare, making it a versatile and in-demand profession. The data analyst job profile includes various positions and levels, from basic reporting and performing deeper data analysis to making data-driven decisions for an organization.\n\nAccording to [Indeed](https://www.indeed.com/career/data-analyst/salaries), the average salary for a data analyst job profile in the United States is $81,273 annually.\n\n### Statistics career paths and salary insights\n\nIf you're interested in statistics, here are a few job positions you can choose from:\n\n* Statistician\n* Biostatistician\n* Research Analyst\n\n**Statistician:** As a statistician, you will design and conduct statistical analysis, interpret data, and communicate findings to researchers and other stakeholders. Many statisticians work on research projects, clinical trials, and large-scale surveys, helping organizations make data-driven decisions. \n\nThere are different levels in the statistician job profile, from applying statistical techniques for data interpretation to leading statistical research and influencing policy decisions. Strong analytical skills and a solid understanding of statistical methods are essential for this career path.\n\nAccording to [Indeed](https://www.indeed.com/career/statistician/salaries), the average salary of a statistician in the United States is $89,126 per year.\n\n**Biostatistician:** Biostatisticians apply statistical methods to biological and medical research, making significant contributions to the healthcare and pharmaceutical industries. If you are planning to pursue a career in this field, you will design and analyze clinical trials, ensuring the accuracy and reliability of biomedical research. This career path offers opportunities in hospitals, government agencies, research institutions, and pharmaceutical companies.\n\nThe [average salary](https://www.indeed.com/career/biostatistician/salaries) for a biostatistician is $101,789 per year in the United States.\n\n**Research analyst:** In this role, you will use statistical and analytical methods to collect and interpret information to support business decisions. You will also identify trends, generate insights, and present detailed reports summarizing your research for stakeholders.\n\nAccording to [Indeed](https://www.indeed.com/career/research-analyst/salaries), the average salary for a research analyst in the United States is $75,789 per year.\n\n## Are data science and statistics interconnected?\n\nA statistician uses statistical tools and mathematical models to analyze customer data and distinct customer segments with similar characteristics. This analysis will help stakeholders understand the factors responsible for customer churn rates. Data scientists, meanwhile, will collect big data and use machine learning models to perform predictive analysis.\n\nStatistics answer questions like \"Why did customer churn get high in the first quarter?\" or \"What is the reason behind the sudden downfall\"? Data science, on the other hand, answers \"How can this issue be fixed?\".\n\nSo yes, data science and statistics are deeply interconnected.\n\nStatistics provides the foundation for analyzing data, such as finding patterns and trends. Data science professionals, on the other hand, create sophisticated models and present insights through data visualization. Data science is an extended version of statistics that uses statistical methods, scientific methods, machine learning, and artificial intelligence to manage unstructured or semi-structured data.\n\nData science further leverages predictive modeling and other advanced techniques to understand past events, predict future trends, identify potential risks, solve real-world problems, and develop improvement strategies.\n\nAdditionally, statistics doesn't require computational skills but an understanding of basic mathematical models to analyze and predict results.\n\n## Next Step?\n\nChoosing between data science and statistics can be a tough call. Hopefully, this guide has helped clarify which career path is the best for you. Once you've made a decision, the next step is to get started.\n\nTo help you with your journey, I encourage you to explore the [comprehensive resources](https://roadmap.sh/ai-data-scientist) that delve deeper into the specifics of each path. Whether you are interested in programming and solving complex datasets or theoretical analysis and working with structured data, we have great resources for each career option.\n\nYou can apply for internships or join online courses to gain more experience or sharpen your knowledge. If you still have queries or doubts about these fields, join the [Discord community](https://roadmap.sh/discord) to stay up-to-date!";
				}
				async function compiledContent$1m() {
					return await html$1m();
				}
				function getHeadings$1m() {
					return [{"depth":2,"slug":"job-roles-and-responsibilities","text":"Job roles and responsibilities"},{"depth":3,"slug":"key-responsibilities-of-data-scientists","text":"Key responsibilities of data scientists"},{"depth":3,"slug":"key-responsibilities-of-a-statistician","text":"Key responsibilities of a statistician"},{"depth":2,"slug":"essential-skills-and-tools","text":"Essential skills and tools"},{"depth":3,"slug":"skills-and-tools-of-a-data-scientist","text":"Skills and tools of a data scientist"},{"depth":3,"slug":"skills-and-tools-of-a-statistician","text":"Skills and tools of a statistician"},{"depth":2,"slug":"career-prospects-for-both-fields","text":"Career prospects for both fields"},{"depth":3,"slug":"data-science-career-paths-and-salary-insights","text":"Data science career paths and salary insights"},{"depth":3,"slug":"statistics-career-paths-and-salary-insights","text":"Statistics career paths and salary insights"},{"depth":2,"slug":"are-data-science-and-statistics-interconnected","text":"Are data science and statistics interconnected?"},{"depth":2,"slug":"next-step","text":"Next Step?"}];
				}

				const Content$1m = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1m;
					content.file = file$1m;
					content.url = url$1m;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1m())}`;
				});

const __vite_glob_0_12 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1m,
	compiledContent: compiledContent$1m,
	default: Content$1m,
	file: file$1m,
	frontmatter: frontmatter$1m,
	getHeadings: getHeadings$1m,
	rawContent: rawContent$1m,
	url: url$1m
}, Symbol.toStringTag, { value: 'Module' }));

const html$1l = () => "<p>Asymptotic notation is the standard way of measuring the time and space that an algorithm will consume as the input grows. In one of my last guides, I covered “Big-O notation” and a lot of you asked for a similar one for Asymptotic notation. You can find the <a href=\"/guides/big-o-notation\">previous guide here</a>.</p>\n<p><a href=\"/guides/asymptotic-notation.png\"><img src=\"/guides/asymptotic-notation.png\" alt=\"Asymptotic Notation\"></a></p>";

				const frontmatter$1l = {"title":"Asymptotic Notation","description":"Learn the basics of measuring the time and space complexity of algorithms","authorId":"kamran","seo":{"title":"Asymptotic Notation - roadmap.sh","description":"Learn the basics of measuring the time and space complexity of algorithms"},"isNew":false,"type":"visual","date":"2021-04-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1l = "/workspace/src/data/guides/asymptotic-notation.md";
				const url$1l = undefined;
				function rawContent$1l() {
					return "   \n                            \n                                                                                        \n                  \n    \n                                           \n                                                                                          \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nAsymptotic notation is the standard way of measuring the time and space that an algorithm will consume as the input grows. In one of my last guides, I covered \"Big-O notation\" and a lot of you asked for a similar one for Asymptotic notation. You can find the [previous guide here](/guides/big-o-notation).\n\n[![Asymptotic Notation](/guides/asymptotic-notation.png)](/guides/asymptotic-notation.png)\n";
				}
				async function compiledContent$1l() {
					return await html$1l();
				}
				function getHeadings$1l() {
					return [];
				}

				const Content$1l = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1l;
					content.file = file$1l;
					content.url = url$1l;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1l())}`;
				});

const __vite_glob_0_13 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1l,
	compiledContent: compiledContent$1l,
	default: Content$1l,
	file: file$1l,
	frontmatter: frontmatter$1l,
	getHeadings: getHeadings$1l,
	rawContent: rawContent$1l,
	url: url$1l
}, Symbol.toStringTag, { value: 'Module' }));

const html$1k = () => "<p><a href=\"/guides/avoid-render-blocking-javascript-with-async-defer.png\"><img src=\"/guides/avoid-render-blocking-javascript-with-async-defer.png\" alt=\"Avoid Render Blocking with Async and Defer\"></a></p>";

				const frontmatter$1k = {"title":"Async and Defer Script Loading","description":"Learn how to avoid render blocking JavaScript using async and defer scripts.","authorId":"kamran","seo":{"title":"Async and Defer Script Loading - roadmap.sh","description":"Learn how to avoid render blocking JavaScript using async and defer scripts."},"isNew":false,"type":"visual","date":"2021-09-10T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1k = "/workspace/src/data/guides/avoid-render-blocking-javascript-with-async-defer.md";
				const url$1k = undefined;
				function rawContent$1k() {
					return "   \n                                       \n                                                                                           \n                  \n    \n                                                      \n                                                                                             \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Avoid Render Blocking with Async and Defer](/guides/avoid-render-blocking-javascript-with-async-defer.png)](/guides/avoid-render-blocking-javascript-with-async-defer.png)\n";
				}
				async function compiledContent$1k() {
					return await html$1k();
				}
				function getHeadings$1k() {
					return [];
				}

				const Content$1k = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1k;
					content.file = file$1k;
					content.url = url$1k;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1k())}`;
				});

const __vite_glob_0_14 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1k,
	compiledContent: compiledContent$1k,
	default: Content$1k,
	file: file$1k,
	frontmatter: frontmatter$1k,
	getHeadings: getHeadings$1k,
	rawContent: rawContent$1k,
	url: url$1k
}, Symbol.toStringTag, { value: 'Module' }));

const html$1j = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-developer-skills-ece68.jpg\" alt=\"The best backend developer skills to learn.\"></p>\n<p>Whether your goal is to become a backend developer or to stay relevant as one, the goal itself requires adopting an eternal student mindset. The ever-evolving web development space demands continuous learning, regardless of the programming language you use. New frameworks, libraries, and methodologies emerge regularly, offering different solutions to old problems. To remain relevant as a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend developer</a>, you’ll have to stay updated by honing your core skills.</p>\n<p>In this article, we’ll cover the following set of backend developer skills we recommend you aim for:</p>\n<ul>\n<li>Keeping an eye on core and new backend programming languages</li>\n<li>Understanding the basics of software design and architecture</li>\n<li>Understanding databases and how to use them</li>\n<li>API development</li>\n<li>The basics of version control</li>\n<li>Testing and debugging</li>\n<li>CI/CD and DevOps fundamentals</li>\n<li>Soft skills</li>\n</ul>\n<p>So, let’s get going!</p>\n<h2 id=\"understanding-backend-development\">Understanding Backend Development</h2>\n<p>Before we move on and start discussing the different backend development skills you should focus on, let’s first understand what a backend developer is. After all, if you’re looking to actually become a backend developer, you’ll need this.</p>\n<p>A backend developer focuses entirely on writing business logic for an application and much of the supporting logic as well.</p>\n<p>That said, there might be applications where the business logic is split into the frontend and the backend. However, while the frontend dev might have to share their time between UI code and business logic, the backend dev will focus most of their time on core business logic. That’s the main difference between the two.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709056806118.png\" alt=\"UI vs Backend\"></p>\n<p>In the above image, you can see how there is a lot more behind the curtain than just the UI when it comes to web applications. In this case, a “simple” log-in form needs a backend to contain its core business logic.</p>\n<p>Let’s now look at the most in-demand backend developer skills you should focus on in backend development.</p>\n<h2 id=\"proficiency-in-core-and-emerging-programming-languages\">Proficiency in Core and Emerging Programming Languages</h2>\n<p>One of the most basic skills you should focus on as a backend developer is on identifying key programming languages to learn (or at least keep an eye out for).</p>\n<p>There are some essential backend languages that the industry has adopted as de facto standards. This means most new projects are usually coded using one (or multiple) of these programming languages.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058292005.png\" alt=\"core-languages\"></p>\n<p>The most common names you should look out for are:</p>\n<ul>\n<li><strong>JavaScript (or any of its variants, such as TypeScript).</strong> This is a very common option because it’s also the language used by frontend developers, thus making it easier for developers to work on both sides of the same project.</li>\n<li><strong>Python.</strong> While a very common option for other types of projects (such as data processing and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a>), it’s still very popular in the web development world. Python has many good qualities and supporting frameworks that make it a very easy-to-pick-up option for coding backend systems.</li>\n<li><strong>Go (A.K.A Golang).</strong> This programming language was developed by Google. It was designed with simplicity, efficiency, and concurrency in mind. That’s made it gain popularity in the backend development space, making it an interesting option for projects that prioritize performance and concurrency.</li>\n<li><strong>Java.</strong> One of the most common alternatives for enterprise solutions, Java, has been constantly evolving since its first release back in 1995. All that time making its way into big enterprises that trust its robustness and ever-growing community of developers. While not the easiest language to learn, it’s definitely up there in the top 10 most popular <a href=\"https://roadmap.sh/backend/languages\" target=\"_blank\">backend languages</a> (according to <a href=\"https://survey.stackoverflow.co/2023/#technology-most-popular-technologies\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 Developer survey</a>).</li>\n</ul>\n<p>While there are other options, the ones mentioned above, from the backend point of view, are some of the most relevant languages to pay attention to. Here are the top 10 most popular ones amongst professional developers (screenshot taken from SO’s survey of 2023):</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057007054.png\" alt=\"StackOverflow Survey Result\"></p>\n<h3 id=\"keeping-an-eye-on-the-rising-stars\">Keeping an eye on the rising stars</h3>\n<p>If working with at least one of the most common backend languages was important, understanding what are the rising technologies in the backend world is just as crucial.</p>\n<p>You won’t see a new programming language being released every month. However, in the span of a few years, you might see the release of several, and out of those, some might stick long enough to become new standards.</p>\n<p>For example, take a look at the period between 2012 and 2015; in just 3 years, 9 programming languages were released, out of which most of them are being used to this day.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058257292.png\" alt=\"Famous Languages\"></p>\n<ul>\n<li>In 2012, we got Julia, Elm, Go, and TypeScript.</li>\n<li>In 2013, we got Dart</li>\n<li>In 2014, we got Swift, Hack, and Crystal</li>\n<li>And in 2015, we got Rust.</li>\n</ul>\n<p>Some of those languages are very relevant to this day, such as TypeScript and Rust, while others, such as Hack and Crystal, might be known to only a few in very niche sectors.</p>\n<p>Of course, it’s impossible to predict which programming language will become a standard. However, the skill that you need to hone is that of keeping an eye on the industry to spot new and emerging trends.</p>\n<h3 id=\"the-importance-of-supporting-frameworks\">The importance of supporting frameworks</h3>\n<p><a href=\"https://roadmap.sh/backend/frameworks\" target=\"_blank\">Frameworks</a> for a specific programming language do change a lot faster than the language itself, though.</p>\n<p>Frameworks are there to provide you with a simplified gateway into the functionalities that you’d normally need for common tasks. For example, in the context of backend web development, frameworks usually take care of:</p>\n<ul>\n<li><strong>Parsing HTTP requests</strong> and turning them into objects you can easily interact with (so you don’t have to learn how the HTTP protocol works).</li>\n<li><strong>Abstracting concepts,</strong> such as a request or a response, into objects and functions that you can reason about at a higher level. This gives you an easier time thinking about how to solve a problem using these tools.</li>\n<li><strong>Accessing data becomes a lot easier when there are abstractions.</strong> Some frameworks provide what is known as an ORM (Object Relational Mapping). Through ORM, you can interact with databases without having to think about writing SQL queries or even database schemas.</li>\n<li>And many more.</li>\n</ul>\n<p>Frameworks are an essential aspect of the work you’ll do as a backend developer, which is why you should not neglect them. Of course, learning and mastering every single framework out there is impossible. Instead, learn to keep an eye out in the industry and see what are the most common frameworks, and focus on one (or two) of them.</p>\n<h2 id=\"software-design-and-architecture\">Software Design and Architecture</h2>\n<p>Coding is not just about writing code.</p>\n<p>While that statement might be a bit confusing, the truth is there is a lot of architecture involved in software development (both in frontend and backend development). Sometimes, working on these aspects of a system is the job of a specific role called “architect.” However, for backend systems, it’s not uncommon for backend developers to also be involved in architecture conversations and decisions. You’re helping design the underlying backend infrastructure, after all.</p>\n<p>The following diagram shows an example of what a very simple system’s architecture might look like:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057266440.png\" alt=\"Simple System Architecture\"></p>\n<p>While the example is oversimplified, it gives you an idea of what the practice of “architecting a system” is.</p>\n<p>Essentially, architecting a system means coming up with concepts that represent different aspects of the solution and then deciding how you want to make them interact with each other.</p>\n<p>Why is architecture so important here? Because it gives you properties such as code encapsulation, separation of concerns, reusability, and even scalability as a byproduct of the architecture itself.</p>\n<p>Let’s take a quick look at some of the most common architectures used for creating backend systems.</p>\n<h3 id=\"most-common-backend-architectures\">Most common backend architectures</h3>\n<p>There are too many different architectural styles and patterns to cover them all inside a single article, but let’s just look at some of the most common ones and how they can help you while working on your backend system.</p>\n<ul>\n<li><strong>Monolithic architecture:</strong> In a monolithic architecture, the entire application is built as a single, tightly coupled unit. All components (frontend, backend, database, etc) are part of the same codebase. This is a great first architecture because it feels very natural to develop under, and if your project is not going to grow out of proportion, then you will probably not hit any of the cons.</li>\n<li><strong>Microservice-based architecture:</strong> The application is divided into small, independent services, each responsible for a specific business capability. These services communicate through APIs.</li>\n<li><strong>Service-Oriented Architecture:</strong> Similar to microservices, a service-oriented architecture splits functionality into individual services. The main difference is that these services aren’t as granular as a microservice, so they might incorporate functionalities related to different business entities.</li>\n<li><strong>Event-driven architecture:</strong> With this architecture, each system (or service) responds to events (e.g., user actions and messages from other services) by triggering actions or processes. All services communicate with each other indirectly through an event bus (also known as a “message bus”), so it removes the possibility of having two or more services coupled with each other (meaning that they can’t be treated individually).</li>\n<li><strong>Serverless Architecture:</strong> Also known as Function as a Service (FaaS), serverless architecture allows you to focus on writing code without worrying about the server where they’ll run. Functions are executed in response to events without the need for provisioning or managing servers (this is done FOR you automatically).</li>\n<li><strong>Microkernel architecture:</strong> This architecture lets you build the core, essential functionality into a small microkernel and have the rest of the features built as plugins that can be added, removed or exchanged easily.</li>\n</ul>\n<p>And if you want to know more about the patterns and principles mentioned here, please check out the <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">Software Design and Architecture roadmap</a>.</p>\n<h2 id=\"mastery-of-database-management-systems\">Mastery of Database Management Systems</h2>\n<p>As a backend developer, you will undoubtedly have to deal with database administration in your daily tasks. They are the industry standard for storing persistent data.</p>\n<p>Because of that, it’s important to understand that you should be aware of two main categories of databases: SQL databases and NoSQL databases.</p>\n<h3 id=\"sql-databases\">SQL databases</h3>\n<p>These are the standard structured databases (A.K.A relational databases) where you need to define the schema for your data (essentially the data structures you’re dealing with), and then you’ll use a language called <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL (Structured Query Language)</a> to interact with the data inside it. Most backend developers will interact with SQL databases at some point in their career, as this is the most common type of database.</p>\n<h3 id=\"nosql-databases\">NoSQL databases</h3>\n<p>As the name implies, these are not your standard SQL databases; in fact, within this category, there are columnar databases, document-based ones (such as <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>), key-value-based ones (like <a href=\"https://roadmap.sh/redis\" target=\"_blank\">Redis</a>), and more. They don’t use predefined data structures, giving you more flexibility and control over what you can store and how you store it. Backend developers will deal with only a handful of these, as there are many different sub-types, and more are created every year.</p>\n<p>Some examples of these databases are:</p>\n<ul>\n<li>MongoDB, a document-based database (see here a mongoDB roadmap if you’re interested).</li>\n<li>Redis, an in-memory key-value pair database.</li>\n<li>Neo4J, a graph database.</li>\n<li>ElasticSearch, a document-based search engine.</li>\n</ul>\n<p>In the end, the decision between SQL and NoSQL is about trade-offs and figuring out what works best for your particular use case.</p>\n<h2 id=\"api-development-capabilities\">API Development Capabilities</h2>\n<p>Application Programming Interfaces (APIs) are everywhere. They power the backend of almost all major systems out there (according to a <a href=\"https://www.oreilly.com/pub/pr/3307\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">study conducted by O’Reilly in 2020</a>, 77% of companies were using microservices/APIs).</p>\n<p>That is to say, if you’re thinking about becoming a backend developer, you will be coding APIs/microservices. This is why understanding the basics of them is crucial to ensuring your relevance in the field.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057608824.png\" alt=\"System vs External System\"></p>\n<p>The above diagram explains how APIs interact with whatever you might be building.</p>\n<p>Now, if you’re inside the “<strong>The System</strong>” box, then you need to understand how to interact with these APIs using the right tools. If you’re inside the “<strong>External System</strong>” box, then you need to understand the type of standards these APIs need to follow and how to implement them.</p>\n<p>Don’t worry though, for both situations, there are always frameworks and libraries you can use to simplify your task and ensure you’re following the proper industry standards.</p>\n<h3 id=\"what-are-the-most-common-api-types\">What are the most common API types?</h3>\n<p>The most common types of APIs used in the industry currently are REST and GraphQL.</p>\n<p>As a backend developer, it’s not mandatory that you master both of these types, but it’s definitely recommended that you have some practical experience with one of them.</p>\n<ul>\n<li><strong>RESTful APIs.</strong> These are APIs that work over HTTP and make extensive use of the HTTP Verbs to give meaning to each request. They’ve been the most popular type of API until recently, so there are still a lot of projects and teams that make use of it.</li>\n<li><strong>GraphQL.</strong> GraphQL APIs operate over HTTP as well, leveraging the HTTP protocol and its verbs. In contrast to the conventional RESTful APIs, GraphQL has emerged as a powerful alternative, offering a flexible and efficient approach to data querying and manipulation. GraphQL allows clients to request only the data they need, providing a more tailored and efficient interaction between clients and servers.</li>\n</ul>\n<p>Is there one better than the other? There is no easy way to answer that question as both are capable of doing everything you’d need. It’s more about your particular requirements and the preferences of your dev team.</p>\n<h2 id=\"version-control-savvy\">Version Control Savvy</h2>\n<p>One mandatory skill that all backend developers should work on (actually, all developers, in general) is version control, or in other words, understanding and being familiar with version control systems.</p>\n<p>Essentially, you’ll want to know how to use the version control tool that everyone else is using. The industry standard at the moment of writing this is <a href=\"https://git-scm.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Git</a>, while there might be some teams using other (older) tools, as long as you understand the current one, you’ll be in good shape.</p>\n<h3 id=\"what-is-version-control\">What is version control?</h3>\n<p>Version control references the ability for you and other developers to share code with each other while you’re working on the same files.</p>\n<p>While Git is the industry standard at the moment, GitHub has created such a popular platform around Git, that it almost makes it mandatory to learn about.</p>\n<p>So go ahead and create an account, browse what others are doing, and upload your own personal projects. It’s definitely a great way to learn.</p>\n<h3 id=\"what-should-you-learn-about-git\">What should you learn about Git?</h3>\n<p>If you’re picking up Git as your version control system of choice, there are two main areas you should be focusing on.</p>\n<ul>\n<li><strong>The basics.</strong> Clearly understanding how Git works and the basic commands to add, push and pull changes. You should aim to learn enough about them to feel comfortable using them on your day-to-day (because you will).</li>\n<li><strong>Branching strategies.</strong> Sadly, using Git alone is not enough. While through Git you can already start versioning your code, when the project is complex enough and your team big enough, the tool alone will not be enough. You’ll have to come up with <a href=\"https://learngitbranching.js.org/?locale=es_ES\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">branching strategies</a> to organize the whole team’s workflow.</li>\n</ul>\n<p>Keep in mind that Git and Git branching are not trivial topics, and they’ll take a while to master. So, while you should give yourself time to learn about them, also make sure you check with others (or use tools such as ChatGPT) to validate your commands before using them. Remember, a wrong Git command or a wrong workflow can cause major problems within a project, especially if there are many developers working on the same codebase.</p>\n<h2 id=\"testing\">Testing</h2>\n<p>Understanding both what testing is and the importance of it within the backend development workflow is crucial for all developers, and one of the mandatory backend developer skills to focus on.</p>\n<p>Testing is the development process of making sure your code works in a way that doesn’t involve you manually testing every feature but rather using tools that allow you to test and reproduce any problems that can be found programmatically.</p>\n<p>This, of course, helps to remove potential human error from the equation when testing big systems and to increase the speed at which these tests can be done (think seconds vs hours of you doing it manually).</p>\n<p>Testing is a far more complex discipline than I can describe here. Just know that there are many different ways to test a system, and all backend developers should be aware of the following:</p>\n<ul>\n<li><strong>Unit testing:</strong> This is the most common way of doing code testing. You’ll write tests using a testing framework for every publicly available function/method in your code. This way you’re making sure every piece of code that can be used is tested and performs according to plan. Running these tests is usually quite fast, so you’ll be doing it before every commit (usually).</li>\n<li><strong>Integration testing:</strong> If you’re building a system that consists of multiple independent systems working together (think, for instance, a microservice-based architecture), then testing each individual part is not enough. You also have to make sure systems that should interact with each other do so correctly. This is where integration tests come into play.</li>\n<li><strong>End-to-end testing (E2E):</strong> These tests are similar to integration tests, but they also include the UI of the system. There are tools you can use to automate actions in your UI as if a real user were performing them and then checking the result. For example, clicking on a log-out button and checking if you’re later redirected to the log-in screen. This flow would involve the backend performing some actions that result in the user being logged out.</li>\n<li><strong>Load testing:</strong> While not exactly the same process as with the previous test types, load testing is great for backend systems because it helps you determine if your backend is ready to deal with high amounts of traffic.</li>\n</ul>\n<p>You can think of the list in graphical format as the following diagram:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057834295.png\" alt=\"Testing types\"></p>\n<p>If you’re just getting started with testing, I’d recommend focusing only on unit testing for the time being. Once you have a grasp on it, start moving out following the above diagram and slowly move into the other types as you progress.</p>\n<h2 id=\"cicd-and-devops-familiarity\">CI/CD and DevOps Familiarity</h2>\n<p>As a backend developer, your code will be constantly deployed, either into cloud environments or perhaps even into normal, on-premise servers. The point is that what you build will run through CI/CD (Continuous Integration and Continuous Deployment) processes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058122541.png\" alt=\"ci-cd\"></p>\n<p>These processes will automatically test it (Continuous Integration) and automatically deploy it (if all tests go well). As a backend developer, you’re not usually expected to know and understand how to configure these processes; however, it’s important that you know about them.</p>\n<p>DevOps is yet another tangential area to that of a backend developer. When teams are small enough, backend devs might be “gently pushed” into tasks such as configuring CI/CD pipelines, setting up servers, and more. These tasks are usually performed by dedicated professionals with the role of DevOps. Their specialty is automation, making the deployment process efficient and ensuring that everything runs smoothly in the real-world server environment. They play a crucial role in maintaining the reliability and performance of applications and websites.</p>\n<p>So, while they’re not strictly the responsibilities of backend developers, they’re close enough to the role’s day-to-day that it would be a good idea to learn about them. If you’re interested in learning more about DevOps, check out <a href=\"https://roadmap.sh/devops\" target=\"_blank\">our DevOps roadmap</a> containing all the key topics you should learn about if you want to become a DevOps engineer.</p>\n<h2 id=\"soft-skills\">Soft Skills</h2>\n<p>Finally, the last set of backend developer skills you should focus on are, actually, not technical skills, nor are they exclusively useful for backend developers. These are skills that every developer should work on during their career: soft skills.</p>\n<h3 id=\"improving-communication\">Improving communication</h3>\n<p>The ability to communicate with others, both technical and non-technical people, is crucial in any developer’s career.</p>\n<p>For backend developers, it’s especially important because communicating their work and the effects of it is definitely harder than other roles, such as frontend developers who can actually showcase what they’re building.</p>\n<p>As a backend developer, you’ll be able to better explain problems or blockers to your colleagues, you’ll be able to perform requirement gathering much more effectively, and you’ll even improve your own problem-solving skills by being better at articulating the problems and potential solutions to yourself.</p>\n<h3 id=\"critical-thinking\">Critical thinking</h3>\n<p>Honing your critical thinking as a backend developer will help your ability to analyze complex problems, identify patterns much faster, and come up with innovative solutions to the problems you’re facing.</p>\n<p>Pushing the limits of your critical thinking skills will also foster a more systematic and strategic approach to coding and architecting robust and efficient solutions.</p>\n<p>In other words, it’ll make you a better and more efficient coder. And who doesn’t want that?</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>To summarize, if you expect to become a backend developer or to grow in the area of backend development:</p>\n<ul>\n<li>Keep an eye on the industry to understand what’s the status quo and what’s new and hot.</li>\n<li>Understand the basics of software design and architecture.</li>\n<li>Look into relational databases and NoSQL databases as well; they’re both important.</li>\n<li>Learn how to build and use APIs; they’ll be part of almost every project you work on.</li>\n<li>Remember, testing might look like it’s not mandatory, but it’s definitely a standard practice when it comes to backend development.</li>\n<li>CI/CD and DevOps are practices you’ll be involved with, either directly or indirectly, so learn about them.</li>\n<li>Soft skills are just as important as technical skills if you expect to grow in your career.</li>\n</ul>\n<p>That said, do not take this list as the ultimate roadmap but rather as a starting point. If you’re willing to take your backend developer career to the next level, push yourself out of your comfort zone and pursue the skills listed here and the ones listed in this detailed <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap</a>.</p>\n<p>Remember, constant learning is the only absolute truth in the software development world (this is true for backend developers, too). If you keep your skillset updated with the latest trends, you’ll remain adaptable and effective as a backend developer.</p>";

				const frontmatter$1j = {"title":"8 In-Demand Backend Developer Skills to Master","description":"Learn what the essential backend skills you should master to advance in your career.","authorId":"fernando","excludedBySlug":"/backend/developer-skills","seo":{"title":"8 In-Demand Backend Developer Skills to Master","description":"Learn what the essential backend developer skills are that you should learn and master to advance in your career.","ogImageUrl":"https://assets.roadmap.sh/guest/backend-developer-skills-ece68.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-02-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1j = "/workspace/src/data/guides/backend-developer-skills.md";
				const url$1j = undefined;
				function rawContent$1j() {
					return "   \n                                                       \n                                                                                                   \n                  \n                                           \n    \n                                                         \n                                                                                                                                  \n                                                                                  \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best backend developer skills to learn.](https://assets.roadmap.sh/guest/backend-developer-skills-ece68.jpg)\n\nWhether your goal is to become a backend developer or to stay relevant as one, the goal itself requires adopting an eternal student mindset. The ever-evolving web development space demands continuous learning, regardless of the programming language you use. New frameworks, libraries, and methodologies emerge regularly, offering different solutions to old problems. To remain relevant as a [backend developer](https://roadmap.sh/backend), you’ll have to stay updated by honing your core skills.\n\nIn this article, we’ll cover the following set of backend developer skills we recommend you aim for:\n\n- Keeping an eye on core and new backend programming languages\n- Understanding the basics of software design and architecture\n- Understanding databases and how to use them\n- API development\n- The basics of version control\n- Testing and debugging\n- CI/CD and DevOps fundamentals\n- Soft skills\n\nSo, let's get going!\n\n## Understanding Backend Development\n\nBefore we move on and start discussing the different backend development skills you should focus on, let’s first understand what a backend developer is. After all, if you’re looking to actually become a backend developer, you’ll need this.\n\nA backend developer focuses entirely on writing business logic for an application and much of the supporting logic as well.\n\nThat said, there might be applications where the business logic is split into the frontend and the backend. However, while the frontend dev might have to share their time between UI code and business logic, the backend dev will focus most of their time on core business logic. That’s the main difference between the two.\n\n![UI vs Backend](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709056806118.png)\n\nIn the above image, you can see how there is a lot more behind the curtain than just the UI when it comes to web applications. In this case, a “simple” log-in form needs a backend to contain its core business logic.\n\nLet’s now look at the most in-demand backend developer skills you should focus on in backend development.\n\n## Proficiency in Core and Emerging Programming Languages\n\nOne of the most basic skills you should focus on as a backend developer is on identifying key programming languages to learn (or at least keep an eye out for).\n\nThere are some essential backend languages that the industry has adopted as de facto standards. This means most new projects are usually coded using one (or multiple) of these programming languages.\n\n![core-languages](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058292005.png)\n\nThe most common names you should look out for are:\n\n- **JavaScript (or any of its variants, such as TypeScript).** This is a very common option because it’s also the language used by frontend developers, thus making it easier for developers to work on both sides of the same project.\n- **Python.** While a very common option for other types of projects (such as data processing and [data science](https://roadmap.sh/ai-data-scientist)), it’s still very popular in the web development world. Python has many good qualities and supporting frameworks that make it a very easy-to-pick-up option for coding backend systems.\n- **Go (A.K.A Golang).** This programming language was developed by Google. It was designed with simplicity, efficiency, and concurrency in mind. That’s made it gain popularity in the backend development space, making it an interesting option for projects that prioritize performance and concurrency.\n- **Java.** One of the most common alternatives for enterprise solutions, Java, has been constantly evolving since its first release back in 1995. All that time making its way into big enterprises that trust its robustness and ever-growing community of developers. While not the easiest language to learn, it’s definitely up there in the top 10 most popular [backend languages](https://roadmap.sh/backend/languages) (according to [StackOverflow’s 2023 Developer survey](https://survey.stackoverflow.co/2023/#technology-most-popular-technologies)).\n\nWhile there are other options, the ones mentioned above, from the backend point of view, are some of the most relevant languages to pay attention to. Here are the top 10 most popular ones amongst professional developers (screenshot taken from SO’s survey of 2023):\n\n![StackOverflow Survey Result](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057007054.png)\n\n### Keeping an eye on the rising stars\n\nIf working with at least one of the most common backend languages was important, understanding what are the rising technologies in the backend world is just as crucial.\n\nYou won’t see a new programming language being released every month. However, in the span of a few years, you might see the release of several, and out of those, some might stick long enough to become new standards.\n\nFor example, take a look at the period between 2012 and 2015; in just 3 years, 9 programming languages were released, out of which most of them are being used to this day.\n\n![Famous Languages](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058257292.png)\n\n- In 2012, we got Julia, Elm, Go, and TypeScript.\n- In 2013, we got Dart\n- In 2014, we got Swift, Hack, and Crystal\n- And in 2015, we got Rust.\n\nSome of those languages are very relevant to this day, such as TypeScript and Rust, while others, such as Hack and Crystal, might be known to only a few in very niche sectors.\n\nOf course, it’s impossible to predict which programming language will become a standard. However, the skill that you need to hone is that of keeping an eye on the industry to spot new and emerging trends.\n\n### The importance of supporting frameworks\n\n[Frameworks](https://roadmap.sh/backend/frameworks) for a specific programming language do change a lot faster than the language itself, though.\n\nFrameworks are there to provide you with a simplified gateway into the functionalities that you’d normally need for common tasks. For example, in the context of backend web development, frameworks usually take care of:\n\n- **Parsing HTTP requests** and turning them into objects you can easily interact with (so you don’t have to learn how the HTTP protocol works).\n- **Abstracting concepts,** such as a request or a response, into objects and functions that you can reason about at a higher level. This gives you an easier time thinking about how to solve a problem using these tools.\n- **Accessing data becomes a lot easier when there are abstractions.** Some frameworks provide what is known as an ORM (Object Relational Mapping). Through ORM, you can interact with databases without having to think about writing SQL queries or even database schemas.\n- And many more.\n\nFrameworks are an essential aspect of the work you’ll do as a backend developer, which is why you should not neglect them. Of course, learning and mastering every single framework out there is impossible. Instead, learn to keep an eye out in the industry and see what are the most common frameworks, and focus on one (or two) of them.\n\n## Software Design and Architecture\n\nCoding is not just about writing code.\n\nWhile that statement might be a bit confusing, the truth is there is a lot of architecture involved in software development (both in frontend and backend development). Sometimes, working on these aspects of a system is the job of a specific role called “architect.” However, for backend systems, it’s not uncommon for backend developers to also be involved in architecture conversations and decisions. You’re helping design the underlying backend infrastructure, after all.\n\nThe following diagram shows an example of what a very simple system’s architecture might look like:\n\n![Simple System Architecture](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057266440.png)\n\nWhile the example is oversimplified, it gives you an idea of what the practice of “architecting a system” is.\n\nEssentially, architecting a system means coming up with concepts that represent different aspects of the solution and then deciding how you want to make them interact with each other.\n\nWhy is architecture so important here? Because it gives you properties such as code encapsulation, separation of concerns, reusability, and even scalability as a byproduct of the architecture itself.\n\nLet’s take a quick look at some of the most common architectures used for creating backend systems.\n\n### Most common backend architectures\n\nThere are too many different architectural styles and patterns to cover them all inside a single article, but let's just look at some of the most common ones and how they can help you while working on your backend system.\n\n- **Monolithic architecture:** In a monolithic architecture, the entire application is built as a single, tightly coupled unit. All components (frontend, backend, database, etc) are part of the same codebase. This is a great first architecture because it feels very natural to develop under, and if your project is not going to grow out of proportion, then you will probably not hit any of the cons.\n- **Microservice-based architecture:** The application is divided into small, independent services, each responsible for a specific business capability. These services communicate through APIs.\n- **Service-Oriented Architecture:** Similar to microservices, a service-oriented architecture splits functionality into individual services. The main difference is that these services aren’t as granular as a microservice, so they might incorporate functionalities related to different business entities.\n- **Event-driven architecture:** With this architecture, each system (or service) responds to events (e.g., user actions and messages from other services) by triggering actions or processes. All services communicate with each other indirectly through an event bus (also known as a “message bus”), so it removes the possibility of having two or more services coupled with each other (meaning that they can’t be treated individually).\n- **Serverless Architecture:** Also known as Function as a Service (FaaS), serverless architecture allows you to focus on writing code without worrying about the server where they’ll run. Functions are executed in response to events without the need for provisioning or managing servers (this is done FOR you automatically).\n- **Microkernel architecture:** This architecture lets you build the core, essential functionality into a small microkernel and have the rest of the features built as plugins that can be added, removed or exchanged easily.\n\nAnd if you want to know more about the patterns and principles mentioned here, please check out the [Software Design and Architecture roadmap](https://roadmap.sh/software-design-architecture).\n\n## Mastery of Database Management Systems\n\nAs a backend developer, you will undoubtedly have to deal with database administration in your daily tasks. They are the industry standard for storing persistent data.\n\nBecause of that, it’s important to understand that you should be aware of two main categories of databases: SQL databases and NoSQL databases.\n\n### SQL databases\n\nThese are the standard structured databases (A.K.A relational databases) where you need to define the schema for your data (essentially the data structures you’re dealing with), and then you’ll use a language called [SQL (Structured Query Language)](https://roadmap.sh/sql) to interact with the data inside it. Most backend developers will interact with SQL databases at some point in their career, as this is the most common type of database.\n\n### NoSQL databases\n\nAs the name implies, these are not your standard SQL databases; in fact, within this category, there are columnar databases, document-based ones (such as [MongoDB](https://roadmap.sh/mongodb)), key-value-based ones (like [Redis](https://roadmap.sh/redis)), and more. They don’t use predefined data structures, giving you more flexibility and control over what you can store and how you store it. Backend developers will deal with only a handful of these, as there are many different sub-types, and more are created every year.\n\nSome examples of these databases are:\n\n- MongoDB, a document-based database (see here a mongoDB roadmap if you’re interested).\n- Redis, an in-memory key-value pair database.\n- Neo4J, a graph database.\n- ElasticSearch, a document-based search engine.\n\nIn the end, the decision between SQL and NoSQL is about trade-offs and figuring out what works best for your particular use case.\n\n## API Development Capabilities\n\nApplication Programming Interfaces (APIs) are everywhere. They power the backend of almost all major systems out there (according to a [study conducted by O’Reilly in 2020](https://www.oreilly.com/pub/pr/3307), 77% of companies were using microservices/APIs).\n\nThat is to say, if you’re thinking about becoming a backend developer, you will be coding APIs/microservices. This is why understanding the basics of them is crucial to ensuring your relevance in the field.\n\n![System vs External System](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057608824.png)\n\nThe above diagram explains how APIs interact with whatever you might be building.\n\nNow, if you’re inside the “**The System**” box, then you need to understand how to interact with these APIs using the right tools. If you’re inside the “**External System**” box, then you need to understand the type of standards these APIs need to follow and how to implement them.\n\nDon’t worry though, for both situations, there are always frameworks and libraries you can use to simplify your task and ensure you’re following the proper industry standards.\n\n### What are the most common API types?\n\nThe most common types of APIs used in the industry currently are REST and GraphQL.\n\nAs a backend developer, it’s not mandatory that you master both of these types, but it’s definitely recommended that you have some practical experience with one of them.\n\n- **RESTful APIs.** These are APIs that work over HTTP and make extensive use of the HTTP Verbs to give meaning to each request. They’ve been the most popular type of API until recently, so there are still a lot of projects and teams that make use of it.\n- **GraphQL.** GraphQL APIs operate over HTTP as well, leveraging the HTTP protocol and its verbs. In contrast to the conventional RESTful APIs, GraphQL has emerged as a powerful alternative, offering a flexible and efficient approach to data querying and manipulation. GraphQL allows clients to request only the data they need, providing a more tailored and efficient interaction between clients and servers.\n\nIs there one better than the other? There is no easy way to answer that question as both are capable of doing everything you’d need. It’s more about your particular requirements and the preferences of your dev team.\n\n## Version Control Savvy\n\nOne mandatory skill that all backend developers should work on (actually, all developers, in general) is version control, or in other words, understanding and being familiar with version control systems.\n\nEssentially, you’ll want to know how to use the version control tool that everyone else is using. The industry standard at the moment of writing this is [Git](https://git-scm.com/), while there might be some teams using other (older) tools, as long as you understand the current one, you’ll be in good shape.\n\n### What is version control?\n\nVersion control references the ability for you and other developers to share code with each other while you’re working on the same files.\n\nWhile Git is the industry standard at the moment, GitHub has created such a popular platform around Git, that it almost makes it mandatory to learn about.\n\nSo go ahead and create an account, browse what others are doing, and upload your own personal projects. It’s definitely a great way to learn.\n\n### What should you learn about Git?\n\nIf you’re picking up Git as your version control system of choice, there are two main areas you should be focusing on.\n\n- **The basics.** Clearly understanding how Git works and the basic commands to add, push and pull changes. You should aim to learn enough about them to feel comfortable using them on your day-to-day (because you will).\n- **Branching strategies.** Sadly, using Git alone is not enough. While through Git you can already start versioning your code, when the project is complex enough and your team big enough, the tool alone will not be enough. You’ll have to come up with [branching strategies](https://learngitbranching.js.org/?locale=es_ES) to organize the whole team’s workflow.\n\nKeep in mind that Git and Git branching are not trivial topics, and they’ll take a while to master. So, while you should give yourself time to learn about them, also make sure you check with others (or use tools such as ChatGPT) to validate your commands before using them. Remember, a wrong Git command or a wrong workflow can cause major problems within a project, especially if there are many developers working on the same codebase.\n\n## Testing\n\nUnderstanding both what testing is and the importance of it within the backend development workflow is crucial for all developers, and one of the mandatory backend developer skills to focus on.\n\nTesting is the development process of making sure your code works in a way that doesn’t involve you manually testing every feature but rather using tools that allow you to test and reproduce any problems that can be found programmatically.\n\nThis, of course, helps to remove potential human error from the equation when testing big systems and to increase the speed at which these tests can be done (think seconds vs hours of you doing it manually).\n\nTesting is a far more complex discipline than I can describe here. Just know that there are many different ways to test a system, and all backend developers should be aware of the following:\n\n- **Unit testing:** This is the most common way of doing code testing. You’ll write tests using a testing framework for every publicly available function/method in your code. This way you’re making sure every piece of code that can be used is tested and performs according to plan. Running these tests is usually quite fast, so you’ll be doing it before every commit (usually).\n- **Integration testing:** If you’re building a system that consists of multiple independent systems working together (think, for instance, a microservice-based architecture), then testing each individual part is not enough. You also have to make sure systems that should interact with each other do so correctly. This is where integration tests come into play.\n- **End-to-end testing (E2E):** These tests are similar to integration tests, but they also include the UI of the system. There are tools you can use to automate actions in your UI as if a real user were performing them and then checking the result. For example, clicking on a log-out button and checking if you’re later redirected to the log-in screen. This flow would involve the backend performing some actions that result in the user being logged out.\n- **Load testing:** While not exactly the same process as with the previous test types, load testing is great for backend systems because it helps you determine if your backend is ready to deal with high amounts of traffic.\n\nYou can think of the list in graphical format as the following diagram:\n\n![Testing types](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057834295.png)\n\nIf you’re just getting started with testing, I’d recommend focusing only on unit testing for the time being. Once you have a grasp on it, start moving out following the above diagram and slowly move into the other types as you progress.\n\n## CI/CD and DevOps Familiarity\n\nAs a backend developer, your code will be constantly deployed, either into cloud environments or perhaps even into normal, on-premise servers. The point is that what you build will run through CI/CD (Continuous Integration and Continuous Deployment) processes.\n\n![ci-cd](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058122541.png)\n\nThese processes will automatically test it (Continuous Integration) and automatically deploy it (if all tests go well). As a backend developer, you’re not usually expected to know and understand how to configure these processes; however, it’s important that you know about them.\n\nDevOps is yet another tangential area to that of a backend developer. When teams are small enough, backend devs might be “gently pushed” into tasks such as configuring CI/CD pipelines, setting up servers, and more. These tasks are usually performed by dedicated professionals with the role of DevOps. Their specialty is automation, making the deployment process efficient and ensuring that everything runs smoothly in the real-world server environment. They play a crucial role in maintaining the reliability and performance of applications and websites.\n\nSo, while they’re not strictly the responsibilities of backend developers, they’re close enough to the role’s day-to-day that it would be a good idea to learn about them. If you’re interested in learning more about DevOps, check out [our DevOps roadmap](https://roadmap.sh/devops) containing all the key topics you should learn about if you want to become a DevOps engineer.\n\n## Soft Skills\n\nFinally, the last set of backend developer skills you should focus on are, actually, not technical skills, nor are they exclusively useful for backend developers. These are skills that every developer should work on during their career: soft skills.\n\n### Improving communication\n\nThe ability to communicate with others, both technical and non-technical people, is crucial in any developer's career.\n\nFor backend developers, it’s especially important because communicating their work and the effects of it is definitely harder than other roles, such as frontend developers who can actually showcase what they’re building.\n\nAs a backend developer, you’ll be able to better explain problems or blockers to your colleagues, you’ll be able to perform requirement gathering much more effectively, and you’ll even improve your own problem-solving skills by being better at articulating the problems and potential solutions to yourself.\n\n### Critical thinking\n\nHoning your critical thinking as a backend developer will help your ability to analyze complex problems, identify patterns much faster, and come up with innovative solutions to the problems you’re facing.\n\nPushing the limits of your critical thinking skills will also foster a more systematic and strategic approach to coding and architecting robust and efficient solutions.\n\nIn other words, it’ll make you a better and more efficient coder. And who doesn’t want that?\n\n## Conclusion\n\nTo summarize, if you expect to become a backend developer or to grow in the area of backend development:\n\n- Keep an eye on the industry to understand what’s the status quo and what’s new and hot.\n- Understand the basics of software design and architecture.\n- Look into relational databases and NoSQL databases as well; they’re both important.\n- Learn how to build and use APIs; they’ll be part of almost every project you work on.\n- Remember, testing might look like it’s not mandatory, but it’s definitely a standard practice when it comes to backend development.\n- CI/CD and DevOps are practices you’ll be involved with, either directly or indirectly, so learn about them.\n- Soft skills are just as important as technical skills if you expect to grow in your career.\n\nThat said, do not take this list as the ultimate roadmap but rather as a starting point. If you’re willing to take your backend developer career to the next level, push yourself out of your comfort zone and pursue the skills listed here and the ones listed in this detailed [backend roadmap](https://roadmap.sh/backend).\n\nRemember, constant learning is the only absolute truth in the software development world (this is true for backend developers, too). If you keep your skillset updated with the latest trends, you’ll remain adaptable and effective as a backend developer.\n";
				}
				async function compiledContent$1j() {
					return await html$1j();
				}
				function getHeadings$1j() {
					return [{"depth":2,"slug":"understanding-backend-development","text":"Understanding Backend Development"},{"depth":2,"slug":"proficiency-in-core-and-emerging-programming-languages","text":"Proficiency in Core and Emerging Programming Languages"},{"depth":3,"slug":"keeping-an-eye-on-the-rising-stars","text":"Keeping an eye on the rising stars"},{"depth":3,"slug":"the-importance-of-supporting-frameworks","text":"The importance of supporting frameworks"},{"depth":2,"slug":"software-design-and-architecture","text":"Software Design and Architecture"},{"depth":3,"slug":"most-common-backend-architectures","text":"Most common backend architectures"},{"depth":2,"slug":"mastery-of-database-management-systems","text":"Mastery of Database Management Systems"},{"depth":3,"slug":"sql-databases","text":"SQL databases"},{"depth":3,"slug":"nosql-databases","text":"NoSQL databases"},{"depth":2,"slug":"api-development-capabilities","text":"API Development Capabilities"},{"depth":3,"slug":"what-are-the-most-common-api-types","text":"What are the most common API types?"},{"depth":2,"slug":"version-control-savvy","text":"Version Control Savvy"},{"depth":3,"slug":"what-is-version-control","text":"What is version control?"},{"depth":3,"slug":"what-should-you-learn-about-git","text":"What should you learn about Git?"},{"depth":2,"slug":"testing","text":"Testing"},{"depth":2,"slug":"cicd-and-devops-familiarity","text":"CI/CD and DevOps Familiarity"},{"depth":2,"slug":"soft-skills","text":"Soft Skills"},{"depth":3,"slug":"improving-communication","text":"Improving communication"},{"depth":3,"slug":"critical-thinking","text":"Critical thinking"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$1j = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1j;
					content.file = file$1j;
					content.url = url$1j;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1j())}`;
				});

const __vite_glob_0_15 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1j,
	compiledContent: compiledContent$1j,
	default: Content$1j,
	file: file$1j,
	frontmatter: frontmatter$1j,
	getHeadings: getHeadings$1j,
	rawContent: rawContent$1j,
	url: url$1j
}, Symbol.toStringTag, { value: 'Module' }));

const html$1i = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-development-tools-ou6el.jpg\" alt=\"Must-have backend developer tools to use.\"></p>\n<p>As developers, we’re not just writing code on a text editor without any other external help. Whether we realize it or not, we’re constantly using different development tools to improve the way we work and the speed at which we can deliver our code.</p>\n<p>In this article, we’ll cover 25 backend development tools that are crucial in the web development industry, and as a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend developer</a>, you should be aware of them.</p>\n<p>The categories we’ll tackle are:</p>\n<ul>\n<li>IDEs and editors</li>\n<li>Database tools</li>\n<li>Collaboration</li>\n<li>Hosting Services</li>\n<li>API-Related tools</li>\n<li>Productivity tools</li>\n</ul>\n<p>So let’s get started!</p>\n<h2 id=\"beyond-programming-languages-ides-and-editors\">Beyond programming languages: IDEs and Editors</h2>\n<p>Other than the actual programming languages, the Integrated Development Environment (A.K.A your IDE) is the single most important tool you’ll have to pick and use throughout your career in software development.</p>\n<p>Some of them are generic (as in, they work for all types of development), and others will have specific backend development tools (which is what we’re focusing on right now).</p>\n<p>Let’s see some examples that are great for a web development project.</p>\n<h3 id=\"1-jetbrains-products\">1. Jetbrains Products</h3>\n<p>The <a href=\"https://www.jetbrains.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Jetbrains family</a> of IDEs targets multiple programming languages, including JavaScript, .NET, JAVA (and the Java Virtual Machine), Python, PHP, and more (mostly great options for web development).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/jetbrains-code-editor-z7z1t.png\" alt=\"Jetbrains code editor\"></p>\n<p>The benefit of using these IDEs, in comparison with others, is that given how they’re language/technology specific, they have tools designed for those programming languages and specifically for this list to help in your backend development tasks, such as:</p>\n<ul>\n<li>Debuggers.</li>\n<li>Improved IntelliSense.</li>\n<li>Improved development environment.</li>\n</ul>\n<p>The only minor issue with these IDEs, especially when compared to the rest of the options listed here, is that they’re not all free. While not all of them are priced the same, I recommend you check out your IDE’s pricing page to understand what options you have (there are free plans if you qualify for them).</p>\n<h3 id=\"2-visual-studio-code\">2. Visual Studio Code</h3>\n<p><a href=\"https://code.visualstudio.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">VSCode</a> is definitely one of the most popular alternatives these days for all types of web developers, but definitely for backend developers. This IDE’s strongest selling point is that it’s incredibly extensible through plugins. And the community using it is so big and varied that there are plugins for literally anything you need.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vscode-code-editor-8pznw.png\" alt=\"VSCode code editor\"></p>\n<p>The other major benefit of VSCode over JetBrains products is that it gives developers a fully working IDE for FREE. While some of the extensions don’t provide exactly the same developer experience as a JetBrains IDE, the proper combination of extensions can provide a very close alternative through VSCode.</p>\n<h3 id=\"3-zed\">3. Zed</h3>\n<p><a href=\"https://zed.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Zed</a> is a different type of code editor, and because of that, it might just be the right one for you.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/zed-code-editor-7ovxz.png\" alt=\"Zed code editor\"></p>\n<p>Zed, like VSCode, is an all-purpose code editor, letting you code in whatever language you want (whether you’re doing web development or not). The main reasons why you’d pick Zed over others are:</p>\n<ul>\n<li><strong>Improved performance.</strong> Zed takes advantage of your CPU AND GPU to improve the speed at which the IDE responds to your commands.</li>\n<li><strong>Multi-user support.</strong></li>\n<li><strong>Team features.</strong> Zed lets you build software while working with others by sharing notes and letting you interact with teammates through the IDE.</li>\n</ul>\n<p>Zed is an <a href=\"https://github.com/zed-industries/zed\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">open-source project</a>, but at the time of writing this article, it’s only available for macOS, so Linux and Windows users are still unable to try this excellent option.</p>\n<h3 id=\"4-sublime-text\">4. Sublime Text</h3>\n<p>Before VSCode, <a href=\"https://www.sublimetext.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sublime Text</a> was probably one of the most popular code editors for web developers who wanted something powerful for free.</p>\n<p>Just like VSCode, Sublime supports extensibility through plugins, and the rich ecosystem of plugins makes it quite a versatile editor. As a note, this code editor also supports GPU rendering of the UI, like Zed does, so if performance is important to you, then you’ll want to keep reading.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sublime-text-code-editor-ngtnf.png\" alt=\"Sublime code editor\"></p>\n<p>With a refreshed UI (if you’ve used Sublime Text in the past, you’ll be happily surprised!) and better internal tooling, the latest version of this editor (version 4) is trying to regain the portion of the market that VSCode took from it at the time.</p>\n<h3 id=\"5-vim---a-developer-focused-editor\">5. VIM - a developer-focused editor</h3>\n<p><a href=\"https://www.vim.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">VIM</a> is a tool that you either hate or love as a developer, but there is no middle ground.</p>\n<p>This is such an iconic text editor that all the previously mentioned IDE have what is called a “vim mode,” which allows you to use them as if you were using VIM (with the visual and input modes).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vim-code-editor-ohiyc.png\" alt=\"Vim code editor\"></p>\n<p>Vim lets you write code without having to move your fingers away from the home row (the row where you “rest” your fingers, the one with the F and G keys). That means you can navigate documents, write code, move through projects, and more, all with minimum hand movement.</p>\n<p>This is the key philosophy behind Vim’s design, and if you embrace it, it should help to make you a very proficient developer. Of course, adapting to this way of working is not trivial, and there is a lot of muscle memory that has to be re-trained. But once you do it, it’s really hard to go back.</p>\n<p>Just like with all the generic IDEs here, you’ll have to <a href=\"https://www.vim.org/scripts/script_search_results.php?order_by=creation_date&#x26;direction=descending\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">customize it through “scripts”</a> to make it work exactly as you want for your environment.</p>\n<h2 id=\"database-tools\">Database Tools</h2>\n<p>While doing backend development, you will definitely be interacting with databases. They’re a ubiquitous backend tool in the realm of web development.</p>\n<p>Let’s take a look at some great database tools you can use as a backend developer to interact with your favorite database management systems (DBMS).</p>\n<h3 id=\"6-datagrip\">6. DataGrip</h3>\n<p><a href=\"https://www.jetbrains.com/datagrip/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Datagrip</a> is a JetBrains product, which makes it a great option if you’re also going with a JetBrains IDE.</p>\n<p>This tool lets you access all SQL databases from within the same user interface, it provides great help while browsing the data stored in the database, and it also has features that help you write better SQL queries.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/datagrip-database-explorer-l8987.png\" alt=\"DataGrip database explorer\"></p>\n<p>While the pricing of these tools might be a bit steep (especially if you go with the IDE as well), it’s definitely a solid option if you’re looking for feature-rich and stable software development tools.</p>\n<h3 id=\"7-navicat\">7. Navicat</h3>\n<p><a href=\"https://navicat.com/en/products\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Navicat</a> actually has a family of alternatives based on what you need, from the standard set of SQL databases (such as MySQL, Oracle, Postgre, and so on) up to other NoSQL databases such as MongoDB and Redis.</p>\n<p>In general, the Navicat alternatives are quite lightweight and powerful to use. They might not be as feature-rich as Datagrip, but they let you easily browse and query the data you need.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/navicat-database-explorer-r1unn.png\" alt=\"Navicat database explorer\"></p>\n<p>The free trial for Navicat only lasts 14 days, and then you’ll have to pay a monthly fee. That said, for non-commercial use, the license is quite low, which makes it accessible to almost all developers.</p>\n<p>As for features, it has all the ones you’d expect from a tool like this:</p>\n<ul>\n<li>Ability to connect to multiple databases and visually browse their content.</li>\n<li>Query editor with some IntelliSense built-in.</li>\n<li>Model representation (automatically converts a database into ER Diagrams).</li>\n<li>Simple object designer to create entities through a visual IDE.</li>\n</ul>\n<p>The Navicat series of apps are great backend tools to have at your disposal, if you don’t mind their price, that is.</p>\n<h3 id=\"8-tableplus\">8. TablePlus</h3>\n<p><a href=\"https://tableplus.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Tableplus</a> is very similar to Navicat in the sense that it’s another lightweight database manager. The main differences are:</p>\n<ul>\n<li>Tableplus only supports SQL-based databases.</li>\n<li>The pricing model is simpler, by only charging a one-time license without you having to commit to a monthly subscription.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/tableplus-database-manager-06d09.png\" alt=\"TablePlus database manager\"></p>\n<p>Some of the most relevant features of Tableplus are:</p>\n<ul>\n<li>Inline data editing.</li>\n<li>Advanced filtering lets you combine different filtering conditions when searching.</li>\n<li>Code auto-complete, which comes in very handy when writing SQL queries.</li>\n<li>Extensible through JavaScript plugins (currently in Beta).</li>\n</ul>\n<p>This is a solid backend tool alternative to any of the previous options and with a simpler price tag.</p>\n<h3 id=\"9-dbeaver\">9. DBeaver</h3>\n<p><a href=\"https://dbeaver.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">DBeaver</a> is a free, cross-platform tool that lets you connect and interact with multiple databases. While there is a PRO version with extra features, the free version is more than powerful enough to get you started with almost any database you can think of, both SQL and NoSQL alike.</p>\n<p>For a full list of supported databases on the free version, check out their <a href=\"https://dbeaver.io/about/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">about page</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/dbeaver-database-manager-fvlrd.png\" alt=\"DBeaver database manager\"></p>\n<p>Some of the major features of DBeaver are:</p>\n<ul>\n<li>SQL editor with completion.</li>\n<li>ER-diagram creation from a table definition.</li>\n<li>In-line data editing.</li>\n</ul>\n<p>Task management to kill any long-lasting queries that block your database.</p>\n<h2 id=\"collaboration-tools-for-web-development\">Collaboration tools for web development</h2>\n<p>Unless you’re working as a solo-dev (and even then!), collaboration tools allow you to coordinate your work and understand who’s working on what and what you should be working on next.</p>\n<p>While these might not be considered “backend tools” per se, they definitely help improve your performance and organization, so we can still call them “development tools” as a broader term.</p>\n<h3 id=\"10-trello\">10. Trello</h3>\n<p><a href=\"https://trello.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Trello</a> is a very simple yet powerful organizational tool that lets teams build a Kanban-like board with clear states and simple UX (drag&#x26;drop is king in Trello).</p>\n<p>Setting up a new project and a team takes minutes in Trello, and through the plugin system, you can get extra features such as date reminders, calendar integrations, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/trello-board-o0i4i.png\" alt=\"Trello board\"></p>\n<p>The simple UI and intuitive UX make Trello one of the best options out there for collaborative tools as long as the needs of the team are met with simple column-based layouts and minimal information.</p>\n<h3 id=\"11-monday\">11. Monday</h3>\n<p><a href=\"https://monday.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Monday</a> is a relatively new online platform for project management and collaboration. I say “new” because some of the other alternatives here have been around for over 5+ years.</p>\n<p>Their limited free plan lasts forever, so if you have a small team and limited requirements, this might just be the perfect tool for you. Also, if you actually need to pay, Monday’s plans are accessible, especially when compared to other alternatives.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/monday-project-management-tool-xws17.png\" alt=\"Monday project management tool\"></p>\n<p>Monday’s fully customizable UI lets you build the collaborative environment you need. This is a huge advantage over others who’ve been around for longer and have a fixed UI that you have to adapt to.</p>\n<h3 id=\"12-basecamp\">12. Basecamp</h3>\n<p><a href=\"https://basecamp.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Basecamp</a> is a mix between Trello, Monday, and Notion in the sense that it tries to provide developers with the best and most relevant tools from those worlds, leaving out the ones that just create “noise.”</p>\n<p><img src=\"https://assets.roadmap.sh/guest/basecamp-project-management-tool-2pusd.png\" alt=\"Basecamp project management tool\"></p>\n<p>Basecamp’s philosophy is to keep things simple and only focus on the features that truly add to collaboration:</p>\n<ul>\n<li>Simple card tables like Trello.</li>\n<li>Ability to upload and manage documents and files with your team.</li>\n<li>Integrated chat.</li>\n<li>Message boards to send notifications to everyone.</li>\n</ul>\n<p>The only “downside” to basecamp, if you will, is that there is no “forever free” plan. Both their plans are paid and have a 30-day free trial, so you can definitely give it a shot and figure out if what they offer is enough for your needs.</p>\n<h3 id=\"13-wrike\">13. Wrike</h3>\n<p><a href=\"https://www.wrike.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Wrike</a> is yet another attempt at making project management and collaboration feel organic and seamless. They have a minimalistic UI and provide you with over 400 integrations to create your own workflows based on your needs and current ecosystem.</p>\n<p>They have a free plan that, while feature-limited, it’s perfect for understanding the basic way of using Wrike and how useful it can be to you in your current project.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/wrike-project-management-tool-5g3kl.png\" alt=\"Wrike project management tool\"></p>\n<p>Their innovative use of AI allows you to create content faster, analyze project and task descriptions, and create subtasks based on it.</p>\n<p>Wrike feels efficient and powerful, even for its free plan. Give it a chance if you’re a freelancer or if you have a small team looking for something new and powerful.</p>\n<h2 id=\"hosting-services\">Hosting Services</h2>\n<p>When it comes to backend development, deploying your code and running it on the cloud will be a common thing; this is a practice known as continuous integration and continuous deployment (CI/CD). While in some situations, you’ll be dealing with a custom, in-house infrastructure, there are platforms that will make the entire process very lightweight (as in deploying with a couple of clicks).</p>\n<p>Let’s take a look at some of the most common alternatives!</p>\n<h3 id=\"14-railway\">14. Railway</h3>\n<p><a href=\"https://railway.app/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Railway.app</a> aims at giving developers all the tools they need at a click’s distance. We’re talking about:</p>\n<ul>\n<li>PR-triggered deployments.</li>\n<li>Support for all popular programming languages.</li>\n<li>Autoscaling.</li>\n<li>Load balancing.</li>\n<li>Monitoring.</li>\n<li>A great uptime (99.95%)</li>\n<li>With more than 200 ready-made templates for you to get going.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/railway-hosting-j8me8.png\" alt=\"Railway hosting\"></p>\n<p>Railway has no free plan, but their basic one is very accessible. Careful though, they also charge per resource utilization. Lucky for you, they have a <a href=\"https://railway.app/pricing\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">very handy consumption calculator</a> to avoid surprises at the end of the month!</p>\n<h3 id=\"15-heroku\">15. Heroku</h3>\n<p><a href=\"https://www.heroku.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Heroku</a> is another Platform as a Service provider. This one provides the basic services most of them do, such as autoscaling, monitoring, GitHub integration, and more.</p>\n<p>The list of supported programming languages is not huge, but the most common ones are definitely covered: Node.js, Ruby, JAVA, PHP, Python, Go, Scala, and even Clojure.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/heroku-hosting-2u6bz.png\" alt=\"Heroku hosting\"></p>\n<p>Another great selling point for Heroku is that on top of their infrastructure, they also offer a managed Postgre database as a service and a Redis one. In both situations, you’ll have to pay for the services as you use them, so keep that in mind.</p>\n<h3 id=\"16-digital-ocean\">16. Digital Ocean</h3>\n<p>As opposed to platforms such as Heroku, <a href=\"https://www.digitalocean.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Digital Ocean</a> is known as an Infrastructure as a Service provider (IaaS). They give you all the servers you need and all the resources (memory, CPU, etc) you want to pay for. However, setting up your deployment process, automating your integration tests, or even having all the required libraries to run your code is up to you.</p>\n<p>This is by no means something bad, some teams do prefer to have that freedom over other platforms like Railway and Heroku, where everything’s already managed.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/digital-ocean-hosting-i7a9c.png\" alt=\"Digital Ocean hosting\"></p>\n<p>Large-scale applications will usually require to have custom infrastructure that managed services can hardly provide. This is where IaaS providers come in.</p>\n<p>On top of their basic offering, they do offer managed databases such as MongoDB, MySQL, Redis, and others.</p>\n<h3 id=\"17-hetzner\">17. Hetzner</h3>\n<p><a href=\"https://www.hetzner.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Hetzner</a> is yet another IaaS that offers everything you need to get going if you know what to do with it. In other words, they offer all the hardware you might dream of, even in the cloud, but you have to configure it and maintain it.</p>\n<p>Their only “managed” offer is for web hosting though, so if you’re looking to host your website or app and you don’t want to have to deal with server maintenance and configuration, then this is a good option for you.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/hetzner-hosting-oupq8.jpg\" alt=\"Hetzner hosting\"></p>\n<p>Other than that, their offering is quite standard, although their pricing model might not be. While they do have the standard pricing tiers like the rest of them, they also give you the option to “bid” for used hardware that is no longer needed.</p>\n<h3 id=\"18-vercel\">18. Vercel</h3>\n<p>If you’re building a NextJS application and you’re looking for a quick way to deploy it, then there is probably no better place than <a href=\"https://vercel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Vercel</a> (the owner of NextJS).</p>\n<p>Their platform allows you to link your GitHub account to their systems and deploy your entire application with a single push to the repo.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vercel-hosting-9jvk9.png\" alt=\"Vercel hosting\"></p>\n<p>And since they’re experts on NextJS, your app will “just work.”</p>\n<p>Even their free plan is perfect for quick SaaS prototypes and small applications. On top of this, they offer monitoring, auto-scaling, load balancing, and everything you’d expect from a PaaS provider.</p>\n<p>While it’s true they don’t support other technologies or even offer other related services, such as managed databases, there is hardly anyone who can provide a better developer experience when it comes to deploying a NextJS application.</p>\n<h3 id=\"19-render\">19. Render</h3>\n<p>You can think of <a href=\"https://render.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Render</a> as if Vercel and Heroku had a love child. Render gives you the amazing developer experience provided by Vercel but the flexibility (or more) from Heroku.</p>\n<p>You’re not tied to a single technology; instead, you have all the major runtimes available out of the box. Much higher HTTP timeouts (up to 100 minutes, which is incredible compared to the standard 10 or 30 seconds most providers give you) and tons of other security and quality-of-life improvements.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/render-hosting-w4urq.png\" alt=\"Render hosting\"></p>\n<p>Render also offers managed MySQL and managed Redis instances for you to use, even in their free tier. In the end, unless you’ve been using Heroku for a while and you’re happy with their DX, it might be a good idea to check out Render instead.</p>\n<h3 id=\"20-ovhcloud\">20. OVHCloud</h3>\n<p><a href=\"https://www.ovhcloud.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OVHCloud</a> is an all-in-one solution that seems to provide you with everything you need, from “bare metal” (as in infrastructure) to managed hosting for web applications, managed databases (they have many to choose from), and many other services.</p>\n<p>However, they do not seem to offer quality-of-life integrations to make your deployment workflow simple and intuitive.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/ovhcloud-hosting-ncfch.png\" alt=\"OVHCloud hosting\"></p>\n<p>Now, given how they centralize all related services from domain name registration all the way up to analytics, identity management, file storage (CDN), and even one-click install CMS (content management systems, such as WordPress), etc, it might just be a good option for you. That is if you have the expertise in your team to deal with all these options.</p>\n<h2 id=\"api-related-tools\">API-Related Tools</h2>\n<p>As backend developers, we’ll always be dealing with APIs (Application Programming Interface), either through using the ones created by others or writing our own.</p>\n<p>Whatever you’re doing, it’s always good to have some backend tools to help you build and test them faster, so let’s take a look at a few options.</p>\n<h3 id=\"21-swagger\">21. Swagger</h3>\n<p>Some developers would argue that one of the hardest parts of creating an API is documenting it. Not only because it might sound like a boring task, but explaining what the API endpoint is doing well enough is not trivial.</p>\n<p>That’s where <a href=\"https://swagger.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Swagger</a> comes into play.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/swagger-api-tool-vngxu.png\" alt=\"Swagger API tool\"></p>\n<p>This tool allows you to create interactive documentation that provides developers with all they need to understand how to use your endpoints, and at the same time, it also gives them the option to test them directly from the generated UI.</p>\n<h3 id=\"22-postman\">22. Postman</h3>\n<p><a href=\"https://www.postman.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Postman</a> is less of a documentation-only app and has grown over the years to become a testing API tool that every developer and development team should know about. Backend developers are especially benefited from using Postman because of how well it helps organize and manage APIs.</p>\n<p>With Postman, you can organize all your company’s APIs, share them with the associated dev teams, and let them use and interact with them without having to write a single line of code.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-documentation-tool-cl81q.png\" alt=\"Postman documentation tool\"></p>\n<p>While Swagger is more of a development tool that every backend developer should know about, Postman is the tool that every development team should use to share &#x26; control internal API access and documentation.</p>\n<h2 id=\"productivity\">Productivity</h2>\n<p>Finally, the last category is about productivity. While some of the products and services mentioned already do provide productivity enhancements, they weren’t there for that. The following list of backend tools is created thinking only about the benefits they can bring to your productivity while working as a backend developer.</p>\n<h3 id=\"23-iterm\">23. iTerm</h3>\n<p>If you’re a macOS user, then <a href=\"https://iterm2.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">iTerm</a> is definitely one of the “must haves” you need to look into. As a backend developer, you’ll spend a lot of your day in the terminal.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/iterm-terminal-developer-tool-zze25.png\" alt=\"iTerm terminal developer tool\"></p>\n<p>iTerm will take that experience to the next level by bringing in features such as:</p>\n<ul>\n<li>Parallel panes inside the same window making it easy to multi-task.</li>\n<li>Improved auto-complete</li>\n<li>In-window search outside of the current program you’re using.</li>\n<li>Instant replay lets you review the latest content on the screen before cleaning it.</li>\n<li>Paste history, letting you move through the latest pasted content into the terminal.</li>\n</ul>\n<p>Mind you, none of these features are mandatory; you can easily work without them, but they do improve your quality of life as a developer. Hence the reason why iTerm leads this list.</p>\n<h3 id=\"24-zshohmyzsh\">24. Zsh/OhMyZsh</h3>\n<p>The combination of these two gives your terminal superpowers. <a href=\"https://zsh.sourceforge.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Zsh</a> is an improved shell that lets you work much faster and more efficiently if you’re spending several hours typing commands in your terminal. For example, you get features such as:</p>\n<ul>\n<li>Advanced tab auto-complete</li>\n<li>Extensibility</li>\n<li>Spelling corrections</li>\n<li>And more.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/zsh-shell-ui-6s163.png\" alt=\"Oh my Zsh shell\"></p>\n<p>As mentioned above, after you have your ZSH installed and set up, you should look into installing oh-my-zsh, which helps with configuring all the customization options you have on this shell:</p>\n<ul>\n<li>It comes bundled with <a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">over 300 plugins</a>, ranging from 1password integrations to the “jump” plugin, which lets you move around the filesystem by moving from mark to mark (you can assign marks to folders).</li>\n<li><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Plenty of themes</a> out of the box.</li>\n</ul>\n<p>If you find yourself spending hours on the terminal, consider installing this combo.</p>\n<h3 id=\"25-raycast\">25. Raycast</h3>\n<p><a href=\"https://www.raycast.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Raycast</a> allows you to improve your productivity by giving you a better application launcher. Instead of using the default launcher, you can replace it with Raycast and gain superpowers.</p>\n<p>Now, you suddenly have access to hundreds of <a href=\"https://www.raycast.com/store\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">community-created extensions</a> that allow you to directly interact with chatGPT from the app launcher, use GitHub, interact with VSCode directly, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/raycast-app-launcher-w5rg3.png\" alt=\"Raycast app launcher\"></p>\n<p>While it is only available for macOS users, Raycast has become a must-have application for backend developers on this platform. In the end, the faster you can reach for your tools, the more productive you become. And a properly configured Raycast can make your web development process feel like a breeze.</p>";

				const frontmatter$1i = {"title":"25 Essential Backend Development Tools for @currentYear@","description":"Elevate your development process with these 25 essential backend developer tools.","authorId":"fernando","excludedBySlug":"/backend/developer-tools","seo":{"title":"25 Essential Backend Development Tools for @currentYear@","description":"Elevate your coding with backend developer tools that bring efficiency, scalability, and innovation to your projects. Improve your development process today!","ogImageUrl":"https://assets.roadmap.sh/guest/backend-development-tools-ou6el.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-03-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1i = "/workspace/src/data/guides/backend-developer-tools.md";
				const url$1i = undefined;
				function rawContent$1i() {
					return "   \n                                                                 \n                                                                                                \n                  \n                                          \n    \n                                                                   \n                                                                                                                                                                              \n                                                                                   \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Must-have backend developer tools to use.](https://assets.roadmap.sh/guest/backend-development-tools-ou6el.jpg)\n\nAs developers, we’re not just writing code on a text editor without any other external help. Whether we realize it or not, we’re constantly using different development tools to improve the way we work and the speed at which we can deliver our code.\n\nIn this article, we’ll cover 25 backend development tools that are crucial in the web development industry, and as a [backend developer](https://roadmap.sh/backend), you should be aware of them.\n\nThe categories we’ll tackle are:\n\n- IDEs and editors\n- Database tools\n- Collaboration\n- Hosting Services\n- API-Related tools\n- Productivity tools\n\nSo let’s get started!\n\n## Beyond programming languages: IDEs and Editors\n\nOther than the actual programming languages, the Integrated Development Environment (A.K.A your IDE) is the single most important tool you’ll have to pick and use throughout your career in software development.\n\nSome of them are generic (as in, they work for all types of development), and others will have specific backend development tools (which is what we’re focusing on right now).\n\nLet’s see some examples that are great for a web development project.\n\n### 1. Jetbrains Products\n\nThe [Jetbrains family](https://www.jetbrains.com/) of IDEs targets multiple programming languages, including JavaScript, .NET, JAVA (and the Java Virtual Machine), Python, PHP, and more (mostly great options for web development).\n\n![Jetbrains code editor](https://assets.roadmap.sh/guest/jetbrains-code-editor-z7z1t.png)\n\nThe benefit of using these IDEs, in comparison with others, is that given how they’re language/technology specific, they have tools designed for those programming languages and specifically for this list to help in your backend development tasks, such as:\n\n- Debuggers.\n- Improved IntelliSense.\n- Improved development environment.\n\nThe only minor issue with these IDEs, especially when compared to the rest of the options listed here, is that they’re not all free. While not all of them are priced the same, I recommend you check out your IDE’s pricing page to understand what options you have (there are free plans if you qualify for them).\n\n### 2. Visual Studio Code\n\n[VSCode](https://code.visualstudio.com/) is definitely one of the most popular alternatives these days for all types of web developers, but definitely for backend developers. This IDE’s strongest selling point is that it’s incredibly extensible through plugins. And the community using it is so big and varied that there are plugins for literally anything you need.\n\n![VSCode code editor](https://assets.roadmap.sh/guest/vscode-code-editor-8pznw.png)\n\nThe other major benefit of VSCode over JetBrains products is that it gives developers a fully working IDE for FREE. While some of the extensions don’t provide exactly the same developer experience as a JetBrains IDE, the proper combination of extensions can provide a very close alternative through VSCode.\n\n### 3. Zed\n\n[Zed](https://zed.dev/) is a different type of code editor, and because of that, it might just be the right one for you.\n\n![Zed code editor](https://assets.roadmap.sh/guest/zed-code-editor-7ovxz.png)\n\nZed, like VSCode, is an all-purpose code editor, letting you code in whatever language you want (whether you’re doing web development or not). The main reasons why you’d pick Zed over others are:\n\n- **Improved performance.** Zed takes advantage of your CPU AND GPU to improve the speed at which the IDE responds to your commands.\n- **Multi-user support.**\n- **Team features.** Zed lets you build software while working with others by sharing notes and letting you interact with teammates through the IDE.\n\nZed is an [open-source project](https://github.com/zed-industries/zed), but at the time of writing this article, it’s only available for macOS, so Linux and Windows users are still unable to try this excellent option.\n\n### 4. Sublime Text\n\nBefore VSCode, [Sublime Text](https://www.sublimetext.com/) was probably one of the most popular code editors for web developers who wanted something powerful for free.\n\nJust like VSCode, Sublime supports extensibility through plugins, and the rich ecosystem of plugins makes it quite a versatile editor. As a note, this code editor also supports GPU rendering of the UI, like Zed does, so if performance is important to you, then you’ll want to keep reading.\n\n![Sublime code editor](https://assets.roadmap.sh/guest/sublime-text-code-editor-ngtnf.png)\n\nWith a refreshed UI (if you’ve used Sublime Text in the past, you’ll be happily surprised!) and better internal tooling, the latest version of this editor (version 4) is trying to regain the portion of the market that VSCode took from it at the time.\n\n### 5. VIM - a developer-focused editor\n\n[VIM](https://www.vim.org/) is a tool that you either hate or love as a developer, but there is no middle ground.\n\nThis is such an iconic text editor that all the previously mentioned IDE have what is called a “vim mode,” which allows you to use them as if you were using VIM (with the visual and input modes).\n\n![Vim code editor](https://assets.roadmap.sh/guest/vim-code-editor-ohiyc.png)\n\nVim lets you write code without having to move your fingers away from the home row (the row where you “rest” your fingers, the one with the F and G keys). That means you can navigate documents, write code, move through projects, and more, all with minimum hand movement.\n\nThis is the key philosophy behind Vim’s design, and if you embrace it, it should help to make you a very proficient developer. Of course, adapting to this way of working is not trivial, and there is a lot of muscle memory that has to be re-trained. But once you do it, it’s really hard to go back.\n\nJust like with all the generic IDEs here, you’ll have to [customize it through “scripts”](https://www.vim.org/scripts/script_search_results.php?order_by=creation_date&direction=descending) to make it work exactly as you want for your environment.\n\n## Database Tools\n\nWhile doing backend development, you will definitely be interacting with databases. They’re a ubiquitous backend tool in the realm of web development.\n\nLet’s take a look at some great database tools you can use as a backend developer to interact with your favorite database management systems (DBMS).\n\n### 6. DataGrip\n\n[Datagrip](https://www.jetbrains.com/datagrip/) is a JetBrains product, which makes it a great option if you’re also going with a JetBrains IDE.\n\nThis tool lets you access all SQL databases from within the same user interface, it provides great help while browsing the data stored in the database, and it also has features that help you write better SQL queries.\n\n![DataGrip database explorer](https://assets.roadmap.sh/guest/datagrip-database-explorer-l8987.png)\n\nWhile the pricing of these tools might be a bit steep (especially if you go with the IDE as well), it’s definitely a solid option if you’re looking for feature-rich and stable software development tools.\n\n### 7. Navicat\n\n[Navicat](https://navicat.com/en/products) actually has a family of alternatives based on what you need, from the standard set of SQL databases (such as MySQL, Oracle, Postgre, and so on) up to other NoSQL databases such as MongoDB and Redis.\n\nIn general, the Navicat alternatives are quite lightweight and powerful to use. They might not be as feature-rich as Datagrip, but they let you easily browse and query the data you need.\n\n![Navicat database explorer](https://assets.roadmap.sh/guest/navicat-database-explorer-r1unn.png)\n\nThe free trial for Navicat only lasts 14 days, and then you’ll have to pay a monthly fee. That said, for non-commercial use, the license is quite low, which makes it accessible to almost all developers.\n\nAs for features, it has all the ones you’d expect from a tool like this:\n\n- Ability to connect to multiple databases and visually browse their content.\n- Query editor with some IntelliSense built-in.\n- Model representation (automatically converts a database into ER Diagrams).\n- Simple object designer to create entities through a visual IDE.\n\nThe Navicat series of apps are great backend tools to have at your disposal, if you don’t mind their price, that is.\n\n### 8. TablePlus\n\n[Tableplus](https://tableplus.com/) is very similar to Navicat in the sense that it’s another lightweight database manager. The main differences are:\n\n- Tableplus only supports SQL-based databases.\n- The pricing model is simpler, by only charging a one-time license without you having to commit to a monthly subscription.\n\n![TablePlus database manager](https://assets.roadmap.sh/guest/tableplus-database-manager-06d09.png)\n\nSome of the most relevant features of Tableplus are:\n\n- Inline data editing.\n- Advanced filtering lets you combine different filtering conditions when searching.\n- Code auto-complete, which comes in very handy when writing SQL queries.\n- Extensible through JavaScript plugins (currently in Beta).\n\nThis is a solid backend tool alternative to any of the previous options and with a simpler price tag.\n\n### 9. DBeaver\n\n[DBeaver](https://dbeaver.io/) is a free, cross-platform tool that lets you connect and interact with multiple databases. While there is a PRO version with extra features, the free version is more than powerful enough to get you started with almost any database you can think of, both SQL and NoSQL alike.\n\nFor a full list of supported databases on the free version, check out their [about page](https://dbeaver.io/about/).\n\n![DBeaver database manager](https://assets.roadmap.sh/guest/dbeaver-database-manager-fvlrd.png)\n\nSome of the major features of DBeaver are:\n\n- SQL editor with completion.\n- ER-diagram creation from a table definition.\n- In-line data editing.\n\nTask management to kill any long-lasting queries that block your database.\n\n## Collaboration tools for web development\n\nUnless you’re working as a solo-dev (and even then!), collaboration tools allow you to coordinate your work and understand who’s working on what and what you should be working on next.\n\nWhile these might not be considered “backend tools” per se, they definitely help improve your performance and organization, so we can still call them “development tools” as a broader term.\n\n### 10. Trello\n\n[Trello](https://trello.com/) is a very simple yet powerful organizational tool that lets teams build a Kanban-like board with clear states and simple UX (drag&drop is king in Trello).\n\nSetting up a new project and a team takes minutes in Trello, and through the plugin system, you can get extra features such as date reminders, calendar integrations, and more.\n\n![Trello board](https://assets.roadmap.sh/guest/trello-board-o0i4i.png)\n\nThe simple UI and intuitive UX make Trello one of the best options out there for collaborative tools as long as the needs of the team are met with simple column-based layouts and minimal information.\n\n### 11. Monday\n\n[Monday](https://monday.com/) is a relatively new online platform for project management and collaboration. I say “new” because some of the other alternatives here have been around for over 5+ years.\n\nTheir limited free plan lasts forever, so if you have a small team and limited requirements, this might just be the perfect tool for you. Also, if you actually need to pay, Monday’s plans are accessible, especially when compared to other alternatives.\n\n![Monday project management tool](https://assets.roadmap.sh/guest/monday-project-management-tool-xws17.png)\n\nMonday’s fully customizable UI lets you build the collaborative environment you need. This is a huge advantage over others who've been around for longer and have a fixed UI that you have to adapt to.\n\n### 12. Basecamp\n\n[Basecamp](https://basecamp.com/) is a mix between Trello, Monday, and Notion in the sense that it tries to provide developers with the best and most relevant tools from those worlds, leaving out the ones that just create “noise.”\n\n![Basecamp project management tool](https://assets.roadmap.sh/guest/basecamp-project-management-tool-2pusd.png)\n\nBasecamp’s philosophy is to keep things simple and only focus on the features that truly add to collaboration:\n\n- Simple card tables like Trello.\n- Ability to upload and manage documents and files with your team.\n- Integrated chat.\n- Message boards to send notifications to everyone.\n\nThe only “downside” to basecamp, if you will, is that there is no “forever free” plan. Both their plans are paid and have a 30-day free trial, so you can definitely give it a shot and figure out if what they offer is enough for your needs.\n\n### 13. Wrike\n\n[Wrike](https://www.wrike.com/) is yet another attempt at making project management and collaboration feel organic and seamless. They have a minimalistic UI and provide you with over 400 integrations to create your own workflows based on your needs and current ecosystem.\n\nThey have a free plan that, while feature-limited, it’s perfect for understanding the basic way of using Wrike and how useful it can be to you in your current project.\n\n![Wrike project management tool](https://assets.roadmap.sh/guest/wrike-project-management-tool-5g3kl.png)\n\nTheir innovative use of AI allows you to create content faster, analyze project and task descriptions, and create subtasks based on it.\n\nWrike feels efficient and powerful, even for its free plan. Give it a chance if you’re a freelancer or if you have a small team looking for something new and powerful.\n\n## Hosting Services\n\nWhen it comes to backend development, deploying your code and running it on the cloud will be a common thing; this is a practice known as continuous integration and continuous deployment (CI/CD). While in some situations, you’ll be dealing with a custom, in-house infrastructure, there are platforms that will make the entire process very lightweight (as in deploying with a couple of clicks).\n\nLet’s take a look at some of the most common alternatives!\n\n### 14. Railway\n\n[Railway.app](https://railway.app/) aims at giving developers all the tools they need at a click’s distance. We’re talking about:\n\n- PR-triggered deployments.\n- Support for all popular programming languages.\n- Autoscaling.\n- Load balancing.\n- Monitoring.\n- A great uptime (99.95%)\n- With more than 200 ready-made templates for you to get going.\n\n![Railway hosting](https://assets.roadmap.sh/guest/railway-hosting-j8me8.png)\n\nRailway has no free plan, but their basic one is very accessible. Careful though, they also charge per resource utilization. Lucky for you, they have a [very handy consumption calculator](https://railway.app/pricing) to avoid surprises at the end of the month!\n\n### 15. Heroku\n\n[Heroku](https://www.heroku.com/) is another Platform as a Service provider. This one provides the basic services most of them do, such as autoscaling, monitoring, GitHub integration, and more.\n\nThe list of supported programming languages is not huge, but the most common ones are definitely covered: Node.js, Ruby, JAVA, PHP, Python, Go, Scala, and even Clojure.\n\n![Heroku hosting](https://assets.roadmap.sh/guest/heroku-hosting-2u6bz.png)\n\nAnother great selling point for Heroku is that on top of their infrastructure, they also offer a managed Postgre database as a service and a Redis one. In both situations, you’ll have to pay for the services as you use them, so keep that in mind.\n\n### 16. Digital Ocean\n\nAs opposed to platforms such as Heroku, [Digital Ocean](https://www.digitalocean.com/) is known as an Infrastructure as a Service provider (IaaS). They give you all the servers you need and all the resources (memory, CPU, etc) you want to pay for. However, setting up your deployment process, automating your integration tests, or even having all the required libraries to run your code is up to you.\n\nThis is by no means something bad, some teams do prefer to have that freedom over other platforms like Railway and Heroku, where everything’s already managed.\n\n![Digital Ocean hosting](https://assets.roadmap.sh/guest/digital-ocean-hosting-i7a9c.png)\n\nLarge-scale applications will usually require to have custom infrastructure that managed services can hardly provide. This is where IaaS providers come in.\n\nOn top of their basic offering, they do offer managed databases such as MongoDB, MySQL, Redis, and others.\n\n### 17. Hetzner\n\n[Hetzner](https://www.hetzner.com/) is yet another IaaS that offers everything you need to get going if you know what to do with it. In other words, they offer all the hardware you might dream of, even in the cloud, but you have to configure it and maintain it.\n\nTheir only “managed” offer is for web hosting though, so if you’re looking to host your website or app and you don’t want to have to deal with server maintenance and configuration, then this is a good option for you.\n\n![Hetzner hosting](https://assets.roadmap.sh/guest/hetzner-hosting-oupq8.jpg)\n\nOther than that, their offering is quite standard, although their pricing model might not be. While they do have the standard pricing tiers like the rest of them, they also give you the option to “bid” for used hardware that is no longer needed.\n\n### 18. Vercel\n\nIf you’re building a NextJS application and you’re looking for a quick way to deploy it, then there is probably no better place than [Vercel](https://vercel.com/) (the owner of NextJS).\n\nTheir platform allows you to link your GitHub account to their systems and deploy your entire application with a single push to the repo.\n\n![Vercel hosting](https://assets.roadmap.sh/guest/vercel-hosting-9jvk9.png)\n\nAnd since they’re experts on NextJS, your app will “just work.”\n\nEven their free plan is perfect for quick SaaS prototypes and small applications. On top of this, they offer monitoring, auto-scaling, load balancing, and everything you’d expect from a PaaS provider.\n\nWhile it’s true they don’t support other technologies or even offer other related services, such as managed databases, there is hardly anyone who can provide a better developer experience when it comes to deploying a NextJS application.\n\n### 19. Render\n\nYou can think of [Render](https://render.com/) as if Vercel and Heroku had a love child. Render gives you the amazing developer experience provided by Vercel but the flexibility (or more) from Heroku.\n\nYou’re not tied to a single technology; instead, you have all the major runtimes available out of the box. Much higher HTTP timeouts (up to 100 minutes, which is incredible compared to the standard 10 or 30 seconds most providers give you) and tons of other security and quality-of-life improvements.\n\n![Render hosting](https://assets.roadmap.sh/guest/render-hosting-w4urq.png)\n\nRender also offers managed MySQL and managed Redis instances for you to use, even in their free tier. In the end, unless you’ve been using Heroku for a while and you’re happy with their DX, it might be a good idea to check out Render instead.\n\n### 20. OVHCloud\n\n[OVHCloud](https://www.ovhcloud.com/) is an all-in-one solution that seems to provide you with everything you need, from “bare metal” (as in infrastructure) to managed hosting for web applications, managed databases (they have many to choose from), and many other services.\n\nHowever, they do not seem to offer quality-of-life integrations to make your deployment workflow simple and intuitive.\n\n![OVHCloud hosting](https://assets.roadmap.sh/guest/ovhcloud-hosting-ncfch.png)\n\nNow, given how they centralize all related services from domain name registration all the way up to analytics, identity management, file storage (CDN), and even one-click install CMS (content management systems, such as WordPress), etc, it might just be a good option for you. That is if you have the expertise in your team to deal with all these options.\n\n## API-Related Tools\n\nAs backend developers, we’ll always be dealing with APIs (Application Programming Interface), either through using the ones created by others or writing our own.\n\nWhatever you’re doing, it’s always good to have some backend tools to help you build and test them faster, so let’s take a look at a few options.\n\n### 21. Swagger\n\nSome developers would argue that one of the hardest parts of creating an API is documenting it. Not only because it might sound like a boring task, but explaining what the API endpoint is doing well enough is not trivial.\n\nThat’s where [Swagger](https://swagger.io/) comes into play.\n\n![Swagger API tool](https://assets.roadmap.sh/guest/swagger-api-tool-vngxu.png)\n\nThis tool allows you to create interactive documentation that provides developers with all they need to understand how to use your endpoints, and at the same time, it also gives them the option to test them directly from the generated UI.\n\n### 22. Postman\n\n[Postman](https://www.postman.com/) is less of a documentation-only app and has grown over the years to become a testing API tool that every developer and development team should know about. Backend developers are especially benefited from using Postman because of how well it helps organize and manage APIs.\n\nWith Postman, you can organize all your company’s APIs, share them with the associated dev teams, and let them use and interact with them without having to write a single line of code.\n\n![Postman documentation tool](https://assets.roadmap.sh/guest/postman-documentation-tool-cl81q.png)\n\nWhile Swagger is more of a development tool that every backend developer should know about, Postman is the tool that every development team should use to share & control internal API access and documentation.\n\n## Productivity\n\nFinally, the last category is about productivity. While some of the products and services mentioned already do provide productivity enhancements, they weren’t there for that. The following list of backend tools is created thinking only about the benefits they can bring to your productivity while working as a backend developer.\n\n### 23. iTerm\n\nIf you’re a macOS user, then [iTerm](https://iterm2.com/) is definitely one of the “must haves” you need to look into. As a backend developer, you’ll spend a lot of your day in the terminal.\n\n![iTerm terminal developer tool](https://assets.roadmap.sh/guest/iterm-terminal-developer-tool-zze25.png)\n\niTerm will take that experience to the next level by bringing in features such as:\n\n- Parallel panes inside the same window making it easy to multi-task.\n- Improved auto-complete\n- In-window search outside of the current program you’re using.\n- Instant replay lets you review the latest content on the screen before cleaning it.\n- Paste history, letting you move through the latest pasted content into the terminal.\n\nMind you, none of these features are mandatory; you can easily work without them, but they do improve your quality of life as a developer. Hence the reason why iTerm leads this list.\n\n### 24. Zsh/OhMyZsh\n\nThe combination of these two gives your terminal superpowers. [Zsh](https://zsh.sourceforge.io/) is an improved shell that lets you work much faster and more efficiently if you’re spending several hours typing commands in your terminal. For example, you get features such as:\n\n- Advanced tab auto-complete\n- Extensibility\n- Spelling corrections\n- And more.\n\n![Oh my Zsh shell](https://assets.roadmap.sh/guest/zsh-shell-ui-6s163.png)\n\nAs mentioned above, after you have your ZSH installed and set up, you should look into installing oh-my-zsh, which helps with configuring all the customization options you have on this shell:\n\n- It comes bundled with [over 300 plugins](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins), ranging from 1password integrations to the “jump” plugin, which lets you move around the filesystem by moving from mark to mark (you can assign marks to folders).\n- [Plenty of themes](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) out of the box.\n\nIf you find yourself spending hours on the terminal, consider installing this combo.\n\n### 25. Raycast\n\n[Raycast](https://www.raycast.com/) allows you to improve your productivity by giving you a better application launcher. Instead of using the default launcher, you can replace it with Raycast and gain superpowers.\n\nNow, you suddenly have access to hundreds of [community-created extensions](https://www.raycast.com/store) that allow you to directly interact with chatGPT from the app launcher, use GitHub, interact with VSCode directly, and more.\n\n![Raycast app launcher](https://assets.roadmap.sh/guest/raycast-app-launcher-w5rg3.png)\n\nWhile it is only available for macOS users, Raycast has become a must-have application for backend developers on this platform. In the end, the faster you can reach for your tools, the more productive you become. And a properly configured Raycast can make your web development process feel like a breeze.\n";
				}
				async function compiledContent$1i() {
					return await html$1i();
				}
				function getHeadings$1i() {
					return [{"depth":2,"slug":"beyond-programming-languages-ides-and-editors","text":"Beyond programming languages: IDEs and Editors"},{"depth":3,"slug":"1-jetbrains-products","text":"1. Jetbrains Products"},{"depth":3,"slug":"2-visual-studio-code","text":"2. Visual Studio Code"},{"depth":3,"slug":"3-zed","text":"3. Zed"},{"depth":3,"slug":"4-sublime-text","text":"4. Sublime Text"},{"depth":3,"slug":"5-vim---a-developer-focused-editor","text":"5. VIM - a developer-focused editor"},{"depth":2,"slug":"database-tools","text":"Database Tools"},{"depth":3,"slug":"6-datagrip","text":"6. DataGrip"},{"depth":3,"slug":"7-navicat","text":"7. Navicat"},{"depth":3,"slug":"8-tableplus","text":"8. TablePlus"},{"depth":3,"slug":"9-dbeaver","text":"9. DBeaver"},{"depth":2,"slug":"collaboration-tools-for-web-development","text":"Collaboration tools for web development"},{"depth":3,"slug":"10-trello","text":"10. Trello"},{"depth":3,"slug":"11-monday","text":"11. Monday"},{"depth":3,"slug":"12-basecamp","text":"12. Basecamp"},{"depth":3,"slug":"13-wrike","text":"13. Wrike"},{"depth":2,"slug":"hosting-services","text":"Hosting Services"},{"depth":3,"slug":"14-railway","text":"14. Railway"},{"depth":3,"slug":"15-heroku","text":"15. Heroku"},{"depth":3,"slug":"16-digital-ocean","text":"16. Digital Ocean"},{"depth":3,"slug":"17-hetzner","text":"17. Hetzner"},{"depth":3,"slug":"18-vercel","text":"18. Vercel"},{"depth":3,"slug":"19-render","text":"19. Render"},{"depth":3,"slug":"20-ovhcloud","text":"20. OVHCloud"},{"depth":2,"slug":"api-related-tools","text":"API-Related Tools"},{"depth":3,"slug":"21-swagger","text":"21. Swagger"},{"depth":3,"slug":"22-postman","text":"22. Postman"},{"depth":2,"slug":"productivity","text":"Productivity"},{"depth":3,"slug":"23-iterm","text":"23. iTerm"},{"depth":3,"slug":"24-zshohmyzsh","text":"24. Zsh/OhMyZsh"},{"depth":3,"slug":"25-raycast","text":"25. Raycast"}];
				}

				const Content$1i = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1i;
					content.file = file$1i;
					content.url = url$1i;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1i())}`;
				});

const __vite_glob_0_16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1i,
	compiledContent: compiledContent$1i,
	default: Content$1i,
	file: file$1i,
	frontmatter: frontmatter$1i,
	getHeadings: getHeadings$1i,
	rawContent: rawContent$1i,
	url: url$1i
}, Symbol.toStringTag, { value: 'Module' }));

const html$1h = () => "<p><img src=\"https://assets.roadmap.sh/guest/top-backend-frameworks-jfpux.jpg\" alt=\"Best backend frameworks\"></p>\n<p>Choosing the right backend framework in 2025 can be crucial when you’re building web applications. While the programming language you pick is important, the backend framework you go with will help define how scalable, secure, and maintainable your application is. It’s the foundation that supports all the features your users interact with on the frontend and keeps everything running smoothly behind the scenes.</p>\n<p>So, it’s a decision you want to get right.</p>\n<p>In 2024, <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development</a> is more complex and interconnected than ever. Developers are working with APIs, microservices, cloud-native architectures, and ensuring high availability while keeping security at the forefront. It’s an era where the demand for real-time data, seamless integrations, and efficient performance is higher than ever.</p>\n<p>Whether you’re building an enterprise-level application or a small startup, the right backend framework can save you time and headaches down the road.</p>\n<p>Let’s take a look at the following top backend development frameworks at the top of all lists for 2024:</p>\n<ul>\n<li>NextJS</li>\n<li>Fastify</li>\n<li>SvelteKit</li>\n<li>Ruby on Rails</li>\n<li>Laravel</li>\n<li>Phoenix</li>\n<li>Actix</li>\n</ul>\n<h2 id=\"criteria-for-evaluating-the-top-backend-frameworks\">Criteria for Evaluating The Top Backend Frameworks</h2>\n<p>How can you determine what “best backend framework” means for you? To answer that question, I’ll define a set of key factors to consider. Let’s break down the most important criteria that will help you make the best choice for your project:</p>\n<p><strong>Performance</strong>:</p>\n<ul>\n<li>A high-performing backend framework processes server-side tasks (e.g., database queries, user sessions, real-time data) quickly and efficiently.</li>\n<li>Faster processing improves user experience, especially in 2025 when speed is critical.</li>\n</ul>\n<p><strong>Scalability</strong>:</p>\n<ul>\n<li>The framework should handle increased traffic, larger datasets, and feature expansion without issues.</li>\n<li>It should smoothly scale for both small and large user bases.</li>\n</ul>\n<p><strong>Flexibility</strong>:</p>\n<ul>\n<li>A flexible framework adapts to new business or technical requirements.</li>\n<li>It should support various project types without locking you into a specific structure.</li>\n</ul>\n<p><strong>Community and Ecosystem</strong>:</p>\n<ul>\n<li>A strong community provides support through tutorials, forums, and third-party tools.</li>\n<li>A good ecosystem includes useful plugins and integrations for popular services or databases.</li>\n</ul>\n<p><strong>Learning Curve</strong>:</p>\n<ul>\n<li>An easy-to-learn framework boosts productivity and helps you get up to speed quickly.</li>\n<li>A framework should balance ease of learning with powerful functionality.</li>\n</ul>\n<p><strong>Security</strong>:</p>\n<ul>\n<li>A reliable framework includes built-in security features to protect user data and prevent vulnerabilities.</li>\n<li>It should help you comply with regulations and address security concerns from the start.</li>\n</ul>\n<p><strong>Future-Proofing</strong>:</p>\n<ul>\n<li>Choose a framework with a history of updates, a clear development roadmap, and a growing community.</li>\n<li>A future-proof framework ensures long-term support and relevance.</li>\n</ul>\n<h3 id=\"my-go-to-backend-framework\">My go-to backend framework</h3>\n<p>My favorite backend framework is Next.js because it has the highest scores from the group.</p>\n<p>That said, I’ve applied the above criteria to the best backend development frameworks I’m covering below in this guide. This table gives you a snapshot view of how they all compare according to my ratings, and I’ll explain the details further below.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-framework-table-nl1iw.png\" alt=\"backend frameworks\"></p>\n<p>Of course, Next.js is the best one for me, and that works for me alone. You have to consider your own projects and your own context to understand what the best choice for you would be.</p>\n<p>Let’s get into the selection and what their strengths and weaknesses are to help you select the right one for you.</p>\n<h2 id=\"top-7-backend-frameworks-in-2025\">Top 7 Backend Frameworks in 2025</h2>\n<h3 id=\"nextjs\">Next.js</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-nextjs-mbn1n.png\" alt=\"NextJS\"></p>\n<p>Next.js is a full-stack React framework and one of the most popular backend frameworks in the JavaScript community. Over the years, it has evolved into a robust web development solution that supports static site generation (SSG), server-side rendering (SSR), and even edge computing. Backed by Vercel, it’s now one of the go-to frameworks for modern web development.</p>\n<h4 id=\"1-performance\">1. Performance</h4>\n<p>Next.js has a wonderful performance thanks to its ability to optimize for both static and dynamic generation. With server-side rendering and support for edge computing, it’s built to handle high-performance requirements. Additionally, automatic code splitting ensures only the necessary parts of the app are loaded, reducing load times.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"2-scalability\">2. Scalability</h4>\n<p>Next.js is designed to scale easily, from small static websites to large-scale dynamic applications. Its ability to turn backend routes into serverless functions puts it at an unfair advantage over other frameworks. Paired with Vercel’s deployment platform, scaling becomes almost effortless.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"3-flexibility\">3. Flexibility</h4>\n<p>Next.js is one of the most flexible frameworks out there. It supports a wide range of use cases, from simple static websites to highly complex full-stack applications. With its API routes feature, developers can create powerful backends, making Next.js suitable for both frontend and backend development in a single framework.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem\">4. Community and Ecosystem</h4>\n<p>The Next.js community (just like the JavaScript community in general)  is large and quite active, with an ever-growing number of plugins, integrations, and third-party tools. The framework has solid documentation and an active ecosystem, thanks to its close ties to both the React community and Vercel’s developer support.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"5-learning-curve\">5. Learning Curve</h4>\n<p>For developers already familiar with React, Next.js provides a relatively smooth learning curve. However, for those new to SSR, SSG or even RSC (React Server Components), there’s a bit of a learning curve as you adapt to these concepts (after all, you’re learning React and backend development at the same time). That said, the framework’s excellent documentation and active community make it easier to grasp.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"6-security\">6. Security</h4>\n<p>Next.js doesn’t inherently have a wide array of built-in security tools, but it follows secure default practices and can be paired with Vercel’s security optimizations for additional protection. Out of the box, Next.js ensures some level of security against common web threats but will need further configuration depending on the app’s complexity.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"7-future-proofing\">7. Future-Proofing</h4>\n<p>Backed by Vercel, Next.js has a bright future. Vercel consistently pushes updates, introduces new features, and improves the overall developer experience. Given its adoption and strong support, Next.js is very future-proof, with no signs of slowing down.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"fastify\">Fastify</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-fastify-3bw4o.png\" alt=\"Fastify\"></p>\n<p>Fastify is a lightweight and fast backend framework for Node.js, often seen as a high-performance alternative to Express.js. It was created with a strong focus on speed, low overhead, and developer-friendly tooling, making it a popular choice for developers building APIs and microservices. Fastify offers a flexible plugin architecture and features like schema-based validation and HTTP/2 support, setting it apart in the Node.js ecosystem.</p>\n<h4 id=\"1-performance-1\">1. Performance</h4>\n<p>Fastify shines when it comes to performance. It’s optimized for handling large amounts of requests with low latency, making it one of the fastest Node.js frameworks available.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"2-scalability-1\">2. Scalability</h4>\n<p>With a strong focus on scalability, Fastify is ideal for handling large applications and high-traffic scenarios. Its lightweight nature ensures that you can build scalable services with minimal resource consumption.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"3-flexibility-1\">3. Flexibility</h4>\n<p>Fastify’s <a href=\"https://fastify.dev/docs/latest/Reference/Plugins/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">plugin architecture</a> is one of its key strengths. This allows developers to easily extend the framework’s capabilities and tailor it to specific use cases, whether you’re building APIs, microservices, or even server-rendered applications.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-1\">4. Community and Ecosystem</h4>\n<p>While Fastify’s community is not as large as Express.js or Next.js, it is steadily growing. The ecosystem of plugins and tools continues to expand, making it easier to find the right tools and libraries to fit your needs. However, its smaller ecosystem means fewer third-party tools compared to some of the more established frameworks.</p>\n<p>⭐ <strong>Rating: 3/5</strong></p>\n<h4 id=\"5-learning-curve-1\">5. Learning Curve</h4>\n<p>If you’re coming from Express.js or another Node.js framework, Fastify’s learning curve is minimal. Its API is designed to be familiar and easy to adopt for Node.js developers. While there are some differences in how Fastify handles things like schema validation and plugins, it’s a relatively smooth transition for most developers.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"6-security-1\">6. Security</h4>\n<p>Fastify incorporates built-in security features such as schema-based validation, which helps prevent vulnerabilities like injection attacks. The framework also supports HTTP/2 out of the box, which provides enhanced security and performance.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"7-future-proofing-1\">7. Future-Proofing</h4>\n<p>Fastify has a strong development roadmap and is <a href=\"https://github.com/fastify/fastify\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">consistently updated</a> with performance improvements and new features. The backing from a growing community and its continued adoption by large-scale applications make Fastify a solid bet for long-term use.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"sveltekit\">SvelteKit</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-sveltekit-9ntqz.png\" alt=\"SvelteKit\"></p>\n<p>SvelteKit is a full-stack framework built on top of Svelte, a front-end compiler that moves much of the heavy lifting to compile time rather than runtime. SvelteKit was designed to simplify building modern web applications by providing server-side rendering (SSR), static site generation (SSG), and support for client-side routing—all in a performance-optimized package. In other words, it’s an alternative to Next.js.</p>\n<h4 id=\"1-performance-2\">1. Performance</h4>\n<p>SvelteKit leverages Svelte compile-time optimizations, resulting in fast runtime performance. Unlike frameworks that rely heavily on virtual DOM diffing, Svelte compiles components to efficient JavaScript code, which means fewer resources are used during rendering.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"2-scalability-2\">2. Scalability</h4>\n<p>While SvelteKit is excellent for small to medium-sized applications, its scalability for enterprise-level applications is still being tested by the developer community. It is possible to scale SvelteKit for larger applications, especially with the right infrastructure and server setup, but it may not yet have the same level of proven scalability as more mature frameworks like Next.js or Fastify.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"3-flexibility-2\">3. Flexibility</h4>\n<p>As with most web frameworks, SvelteKit is highly flexible, allowing developers to build everything from static sites to full-stack robust web applications. It provides SSR out of the box, making it easy to handle front-end and back-end logic in a single codebase. Additionally, it supports various deployment environments like serverless functions or traditional servers.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-2\">4. Community and Ecosystem</h4>\n<p>The SvelteKit community is growing rapidly, and more tools, plugins, and resources are being developed to support it. While the ecosystem isn’t as mature as frameworks like React or Vue, the rate of adoption is promising. The official documentation is well-written, and there’s a growing number of third-party tools, libraries, and guides available for developers to tap into.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"5-learning-curve-2\">5. Learning Curve</h4>\n<p>For developers familiar with Svelte, the transition to SvelteKit is smooth and intuitive. However, if you’re new to Svelte, there is a moderate learning curve, particularly in understanding Svelte’s reactivity model and SvelteKit’s routing and SSR features. Still, the simplicity of Svelte as a framework helps ease the learning process compared to more complex frameworks like React or Angular.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"6-security-2\">6. Security</h4>\n<p>SvelteKit’s security features are still evolving, with basic protections in place but requiring developers to implement best practices to build really secure web applications. There are no significant built-in security tools like in some larger frameworks, so developers need to be cautious and handle aspects like input validation, cross-site scripting (XSS) protection, and CSRF manually.</p>\n<p>⭐ <strong>Rating: 3/5</strong></p>\n<h4 id=\"7-future-proofing-2\">7. Future-Proofing</h4>\n<p>Svelte’s increasing popularity and SvelteKit’s rapid development signal a bright future for the framework. The growing adoption of Svelte, backed by its simplicity and performance, ensures that SvelteKit will continue to be developed and improved in the coming years.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"ruby-on-rails\">Ruby on Rails</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-rails-eg1x0.png\" alt=\"Ruby on Rails\"></p>\n<p>Ruby on Rails (Rails) is a full-stack web development framework written in Ruby, created by David Heinemeier Hansson in 2004. Rails revolutionized web development by promoting “convention over configuration” and allowing developers to rapidly build web applications with fewer lines of code. It</p>\n<h4 id=\"1-performance-3\">1. Performance</h4>\n<p>Rails performs exceptionally well for typical CRUD (Create, Read, Update, Delete) applications, where database operations are straightforward and heavily optimized within the framework. However, as applications grow in complexity or require real-time features, Rails’ performance can become a challenge.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"2-scalability-3\">2. Scalability</h4>\n<p>Rails is often critiqued for its scalability limitations, but it can scale when combined with proper architecture and best practices. Techniques like database sharding, horizontal scaling, and using background jobs for heavy-lifting tasks can help. Still, it’s not the first choice for developers who anticipate massive scale, as it requires careful planning and optimization to avoid performance bottlenecks.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"3-flexibility-3\">3. Flexibility</h4>\n<p>Rails is a great framework for rapid development, especially for standard web applications, such as e-commerce platforms, blogs, or SaaS products. However, it’s less flexible when it comes to non-standard architectures or unique application needs. It’s designed with conventions in mind, so while those conventions help you move fast, they can become restrictive in more unconventional use cases.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-3\">4. Community and Ecosystem</h4>\n<p>Next to JavaScript with NPM, Rails has one of the most mature ecosystems in web development, with a huge repository of gems (libraries) that can help speed up development. From user authentication systems to payment gateways, there’s a gem for almost everything, saving developers from reinventing the wheel. The community is also very active, and there are many resources, tutorials, and tools to support developers at every level.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"5-learning-curve-3\">5. Learning Curve</h4>\n<p>Rails is known for its easy learning curve, especially for those new to web development. The framework’s focus on convention over configuration means that beginners don’t need to make many decisions and can get a functional app up and running quickly. On top of that, Ruby’s readable syntax also makes it approachable for new devs.</p>\n<p>However, as the application grows, mastering the framework’s more advanced concepts and learning how to break through those pre-defined conventions can become a bit of a problem.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"6-security-3\">6. Security</h4>\n<p>Rails comes with a solid set of built-in security features, including protections against SQL injection, XSS (cross-site scripting), and CSRF (cross-site request forgery). By following Rails’ conventions, developers can implement secure practices without much additional work. However, as with any framework, you still need to stay updated on security vulnerabilities and ensure proper coding practices are followed.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"7-future-proofing-3\">7. Future-Proofing</h4>\n<p>While Rails is still highly relevant and widely used, its growth has slowed down from its initial hype during 2010, and it’s no longer the hot, new framework. That said, it remains a solid choice for many businesses, especially those building content-heavy or e-commerce applications. With an established user base and regular updates, Rails is not going anywhere, but its popularity may continue to wane as newer frameworks gain traction.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h3 id=\"laravel\">Laravel</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-laravel-iteyj.png\" alt=\"Laravel\"></p>\n<p>Laravel is a PHP backend framework that was introduced in 2011 by Taylor Otwell. It has since become one of the most popular frameworks in the PHP ecosystem, known for its elegant syntax, ease of use, and focus on developer experience (known to some as the RoR of PHP). Laravel offers a range of built-in tools and features like routing, authentication, and database management, making it ideal for building full-featured web applications quickly.</p>\n<h4 id=\"1-performance-4\">1. Performance</h4>\n<p>Laravel performs well for most typical web applications, especially CRUD operations. However, for larger, more complex applications, performance can be a concern. Using tools like caching, query optimization, and Laravel’s built-in optimization features (such as queue handling and task scheduling) can help boost performance, but some extra work may be required for high-load environments.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"2-scalability-4\">2. Scalability</h4>\n<p>Laravel can scale, but like Rails, it requires careful attention to architecture and infrastructure. By using horizontal scaling techniques, microservices, and services like AWS or Laravel’s Vapor platform, you can build scalable applications. However, Laravel is often seen as better suited for small to medium applications without heavy scaling needs right out of the box.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"3-flexibility-4\">3. Flexibility</h4>\n<p>Laravel is highly flexible, allowing you to build a wide variety of web applications. With built-in features for routing, ORM, middleware, and templating, you can quickly build anything from small websites to enterprise applications.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-4\">4. Community and Ecosystem</h4>\n<p>Contrary to popular belief (mainly due to a lack of hype around the technology), Laravel has a large, active community and a vast ecosystem of packages and third-party tools. With Laracasts, a popular video tutorial platform, and Laravel.io the community portal for Laravel developers, there are many ways to reach out and learn from others.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"5-learning-curve-4\">5. Learning Curve</h4>\n<p>Laravel has a relatively gentle learning curve, especially for developers familiar with PHP. Its focus on simplicity, readable syntax, and built-in features make it easy to pick up for beginners. However, mastering the full list of Laravel’s capabilities and best practices can take some time for more complex projects.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"6-security-4\">6. Security</h4>\n<p>Just like others, Laravel comes with built-in security features, such as protection against common vulnerabilities like SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF). The framework adheres to best security practices, making it easier for developers to build secure applications without much extra effort.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"7-future-proofing-4\">7. Future-proofing</h4>\n<p>Laravel is still highly relevant and continues to grow in popularity (having <a href=\"https://laravel-news.com/laravel-raises-57-million-series-a\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">recently secured a very substantial</a> amount of money). It has a regular release schedule and a strong commitment to maintaining backward compatibility. With its consistent updates, active community, and growing ecosystem, Laravel is a solid choice for long-term projects.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h3 id=\"phoenix\">Phoenix</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/phoenix-logo-5g60a.png\" alt=\"Phoenix\"></p>\n<h4 id=\"overview-and-history\"><strong>Overview and History</strong></h4>\n<p>Phoenix is a backend framework written in Elixir, designed to create high-performance, scalable web applications. It leverages Elixir’s concurrency and fault-tolerant nature (inherited from the Erlang ecosystem) to build real-time, distributed systems.</p>\n<h4 id=\"1-performance-5\">1. Performance</h4>\n<p>Phoenix is known for its outstanding performance, particularly in handling large numbers of simultaneous connections. Thanks to Elixir’s concurrency model and lightweight processes, Phoenix can serve thousands of requests with minimal resource consumption. Real-time applications benefit especially from Phoenix’s built-in WebSockets and its LiveView feature for updating UIs in real-time without the need for JavaScript-heavy frameworks.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"2-scalability-5\">2. Scalability</h4>\n<p>Scalability is one of Phoenix’s biggest features. Because it runs on the Erlang VM, which was designed for distributed, fault-tolerant systems, Phoenix can scale horizontally and vertically with ease.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"3-flexibility-5\">3. Flexibility</h4>\n<p>Phoenix is highly flexible, supporting everything from traditional web applications to real-time applications like chat apps and live updates. Its integration with Elixir’s functional programming paradigm and the BEAM virtual machine allows developers to build fault-tolerant, systems. The flexibility extends to how you can structure applications, scale components, and handle real-time events seamlessly.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-5\">4. Community and Ecosystem</h4>\n<p>Phoenix has a growing and passionate community, but it’s still smaller compared to more established frameworks like Rails or Laravel. However, it benefits from Elixir’s ecosystem, including libraries for testing, real-time applications, and database management. The community is supportive, and the framework’s documentation is detailed and developer-friendly, making it easy to get started.</p>\n<p>⭐ <strong>Rating: 2.5/5</strong></p>\n<h4 id=\"5-learning-curve-5\">5. Learning Curve</h4>\n<p>Phoenix, being built on Elixir, has a steeper learning curve than frameworks based on more common languages like JavaScript or PHP. Elixir’s functional programming model, while powerful, can be challenging for developers unfamiliar with the paradigm.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"6-security-5\">6. Security</h4>\n<p>As with most of the popular backend frameworks, Phoenix comes with strong built-in security features, including protections against common vulnerabilities like XSS, SQL injection, and CSRF. Additionally, because Elixir processes are isolated, Phoenix applications are resilient to many types of attacks. While some manual work is still required to ensure security, Phoenix adheres to best practices and provides tools to help developers write secure code.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"7-future-proofing-5\">7. Future-Proofing</h4>\n<p>Phoenix has a bright future thanks to its solid foundation in the Erlang/Elixir ecosystem, which is known for long-term reliability and support. While the framework might be technologically sound and future-proof, the key to having Elixir in the future will depend on the growth of its popularity. If Elixir’s community keeps growing, we’ll be able to enjoy the framework for a long time.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"actix\">Actix</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/logo-actix-rust-31pi3.png\" alt=\"Actix\"></p>\n<p>Actix is a powerful, high-performance web framework written in Rust. It’s based on the actor model, which is ideal for building concurrent, distributed systems. Actix is known for its incredible performance and memory safety, thanks to Rust’s strict compile-time guarantees.</p>\n<h4 id=\"1-performance-6\">1. Performance</h4>\n<p>Actix is one of the fastest web frameworks available, thanks to Rust’s system-level performance and Actix’s use of asynchronous programming. As it happens with JavaScript-based frameworks, it can handle a large number of requests with minimal overhead, making it ideal for high-performance, real-time applications.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"2-scalability-6\">2. Scalability</h4>\n<p>The actor model makes Actix the best at handling concurrent tasks and scaling across multiple threads or servers. Rust’s memory safety model and Actix’s architecture make it highly efficient in resource usage, meaning applications can scale well without excessive overhead.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"3-flexibility-6\">3. Flexibility</h4>\n<p>Actix is flexible but requires a deeper understanding of Rust’s ownership and concurrency model to fully take advantage of it. It’s great for building both small, fast APIs and large, service architectures. While Actix is powerful, it’s less forgiving compared to other popular backend frameworks like Node.js or Python’s Flask, where rapid prototyping is easier.</p>\n<p>⭐ <strong>Rating: 3/5</strong></p>\n<h4 id=\"4-community-and-ecosystem-6\">4. Community and Ecosystem</h4>\n<p>Rust’s ecosystem, while growing, is still smaller compared to more established languages like JavaScript or Python. However, the Rust community is highly engaged, and support is steadily improving.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"5-learning-curve-6\">5. Learning Curve</h4>\n<p>Actix inherits Rust’s learning curve, which can be steep for developers new to systems programming or Rust’s strict memory management rules. However, for developers already familiar with Rust, Actix can be a great gateway into web development.</p>\n<p>⭐ <strong>Rating: 2/5</strong></p>\n<h4 id=\"6-security-6\">6. Security</h4>\n<p>Rust is known for its memory safety and security guarantees, and Actix benefits from these inherent strengths. Rust’s compile-time checks prevent common security vulnerabilities like null pointer dereferencing, buffer overflows, and data races. While these features tackle one side of the security ecosystem, more relevant ones like web-related vulnerabilities are not tackled by the framework.</p>\n<p>⭐ <strong>Rating: 2.5/5</strong></p>\n<h4 id=\"7-future-proofing-6\"><strong>7. Future-Proofing</strong></h4>\n<p>Rust’s growing popularity and adoption, especially in performance-critical areas, ensure that Actix has a strong future. While Actix’s ecosystem is still developing, the framework is regularly maintained and benefits from Rust’s long-term stability.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Choosing the right backend framework is a critical decision that can shape the future of your project. In 2024, developers have more powerful options than ever, from popular backend frameworks like Ruby on Rails, Laravel or Next.js to high-performance focused, like Fastify, SvelteKit, Phoenix, and Actix. Each framework has its own strengths, making it essential to consider factors such as performance, scalability, flexibility, and the learning curve to ensure you pick the right tool for the job.</p>\n<p>Ultimately, there’s no proverbial silver bullet that solves all your problems. Your choice will depend on your project’s needs, your team’s expertise, and the long-term goals of your application.</p>\n<p>So take your time, weigh the pros and cons, and pick the framework that aligns best with your vision for the future.</p>";

				const frontmatter$1h = {"title":"Top 7 Backend Frameworks to Use in 2025: Pro Advice","description":"Get expert advice on backend frameworks for 2024. Learn about the top 7 frameworks that can elevate your development process.","authorId":"fernando","excludedBySlug":"/backend/frameworks","seo":{"title":"Top 7 Backend Frameworks to Use in 2025: Pro Advice","description":"Get expert advice on backend frameworks for 2024. Learn about the top 7 frameworks that can elevate your development process.","ogImageUrl":"https://assets.roadmap.sh/guest/top-backend-frameworks-jfpux.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-09-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1h = "/workspace/src/data/guides/backend-frameworks.md";
				const url$1h = undefined;
				function rawContent$1h() {
					return "   \n                                                            \n                                                                                                                                            \n                  \n                                     \n    \n                                                              \n                                                                                                                                              \n                                                                                \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Best backend frameworks](https://assets.roadmap.sh/guest/top-backend-frameworks-jfpux.jpg)\n\nChoosing the right backend framework in 2025 can be crucial when you’re building web applications. While the programming language you pick is important, the backend framework you go with will help define how scalable, secure, and maintainable your application is. It’s the foundation that supports all the features your users interact with on the frontend and keeps everything running smoothly behind the scenes.\n\nSo, it’s a decision you want to get right.\n\nIn 2024, [backend development](https://roadmap.sh/backend) is more complex and interconnected than ever. Developers are working with APIs, microservices, cloud-native architectures, and ensuring high availability while keeping security at the forefront. It’s an era where the demand for real-time data, seamless integrations, and efficient performance is higher than ever.\n\nWhether you're building an enterprise-level application or a small startup, the right backend framework can save you time and headaches down the road.\n\nLet’s take a look at the following top backend development frameworks at the top of all lists for 2024:\n\n* NextJS\n* Fastify\n* SvelteKit\n* Ruby on Rails\n* Laravel\n* Phoenix\n* Actix\n\n## Criteria for Evaluating The Top Backend Frameworks\n\nHow can you determine what “best backend framework” means for you? To answer that question, I’ll define a set of key factors to consider. Let’s break down the most important criteria that will help you make the best choice for your project:\n\n**Performance**:\n\n* A high-performing backend framework processes server-side tasks (e.g., database queries, user sessions, real-time data) quickly and efficiently.\n* Faster processing improves user experience, especially in 2025 when speed is critical.\n\n**Scalability**:\n\n* The framework should handle increased traffic, larger datasets, and feature expansion without issues.\n* It should smoothly scale for both small and large user bases.\n\n**Flexibility**:\n\n* A flexible framework adapts to new business or technical requirements.\n* It should support various project types without locking you into a specific structure.\n\n**Community and Ecosystem**:\n\n* A strong community provides support through tutorials, forums, and third-party tools.\n* A good ecosystem includes useful plugins and integrations for popular services or databases.\n\n**Learning Curve**:\n\n* An easy-to-learn framework boosts productivity and helps you get up to speed quickly.\n* A framework should balance ease of learning with powerful functionality.\n\n**Security**:\n\n* A reliable framework includes built-in security features to protect user data and prevent vulnerabilities.\n* It should help you comply with regulations and address security concerns from the start.\n\n**Future-Proofing**:\n\n* Choose a framework with a history of updates, a clear development roadmap, and a growing community.\n* A future-proof framework ensures long-term support and relevance.\n\n### My go-to backend framework\n\nMy favorite backend framework is Next.js because it has the highest scores from the group.\n\nThat said, I’ve applied the above criteria to the best backend development frameworks I’m covering below in this guide. This table gives you a snapshot view of how they all compare according to my ratings, and I’ll explain the details further below.\n\n![backend frameworks](https://assets.roadmap.sh/guest/backend-framework-table-nl1iw.png)\n\nOf course, Next.js is the best one for me, and that works for me alone. You have to consider your own projects and your own context to understand what the best choice for you would be.\n\nLet’s get into the selection and what their strengths and weaknesses are to help you select the right one for you.\n\n## Top 7 Backend Frameworks in 2025\n\n### Next.js\n\n![NextJS](https://assets.roadmap.sh/guest/logo-nextjs-mbn1n.png)\n\nNext.js is a full-stack React framework and one of the most popular backend frameworks in the JavaScript community. Over the years, it has evolved into a robust web development solution that supports static site generation (SSG), server-side rendering (SSR), and even edge computing. Backed by Vercel, it’s now one of the go-to frameworks for modern web development.\n\n#### 1\\. Performance\n\nNext.js has a wonderful performance thanks to its ability to optimize for both static and dynamic generation. With server-side rendering and support for edge computing, it's built to handle high-performance requirements. Additionally, automatic code splitting ensures only the necessary parts of the app are loaded, reducing load times.\n\n⭐ **Rating: 5/5**\n\n#### 2\\. Scalability\n\nNext.js is designed to scale easily, from small static websites to large-scale dynamic applications. Its ability to turn backend routes into serverless functions puts it at an unfair advantage over other frameworks. Paired with Vercel’s deployment platform, scaling becomes almost effortless.\n\n⭐ **Rating: 5/5**\n\n#### 3\\. Flexibility\n\nNext.js is one of the most flexible frameworks out there. It supports a wide range of use cases, from simple static websites to highly complex full-stack applications. With its API routes feature, developers can create powerful backends, making Next.js suitable for both frontend and backend development in a single framework.\n\n⭐ **Rating: 5/5**\n\n#### 4\\. Community and Ecosystem\n\nThe Next.js community (just like the JavaScript community in general)  is large and quite active, with an ever-growing number of plugins, integrations, and third-party tools. The framework has solid documentation and an active ecosystem, thanks to its close ties to both the React community and Vercel’s developer support.\n\n⭐ **Rating: 5/5**\n\n#### 5\\. Learning Curve\n\nFor developers already familiar with React, Next.js provides a relatively smooth learning curve. However, for those new to SSR, SSG or even RSC (React Server Components), there’s a bit of a learning curve as you adapt to these concepts (after all, you’re learning React and backend development at the same time). That said, the framework's excellent documentation and active community make it easier to grasp.\n\n⭐ **Rating: 4/5**\n\n#### 6\\. Security\n\nNext.js doesn’t inherently have a wide array of built-in security tools, but it follows secure default practices and can be paired with Vercel’s security optimizations for additional protection. Out of the box, Next.js ensures some level of security against common web threats but will need further configuration depending on the app's complexity.\n\n⭐ **Rating: 3.5/5**\n\n#### 7\\. Future-Proofing\n\nBacked by Vercel, Next.js has a bright future. Vercel consistently pushes updates, introduces new features, and improves the overall developer experience. Given its adoption and strong support, Next.js is very future-proof, with no signs of slowing down.\n\n⭐ **Rating: 5/5**\n\n### Fastify\n\n![Fastify](https://assets.roadmap.sh/guest/logo-fastify-3bw4o.png)\n\nFastify is a lightweight and fast backend framework for Node.js, often seen as a high-performance alternative to Express.js. It was created with a strong focus on speed, low overhead, and developer-friendly tooling, making it a popular choice for developers building APIs and microservices. Fastify offers a flexible plugin architecture and features like schema-based validation and HTTP/2 support, setting it apart in the Node.js ecosystem.\n\n#### 1\\. Performance\n\nFastify shines when it comes to performance. It’s optimized for handling large amounts of requests with low latency, making it one of the fastest Node.js frameworks available.\n\n⭐ **Rating: 5/5**\n\n#### 2\\. Scalability\n\nWith a strong focus on scalability, Fastify is ideal for handling large applications and high-traffic scenarios. Its lightweight nature ensures that you can build scalable services with minimal resource consumption.\n\n⭐ **Rating: 5/5**\n\n#### 3\\. Flexibility\n\nFastify’s [plugin architecture](https://fastify.dev/docs/latest/Reference/Plugins/) is one of its key strengths. This allows developers to easily extend the framework’s capabilities and tailor it to specific use cases, whether you’re building APIs, microservices, or even server-rendered applications.\n\n⭐ **Rating: 5/5**\n\n#### 4\\. Community and Ecosystem\n\nWhile Fastify’s community is not as large as Express.js or Next.js, it is steadily growing. The ecosystem of plugins and tools continues to expand, making it easier to find the right tools and libraries to fit your needs. However, its smaller ecosystem means fewer third-party tools compared to some of the more established frameworks.\n\n⭐ **Rating: 3/5**\n\n#### 5\\. Learning Curve\n\nIf you’re coming from Express.js or another Node.js framework, Fastify’s learning curve is minimal. Its API is designed to be familiar and easy to adopt for Node.js developers. While there are some differences in how Fastify handles things like schema validation and plugins, it’s a relatively smooth transition for most developers.\n\n⭐ **Rating: 4/5**\n\n#### 6\\. Security\n\nFastify incorporates built-in security features such as schema-based validation, which helps prevent vulnerabilities like injection attacks. The framework also supports HTTP/2 out of the box, which provides enhanced security and performance.\n\n⭐ **Rating: 4/5**\n\n#### 7\\. Future-Proofing\n\nFastify has a strong development roadmap and is [consistently updated](https://github.com/fastify/fastify) with performance improvements and new features. The backing from a growing community and its continued adoption by large-scale applications make Fastify a solid bet for long-term use.\n\n⭐ **Rating: 5/5**\n\n### SvelteKit\n\n![SvelteKit](https://assets.roadmap.sh/guest/logo-sveltekit-9ntqz.png)\n\nSvelteKit is a full-stack framework built on top of Svelte, a front-end compiler that moves much of the heavy lifting to compile time rather than runtime. SvelteKit was designed to simplify building modern web applications by providing server-side rendering (SSR), static site generation (SSG), and support for client-side routing—all in a performance-optimized package. In other words, it’s an alternative to Next.js.\n\n#### 1\\. Performance\n\nSvelteKit leverages Svelte compile-time optimizations, resulting in fast runtime performance. Unlike frameworks that rely heavily on virtual DOM diffing, Svelte compiles components to efficient JavaScript code, which means fewer resources are used during rendering.\n\n⭐ **Rating: 5/5**\n\n#### 2\\. Scalability\n\nWhile SvelteKit is excellent for small to medium-sized applications, its scalability for enterprise-level applications is still being tested by the developer community. It is possible to scale SvelteKit for larger applications, especially with the right infrastructure and server setup, but it may not yet have the same level of proven scalability as more mature frameworks like Next.js or Fastify.\n\n⭐ **Rating: 4/5**\n\n#### 3\\. Flexibility\n\nAs with most web frameworks, SvelteKit is highly flexible, allowing developers to build everything from static sites to full-stack robust web applications. It provides SSR out of the box, making it easy to handle front-end and back-end logic in a single codebase. Additionally, it supports various deployment environments like serverless functions or traditional servers.\n\n⭐ **Rating: 5/5**\n\n#### 4\\. Community and Ecosystem\n\nThe SvelteKit community is growing rapidly, and more tools, plugins, and resources are being developed to support it. While the ecosystem isn’t as mature as frameworks like React or Vue, the rate of adoption is promising. The official documentation is well-written, and there’s a growing number of third-party tools, libraries, and guides available for developers to tap into.\n\n⭐ **Rating: 3.5/5**\n\n#### 5\\. Learning Curve\n\nFor developers familiar with Svelte, the transition to SvelteKit is smooth and intuitive. However, if you're new to Svelte, there is a moderate learning curve, particularly in understanding Svelte’s reactivity model and SvelteKit's routing and SSR features. Still, the simplicity of Svelte as a framework helps ease the learning process compared to more complex frameworks like React or Angular.\n\n⭐ **Rating: 4/5**\n\n#### 6\\. Security\n\nSvelteKit’s security features are still evolving, with basic protections in place but requiring developers to implement best practices to build really secure web applications. There are no significant built-in security tools like in some larger frameworks, so developers need to be cautious and handle aspects like input validation, cross-site scripting (XSS) protection, and CSRF manually.\n\n⭐ **Rating: 3/5**\n\n#### 7\\. Future-Proofing\n\nSvelte’s increasing popularity and SvelteKit’s rapid development signal a bright future for the framework. The growing adoption of Svelte, backed by its simplicity and performance, ensures that SvelteKit will continue to be developed and improved in the coming years.\n\n⭐ **Rating: 5/5**\n\n### Ruby on Rails\n\n![Ruby on Rails](https://assets.roadmap.sh/guest/logo-rails-eg1x0.png)\n\nRuby on Rails (Rails) is a full-stack web development framework written in Ruby, created by David Heinemeier Hansson in 2004\\. Rails revolutionized web development by promoting \"convention over configuration\" and allowing developers to rapidly build web applications with fewer lines of code. It\n\n#### 1\\. Performance\n\nRails performs exceptionally well for typical CRUD (Create, Read, Update, Delete) applications, where database operations are straightforward and heavily optimized within the framework. However, as applications grow in complexity or require real-time features, Rails’ performance can become a challenge.\n\n⭐ **Rating: 3.5/5**\n\n#### 2\\. Scalability\n\nRails is often critiqued for its scalability limitations, but it can scale when combined with proper architecture and best practices. Techniques like database sharding, horizontal scaling, and using background jobs for heavy-lifting tasks can help. Still, it’s not the first choice for developers who anticipate massive scale, as it requires careful planning and optimization to avoid performance bottlenecks.\n\n⭐ **Rating: 3.5/5**\n\n#### 3\\. Flexibility\n\nRails is a great framework for rapid development, especially for standard web applications, such as e-commerce platforms, blogs, or SaaS products. However, it’s less flexible when it comes to non-standard architectures or unique application needs. It’s designed with conventions in mind, so while those conventions help you move fast, they can become restrictive in more unconventional use cases.\n\n⭐ **Rating: 3.5/5**\n\n#### 4\\. Community and Ecosystem\n\nNext to JavaScript with NPM, Rails has one of the most mature ecosystems in web development, with a huge repository of gems (libraries) that can help speed up development. From user authentication systems to payment gateways, there’s a gem for almost everything, saving developers from reinventing the wheel. The community is also very active, and there are many resources, tutorials, and tools to support developers at every level.\n\n⭐ **Rating: 5/5**\n\n#### 5\\. Learning Curve\n\nRails is known for its easy learning curve, especially for those new to web development. The framework’s focus on convention over configuration means that beginners don’t need to make many decisions and can get a functional app up and running quickly. On top of that, Ruby’s readable syntax also makes it approachable for new devs.\n\nHowever, as the application grows, mastering the framework’s more advanced concepts and learning how to break through those pre-defined conventions can become a bit of a problem.\n\n⭐ **Rating: 4/5**\n\n#### 6\\. Security\n\nRails comes with a solid set of built-in security features, including protections against SQL injection, XSS (cross-site scripting), and CSRF (cross-site request forgery). By following Rails' conventions, developers can implement secure practices without much additional work. However, as with any framework, you still need to stay updated on security vulnerabilities and ensure proper coding practices are followed.\n\n⭐ **Rating: 4.5/5**\n\n#### 7\\. Future-Proofing\n\nWhile Rails is still highly relevant and widely used, its growth has slowed down from its initial hype during 2010, and it’s no longer the hot, new framework. That said, it remains a solid choice for many businesses, especially those building content-heavy or e-commerce applications. With an established user base and regular updates, Rails is not going anywhere, but its popularity may continue to wane as newer frameworks gain traction.\n\n⭐ **Rating: 4/5**\n\n### Laravel\n\n![Laravel](https://assets.roadmap.sh/guest/logo-laravel-iteyj.png)\n\nLaravel is a PHP backend framework that was introduced in 2011 by Taylor Otwell. It has since become one of the most popular frameworks in the PHP ecosystem, known for its elegant syntax, ease of use, and focus on developer experience (known to some as the RoR of PHP). Laravel offers a range of built-in tools and features like routing, authentication, and database management, making it ideal for building full-featured web applications quickly.\n\n#### 1\\. Performance\n\nLaravel performs well for most typical web applications, especially CRUD operations. However, for larger, more complex applications, performance can be a concern. Using tools like caching, query optimization, and Laravel’s built-in optimization features (such as queue handling and task scheduling) can help boost performance, but some extra work may be required for high-load environments.\n\n⭐ **Rating: 4/5**\n\n#### 2\\. Scalability\n\nLaravel can scale, but like Rails, it requires careful attention to architecture and infrastructure. By using horizontal scaling techniques, microservices, and services like AWS or Laravel’s Vapor platform, you can build scalable applications. However, Laravel is often seen as better suited for small to medium applications without heavy scaling needs right out of the box.\n\n⭐ **Rating: 3.5/5**\n\n#### 3\\. Flexibility\n\nLaravel is highly flexible, allowing you to build a wide variety of web applications. With built-in features for routing, ORM, middleware, and templating, you can quickly build anything from small websites to enterprise applications.\n\n⭐ **Rating: 5/5**\n\n#### 4\\. Community and Ecosystem\n\nContrary to popular belief (mainly due to a lack of hype around the technology), Laravel has a large, active community and a vast ecosystem of packages and third-party tools. With Laracasts, a popular video tutorial platform, and Laravel.io the community portal for Laravel developers, there are many ways to reach out and learn from others.\n\n⭐ **Rating: 5/5**\n\n#### 5\\. Learning Curve\n\nLaravel has a relatively gentle learning curve, especially for developers familiar with PHP. Its focus on simplicity, readable syntax, and built-in features make it easy to pick up for beginners. However, mastering the full list of Laravel’s capabilities and best practices can take some time for more complex projects.\n\n⭐ **Rating: 4.5/5**\n\n#### 6\\. Security\n\nJust like others, Laravel comes with built-in security features, such as protection against common vulnerabilities like SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF). The framework adheres to best security practices, making it easier for developers to build secure applications without much extra effort.\n\n⭐ **Rating: 4.5/5**\n\n#### 7\\. Future-proofing\n\nLaravel is still highly relevant and continues to grow in popularity (having [recently secured a very substantial](https://laravel-news.com/laravel-raises-57-million-series-a) amount of money). It has a regular release schedule and a strong commitment to maintaining backward compatibility. With its consistent updates, active community, and growing ecosystem, Laravel is a solid choice for long-term projects.\n\n⭐ **Rating: 4.5/5**\n\n### Phoenix\n\n![Phoenix](https://assets.roadmap.sh/guest/phoenix-logo-5g60a.png)\n\n#### **Overview and History**\n\nPhoenix is a backend framework written in Elixir, designed to create high-performance, scalable web applications. It leverages Elixir's concurrency and fault-tolerant nature (inherited from the Erlang ecosystem) to build real-time, distributed systems.\n\n#### 1\\. Performance\n\nPhoenix is known for its outstanding performance, particularly in handling large numbers of simultaneous connections. Thanks to Elixir’s concurrency model and lightweight processes, Phoenix can serve thousands of requests with minimal resource consumption. Real-time applications benefit especially from Phoenix’s built-in WebSockets and its LiveView feature for updating UIs in real-time without the need for JavaScript-heavy frameworks.\n\n⭐ **Rating: 5/5**\n\n#### 2\\. Scalability\n\nScalability is one of Phoenix’s biggest features. Because it runs on the Erlang VM, which was designed for distributed, fault-tolerant systems, Phoenix can scale horizontally and vertically with ease.\n\n⭐ **Rating: 5/5**\n\n#### 3\\. Flexibility\n\nPhoenix is highly flexible, supporting everything from traditional web applications to real-time applications like chat apps and live updates. Its integration with Elixir’s functional programming paradigm and the BEAM virtual machine allows developers to build fault-tolerant, systems. The flexibility extends to how you can structure applications, scale components, and handle real-time events seamlessly.\n\n⭐ **Rating: 5/5**\n\n#### 4\\. Community and Ecosystem\n\nPhoenix has a growing and passionate community, but it’s still smaller compared to more established frameworks like Rails or Laravel. However, it benefits from Elixir’s ecosystem, including libraries for testing, real-time applications, and database management. The community is supportive, and the framework’s documentation is detailed and developer-friendly, making it easy to get started.\n\n⭐ **Rating: 2.5/5**\n\n#### 5\\. Learning Curve\n\nPhoenix, being built on Elixir, has a steeper learning curve than frameworks based on more common languages like JavaScript or PHP. Elixir’s functional programming model, while powerful, can be challenging for developers unfamiliar with the paradigm.\n\n⭐ **Rating: 3.5/5**\n\n#### 6\\. Security\n\nAs with most of the popular backend frameworks, Phoenix comes with strong built-in security features, including protections against common vulnerabilities like XSS, SQL injection, and CSRF. Additionally, because Elixir processes are isolated, Phoenix applications are resilient to many types of attacks. While some manual work is still required to ensure security, Phoenix adheres to best practices and provides tools to help developers write secure code.\n\n⭐ **Rating: 4.5/5**\n\n#### 7\\. Future-Proofing\n\nPhoenix has a bright future thanks to its solid foundation in the Erlang/Elixir ecosystem, which is known for long-term reliability and support. While the framework might be technologically sound and future-proof, the key to having Elixir in the future will depend on the growth of its popularity. If Elixir’s community keeps growing, we’ll be able to enjoy the framework for a long time.\n\n⭐ **Rating: 5/5**\n\n### Actix\n\n![Actix](https://assets.roadmap.sh/guest/logo-actix-rust-31pi3.png)\n\nActix is a powerful, high-performance web framework written in Rust. It’s based on the actor model, which is ideal for building concurrent, distributed systems. Actix is known for its incredible performance and memory safety, thanks to Rust’s strict compile-time guarantees.\n\n#### 1\\. Performance\n\nActix is one of the fastest web frameworks available, thanks to Rust’s system-level performance and Actix’s use of asynchronous programming. As it happens with JavaScript-based frameworks, it can handle a large number of requests with minimal overhead, making it ideal for high-performance, real-time applications.\n\n⭐ **Rating: 5/5**\n\n#### 2\\. Scalability\n\nThe actor model makes Actix the best at handling concurrent tasks and scaling across multiple threads or servers. Rust’s memory safety model and Actix’s architecture make it highly efficient in resource usage, meaning applications can scale well without excessive overhead.\n\n⭐ **Rating: 5/5**\n\n#### 3\\. Flexibility\n\nActix is flexible but requires a deeper understanding of Rust’s ownership and concurrency model to fully take advantage of it. It’s great for building both small, fast APIs and large, service architectures. While Actix is powerful, it’s less forgiving compared to other popular backend frameworks like Node.js or Python’s Flask, where rapid prototyping is easier.\n\n⭐ **Rating: 3/5**\n\n#### 4\\. Community and Ecosystem\n\nRust’s ecosystem, while growing, is still smaller compared to more established languages like JavaScript or Python. However, the Rust community is highly engaged, and support is steadily improving.\n\n⭐ **Rating: 3.5/5**\n\n#### 5\\. Learning Curve\n\nActix inherits Rust’s learning curve, which can be steep for developers new to systems programming or Rust’s strict memory management rules. However, for developers already familiar with Rust, Actix can be a great gateway into web development.\n\n⭐ **Rating: 2/5**\n\n#### 6\\. Security\n\nRust is known for its memory safety and security guarantees, and Actix benefits from these inherent strengths. Rust’s compile-time checks prevent common security vulnerabilities like null pointer dereferencing, buffer overflows, and data races. While these features tackle one side of the security ecosystem, more relevant ones like web-related vulnerabilities are not tackled by the framework.\n\n⭐ **Rating: 2.5/5**\n\n#### **7\\. Future-Proofing**\n\nRust’s growing popularity and adoption, especially in performance-critical areas, ensure that Actix has a strong future. While Actix’s ecosystem is still developing, the framework is regularly maintained and benefits from Rust’s long-term stability.\n\n⭐ **Rating: 4.5/5**\n\n## Conclusion\n\nChoosing the right backend framework is a critical decision that can shape the future of your project. In 2024, developers have more powerful options than ever, from popular backend frameworks like Ruby on Rails, Laravel or Next.js to high-performance focused, like Fastify, SvelteKit, Phoenix, and Actix. Each framework has its own strengths, making it essential to consider factors such as performance, scalability, flexibility, and the learning curve to ensure you pick the right tool for the job.\n\nUltimately, there’s no proverbial silver bullet that solves all your problems. Your choice will depend on your project’s needs, your team's expertise, and the long-term goals of your application.\n\nSo take your time, weigh the pros and cons, and pick the framework that aligns best with your vision for the future.";
				}
				async function compiledContent$1h() {
					return await html$1h();
				}
				function getHeadings$1h() {
					return [{"depth":2,"slug":"criteria-for-evaluating-the-top-backend-frameworks","text":"Criteria for Evaluating The Top Backend Frameworks"},{"depth":3,"slug":"my-go-to-backend-framework","text":"My go-to backend framework"},{"depth":2,"slug":"top-7-backend-frameworks-in-2025","text":"Top 7 Backend Frameworks in 2025"},{"depth":3,"slug":"nextjs","text":"Next.js"},{"depth":4,"slug":"1-performance","text":"1. Performance"},{"depth":4,"slug":"2-scalability","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve","text":"5. Learning Curve"},{"depth":4,"slug":"6-security","text":"6. Security"},{"depth":4,"slug":"7-future-proofing","text":"7. Future-Proofing"},{"depth":3,"slug":"fastify","text":"Fastify"},{"depth":4,"slug":"1-performance-1","text":"1. Performance"},{"depth":4,"slug":"2-scalability-1","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-1","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-1","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-1","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-1","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-1","text":"7. Future-Proofing"},{"depth":3,"slug":"sveltekit","text":"SvelteKit"},{"depth":4,"slug":"1-performance-2","text":"1. Performance"},{"depth":4,"slug":"2-scalability-2","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-2","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-2","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-2","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-2","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-2","text":"7. Future-Proofing"},{"depth":3,"slug":"ruby-on-rails","text":"Ruby on Rails"},{"depth":4,"slug":"1-performance-3","text":"1. Performance"},{"depth":4,"slug":"2-scalability-3","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-3","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-3","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-3","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-3","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-3","text":"7. Future-Proofing"},{"depth":3,"slug":"laravel","text":"Laravel"},{"depth":4,"slug":"1-performance-4","text":"1. Performance"},{"depth":4,"slug":"2-scalability-4","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-4","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-4","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-4","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-4","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-4","text":"7. Future-proofing"},{"depth":3,"slug":"phoenix","text":"Phoenix"},{"depth":4,"slug":"overview-and-history","text":"Overview and History"},{"depth":4,"slug":"1-performance-5","text":"1. Performance"},{"depth":4,"slug":"2-scalability-5","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-5","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-5","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-5","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-5","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-5","text":"7. Future-Proofing"},{"depth":3,"slug":"actix","text":"Actix"},{"depth":4,"slug":"1-performance-6","text":"1. Performance"},{"depth":4,"slug":"2-scalability-6","text":"2. Scalability"},{"depth":4,"slug":"3-flexibility-6","text":"3. Flexibility"},{"depth":4,"slug":"4-community-and-ecosystem-6","text":"4. Community and Ecosystem"},{"depth":4,"slug":"5-learning-curve-6","text":"5. Learning Curve"},{"depth":4,"slug":"6-security-6","text":"6. Security"},{"depth":4,"slug":"7-future-proofing-6","text":"7. Future-Proofing"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$1h = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1h;
					content.file = file$1h;
					content.url = url$1h;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1h())}`;
				});

const __vite_glob_0_17 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1h,
	compiledContent: compiledContent$1h,
	default: Content$1h,
	file: file$1h,
	frontmatter: frontmatter$1h,
	getHeadings: getHeadings$1h,
	rawContent: rawContent$1h,
	url: url$1h
}, Symbol.toStringTag, { value: 'Module' }));

const html$1g = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-job-description-nn3ja.png\" alt=\"Backend developer job description example and template.\"></p>\n<p>Hiring the right candidate for a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend engineering</a> role requires identifying individuals who possess the necessary technical and soft skills and align with your organization’s values. Selecting the right candidate can be challenging with a high volume of applications.</p>\n<p>Knowing what to prioritize when evaluating candidates is necessary for choosing the best fit for this role. In this guide, I’ll outline the key skills and qualities I focus on as a hiring manager when hiring a backend engineer.</p>\n<p>Here is a summary of the backend developer job description:</p>\n<ul>\n<li>Design, develop, and maintain highly performant, reliable, scalable, and secure backend systems and server side logic.</li>\n<li>Oversee projects from conception to deployment, ensuring smooth execution and delivery to create a great and on-brand user experience.</li>\n<li>Maintain and optimize the backend infrastructure to meet evolving project needs.</li>\n<li>Collaborate with front-end developers to integrate user-facing elements with server-side logic.</li>\n<li>Write clean, standardized, maintainable, testable, and reusable backend code to solve business and technical problems.</li>\n</ul>\n<p>Let’s look at the backend engineer role in more detail.</p>\n<h2 id=\"backend-engineer-job-description-template\">Backend engineer job description template</h2>\n<p>The job description of a backend developer differs depending on the team, project, or organization. Based on my experience as a backend engineer recruiter, here is a sample job description template that outlines the key skills and qualifications hiring managers look for in potential candidates:</p>\n<p><strong>Job title: Backend Engineer</strong></p>\n<p><strong>Company:</strong> [Company Name]</p>\n<p><strong>Location:</strong> [Location, region, hybrid,  or remote]</p>\n<p><strong>Job Type:</strong> [Full-time, Part-time, or Contract].</p>\n<p><strong>About us</strong>\n[Give a brief introduction of your company and what you do].</p>\n<p><strong>Job Description</strong>\n<strong>[Company Name]</strong> is looking for experienced backend engineers who are passionate about building scalable, efficient, and reliable server-side applications. This role requires strong proficiency in server-side languages (such as Python, Java, or Node.js), databases (SQL, NoSQL), and API development. The ideal candidate will have a solid understanding of backend architecture, security best practices, and cloud technologies to support modern applications.</p>\n<p>Collaboration with frontend developers, designers, product managers, and other teams is key to this role, so strong communication skills are important. We are looking for strong problem solvers who can apply their engineering skills across different platforms and environments to deliver the best possible experience for customers and internal users.</p>\n<p><strong>Responsibilities</strong></p>\n<ul>\n<li>Take ownership of the design, architecture, development, deployment and operations of microservices you will develop, using DevOps practices, pair programming and other cutting-edge methodologies.</li>\n<li>Promote a highly collaborative environment with other product team members.</li>\n<li>Participate in regular technical forums to share knowledge with other engineers.</li>\n<li>Be an active member of cross-functional agile teams collaborating with product owners, frontend developers, designers, and business intelligence teams.</li>\n<li>Build the server side logic of our web application.</li>\n</ul>\n<p><strong>Requirements</strong></p>\n<ul>\n<li>Solid backend experience with microservice and distributed event-driven architectural patterns</li>\n<li>Degree in computer science or any related discipline.</li>\n<li>Professional experience with one backend programming language, e.g., Python, C#, Java</li>\n<li>Experience working with docker and containerization technologies such as Kubernetes.</li>\n<li>A deep understanding of continuous integration and continuous delivery.</li>\n<li>Practical experience in applying advanced design concepts such as Domain Driven Design (DDD), Object Oriented Programming (OOP).</li>\n<li>Strong communication and collaboration skills.</li>\n</ul>\n<p><strong>What we offer</strong>\n[Itemize the different perks you offer, for example, training allowance, competitive salary, home office setup, etc.].</p>\n<p><strong>How to apply</strong>\nIf this role excites you, please submit your resume and cover letter to <strong>[contact email or link to</strong> <strong>job</strong> <strong>portal]</strong>.</p>\n<p>You have seen what a sample backend engineer job advert looks like; now, let’s have a detailed look at a backend developer’s responsibilities.</p>\n<h2 id=\"key-backend-developer-responsibilities\">Key backend developer responsibilities</h2>\n<p>The roles and responsibilities of a backend engineer could vary depending on the project requirements, company size, or team structure. However, there are typical roles and responsibilities that cut across board. They include:</p>\n<ul>\n<li>Server-side development</li>\n<li>Application Programming Interface (API) development</li>\n<li>Database administration and management</li>\n<li>Performance optimization</li>\n<li>Integration of third-party services</li>\n<li>Testing</li>\n<li>Documentation</li>\n<li>Collaboration</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-engineer-responsibilities.jpg\" alt=\"Back-end engineer responsibilities\"></p>\n<p>Typical projects that backend developers work on include:</p>\n<ul>\n<li>RESTful APIs that perform CRUD operations.</li>\n<li>Building web scraping and data processing services.</li>\n<li>Building image processing services.</li>\n<li>Designing and implementing content delivery networks (CDNs).</li>\n<li>Modeling and designing database systems.</li>\n</ul>\n<p>Let’s look at their individual responsibilities in detail:</p>\n<h3 id=\"server-side-development\">Server-side development</h3>\n<p>This is one of the core responsibilities of a backend developer. It involves writing server-side web application logic to handle requests from the frontend, communicate with database systems, and handle an application’s business and backend logic.</p>\n<h3 id=\"api-development\">API development</h3>\n<p>A backend developer designs, implements, and maintains APIs for communicating between different services or parts of an application and with external systems. This involves creating endpoints, responding to requests, and ensuring API security. <a href=\"https://swagger.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Swagger</a> is a standard tool used by backend engineers to design and document APIs.</p>\n<h3 id=\"database-administration-and-management\">Database administration and management</h3>\n<p>Data plays a central role in software and application development. A backend developer decides how and where to store these data. Databases are one of the most used data storage solutions, and a backend developer designs and maintains them for efficient data management. The tasks here include deciding which databases to use, either <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> or NoSQL databases, also known as document databases, choosing the right Object Relation Mapper (ORM) for mapping objects to a database, writing efficient queries, optimizing database performance, and ensuring data security.</p>\n<h3 id=\"performance-optimization\">Performance optimization</h3>\n<p>Backend engineers continually look for ways to optimize performance. They identify performance bottlenecks such as slow database queries, poor code quality, and high application latency and work towards resolving them. This involves refactoring to ensure high-quality reusable code, updating dependencies, redesigning the database schema, etc.</p>\n<h3 id=\"integration-of-third-party-services\">Integration of third-party services</h3>\n<p>Some applications integrate with third-party web services or APIs to perform specific tasks. Some of these third-party services include payment gateways, cloud services such as Google Cloud and <a href=\"https://roadmap.sh/aws\" target=\"_blank\">Amazon Web Services</a>, and user authentication services, such as Auth0. Backend engineers integrate these external services into an application.</p>\n<h3 id=\"testing-and-bug-fixing\">Testing and bug fixing</h3>\n<p>Backend engineers write unit, integration, and end-to-end tests to ensure system reliability. These tests help to keep the system <em>up</em> and bug-free during continuous development. Troubleshooting and fixing are also part of a backend engineer’s primary responsibility.</p>\n<h3 id=\"documentation\">Documentation</h3>\n<p>A backend developer writes and maintains technical specifications, API documentation, and guides for existing and new team members. These documents are forms of knowledge transfer and can be referenced when needed.</p>\n<h3 id=\"collaboration\">Collaboration</h3>\n<p>Backend engineers collaborate with other team members, including frontend developers, UI/UX designers, project managers, product managers, etc., to achieve a common goal.</p>\n<h2 id=\"skills-and-qualifications-needed-to-excel-as-a-backend-engineer\">Skills and qualifications needed to excel as a backend engineer</h2>\n<p>A backend engineer needs a combination of soft and technical skills to excel. Some of the skills you should look out for when hiring a backend engineer include:</p>\n<ul>\n<li>Knowledge of at least one backend programming language</li>\n<li>In-depth understanding of databases and caching</li>\n<li>Knowledge of Application Programming Interfaces (APIs)</li>\n<li>Basic knowledge of web servers</li>\n<li>Knowledge of design patterns</li>\n<li>Familiarity with version control systems</li>\n<li>Understanding of security best practices</li>\n<li>Collaboration and communication skills</li>\n</ul>\n<h3 id=\"knowledge-of-at-least-one-backend-programming-language\">Knowledge of at least one backend programming language</h3>\n<p>A <a href=\"https://roadmap.sh/backend/developer-skills\" target=\"_blank\">backend developer</a> should have an in-depth knowledge of at least one backend programming language, such as <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, C#, <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">Node.js</a>, etc. It is also beneficial for a backend engineer to be familiar with some <a href=\"https://roadmap.sh/backend/frameworks\" target=\"_blank\">backend frameworks</a> such as Django, <a href=\"https://roadmap.sh/aspnet-core\" target=\"_blank\">ASP.NET</a>, Ruby on Rails, <a href=\"https://roadmap.sh/spring-boot\" target=\"_blank\">Sprint Boot</a>, etc.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-languages.png\" alt=\"Backend languages\"></p>\n<h3 id=\"in-depth-understanding-of-databases-and-caching\">In-depth understanding of databases and caching</h3>\n<p>A backend developer should know how databases and caching work in robust web applications. Many types of databases are used in backend systems, including relational and document databases. Examples of Database Management Systems used in backend systems include Microsoft SQL Server, PostgreSQL, MySQL, MongoDB, etc.</p>\n<p><a href=\"https://roadmap.sh/guides/http-caching\" target=\"_blank\">Caching</a> is a process of temporarily storing data that is requested regularly. It helps avoid recurrent unnecessary database queries. Redis is an example of an in-memory data store used for caching.</p>\n<h3 id=\"knowledge-of-apis\">Knowledge of APIs</h3>\n<p>APIs are used to communicate between different systems. These systems could be microservices, frontend and backend systems, or third-party systems. A backend developer is expected to know how to <a href=\"https://roadmap.sh/api-design\" target=\"_blank\">design APIs</a> and make them available to consumers.</p>\n<h3 id=\"basic-knowledge-of-web-servers\">Basic knowledge of web servers</h3>\n<p>A backend engineer should have a basic understanding of web server technologies. Web servers respond to client requests. An example of a web server is Nginx. During the interview process, you should ensure that the candidate understands how web servers work and also know how to configure them.</p>\n<h3 id=\"knowledge-of-design-patterns\">Knowledge of design patterns</h3>\n<p><a href=\"https://roadmap.sh/guides/design-patterns-for-humans\" target=\"_blank\">Design patterns</a> are reusable code libraries or solutions to common problems in designing and structuring software components. A backend developer should know some of these design patterns. The common types of design patterns are:</p>\n<ul>\n<li>Creational patterns</li>\n<li>Structural patterns</li>\n<li>Behavioral patterns</li>\n<li>Architectural patterns</li>\n</ul>\n<h3 id=\"familiarity-with-version-control-systems\">Familiarity with version control systems</h3>\n<p>Version control systems help track and maintain a history of code changes made to an application. With a proper version control system, multiple developers can work on a codebase simultaneously. Through version control, they collaborate on a code repository.</p>\n<p>A backend engineer is expected to have proficient knowledge of version control. Git is one of the most common version control systems today. There are many code repositories, including Bitbucket, GitHub, and GitLab.</p>\n<h3 id=\"understanding-of-security-best-practices\">Understanding of security best practices</h3>\n<p>A backend developer should have a basic understanding of standard security practices and implement robust security measures to protect sensitive data and prevent unauthorized access to data. Common vulnerabilities include SQL injection, cross-site scripting, and cross-site request forgery. About every large cloud provider has features that provide security measures, including AWS IAM, Azure Active Directory, and Google Cloud Identity.</p>\n<h3 id=\"collaboration-and-communication-skills\">Collaboration and communication skills</h3>\n<p>A backend developer typically collaborates with other engineers, managers, and testers across multiple teams to ensure consistency and improve user experience. During the interview process, you should pay close attention to the candidate’s communication skills because a backend developer should be able to clearly communicate problems and their approach to a solution. Ask the candidate questions that border on collaboration and see how they respond.</p>\n<h2 id=\"additional-skills-that-will-make-a-candidate-stand-out-as-a-backend-developer\">Additional skills that will make a candidate stand out as a backend developer</h2>\n<p>The role of a backend developer is very competitive. However, there are some skills that a backend developer should possess to make them stand out. Some of these skills include:</p>\n<ul>\n<li>Continuous learning</li>\n<li>Problem-solving skills</li>\n<li>Time management skills</li>\n<li>DevOps skills</li>\n</ul>\n<h3 id=\"continuous-learning\">Continuous learning</h3>\n<p>The field of <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend engineering</a> is continually expanding, so be sure to look out for candidates who enjoy learning. Find out if they stay up to date with the latest technologies and industry trends and how often they try out new things. In addition to acquiring new skills, you should also find out if they are willing to share knowledge and help in team development.</p>\n<h3 id=\"problem-solving-skills\">Problem-solving skills</h3>\n<p>While it’s essential to use problem-solving tools, intrinsic problem-solving skills are equally important for a backend developer. Your potential hire should have an analytical mindset and be able to break complex problems into smaller chunks that can be solved incrementally.</p>\n<h3 id=\"time-management-skills\">Time management skills</h3>\n<p>Engineers sometimes have chaotic workloads, which often lead to burnout and affect their performance. During the interview, ask the candidate about their time management practices and how they manage heavy workloads. Effective time management and prioritizing can make a candidate stand out as an engineer and avoid burnout.</p>\n<h3 id=\"devops-skills\">DevOps skills</h3>\n<p>Knowledge of <a href=\"https://roadmap.sh/docker\" target=\"_blank\">docker</a> and container orchestration technologies, such as <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> is another skill that makes a backend developer stand out. A firm understanding of continuous integration and continuous deployment (CI/CD) setups is a plus. Consider a candidate with this basic DevOps skill for the role.</p>\n<h2 id=\"common-backend-engineer-job-interview-questions\">Common backend engineer job interview questions</h2>\n<p>This curated list of the common backend developer job interview questions should help your search:</p>\n<p><strong>What are the different HTTP methods?</strong>\nHere, the candidate should be able to explain the different HTTP methods, which are GET, POST, PUT, and DELETE.</p>\n<p><strong>Describe what you understand</strong> <strong>about continuous integration and continuous delivery</strong>\nThe candidate is expected to explain what CI/CD means in clear terms.</p>\n<p><strong>What are databases</strong>**,** <strong>and what are the different types of databases?</strong>\nThe candidate should know what a database is and what relational and document databases are, along with examples.</p>\n<p><strong>What is object</strong>**-**<strong>oriented programming?</strong>\nThe candidate should be able to explain OOP, a process of designing software around objects.</p>\n<p><strong>Explain the difference between synchronous and asynchronous programming</strong>\nHere, you should look for the candidate’s understanding of sync and async processes. Synchronous programming executes tasks sequentially, and each task must be completed before the next start. Asynchronous programming allows tasks to run independently without waiting for each other to complete. It uses promises or async/await to handle task completion.</p>\n<p><strong>What is the purpose of caching in a backend system</strong>**,** <strong>and what caching strategies have you used?</strong>\nThe candidate should be able to explain what caching means and also the different caching strategies, which include:</p>\n<ul>\n<li>Full-page caching</li>\n<li>Data caching</li>\n<li>Result caching</li>\n</ul>\n<p><strong>What are some common security vulnerabilities in web applications</strong>**,** <strong>and how will you mitigate them?</strong>\nThe candidate should be able to explain common security vulnerabilities, such as cross-site scripting, SQL injection, cross-site request forgery (CSRF), and so on. You can mitigate them by performing proper input validation and secure session management.</p>\n<h2 id=\"effective-interview-strategies-and-assessments\">Effective interview strategies and assessments</h2>\n<p>Evaluating backend engineers requires targeted assessments that reveal technical skills and problem-solving abilities. Here are practical techniques to help you identify qualified candidates:</p>\n<ul>\n<li><strong>Code review exercises:</strong> Provide a sample code snippet on any backend programming languages with issues or inefficiencies. Ask candidates to identify problems, propose improvements, and explain their reasoning. This exercise tests attention to detail and understanding of best practices.</li>\n<li><strong>Live coding tasks:</strong> Use short coding challenges focused on common backend development tasks like database queries or API calls. Live coding reveals how candidates approach problems under pressure and handle real-time debugging.</li>\n<li><strong>System design discussions:</strong> Present a simple system design prompt, like designing a scalable file storage system. Listen for clarity in explaining their thought process, handling of trade-offs, and understanding of backend fundamentals.</li>\n<li><strong>Behavioral questions on past projects:</strong> Ask about specific backend challenges they’ve faced and how they solved them. Look for evidence of adaptability, collaboration, and knowledge depth, such as experiences with database optimization or API integration.</li>\n<li><strong>Assess communication skills:</strong> Observe how they explain technical concepts. Strong candidates communicate clearly and adapt explanations for both technical and non-technical audiences.</li>\n</ul>\n<p>These methods offer a well-rounded view of a candidate’s backend development skills and experience.</p>\n<h2 id=\"whats-next\">What’s next?</h2>\n<p>Backend engineers play a vital role in software engineering, and great ones are in high demand. Now that you have a clear understanding of what to look for, it’s time to build a hiring process that identifies candidates with the right technical skills and collaborative mindset.</p>\n<p>The foundation of your tech stack depends on a strong backend. You can find potential hires in the roadmap.sh <a href=\"https://roadmap.sh/discord\" target=\"_blank\">community</a> of beginner and experienced backend developers.</p>\n<p>roadmap.sh also offers valuable resources to help you and your team stay ahead by helping you to:</p>\n<ul>\n<li>Create a personalized or <a href=\"https://roadmap.sh/teams\" target=\"_blank\">team-based roadmap</a>.</li>\n<li>Become part of a supportive community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up on</a> <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> <a href=\"https://roadmap.sh/signup\" target=\"_blank\">platform</a>.</li>\n</ul>";

				const frontmatter$1g = {"title":"Backend Developer Job Description [@currentYear@ Template]","description":"Learn how to write the perfect backend developer job description and get my best tips on how to recruit backend dev talent effectively.","authorId":"ekene","excludedBySlug":"/backend/job-description","seo":{"title":"Backend Developer Job Description [@currentYear@ Template]","description":"","ogImageUrl":"https://assets.roadmap.sh/guest/backend-job-description-nn3ja.png"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-11-12T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1g = "/workspace/src/data/guides/backend-job-description.md";
				const url$1g = undefined;
				function rawContent$1g() {
					return "   \n                                                                   \n                                                                                                                                                      \n               \n                                          \n    \n                                                                     \n                 \n                                                                                 \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Backend developer job description example and template.](https://assets.roadmap.sh/guest/backend-job-description-nn3ja.png)\n\nHiring the right candidate for a [backend engineering](https://roadmap.sh/backend) role requires identifying individuals who possess the necessary technical and soft skills and align with your organization's values. Selecting the right candidate can be challenging with a high volume of applications.\n\nKnowing what to prioritize when evaluating candidates is necessary for choosing the best fit for this role. In this guide, I’ll outline the key skills and qualities I focus on as a hiring manager when hiring a backend engineer.\n\nHere is a summary of the backend developer job description:\n\n- Design, develop, and maintain highly performant, reliable, scalable, and secure backend systems and server side logic.\n- Oversee projects from conception to deployment, ensuring smooth execution and delivery to create a great and on-brand user experience.\n- Maintain and optimize the backend infrastructure to meet evolving project needs.\n- Collaborate with front-end developers to integrate user-facing elements with server-side logic.\n- Write clean, standardized, maintainable, testable, and reusable backend code to solve business and technical problems.\n\nLet’s look at the backend engineer role in more detail.\n\n## Backend engineer job description template\n\nThe job description of a backend developer differs depending on the team, project, or organization. Based on my experience as a backend engineer recruiter, here is a sample job description template that outlines the key skills and qualifications hiring managers look for in potential candidates:\n\n**Job title: Backend Engineer**\n\n**Company:** [Company Name]\n\n**Location:** [Location, region, hybrid,  or remote]\n\n**Job Type:** [Full-time, Part-time, or Contract].\n\n**About us**\n[Give a brief introduction of your company and what you do].\n\n**Job Description**\n**[Company Name]** is looking for experienced backend engineers who are passionate about building scalable, efficient, and reliable server-side applications. This role requires strong proficiency in server-side languages (such as Python, Java, or Node.js), databases (SQL, NoSQL), and API development. The ideal candidate will have a solid understanding of backend architecture, security best practices, and cloud technologies to support modern applications.\n\nCollaboration with frontend developers, designers, product managers, and other teams is key to this role, so strong communication skills are important. We are looking for strong problem solvers who can apply their engineering skills across different platforms and environments to deliver the best possible experience for customers and internal users.\n\n**Responsibilities**\n\n- Take ownership of the design, architecture, development, deployment and operations of microservices you will develop, using DevOps practices, pair programming and other cutting-edge methodologies.\n- Promote a highly collaborative environment with other product team members.\n- Participate in regular technical forums to share knowledge with other engineers.\n- Be an active member of cross-functional agile teams collaborating with product owners, frontend developers, designers, and business intelligence teams.\n- Build the server side logic of our web application.\n\n**Requirements**\n\n- Solid backend experience with microservice and distributed event-driven architectural patterns\n- Degree in computer science or any related discipline.\n- Professional experience with one backend programming language, e.g., Python, C#, Java\n- Experience working with docker and containerization technologies such as Kubernetes.\n- A deep understanding of continuous integration and continuous delivery.\n- Practical experience in applying advanced design concepts such as Domain Driven Design (DDD), Object Oriented Programming (OOP).\n- Strong communication and collaboration skills.\n\n**What we offer**\n[Itemize the different perks you offer, for example, training allowance, competitive salary, home office setup, etc.].\n\n**How to apply**\nIf this role excites you, please submit your resume and cover letter to **[contact email or link to** **job** **portal]**.\n\nYou have seen what a sample backend engineer job advert looks like; now, let’s have a detailed look at a backend developer’s responsibilities.\n\n## Key backend developer responsibilities\n\nThe roles and responsibilities of a backend engineer could vary depending on the project requirements, company size, or team structure. However, there are typical roles and responsibilities that cut across board. They include:\n\n- Server-side development\n- Application Programming Interface (API) development\n- Database administration and management\n- Performance optimization\n- Integration of third-party services\n- Testing\n- Documentation\n- Collaboration\n\n![Back-end engineer responsibilities](https://assets.roadmap.sh/guest/backend-engineer-responsibilities.jpg)\n\nTypical projects that backend developers work on include:\n\n- RESTful APIs that perform CRUD operations.\n- Building web scraping and data processing services.\n- Building image processing services.\n- Designing and implementing content delivery networks (CDNs).\n- Modeling and designing database systems.\n\nLet’s look at their individual responsibilities in detail:\n\n### Server-side development\n\nThis is one of the core responsibilities of a backend developer. It involves writing server-side web application logic to handle requests from the frontend, communicate with database systems, and handle an application’s business and backend logic.\n\n### API development\n\nA backend developer designs, implements, and maintains APIs for communicating between different services or parts of an application and with external systems. This involves creating endpoints, responding to requests, and ensuring API security. [Swagger](https://swagger.io/) is a standard tool used by backend engineers to design and document APIs.\n\n### Database administration and management\n\nData plays a central role in software and application development. A backend developer decides how and where to store these data. Databases are one of the most used data storage solutions, and a backend developer designs and maintains them for efficient data management. The tasks here include deciding which databases to use, either [SQL](https://roadmap.sh/sql) or NoSQL databases, also known as document databases, choosing the right Object Relation Mapper (ORM) for mapping objects to a database, writing efficient queries, optimizing database performance, and ensuring data security.\n\n### Performance optimization\n\nBackend engineers continually look for ways to optimize performance. They identify performance bottlenecks such as slow database queries, poor code quality, and high application latency and work towards resolving them. This involves refactoring to ensure high-quality reusable code, updating dependencies, redesigning the database schema, etc.\n\n### Integration of third-party services\n\nSome applications integrate with third-party web services or APIs to perform specific tasks. Some of these third-party services include payment gateways, cloud services such as Google Cloud and [Amazon Web Services](https://roadmap.sh/aws), and user authentication services, such as Auth0. Backend engineers integrate these external services into an application.\n\n### Testing and bug fixing\n\nBackend engineers write unit, integration, and end-to-end tests to ensure system reliability. These tests help to keep the system *up* and bug-free during continuous development. Troubleshooting and fixing are also part of a backend engineer’s primary responsibility.\n\n### Documentation\n\nA backend developer writes and maintains technical specifications, API documentation, and guides for existing and new team members. These documents are forms of knowledge transfer and can be referenced when needed.\n\n### Collaboration\n\nBackend engineers collaborate with other team members, including frontend developers, UI/UX designers, project managers, product managers, etc., to achieve a common goal.\n\n## Skills and qualifications needed to excel as a backend engineer\n\nA backend engineer needs a combination of soft and technical skills to excel. Some of the skills you should look out for when hiring a backend engineer include:\n\n- Knowledge of at least one backend programming language\n- In-depth understanding of databases and caching\n- Knowledge of Application Programming Interfaces (APIs)\n- Basic knowledge of web servers\n- Knowledge of design patterns\n- Familiarity with version control systems\n- Understanding of security best practices\n- Collaboration and communication skills\n\n### Knowledge of at least one backend programming language\n\nA [backend developer](https://roadmap.sh/backend/developer-skills) should have an in-depth knowledge of at least one backend programming language, such as [Java](https://roadmap.sh/java), C#, [Python](https://roadmap.sh/python), [Node.js](https://roadmap.sh/nodejs), etc. It is also beneficial for a backend engineer to be familiar with some [backend frameworks](https://roadmap.sh/backend/frameworks) such as Django, [ASP.NET](https://roadmap.sh/aspnet-core), Ruby on Rails, [Sprint Boot](https://roadmap.sh/spring-boot), etc.\n\n![Backend languages](https://assets.roadmap.sh/guest/backend-languages.png)\n\n### In-depth understanding of databases and caching\n\nA backend developer should know how databases and caching work in robust web applications. Many types of databases are used in backend systems, including relational and document databases. Examples of Database Management Systems used in backend systems include Microsoft SQL Server, PostgreSQL, MySQL, MongoDB, etc.\n\n[Caching](https://roadmap.sh/guides/http-caching) is a process of temporarily storing data that is requested regularly. It helps avoid recurrent unnecessary database queries. Redis is an example of an in-memory data store used for caching.\n\n### Knowledge of APIs\n\nAPIs are used to communicate between different systems. These systems could be microservices, frontend and backend systems, or third-party systems. A backend developer is expected to know how to [design APIs](https://roadmap.sh/api-design) and make them available to consumers.\n\n### Basic knowledge of web servers\n\nA backend engineer should have a basic understanding of web server technologies. Web servers respond to client requests. An example of a web server is Nginx. During the interview process, you should ensure that the candidate understands how web servers work and also know how to configure them.\n\n### Knowledge of design patterns\n\n[Design patterns](https://roadmap.sh/guides/design-patterns-for-humans) are reusable code libraries or solutions to common problems in designing and structuring software components. A backend developer should know some of these design patterns. The common types of design patterns are:\n\n- Creational patterns\n- Structural patterns\n- Behavioral patterns\n- Architectural patterns\n\n### Familiarity with version control systems\n\nVersion control systems help track and maintain a history of code changes made to an application. With a proper version control system, multiple developers can work on a codebase simultaneously. Through version control, they collaborate on a code repository.\n\nA backend engineer is expected to have proficient knowledge of version control. Git is one of the most common version control systems today. There are many code repositories, including Bitbucket, GitHub, and GitLab.\n\n### Understanding of security best practices\n\nA backend developer should have a basic understanding of standard security practices and implement robust security measures to protect sensitive data and prevent unauthorized access to data. Common vulnerabilities include SQL injection, cross-site scripting, and cross-site request forgery. About every large cloud provider has features that provide security measures, including AWS IAM, Azure Active Directory, and Google Cloud Identity.\n\n### Collaboration and communication skills\n\nA backend developer typically collaborates with other engineers, managers, and testers across multiple teams to ensure consistency and improve user experience. During the interview process, you should pay close attention to the candidate's communication skills because a backend developer should be able to clearly communicate problems and their approach to a solution. Ask the candidate questions that border on collaboration and see how they respond.\n\n## Additional skills that will make a candidate stand out as a backend developer\n\nThe role of a backend developer is very competitive. However, there are some skills that a backend developer should possess to make them stand out. Some of these skills include:\n\n- Continuous learning\n- Problem-solving skills\n- Time management skills\n- DevOps skills\n\n### Continuous learning\n\nThe field of [backend engineering](https://roadmap.sh/backend) is continually expanding, so be sure to look out for candidates who enjoy learning. Find out if they stay up to date with the latest technologies and industry trends and how often they try out new things. In addition to acquiring new skills, you should also find out if they are willing to share knowledge and help in team development.\n\n### Problem-solving skills\n\nWhile it’s essential to use problem-solving tools, intrinsic problem-solving skills are equally important for a backend developer. Your potential hire should have an analytical mindset and be able to break complex problems into smaller chunks that can be solved incrementally.\n\n### Time management skills\n\nEngineers sometimes have chaotic workloads, which often lead to burnout and affect their performance. During the interview, ask the candidate about their time management practices and how they manage heavy workloads. Effective time management and prioritizing can make a candidate stand out as an engineer and avoid burnout.\n\n### DevOps skills\n\nKnowledge of [docker](https://roadmap.sh/docker) and container orchestration technologies, such as [Kubernetes](https://roadmap.sh/kubernetes) is another skill that makes a backend developer stand out. A firm understanding of continuous integration and continuous deployment (CI/CD) setups is a plus. Consider a candidate with this basic DevOps skill for the role.\n\n## Common backend engineer job interview questions\n\nThis curated list of the common backend developer job interview questions should help your search:\n\n**What are the different HTTP methods?**\nHere, the candidate should be able to explain the different HTTP methods, which are GET, POST, PUT, and DELETE.\n\n**Describe what you understand** **about continuous integration and continuous delivery**\nThe candidate is expected to explain what CI/CD means in clear terms.\n\n**What are databases****,** **and what are the different types of databases?**\nThe candidate should know what a database is and what relational and document databases are, along with examples.\n\n**What is object****-****oriented programming?**\nThe candidate should be able to explain OOP, a process of designing software around objects.\n\n**Explain the difference between synchronous and asynchronous programming**\nHere, you should look for the candidate’s understanding of sync and async processes. Synchronous programming executes tasks sequentially, and each task must be completed before the next start. Asynchronous programming allows tasks to run independently without waiting for each other to complete. It uses promises or async/await to handle task completion.\n\n**What is the purpose of caching in a backend system****,** **and what caching strategies have you used?**\nThe candidate should be able to explain what caching means and also the different caching strategies, which include:\n\n- Full-page caching\n- Data caching\n- Result caching\n\n**What are some common security vulnerabilities in web applications****,** **and how will you mitigate them?**\nThe candidate should be able to explain common security vulnerabilities, such as cross-site scripting, SQL injection, cross-site request forgery (CSRF), and so on. You can mitigate them by performing proper input validation and secure session management.\n\n## Effective interview strategies and assessments\n\nEvaluating backend engineers requires targeted assessments that reveal technical skills and problem-solving abilities. Here are practical techniques to help you identify qualified candidates:\n\n- **Code review exercises:** Provide a sample code snippet on any backend programming languages with issues or inefficiencies. Ask candidates to identify problems, propose improvements, and explain their reasoning. This exercise tests attention to detail and understanding of best practices.\n- **Live coding tasks:** Use short coding challenges focused on common backend development tasks like database queries or API calls. Live coding reveals how candidates approach problems under pressure and handle real-time debugging.\n- **System design discussions:** Present a simple system design prompt, like designing a scalable file storage system. Listen for clarity in explaining their thought process, handling of trade-offs, and understanding of backend fundamentals.\n- **Behavioral questions on past projects:** Ask about specific backend challenges they’ve faced and how they solved them. Look for evidence of adaptability, collaboration, and knowledge depth, such as experiences with database optimization or API integration.\n- **Assess communication skills:** Observe how they explain technical concepts. Strong candidates communicate clearly and adapt explanations for both technical and non-technical audiences.\n\nThese methods offer a well-rounded view of a candidate’s backend development skills and experience.\n\n## What’s next?\n\nBackend engineers play a vital role in software engineering, and great ones are in high demand. Now that you have a clear understanding of what to look for, it’s time to build a hiring process that identifies candidates with the right technical skills and collaborative mindset.\n\nThe foundation of your tech stack depends on a strong backend. You can find potential hires in the roadmap.sh [community](https://roadmap.sh/discord) of beginner and experienced backend developers.\n\nroadmap.sh also offers valuable resources to help you and your team stay ahead by helping you to:\n\n- Create a personalized or [team-based roadmap](https://roadmap.sh/teams).\n- Become part of a supportive community by [signing up on](https://roadmap.sh/signup) [roadmap.sh](http://roadmap.sh) [platform](https://roadmap.sh/signup).\n";
				}
				async function compiledContent$1g() {
					return await html$1g();
				}
				function getHeadings$1g() {
					return [{"depth":2,"slug":"backend-engineer-job-description-template","text":"Backend engineer job description template"},{"depth":2,"slug":"key-backend-developer-responsibilities","text":"Key backend developer responsibilities"},{"depth":3,"slug":"server-side-development","text":"Server-side development"},{"depth":3,"slug":"api-development","text":"API development"},{"depth":3,"slug":"database-administration-and-management","text":"Database administration and management"},{"depth":3,"slug":"performance-optimization","text":"Performance optimization"},{"depth":3,"slug":"integration-of-third-party-services","text":"Integration of third-party services"},{"depth":3,"slug":"testing-and-bug-fixing","text":"Testing and bug fixing"},{"depth":3,"slug":"documentation","text":"Documentation"},{"depth":3,"slug":"collaboration","text":"Collaboration"},{"depth":2,"slug":"skills-and-qualifications-needed-to-excel-as-a-backend-engineer","text":"Skills and qualifications needed to excel as a backend engineer"},{"depth":3,"slug":"knowledge-of-at-least-one-backend-programming-language","text":"Knowledge of at least one backend programming language"},{"depth":3,"slug":"in-depth-understanding-of-databases-and-caching","text":"In-depth understanding of databases and caching"},{"depth":3,"slug":"knowledge-of-apis","text":"Knowledge of APIs"},{"depth":3,"slug":"basic-knowledge-of-web-servers","text":"Basic knowledge of web servers"},{"depth":3,"slug":"knowledge-of-design-patterns","text":"Knowledge of design patterns"},{"depth":3,"slug":"familiarity-with-version-control-systems","text":"Familiarity with version control systems"},{"depth":3,"slug":"understanding-of-security-best-practices","text":"Understanding of security best practices"},{"depth":3,"slug":"collaboration-and-communication-skills","text":"Collaboration and communication skills"},{"depth":2,"slug":"additional-skills-that-will-make-a-candidate-stand-out-as-a-backend-developer","text":"Additional skills that will make a candidate stand out as a backend developer"},{"depth":3,"slug":"continuous-learning","text":"Continuous learning"},{"depth":3,"slug":"problem-solving-skills","text":"Problem-solving skills"},{"depth":3,"slug":"time-management-skills","text":"Time management skills"},{"depth":3,"slug":"devops-skills","text":"DevOps skills"},{"depth":2,"slug":"common-backend-engineer-job-interview-questions","text":"Common backend engineer job interview questions"},{"depth":2,"slug":"effective-interview-strategies-and-assessments","text":"Effective interview strategies and assessments"},{"depth":2,"slug":"whats-next","text":"What’s next?"}];
				}

				const Content$1g = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1g;
					content.file = file$1g;
					content.url = url$1g;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1g())}`;
				});

const __vite_glob_0_18 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1g,
	compiledContent: compiledContent$1g,
	default: Content$1g,
	file: file$1g,
	frontmatter: frontmatter$1g,
	getHeadings: getHeadings$1g,
	rawContent: rawContent$1g,
	url: url$1g
}, Symbol.toStringTag, { value: 'Module' }));

const html$1f = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-languages-2x930.jpg\" alt=\"The best backend languages to learn.\"></p>\n<p>Web development is typically divided into two main categories: <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development</a> and <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend development</a>. Frontend development focuses on the visible part of the application for end-users, i.e. the part that users interact with, while backend development involves writing code that remains unseen but is essential for the functioning of all applications—the business logic.</p>\n<p>Two of the key components when it comes to backend development are the programming language that you are going to code in and the database. In this article, we will be looking into a subset of programming languages that could be used for backend development. We will be discussing the pros and cons of each and the community to help you pick the best programming language for backend development.</p>\n<p>Diving straight in, I will cover the top 5 backend programming languages that you should to learn if you’re looking to broaden your horizons in the server-side world.</p>\n<h2 id=\"top-5-backend-languages-to-learn-for-web-development\">Top 5 Backend Languages to Learn for Web Development</h2>\n<p>The best backend languages to learn in 2025 are:</p>\n<ul>\n<li>Python</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Go</li>\n</ul>\n<p>Why these languages specifically?</p>\n<p>They’re some of the most known and used languages in the industry right now (see <a href=\"https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 Developer Survey</a>). That said, keep in mind that these are all great options, and they’re not presented here in any particular order.</p>\n<h3 id=\"python\">Python</h3>\n<p><a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> has been around for decades already and while it’s never been the most popular option, it has always managed to stay within the top 5 choices. People love it for being easy to read, straightforward, and able to handle all sorts of tasks, making it a top pick for developers globally. Sure, Python’s got a big name in data processing and machine learning, but let’s not forget its solid impact on web development!.</p>\n<p>What makes Python extra appealing, especially for beginners, is the fact that reading and writing it feels very much like English (or at least, as pseudo code). This makes it a top choice for folks just starting out in coding.</p>\n<h4 id=\"beginner-accessibility-and-learning-resources\">Beginner Accessibility and Learning Resources</h4>\n<p>One of Python’s standout features is its beginner-friendly syntax, making it an ideal language for those new to programming. The emphasis on readability and the absence of complex syntax (for the most part), eases the learning curve, enabling new developers to quickly grasp fundamental concepts.</p>\n<p>Python’s community plays a critical role in its accessibility. Abundant learning resources, tutorials, and documentation are readily available, empowering beginners to progress from basic programming principles to advanced backend development seamlessly. Online platforms like Codecademy, Coursera, Real Python, and even Google offer comprehensive courses tailored to all skill levels.</p>\n<h4 id=\"practical-applications-and-popular-frameworks\">Practical Applications and Popular Frameworks</h4>\n<p>Python’s versatility is evident in its applicability across a spectrum of industries, from web development and data science to artificial intelligence and automation. In the context of backend development, Python shines brightly with its two standout <a href=\"https://roadmap.sh/backend/frameworks\" target=\"_blank\">backend frameworks</a>: <a href=\"https://www.djangoproject.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Django</a> and <a href=\"https://github.com/pallets/flask\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Flask</a>.</p>\n<h5 id=\"django\">Django</h5>\n<p>So, let’s talk about Django – it’s like the superhero of web frameworks, at least in the world of Python. This high-level powerhouse is all about that “batteries-included” style, giving you a whole package of tools and features that make development lightning-fast. It follows the <a href=\"https://www.crio.do/blog/understand-mvc-architecture/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Model-View-Controller</a> (MVC) architecture that gives your web applications a solid structure, making them scalable and easy to keep up.</p>\n<p>Part of that whole “batteries-included” motto means that it comes with an admin panel, an ORM (Object-Relational Mapping) for smooth data handling, and security features that make sure your project is secured out-of-the-box. All these goodies work together, making Django a top choice for projects, whether they’re a walk in the park or a brain-bending challenge.</p>\n<h5 id=\"flask\">Flask</h5>\n<p>On the other hand, Flask, a micro-framework, takes a minimalist approach, providing developers with the flexibility to choose components as needed. While Flask may be lighter than Django, it doesn’t compromise on functionality. Its simplicity and modularity make it an excellent choice for small to medium-sized projects, allowing developers to tailor the framework to meet specific project requirements.</p>\n<p>Both Django and Flask underscore Python’s suitability for backend development, offering developers frameworks that cater to diverse project needs while maintaining Python’s hallmark readability and efficiency.</p>\n<h4 id=\"pros-and-cons-of-python\">Pros and Cons of Python</h4>\n<p>As with all other backend languages in this article, Python has some pros and cons you should consider before picking it as your first backend language.</p>\n<h5 id=\"pros\">Pros</h5>\n<ul>\n<li>The syntax is very easy to learn because it’s very much like writing English.</li>\n<li>The ecosystem is quite mature and has some nice frameworks that will contain all the tools you need to get started</li>\n</ul>\n<h5 id=\"cons\">Cons</h5>\n<ul>\n<li>It’s not the most popular backend language, so while the frameworks available are constantly updated, they aren’t necessarily using the latest technology trends.</li>\n<li>The GIL (Global Interpreter Lock) limits Python’s performance in multi-threaded applications.</li>\n</ul>\n<h3 id=\"java\">Java</h3>\n<p><a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a> has a massive presence and for good reason (according to <a href=\"https://w3techs.com/technologies/details/pl-php\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JetBrain’s survey in 2022, Java was used by 48% of developers</a>).It’s the kind of programming language that’s everywhere – serving up websites, running your favorite apps, and even powering big-scale enterprise systems.</p>\n<h4 id=\"is-it-worth-learning-java\">Is it worth learning Java?</h4>\n<p>Now, learning Java, (a strongly typed, object oriented programming language (OOP)), is a journey worth taking, but it’s not a walk in the park. It’s a bit like climbing a mountain – you start at the bottom with the basics, and as you ascend, you get into the nitty-gritty of things like object-oriented programming. The process will force you to learn a lot, which is a great thing, by the end you’ll have a lot of understanding of mechanics and concepts around OOP that can be extrapolated into other languages. However, that can also be overwhelming to some developers who just want to learn by building mini-projects. In those situations, the learning curve of Java might be too long (not steep, but long because there is a lot more to cover than with alternatives such as Python or JavaScript).</p>\n<p>That said, the community is big and there are tons of resources, from online courses to forums, helping you navigate the Java landscape. And good reason, considering Java has been around for quite a while.</p>\n<h4 id=\"use-cases-and-robust-ecosystem\">Use Cases and Robust Ecosystem</h4>\n<p>Java’s everywhere. From web development to mobile apps, and even diving into the world of big data, Java’s got its fingerprints all over. And if it’s not the language itself, it’s the Java Virtual Machine (JVM) powering some other language, like Spark.</p>\n<p>Java’s the language of choice for many big enterprises given its innate robustness (the first version of the language was released in 1995, it’s had quite a long time to evolve), and its robust ecosystem of libraries and frameworks makes it a go-to for developers.</p>\n<h4 id=\"pros-and-cons-of-java\">Pros and Cons of Java</h4>\n<p>For all its power and robustness, there are some negative (and positive) aspects to picking Java as your first backend language.</p>\n<h5 id=\"pros-1\">Pros</h5>\n<ul>\n<li>Java has a mature ecosystem with a varied array of libraries and frameworks for you to try. The community has been working on them and evolving them for years in many cases, so they’re quite ready to develop enterprise-ready solutions.</li>\n<li>Java’s multithreading support makes it ideal for some processing-heavy tasks in the backend of big applications.</li>\n<li>Java’s heavy focus on object oriented programming makes it a great option for developers who enjoy that paradigm.</li>\n</ul>\n<h5 id=\"cons-1\">Cons</h5>\n<ul>\n<li>Java’s verbose syntax might be a problem for some people. While you can still code without an issue, it all comes down to personal preference. If you like to write less and do more with your code, Java might not be the ideal pick for you. It’s verbosity can increase development time in some situations.</li>\n<li>Java applications can have higher memory consumption than others, especially compared to others like PHP. While the reason for this is their entire architecture, the fact remains.</li>\n</ul>\n<h3 id=\"javascript-nodejs\">JavaScript (Node.js)</h3>\n<p>With Node.js in the mix, JavaScript becomes a lingua franca in web development. In other words, you can use the same language both for the frontend (client side) and for the backend (server side) of your application.</p>\n<p>That said, keep in mind that depending on the framework you’re using, while it might be JavaScript on both sides, the code and logic you use can be considerably different.</p>\n<p>Remember that frontend code is often confused with framework code (as in React, Angular, Vue, etc) by some developers, simply because it’s all JavaScript. But don’t be confused, the backend lacks a lot of the extra “juice” added by the browser (like the DOM API and others).</p>\n<h4 id=\"learning-advantages-of-nodejs\">Learning Advantages of Node.js</h4>\n<p>If you’ve got the basics of JavaScript down, even if your experience has only been on the frontend, diving into Node.js is like leveling up. It lets you use the same language for both frontend and backend, which means less time juggling languages and more time building cool stuff.</p>\n<p>The event-driven, non-blocking architecture is one of the main features that make the language so special – it makes your web apps fast and efficient without you having to learn more complex concepts such as multi-threading. Plus, the community is constantly growing and there are tutorials everywhere to guide you through the Node.js universe.</p>\n<p>If you were to rank languages based on the amount of content out there to learn them, JavaScript would be one of the first ones (if not the first one) on the list.</p>\n<h4 id=\"key-frameworks-and-development-tools\">Key Frameworks and Development Tools</h4>\n<p>Now, let’s talk about frameworks. In the case of JavaScript, this topic is so varied that recommending a single option for someone just getting started is really hard.</p>\n<p>For example, if you want to go frontend agnostic, or in other words, you don’t care about the technology being used to develop the client side of your app, then a good starting option would be <a href=\"https://expressjs.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Express.js</a>. This framework used to be the industry standard. And while that’s no longer the case, it’s still a perfect first choice if you’re looking for something with the required functionality to make your life a lot easier.</p>\n<p>Now, if on the other hand, you’re looking to build the frontend and the backend at the same time, then I would recommend going with <a href=\"https://nextjs.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Next.js</a> if you’re already familiar with React. Or if on the other hand, you prefer Vue.js, then definitely try <a href=\"https://nuxt.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Nuxt</a>. Either one of those will help you get the job done with all the bells and whistles you can think of.</p>\n<h4 id=\"does-it-make-sense-to-pick-up-javascript-as-a-backend-language\">Does it make sense to pick up JavaScript as a backend language?</h4>\n<p>The answer to this question is always going to be “yes”, whether you’re coming from the frontend and you already have JS experience or if you’re picking it up from scratch. In fact, according to <a href=\"https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 survey, JavaScript is the most used language by professionals</a> (with 65.85% of the votes).</p>\n<p><img src=\"/guides/backend-languages/javascript-interest.png\" alt=\"JavaScript Interest\"></p>\n<p>If you’re coming from the client side, then adopting JS for your backend will let you start working in minutes. You’ll probably spend more time learning the backend-specific concepts than the language itself.</p>\n<p>On the other hand, if you’re coming from zero, or from other programming languages, JS has some quirks, for sure, but if you go the JS route, you’re already making way for a potential switch into the frontend in the future. Who knows, maybe in a few months you’ll also want to start working on the frontend, and by having picked up JS as your main backend language, you have 90% of the work already cut for you.</p>\n<p>There is really no downside to picking JS as your first backend language.</p>\n<h4 id=\"pros-and-cons-of-javascript\">Pros and Cons of JavaScript</h4>\n<p>While there might not be a downside to picking JS, there is no perfect language out there, so let’s take a look at some of the pros and cons before moving on to the next one.</p>\n<h5 id=\"pros-2\">Pros</h5>\n<ul>\n<li>Going with JavaScript, you’re using the same language on the backend and on the frontend. There is less cognitive load while switching environments if you’re the one coding both sides of the app.</li>\n<li>The ecosystem around JavaScript is one of the richest ones you can find. The community is constantly pushing the limits of the language and coming up with new solutions to everyday problems.</li>\n<li>The simple syntax allows you to reduce development time because you don’t have to write as much code to achieve good results.</li>\n</ul>\n<h5 id=\"cons-2\">Cons</h5>\n<ul>\n<li>Asynchronous programming can be hard for some developers coming from other languages, like Python for example.</li>\n<li>The lack of strong types in JavaScript can cause some problems for big codebases.</li>\n<li>The single-thread nature of the language makes it really hard to implement CPU-intensive tasks. While there is support for multi-threading, it’s not extensive nor commonly used.</li>\n<li>Debugging asynchronous code can be difficult for new developers given the non-linear nature of it.</li>\n</ul>\n<h3 id=\"php\">PHP</h3>\n<p>Now, if you’re looking for something very well established in the web development industry, just like Java but with a shorter learning curve, then you’re probably looking for PHP.</p>\n<blockquote>\n<p>As a note about PHP’s relevancy, while many developers might claim that PHP is a dying tech, according to <a href=\"https://w3techs.com/technologies/details/pl-php\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">W3Techs, over 75% of websites with a backend use PHP</a>.</p>\n</blockquote>\n<p>It’s the glue that holds a ton of websites together, and its longevity in the web development scene is no accident.</p>\n<h4 id=\"ease-of-mastery-and-vast-library-support\">Ease of Mastery and Vast Library Support</h4>\n<p>If you’re diving into PHP, you wouldn’t be so wrong (no matter what others might tell you). It’s got a gentle learning curve, which means you can start building things pretty quickly. Getting everything set up and working will probably take you 10 minutes, and you’ll be writing your first “hello world” 5 minutes after that.</p>\n<p>The vast community support and an ocean of online resources make mastering PHP a breeze. Plus, its library support is like having a toolkit that’s always expanding – you’ll find what you need, whether you’re wrangling databases, handling forms, or making your website dance with dynamic content.</p>\n<p>If you’re looking to pick up PHP, look for the LAMP stack, which stands for <strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL, and <strong>P</strong>HP. With that tech stack, you’ll have everything you need to start creating websites in no time.</p>\n<h4 id=\"modern-php-frameworks-and-their-impact\">Modern PHP Frameworks and Their Impact</h4>\n<p>If we’re talking about PHP frameworks, then we gotta talk about <a href=\"https://laravel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Laravel</a> and <a href=\"https://symfony.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Symfony</a>. They are like the rockstars of the modern PHP world.</p>\n<p>Laravel comes with a lot of tools and features that help you speed up your development process. On the other side, Symfony has a modular architecture, making it a solid choice for projects of all sizes.</p>\n<p>These frameworks showcase how PHP has evolved, staying relevant and powerful in the ever-changing landscape of web development.</p>\n<h4 id=\"pros-and-cons-of-php\">Pros and Cons of PHP</h4>\n<p>Let’s take a look at some of the most common advantages of going with PHP for the backend and some cons to discuss why it might not be the best choice for you.</p>\n<h5 id=\"pros-3\">Pros</h5>\n<ul>\n<li>PHP is designed for web development, which still makes it a very popular choice for a backend language.</li>\n<li>PHP’s community is quite big, considering how old the language is, so if you need help, chances are, someone has the answer you’re looking for.</li>\n</ul>\n<h5 id=\"cons-3\">Cons</h5>\n<ul>\n<li>One of the major complaints developers have about the language is its inconsistent function naming convention. While not a huge problem, it makes it very hard for developers to intuitively find the right function by name. This causes you to constantly verify your code against the documentation to make sure you’re not making mistakes.</li>\n</ul>\n<h3 id=\"go\">Go</h3>\n<p>Now, let’s close in on Go, the programming language born at Google that’s all about simplicity and efficiency. Go embraces a clean and straightforward syntax. Despite its simplicity, it focuses heavily on performance, making it an excellent choice for building modern, scalable applications.</p>\n<p>According to the <a href=\"https://pypl.github.io/PYPL.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">PYPL index</a> (using Google searches to weigh interest of developers in a particular language), we can see a clear worldwide growing interest in Go from the development community:</p>\n<p><img src=\"/guides/backend-languages/pypl-go-index.png\" alt=\"Go Interest\"></p>\n<h4 id=\"concurrency-and-scalability\">Concurrency and Scalability</h4>\n<p>Go stands out in the crowd, especially when it comes to handling concurrency and scalability. Its built-in support for concurrent programming, through goroutines and channels, makes it a standout choice for applications that need to juggle multiple tasks simultaneously. This makes Go particularly adept at handling the demands of today’s highly concurrent and distributed systems. In other words, Go is a great choice for building microservices, a type of system that is very commonly used as the backend for complex web applications.</p>\n<p>So yes, very relevant.</p>\n<h4 id=\"learning-curve-and-developer-productivity\">Learning Curve and Developer Productivity</h4>\n<p>Learning Go is a smooth ride, thanks to its simplicity and extensive documentation. Developers often find themselves quickly transitioning from understanding the basics to building robust applications.</p>\n<p>The language’s focus on developer productivity is evident in its quick compilation times and the absence of excessive boilerplate code, allowing developers to concentrate on building features rather than wrestling with the language itself.</p>\n<h4 id=\"pros-and-cons-of-go\">Pros and Cons of Go</h4>\n<p>Let’s take a look at some pros and cons for the last programming language on our list.</p>\n<h5 id=\"pros-4\">Pros</h5>\n<ul>\n<li>Go code compiles quickly, which in turn leads to very fast development cycles. This is a big plus if you’re developing a big application with a large codebase because other options might slow down your process with their compilation times.</li>\n<li>Go’s syntax is simple enough to make it easy to learn and understand for new developers.</li>\n</ul>\n<h5 id=\"cons-4\">Cons</h5>\n<ul>\n<li>Go’s ecosystem is quite young when compared to the other alternatives here, so the maturity of the tools available might not be the same as, for example, Java or JavaScript tooling.</li>\n</ul>\n<h2 id=\"choosing-the-ideal-backend-language\">Choosing the Ideal Backend Language</h2>\n<p>So, are these the best backend programming languages out there? Is there an absolute “best” backend programming language?</p>\n<p>As you’ve probably seen by now, there is no “perfect” or “ideal” backend language. When it comes to picking one out of the huge number of alternatives, you have to consider other aspects outside of the language itself:</p>\n<ul>\n<li>What’s the size of your project? Are you building a large-scale platform? Or just a basic static website?</li>\n<li>Do you mind spending more time learning or do you need to be efficient and start coding right away?</li>\n<li>Do you already have some programming knowledge and would like to pick something that resembles what you already know? Or would you like to pick up something that’s entirely different?</li>\n<li>Are you alone? Or are you part of a team?</li>\n</ul>\n<p>Once you’ve answered those questions, you’ll probably have some idea of where to go, but then you should look into the language itself, specifically into:</p>\n<ul>\n<li>Does it have enough learning resources for you?</li>\n<li>How big and active is the community around it?</li>\n<li>Are the main frameworks still under development? Or have they been parked for a while?</li>\n</ul>\n<p>In the end, you’re evaluating the language and its ecosystem, making sure they’re both evolving right along the web industry. If you find that there are aspects that are falling behind, then it probably isn’t a good choice.</p>\n<p><a href=\"https://roadmap.sh/backend\" target=\"_blank\"><img src=\"/guides/backend-languages/backend-roadmap-part.png\" alt=\"Roadmap.sh\"></a></p>\n<p align=\"center\" style=\"font-size: 14px; margin-top: -10px; text-align: center\">Small section of the full backend roadmap available on <a href=\"https://roadmap.sh/backend\">roadmap.sh</a></p>\n<p>There you’ll find community-maintained roadmaps for many career paths within software development. In particular, for this article, the <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap</a> is a great place to start, because while picking a backend language is important, you’ll see there that it’s not just about the language. In fact, there is a lot of tech around the language that is also required (I’m referring to databases, git, understanding how client-server communication works, and a big “etc).</p>\n<h2 id=\"what-are-backend-languages\">What are backend languages?</h2>\n<p>When it comes to web development, there is a very clear distinction between frontend and backend technologies.</p>\n<p>While the frontend ecosystem is quite limited to JavaScript (and other JavaScript-based languages, like TypeScript) due to Browser compatibility, the backend (A.K.A server-side) is a very different scenario.</p>\n<p><img src=\"/guides/backend-languages/back-vs-front.png\" alt=\"Backend Languages\"></p>\n<p>Please note that neither of those lists is extensive, as they’re both constantly growing.</p>\n<p>You can think of a backend language as one that “runs on the server side”. That said, by that definition, any language is a backend language because even JavaScript nowadays can be used on the backend as well (thanks to Node, Bun, and Deno).</p>\n<p>However, we can go one step further and say:</p>\n<blockquote>\n<p>“A backend language is a server side programming language that has the tools and frameworks required to build web backends”</p>\n</blockquote>\n<p>That will narrow down the list a little bit. But essentially, we can think of backend languages as anything that fits the following list:</p>\n<ul>\n<li>Is able to listen for incoming HTTP/S connections.</li>\n<li>Can access databases.</li>\n<li>Can send HTTP/S requests.</li>\n<li>Can access the filesystem.</li>\n<li>Has a rich ecosystem of tools and frameworks to build web applications.</li>\n</ul>\n<p>With those features and a rich ecosystem of libraries and frameworks, a language can definitely be considered “backend-ready”.</p>\n<h2 id=\"why-learn-a-backend-programming-language\">Why learn a backend programming language?</h2>\n<p>If you’re already a backend developer, then the main reason would be to become a more versatile developer. The more languages you know, the better code you’ll write. Either because you’ve learned different ways of solving the same problem, or simply because you’ll be able to contribute to more projects.</p>\n<p>If, on the other hand, you’re just getting started, the main reason would be that you’re entering an industry that’s always looking for people.</p>\n<h2 id=\"is-the-market-in-demand-for-backend-developers\">Is the market in demand for backend developers?</h2>\n<p>One thing to keep in mind right now is that the software development market is always in demand for devs. For example, the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">U.S. Bureau of Labor Statistics gives our industry a 25% growth rate</a> (demand-wise) from 2022 to 2023, whereas the mean for other industries is 3%.</p>\n<p>According to <a href=\"https://www.jetbrains.com/lp/devecosystem-2022/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JetBrains, during 2022, 75% of developers were involved with web development</a> in one fashion or another, so whether you’re backend devs or frontend devs, there is always someone looking for you.</p>\n<p>That said, we also have to consider that this industry is becoming a global industry. While some countries might still be fighting that process back, most developers can directly access the global market and work for any company in the world.</p>\n<p>That is a great opportunity for a backend developer who lives in an area where there isn’t a big IT industry; however, it also means competing with every other developer in the world. That might cause the illusion that the IT industry is in recession or that there are no job opportunities for developers.</p>\n<p>There are always opportunities; it’s just that you’re now after the same job that many others from around the world are after as well.</p>\n<p>That said, backend devs are always in high demand because they’re the bread and butter of any web application. They’re always required to create the underlying platform that will power most systems, so the key to standing out here is to stay up-to-date with the industry’s trends and technologies.</p>\n<p>Don’t get me wrong. You can’t possibly be expected to keep up with every single programming language that is released or with all the new frameworks that are created every month. However, keeping an eye on the industry and understanding what survives long enough to become a new industry standard is important. You have to keep updating yourself and learning new technologies/skills constantly; that way, you’ll stay relevant.</p>\n<h2 id=\"is-learning-a-backend-language-good-for-your-career\">Is learning a backend language good for your career?</h2>\n<p>Whether you’re a frontend developer looking to become full-stack (someone who can code both the backend and the frontend of an application), or if you’re new to the industry and you’re thinking if this might be the best place for you, the answer is “yes”.</p>\n<p>Backend developers are always in demand, so adding a new tool to your already existing toolbelt (if you’re already a dev) will only make you more flexible in the eyes of your employer.</p>\n<p>But remember, a language is just a language until you give it context. If you’re wondering whether or not one of the backend languages in this article might be for you, the answer will always be “yes”. However, understand that if backend development is new to you, you will also need to pick up other skills and backend technologies around the language, such as:</p>\n<ul>\n<li>Understanding HTTP.</li>\n<li>Learning Structured Query Language (SQL) to query your databases.</li>\n<li>Understanding how APIs work.</li>\n<li>What server side rendering means and how to take advantage of it.</li>\n<li>What web servers are and how to use them/build them.</li>\n</ul>\n<p>Otherwise, you’ll understand the language, but you won’t know how to use it for the role of backend development.</p>\n<h2 id=\"jumpstarting-your-backend-development-journey\">Jumpstarting Your Backend Development Journey</h2>\n<p>To get started with your backend development journey, it’s crucial to have a roadmap that guides you through the learning process and equips you with the skills to build robust and scalable backend systems.</p>\n<p>Lucky for you, if you’re reading this, that means you’ve found the most complete and comprehensive roadmap online: <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a>, the current <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap</a> is filled with details of everything you should and could (optionally) learn in your journey to becoming a backend developer.</p>\n<h2 id=\"guided-learning-from-online-courses-to-bootcamps\">Guided Learning: From Online Courses to Bootcamps</h2>\n<p>Online courses and bootcamps serve as invaluable companions on your learning expedition. Platforms like Udemy, Coursera, and freeCodeCamp offer comprehensive backend development courses.</p>\n<p>These resources not only cover programming languages like Python, Java, or JavaScript but also dive deep into frameworks like Django, Express.js, or Laravel. For those seeking a more immersive experience, coding bootcamps provide intensive, hands-on training to fast-track your backend development skills.</p>\n<p>Whatever choice you go for, make sure you’re not following trends or just copying the learning methods of others. Learning is a very personal experience and what works for others might not work for you, and vice versa. So make sure to do the proper research and figure out what option works best for you.</p>\n<h2 id=\"building-community-connections-for-learning-support\">Building Community Connections for Learning Support</h2>\n<p>Joining developer communities (there are several on Twitter for example), forums like Stack Overflow, or participating in social media groups dedicated to backend development creates a network of support.</p>\n<p>Engaging with experienced developers, sharing challenges, and seeking advice fosters a collaborative learning environment. Attend local meetups or virtual events if you can to connect with professionals in the field, gaining insights and building relationships that can prove invaluable throughout your journey.</p>\n<h2 id=\"think-about-you-and-your-project\">Think about you and your project</h2>\n<p>There are many ways to go about picking the ideal backend language for you. If there is anything you should take home with you after reading this article, it is that most languages are equivalent in the sense that you’ll be able to do pretty much everything with any of them.</p>\n<p>So what criteria can you use to pick the “right one” for you?</p>\n<p>The questions you should also be asking yourself are:</p>\n<ul>\n<li>What’s your preference for a language? Do you like Object Oriented Programming (OOP) or are you more of a functional programming type of dev? Do you like statically typed programming languages or loosely typed ones? Personal preferences should also play an important role at the time of picking your ideal programming language.</li>\n<li>What does my project need? After all, project requirements sometimes dictate technology. Keep that in mind, check if the project’s needs and your personal preferences align, and try to weigh in pros and cons if they don’t.</li>\n</ul>\n<p>In the end, personal preference and actual project requirements (if you have any) are very important, because both will influence how much you enjoy (or don’t enjoy) the learning process.</p>\n<h2 id=\"crafting-a-portfolio-to-display-your-backend-skills\">Crafting a Portfolio to Display Your Backend Skills:</h2>\n<p>As you accumulate skills and knowledge, showcase your journey through a well-crafted portfolio. Include projects that highlight your backend skills, demonstrating your ability to - design databases, implement server-side logic, and integrate with client side technologies. Whether it’s a dynamic web application, a RESTful API, or a data-driven project, your portfolio becomes a tangible representation of your backend development capabilities for potential employers or collaborators.</p>\n<p>When it comes to deciding where to publish this portfolio, you have some options, such as directly on your GitHub profile (if you have one), or perhaps on your own personal website where you can share some design thoughts about each project along with the code.</p>\n<p>In the end, the important thing is that you should be sharing your experience somewhere, especially when you don’t have working experience in the field.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In the end, there are many backend programming languages to choose from, and what language you go for, is up to you and your particular context/needs. All I can do is guide you to the door, but you have to cross it yourself. Some interesting options are:</p>\n<ul>\n<li>Python with its English-like syntax.</li>\n<li>Java with its formal syntax and enterprise support.</li>\n<li>JavaScript with its flexibility and ability to jump between frontend and backend.</li>\n<li>PHP with its proven record of success.</li>\n<li>And Go, with its performance and scalability focus.</li>\n</ul>\n<p>You’re the one who gets to decide, but just know that no matter what you choose, getting started in backend development is a one-way street. You’ll be learning from this moment on, and you’ll be jumping from one language to the other as the field evolves.</p>\n<p>Remember that there is a very detailed version of a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap here</a>, it might be a great place to get started! And if you’re also interested in frontend development, there is an <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">equally handy roadmap</a> here as well!</p>";

				const frontmatter$1f = {"title":"The 5 Best Backend Development Languages to Master (@currentYear@)","description":"Discover the best backend development languages to master in @currentYear@.","authorId":"fernando","excludedBySlug":"/backend/languages","seo":{"title":"The 5 Best Backend Development Languages to Master (@currentYear@)","description":"Discover the best backend development languages to learn right now for career development, with practical tips from an experienced developer.","ogImageUrl":"https://assets.roadmap.sh/guest/backend-languages-2x930.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-01-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1f = "/workspace/src/data/guides/backend-languages.md";
				const url$1f = undefined;
				function rawContent$1f() {
					return "   \n                                                                           \n                                                                                          \n                  \n                                    \n    \n                                                                             \n                                                                                                                                                              \n                                                                           \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best backend languages to learn.](https://assets.roadmap.sh/guest/backend-languages-2x930.jpg)\n\nWeb development is typically divided into two main categories: [backend development](https://roadmap.sh/backend) and [frontend development](https://roadmap.sh/frontend). Frontend development focuses on the visible part of the application for end-users, i.e. the part that users interact with, while backend development involves writing code that remains unseen but is essential for the functioning of all applications—the business logic.\n\nTwo of the key components when it comes to backend development are the programming language that you are going to code in and the database. In this article, we will be looking into a subset of programming languages that could be used for backend development. We will be discussing the pros and cons of each and the community to help you pick the best programming language for backend development.\n\nDiving straight in, I will cover the top 5 backend programming languages that you should to learn if you’re looking to broaden your horizons in the server-side world.\n\n## Top 5 Backend Languages to Learn for Web Development\n\nThe best backend languages to learn in 2025 are:\n\n- Python\n- Java\n- JavaScript\n- PHP\n- Go\n\nWhy these languages specifically?\n\nThey’re some of the most known and used languages in the industry right now (see [StackOverflow’s 2023 Developer Survey](https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof)). That said, keep in mind that these are all great options, and they’re not presented here in any particular order.\n\n### Python\n\n[Python](https://roadmap.sh/python) has been around for decades already and while it’s never been the most popular option, it has always managed to stay within the top 5 choices. People love it for being easy to read, straightforward, and able to handle all sorts of tasks, making it a top pick for developers globally. Sure, Python's got a big name in data processing and machine learning, but let's not forget its solid impact on web development!.\n\nWhat makes Python extra appealing, especially for beginners, is the fact that reading and writing it feels very much like English (or at least, as pseudo code). This makes it a top choice for folks just starting out in coding.\n\n#### Beginner Accessibility and Learning Resources\n\nOne of Python's standout features is its beginner-friendly syntax, making it an ideal language for those new to programming. The emphasis on readability and the absence of complex syntax (for the most part), eases the learning curve, enabling new developers to quickly grasp fundamental concepts.\n\nPython's community plays a critical role in its accessibility. Abundant learning resources, tutorials, and documentation are readily available, empowering beginners to progress from basic programming principles to advanced backend development seamlessly. Online platforms like Codecademy, Coursera, Real Python, and even Google offer comprehensive courses tailored to all skill levels.\n\n#### Practical Applications and Popular Frameworks\n\nPython's versatility is evident in its applicability across a spectrum of industries, from web development and data science to artificial intelligence and automation. In the context of backend development, Python shines brightly with its two standout [backend frameworks](https://roadmap.sh/backend/frameworks): [Django](https://www.djangoproject.com/) and [Flask](https://github.com/pallets/flask).\n\n##### Django\n\nSo, let's talk about Django – it's like the superhero of web frameworks, at least in the world of Python. This high-level powerhouse is all about that \"batteries-included\" style, giving you a whole package of tools and features that make development lightning-fast. It follows the [Model-View-Controller](https://www.crio.do/blog/understand-mvc-architecture/) (MVC) architecture that gives your web applications a solid structure, making them scalable and easy to keep up.\n\nPart of that whole “batteries-included” motto means that it comes with an admin panel, an ORM (Object-Relational Mapping) for smooth data handling, and security features that make sure your project is secured out-of-the-box. All these goodies work together, making Django a top choice for projects, whether they're a walk in the park or a brain-bending challenge.\n\n##### Flask\n\nOn the other hand, Flask, a micro-framework, takes a minimalist approach, providing developers with the flexibility to choose components as needed. While Flask may be lighter than Django, it doesn't compromise on functionality. Its simplicity and modularity make it an excellent choice for small to medium-sized projects, allowing developers to tailor the framework to meet specific project requirements.\n\nBoth Django and Flask underscore Python's suitability for backend development, offering developers frameworks that cater to diverse project needs while maintaining Python's hallmark readability and efficiency.\n\n#### Pros and Cons of Python\n\nAs with all other backend languages in this article, Python has some pros and cons you should consider before picking it as your first backend language.\n\n##### Pros\n\n- The syntax is very easy to learn because it’s very much like writing English.\n- The ecosystem is quite mature and has some nice frameworks that will contain all the tools you need to get started\n\n##### Cons\n\n- It’s not the most popular backend language, so while the frameworks available are constantly updated, they aren’t necessarily using the latest technology trends.\n- The GIL (Global Interpreter Lock) limits Python’s performance in multi-threaded applications.\n\n### Java\n\n[Java](https://roadmap.sh/java) has a massive presence and for good reason (according to [JetBrain’s survey in 2022, Java was used by 48% of developers](https://w3techs.com/technologies/details/pl-php)).It's the kind of programming language that's everywhere – serving up websites, running your favorite apps, and even powering big-scale enterprise systems.\n\n#### Is it worth learning Java?\n\nNow, learning Java, (a strongly typed, object oriented programming language (OOP)), is a journey worth taking, but it's not a walk in the park. It's a bit like climbing a mountain – you start at the bottom with the basics, and as you ascend, you get into the nitty-gritty of things like object-oriented programming. The process will force you to learn a lot, which is a great thing, by the end you’ll have a lot of understanding of mechanics and concepts around OOP that can be extrapolated into other languages. However, that can also be overwhelming to some developers who just want to learn by building mini-projects. In those situations, the learning curve of Java might be too long (not steep, but long because there is a lot more to cover than with alternatives such as Python or JavaScript).\n\nThat said, the community is big and there are tons of resources, from online courses to forums, helping you navigate the Java landscape. And good reason, considering Java has been around for quite a while.\n\n#### Use Cases and Robust Ecosystem\n\nJava's everywhere. From web development to mobile apps, and even diving into the world of big data, Java's got its fingerprints all over. And if it’s not the language itself, it’s the Java Virtual Machine (JVM) powering some other language, like Spark.\n\nJava’s the language of choice for many big enterprises given its innate robustness (the first version of the language was released in 1995, it’s had quite a long time to evolve), and its robust ecosystem of libraries and frameworks makes it a go-to for developers.\n\n#### Pros and Cons of Java\n\nFor all its power and robustness, there are some negative (and positive) aspects to picking Java as your first backend language.\n\n##### Pros\n\n- Java has a mature ecosystem with a varied array of libraries and frameworks for you to try. The community has been working on them and evolving them for years in many cases, so they’re quite ready to develop enterprise-ready solutions.\n- Java’s multithreading support makes it ideal for some processing-heavy tasks in the backend of big applications.\n- Java’s heavy focus on object oriented programming makes it a great option for developers who enjoy that paradigm.\n\n##### Cons\n\n- Java’s verbose syntax might be a problem for some people. While you can still code without an issue, it all comes down to personal preference. If you like to write less and do more with your code, Java might not be the ideal pick for you. It’s verbosity can increase development time in some situations.\n- Java applications can have higher memory consumption than others, especially compared to others like PHP. While the reason for this is their entire architecture, the fact remains.\n\n### JavaScript (Node.js)\n\nWith Node.js in the mix, JavaScript becomes a lingua franca in web development. In other words, you can use the same language both for the frontend (client side) and for the backend (server side) of your application.\n\nThat said, keep in mind that depending on the framework you’re using, while it might be JavaScript on both sides, the code and logic you use can be considerably different.\n\nRemember that frontend code is often confused with framework code (as in React, Angular, Vue, etc) by some developers, simply because it’s all JavaScript. But don’t be confused, the backend lacks a lot of the extra “juice” added by the browser (like the DOM API and others).\n\n#### Learning Advantages of Node.js\n\nIf you've got the basics of JavaScript down, even if your experience has only been on the frontend, diving into Node.js is like leveling up. It lets you use the same language for both frontend and backend, which means less time juggling languages and more time building cool stuff.\n\nThe event-driven, non-blocking architecture is one of the main features that make the language so special – it makes your web apps fast and efficient without you having to learn more complex concepts such as multi-threading. Plus, the community is constantly growing and there are tutorials everywhere to guide you through the Node.js universe.\n\nIf you were to rank languages based on the amount of content out there to learn them, JavaScript would be one of the first ones (if not the first one) on the list.\n\n#### Key Frameworks and Development Tools\n\nNow, let's talk about frameworks. In the case of JavaScript, this topic is so varied that recommending a single option for someone just getting started is really hard.\n\nFor example, if you want to go frontend agnostic, or in other words, you don’t care about the technology being used to develop the client side of your app, then a good starting option would be [Express.js](https://expressjs.com/). This framework used to be the industry standard. And while that’s no longer the case, it’s still a perfect first choice if you’re looking for something with the required functionality to make your life a lot easier.\n\nNow, if on the other hand, you’re looking to build the frontend and the backend at the same time, then I would recommend going with [Next.js](https://nextjs.org/) if you’re already familiar with React. Or if on the other hand, you prefer Vue.js, then definitely try [Nuxt](https://nuxt.com/). Either one of those will help you get the job done with all the bells and whistles you can think of.\n\n#### Does it make sense to pick up JavaScript as a backend language?\n\nThe answer to this question is always going to be “yes”, whether you’re coming from the frontend and you already have JS experience or if you’re picking it up from scratch. In fact, according to [StackOverflow’s 2023 survey, JavaScript is the most used language by professionals](https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof) (with 65.85% of the votes).\n\n![JavaScript Interest](/guides/backend-languages/javascript-interest.png)\n\nIf you’re coming from the client side, then adopting JS for your backend will let you start working in minutes. You’ll probably spend more time learning the backend-specific concepts than the language itself.\n\nOn the other hand, if you’re coming from zero, or from other programming languages, JS has some quirks, for sure, but if you go the JS route, you’re already making way for a potential switch into the frontend in the future. Who knows, maybe in a few months you’ll also want to start working on the frontend, and by having picked up JS as your main backend language, you have 90% of the work already cut for you.\n\nThere is really no downside to picking JS as your first backend language.\n\n#### Pros and Cons of JavaScript\n\nWhile there might not be a downside to picking JS, there is no perfect language out there, so let’s take a look at some of the pros and cons before moving on to the next one.\n\n##### Pros\n\n- Going with JavaScript, you’re using the same language on the backend and on the frontend. There is less cognitive load while switching environments if you’re the one coding both sides of the app.\n- The ecosystem around JavaScript is one of the richest ones you can find. The community is constantly pushing the limits of the language and coming up with new solutions to everyday problems.\n- The simple syntax allows you to reduce development time because you don’t have to write as much code to achieve good results.\n\n##### Cons\n\n- Asynchronous programming can be hard for some developers coming from other languages, like Python for example.\n- The lack of strong types in JavaScript can cause some problems for big codebases.\n- The single-thread nature of the language makes it really hard to implement CPU-intensive tasks. While there is support for multi-threading, it’s not extensive nor commonly used.\n- Debugging asynchronous code can be difficult for new developers given the non-linear nature of it.\n\n### PHP\n\nNow, if you’re looking for something very well established in the web development industry, just like Java but with a shorter learning curve, then you’re probably looking for PHP.\n\n> As a note about PHP’s relevancy, while many developers might claim that PHP is a dying tech, according to [W3Techs, over 75% of websites with a backend use PHP](https://w3techs.com/technologies/details/pl-php).\n\nIt's the glue that holds a ton of websites together, and its longevity in the web development scene is no accident.\n\n#### Ease of Mastery and Vast Library Support\n\nIf you're diving into PHP, you wouldn’t be so wrong (no matter what others might tell you). It's got a gentle learning curve, which means you can start building things pretty quickly. Getting everything set up and working will probably take you 10 minutes, and you’ll be writing your first “hello world” 5 minutes after that.\n\nThe vast community support and an ocean of online resources make mastering PHP a breeze. Plus, its library support is like having a toolkit that's always expanding – you'll find what you need, whether you're wrangling databases, handling forms, or making your website dance with dynamic content.\n\nIf you’re looking to pick up PHP, look for the LAMP stack, which stands for **L**inux, **A**pache, **M**ySQL, and **P**HP. With that tech stack, you’ll have everything you need to start creating websites in no time.\n\n#### Modern PHP Frameworks and Their Impact\n\nIf we’re talking about PHP frameworks, then we gotta talk about [Laravel](https://laravel.com/) and [Symfony](https://symfony.com/). They are like the rockstars of the modern PHP world.\n\nLaravel comes with a lot of tools and features that help you speed up your development process. On the other side, Symfony has a modular architecture, making it a solid choice for projects of all sizes.\n\nThese frameworks showcase how PHP has evolved, staying relevant and powerful in the ever-changing landscape of web development.\n\n#### Pros and Cons of PHP\n\nLet’s take a look at some of the most common advantages of going with PHP for the backend and some cons to discuss why it might not be the best choice for you.\n\n##### Pros\n\n- PHP is designed for web development, which still makes it a very popular choice for a backend language.\n- PHP’s community is quite big, considering how old the language is, so if you need help, chances are, someone has the answer you’re looking for.\n\n##### Cons\n\n- One of the major complaints developers have about the language is its inconsistent function naming convention. While not a huge problem, it makes it very hard for developers to intuitively find the right function by name. This causes you to constantly verify your code against the documentation to make sure you’re not making mistakes.\n\n### Go\n\nNow, let's close in on Go, the programming language born at Google that's all about simplicity and efficiency. Go embraces a clean and straightforward syntax. Despite its simplicity, it focuses heavily on performance, making it an excellent choice for building modern, scalable applications.\n\nAccording to the [PYPL index](https://pypl.github.io/PYPL.html) (using Google searches to weigh interest of developers in a particular language), we can see a clear worldwide growing interest in Go from the development community:\n\n![Go Interest](/guides/backend-languages/pypl-go-index.png)\n\n#### Concurrency and Scalability\n\nGo stands out in the crowd, especially when it comes to handling concurrency and scalability. Its built-in support for concurrent programming, through goroutines and channels, makes it a standout choice for applications that need to juggle multiple tasks simultaneously. This makes Go particularly adept at handling the demands of today's highly concurrent and distributed systems. In other words, Go is a great choice for building microservices, a type of system that is very commonly used as the backend for complex web applications.\n\nSo yes, very relevant.\n\n#### Learning Curve and Developer Productivity\n\nLearning Go is a smooth ride, thanks to its simplicity and extensive documentation. Developers often find themselves quickly transitioning from understanding the basics to building robust applications.\n\nThe language's focus on developer productivity is evident in its quick compilation times and the absence of excessive boilerplate code, allowing developers to concentrate on building features rather than wrestling with the language itself.\n\n#### Pros and Cons of Go\n\nLet’s take a look at some pros and cons for the last programming language on our list.\n\n##### Pros\n\n- Go code compiles quickly, which in turn leads to very fast development cycles. This is a big plus if you’re developing a big application with a large codebase because other options might slow down your process with their compilation times.\n- Go's syntax is simple enough to make it easy to learn and understand for new developers.\n\n##### Cons\n\n- Go’s ecosystem is quite young when compared to the other alternatives here, so the maturity of the tools available might not be the same as, for example, Java or JavaScript tooling.\n\n## Choosing the Ideal Backend Language\n\nSo, are these the best backend programming languages out there? Is there an absolute “best” backend programming language?\n\nAs you’ve probably seen by now, there is no “perfect” or “ideal” backend language. When it comes to picking one out of the huge number of alternatives, you have to consider other aspects outside of the language itself:\n\n- What’s the size of your project? Are you building a large-scale platform? Or just a basic static website?\n- Do you mind spending more time learning or do you need to be efficient and start coding right away?\n- Do you already have some programming knowledge and would like to pick something that resembles what you already know? Or would you like to pick up something that’s entirely different?\n- Are you alone? Or are you part of a team?\n\nOnce you’ve answered those questions, you’ll probably have some idea of where to go, but then you should look into the language itself, specifically into:\n\n- Does it have enough learning resources for you?\n- How big and active is the community around it?\n- Are the main frameworks still under development? Or have they been parked for a while?\n\nIn the end, you’re evaluating the language and its ecosystem, making sure they’re both evolving right along the web industry. If you find that there are aspects that are falling behind, then it probably isn’t a good choice.\n\n[![Roadmap.sh](/guides/backend-languages/backend-roadmap-part.png)](https://roadmap.sh/backend)\n\n<p align=\"center\" style=\"font-size: 14px; margin-top: -10px; text-align: center\">Small section of the full backend roadmap available on <a href=\"https://roadmap.sh/backend\">roadmap.sh</a></p>\n\nThere you’ll find community-maintained roadmaps for many career paths within software development. In particular, for this article, the [backend roadmap](https://roadmap.sh/backend) is a great place to start, because while picking a backend language is important, you’ll see there that it’s not just about the language. In fact, there is a lot of tech around the language that is also required (I’m referring to databases, git, understanding how client-server communication works, and a big “etc).\n\n## What are backend languages?\n\nWhen it comes to web development, there is a very clear distinction between frontend and backend technologies.\n\nWhile the frontend ecosystem is quite limited to JavaScript (and other JavaScript-based languages, like TypeScript) due to Browser compatibility, the backend (A.K.A server-side) is a very different scenario.\n\n![Backend Languages](/guides/backend-languages/back-vs-front.png)\n\nPlease note that neither of those lists is extensive, as they’re both constantly growing.\n\nYou can think of a backend language as one that “runs on the server side”. That said, by that definition, any language is a backend language because even JavaScript nowadays can be used on the backend as well (thanks to Node, Bun, and Deno).\n\nHowever, we can go one step further and say:\n\n> “A backend language is a server side programming language that has the tools and frameworks required to build web backends”\n\nThat will narrow down the list a little bit. But essentially, we can think of backend languages as anything that fits the following list:\n\n- Is able to listen for incoming HTTP/S connections.\n- Can access databases.\n- Can send HTTP/S requests.\n- Can access the filesystem.\n- Has a rich ecosystem of tools and frameworks to build web applications.\n\nWith those features and a rich ecosystem of libraries and frameworks, a language can definitely be considered “backend-ready”.\n\n## Why learn a backend programming language?\n\nIf you’re already a backend developer, then the main reason would be to become a more versatile developer. The more languages you know, the better code you’ll write. Either because you’ve learned different ways of solving the same problem, or simply because you’ll be able to contribute to more projects.\n\nIf, on the other hand, you’re just getting started, the main reason would be that you’re entering an industry that’s always looking for people.\n\n## Is the market in demand for backend developers?\n\nOne thing to keep in mind right now is that the software development market is always in demand for devs. For example, the [U.S. Bureau of Labor Statistics gives our industry a 25% growth rate](https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm) (demand-wise) from 2022 to 2023, whereas the mean for other industries is 3%.\n\nAccording to [JetBrains, during 2022, 75% of developers were involved with web development](https://www.jetbrains.com/lp/devecosystem-2022/) in one fashion or another, so whether you’re backend devs or frontend devs, there is always someone looking for you.\n\nThat said, we also have to consider that this industry is becoming a global industry. While some countries might still be fighting that process back, most developers can directly access the global market and work for any company in the world.\n\nThat is a great opportunity for a backend developer who lives in an area where there isn’t a big IT industry; however, it also means competing with every other developer in the world. That might cause the illusion that the IT industry is in recession or that there are no job opportunities for developers.\n\nThere are always opportunities; it’s just that you're now after the same job that many others from around the world are after as well.\n\nThat said, backend devs are always in high demand because they’re the bread and butter of any web application. They’re always required to create the underlying platform that will power most systems, so the key to standing out here is to stay up-to-date with the industry’s trends and technologies.\n\nDon’t get me wrong. You can’t possibly be expected to keep up with every single programming language that is released or with all the new frameworks that are created every month. However, keeping an eye on the industry and understanding what survives long enough to become a new industry standard is important. You have to keep updating yourself and learning new technologies/skills constantly; that way, you’ll stay relevant.\n\n## Is learning a backend language good for your career?\n\nWhether you’re a frontend developer looking to become full-stack (someone who can code both the backend and the frontend of an application), or if you’re new to the industry and you’re thinking if this might be the best place for you, the answer is “yes”.\n\nBackend developers are always in demand, so adding a new tool to your already existing toolbelt (if you’re already a dev) will only make you more flexible in the eyes of your employer.\n\nBut remember, a language is just a language until you give it context. If you’re wondering whether or not one of the backend languages in this article might be for you, the answer will always be “yes”. However, understand that if backend development is new to you, you will also need to pick up other skills and backend technologies around the language, such as:\n\n- Understanding HTTP.\n- Learning Structured Query Language (SQL) to query your databases.\n- Understanding how APIs work.\n- What server side rendering means and how to take advantage of it.\n- What web servers are and how to use them/build them.\n\nOtherwise, you’ll understand the language, but you won’t know how to use it for the role of backend development.\n\n## Jumpstarting Your Backend Development Journey\n\nTo get started with your backend development journey, it's crucial to have a roadmap that guides you through the learning process and equips you with the skills to build robust and scalable backend systems.\n\nLucky for you, if you’re reading this, that means you’ve found the most complete and comprehensive roadmap online: [roadmap.sh](https://roadmap.sh), the current [backend roadmap](https://roadmap.sh/backend) is filled with details of everything you should and could (optionally) learn in your journey to becoming a backend developer.\n\n## Guided Learning: From Online Courses to Bootcamps\n\nOnline courses and bootcamps serve as invaluable companions on your learning expedition. Platforms like Udemy, Coursera, and freeCodeCamp offer comprehensive backend development courses.\n\nThese resources not only cover programming languages like Python, Java, or JavaScript but also dive deep into frameworks like Django, Express.js, or Laravel. For those seeking a more immersive experience, coding bootcamps provide intensive, hands-on training to fast-track your backend development skills.\n\nWhatever choice you go for, make sure you’re not following trends or just copying the learning methods of others. Learning is a very personal experience and what works for others might not work for you, and vice versa. So make sure to do the proper research and figure out what option works best for you.\n\n## Building Community Connections for Learning Support\n\nJoining developer communities (there are several on Twitter for example), forums like Stack Overflow, or participating in social media groups dedicated to backend development creates a network of support.\n\nEngaging with experienced developers, sharing challenges, and seeking advice fosters a collaborative learning environment. Attend local meetups or virtual events if you can to connect with professionals in the field, gaining insights and building relationships that can prove invaluable throughout your journey.\n\n## Think about you and your project\n\nThere are many ways to go about picking the ideal backend language for you. If there is anything you should take home with you after reading this article, it is that most languages are equivalent in the sense that you’ll be able to do pretty much everything with any of them.\n\nSo what criteria can you use to pick the “right one” for you?\n\nThe questions you should also be asking yourself are:\n\n- What’s your preference for a language? Do you like Object Oriented Programming (OOP) or are you more of a functional programming type of dev? Do you like statically typed programming languages or loosely typed ones? Personal preferences should also play an important role at the time of picking your ideal programming language.\n- What does my project need? After all, project requirements sometimes dictate technology. Keep that in mind, check if the project’s needs and your personal preferences align, and try to weigh in pros and cons if they don’t.\n\nIn the end, personal preference and actual project requirements (if you have any) are very important, because both will influence how much you enjoy (or don’t enjoy) the learning process.\n\n## Crafting a Portfolio to Display Your Backend Skills:\n\nAs you accumulate skills and knowledge, showcase your journey through a well-crafted portfolio. Include projects that highlight your backend skills, demonstrating your ability to - design databases, implement server-side logic, and integrate with client side technologies. Whether it's a dynamic web application, a RESTful API, or a data-driven project, your portfolio becomes a tangible representation of your backend development capabilities for potential employers or collaborators.\n\nWhen it comes to deciding where to publish this portfolio, you have some options, such as directly on your GitHub profile (if you have one), or perhaps on your own personal website where you can share some design thoughts about each project along with the code.\n\nIn the end, the important thing is that you should be sharing your experience somewhere, especially when you don’t have working experience in the field.\n\n## Conclusion\n\nIn the end, there are many backend programming languages to choose from, and what language you go for, is up to you and your particular context/needs. All I can do is guide you to the door, but you have to cross it yourself. Some interesting options are:\n\n- Python with its English-like syntax.\n- Java with its formal syntax and enterprise support.\n- JavaScript with its flexibility and ability to jump between frontend and backend.\n- PHP with its proven record of success.\n- And Go, with its performance and scalability focus.\n\nYou’re the one who gets to decide, but just know that no matter what you choose, getting started in backend development is a one-way street. You’ll be learning from this moment on, and you’ll be jumping from one language to the other as the field evolves.\n\nRemember that there is a very detailed version of a [backend roadmap here](https://roadmap.sh/backend), it might be a great place to get started! And if you’re also interested in frontend development, there is an [equally handy roadmap](https://roadmap.sh/frontend) here as well!\n";
				}
				async function compiledContent$1f() {
					return await html$1f();
				}
				function getHeadings$1f() {
					return [{"depth":2,"slug":"top-5-backend-languages-to-learn-for-web-development","text":"Top 5 Backend Languages to Learn for Web Development"},{"depth":3,"slug":"python","text":"Python"},{"depth":4,"slug":"beginner-accessibility-and-learning-resources","text":"Beginner Accessibility and Learning Resources"},{"depth":4,"slug":"practical-applications-and-popular-frameworks","text":"Practical Applications and Popular Frameworks"},{"depth":5,"slug":"django","text":"Django"},{"depth":5,"slug":"flask","text":"Flask"},{"depth":4,"slug":"pros-and-cons-of-python","text":"Pros and Cons of Python"},{"depth":5,"slug":"pros","text":"Pros"},{"depth":5,"slug":"cons","text":"Cons"},{"depth":3,"slug":"java","text":"Java"},{"depth":4,"slug":"is-it-worth-learning-java","text":"Is it worth learning Java?"},{"depth":4,"slug":"use-cases-and-robust-ecosystem","text":"Use Cases and Robust Ecosystem"},{"depth":4,"slug":"pros-and-cons-of-java","text":"Pros and Cons of Java"},{"depth":5,"slug":"pros-1","text":"Pros"},{"depth":5,"slug":"cons-1","text":"Cons"},{"depth":3,"slug":"javascript-nodejs","text":"JavaScript (Node.js)"},{"depth":4,"slug":"learning-advantages-of-nodejs","text":"Learning Advantages of Node.js"},{"depth":4,"slug":"key-frameworks-and-development-tools","text":"Key Frameworks and Development Tools"},{"depth":4,"slug":"does-it-make-sense-to-pick-up-javascript-as-a-backend-language","text":"Does it make sense to pick up JavaScript as a backend language?"},{"depth":4,"slug":"pros-and-cons-of-javascript","text":"Pros and Cons of JavaScript"},{"depth":5,"slug":"pros-2","text":"Pros"},{"depth":5,"slug":"cons-2","text":"Cons"},{"depth":3,"slug":"php","text":"PHP"},{"depth":4,"slug":"ease-of-mastery-and-vast-library-support","text":"Ease of Mastery and Vast Library Support"},{"depth":4,"slug":"modern-php-frameworks-and-their-impact","text":"Modern PHP Frameworks and Their Impact"},{"depth":4,"slug":"pros-and-cons-of-php","text":"Pros and Cons of PHP"},{"depth":5,"slug":"pros-3","text":"Pros"},{"depth":5,"slug":"cons-3","text":"Cons"},{"depth":3,"slug":"go","text":"Go"},{"depth":4,"slug":"concurrency-and-scalability","text":"Concurrency and Scalability"},{"depth":4,"slug":"learning-curve-and-developer-productivity","text":"Learning Curve and Developer Productivity"},{"depth":4,"slug":"pros-and-cons-of-go","text":"Pros and Cons of Go"},{"depth":5,"slug":"pros-4","text":"Pros"},{"depth":5,"slug":"cons-4","text":"Cons"},{"depth":2,"slug":"choosing-the-ideal-backend-language","text":"Choosing the Ideal Backend Language"},{"depth":2,"slug":"what-are-backend-languages","text":"What are backend languages?"},{"depth":2,"slug":"why-learn-a-backend-programming-language","text":"Why learn a backend programming language?"},{"depth":2,"slug":"is-the-market-in-demand-for-backend-developers","text":"Is the market in demand for backend developers?"},{"depth":2,"slug":"is-learning-a-backend-language-good-for-your-career","text":"Is learning a backend language good for your career?"},{"depth":2,"slug":"jumpstarting-your-backend-development-journey","text":"Jumpstarting Your Backend Development Journey"},{"depth":2,"slug":"guided-learning-from-online-courses-to-bootcamps","text":"Guided Learning: From Online Courses to Bootcamps"},{"depth":2,"slug":"building-community-connections-for-learning-support","text":"Building Community Connections for Learning Support"},{"depth":2,"slug":"think-about-you-and-your-project","text":"Think about you and your project"},{"depth":2,"slug":"crafting-a-portfolio-to-display-your-backend-skills","text":"Crafting a Portfolio to Display Your Backend Skills:"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$1f = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1f;
					content.file = file$1f;
					content.url = url$1f;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1f())}`;
				});

const __vite_glob_0_19 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1f,
	compiledContent: compiledContent$1f,
	default: Content$1f,
	file: file$1f,
	frontmatter: frontmatter$1f,
	getHeadings: getHeadings$1f,
	rawContent: rawContent$1f,
	url: url$1f
}, Symbol.toStringTag, { value: 'Module' }));

const html$1e = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-project-ideas-zxutw.jpg\" alt=\"Fresh ideas for backend projects.\"></p>\n<p>As backend developers, showcasing our work to others is not straightforward, given that what we do is not very visible.</p>\n<p>That said, having a project portfolio, even as backend developers, it’s very important, as it can lead to new job opportunities.</p>\n<p>As an added bonus, the experience you get out of the entire process of building the apps for your portfolio will help you improve your coding skills.</p>\n<p>Let’s take a look at 20 of the best backend projects you can work on to improve both your project portfolio and to learn <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development</a>.</p>\n<p>Keep in mind that these project ideas are organized from easiest to hardest to complete, and the entire list should take you at least a year to complete, if you’re not rushing the process.</p>\n<p>So sit back, grab a cup of your favorite hot drink, and let’s get started!</p>\n<h2 id=\"1-personal-blogging-platform-api\">1. Personal Blogging Platform API</h2>\n<p><strong>Difficulty</strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: CRUD for main operations, databases (SQL or NoSQL), server-side RESTful API.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/blogging-platform-api.png\" alt=\"Blogging Platform API\"></p>\n<p>Let’s start with a very common one when it comes to backend projects.</p>\n<p>This is a RESTful API that would power a personal blog. This implies that you’d have to create a backend API with the following responsibilities:</p>\n<ul>\n<li>Return a list of articles. You can add filters such as publishing date, or tags.</li>\n<li>Return a single article, specified by the ID of the article.</li>\n<li>Create a new article to be published.</li>\n<li>Delete a single article, specified by the ID.</li>\n<li>Update a single article, again, you’d specify the article using its ID.</li>\n</ul>\n<p>And with those endpoints you’ve covered the basic CRUD operations (<strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate and <strong>D</strong>elete).</p>\n<p>As a recommendation for techstack, you could use <a href=\"https://fastify.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Fastify</a> as the main <a href=\"https://roadmap.sh/backend/frameworks\" target=\"_blank\">backend framework</a> if you’re going with Node, or perhaps <a href=\"https://www.djangoproject.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Django</a> for Python or even <a href=\"https://rubyonrails.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Ruby on Rails</a> or <a href=\"https://sinatrarb.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sinatra</a> for Ruby. As for your database, you could use <a href=\"https://www.mongodb.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">MongoDB</a> if you want to try NoSQL or <a href=\"https://www.mysql.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">MySQL</a> if you’re looking to get started with relational databases first.</p>\n<h2 id=\"2-to-do-list-api\">2. To-Do List API</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: REST API design, JSON, basic authentication middleware.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/todo-list-api-bsrdd.png\" alt=\"To-Do List API\"></p>\n<p>We’re continuing with the APIs for our backend project ideas, this time around for a To-Do application. Why is it different from the previous one?</p>\n<p>While the previous project only focused on the main CRUD operations, here we’ll add some more interesting responsibilities, such as:</p>\n<ol>\n<li>An authentication logic, which means you’ll have to keep a new table of users and their credentials</li>\n<li>You’ll have to create both users and tasks.</li>\n<li>You’ll also have to be able to update tasks (their status) and even delete them.</li>\n<li>Get a list of tasks, filter them by status and get the details of each one.</li>\n</ol>\n<p>You’re free to implement this with whatever programming language and framework you want, however, you could continue using the same stack from the previous project.</p>\n<h2 id=\"3-weather-api-wrapper-service\">3. Weather API Wrapper Service</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: Third-party API integration, caching strategy, environment variable management.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/weather-api-f8i1q.png\" alt=\"Weather API Wrapper Service\"></p>\n<p>Let’s take our API magic to the next level with this new backend project. Now instead of just relying on a database, we’re going to tackle two new topics:</p>\n<ul>\n<li>Using external services.</li>\n<li>Adding caching through the use of a quick in-memory storage.</li>\n</ul>\n<p>As for the actual weather API to use, you can use your favorite one, as a suggestion, here is a link to <a href=\"https://www.visualcrossing.com/weather-api\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Visual Crossing’s API</a>, it’s completely FREE and easy to use.</p>\n<p>Regarding the in-memory cache, a pretty common recommendation is to use <a href=\"https://redis.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Redis</a>, you can read more about it <a href=\"https://redis.io/docs/manual/client-side-caching/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">here</a>, and as a recommendation, you could use the city code entered by the user as the key, and save there the result from calling the API.</p>\n<p>At the same time, when you “set” the value in the cache, you can also give it an expiration time in seconds (using the EX flag on the <a href=\"https://redis.io/commands/set/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SET command</a>). That way the cache (the keys) will automatically clean itself when the data is old enough (for example, giving it a 12-hours expiration time).</p>\n<h2 id=\"4-expense-tracker-api\">4. Expense Tracker API</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: Data modeling, user authentication (JWT).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/expense-tracker-api-m72p5.png\" alt=\"Expense Tracker API\"></p>\n<p>For the last of our “easy” backend projects, let’s cover one more API, an expense tracker API. This API should let you:</p>\n<ul>\n<li>Sign up as a new user.</li>\n<li>Generate and validate JWTs for handling authentication and user session.</li>\n<li>List and filter your past expenses. You can add the following filters:\n<ul>\n<li>Past week.</li>\n<li>Last month.</li>\n<li>Last 3 months.</li>\n<li>Custom (to specify a start and end date of your choosing).</li>\n</ul>\n</li>\n<li>Add new expenses.</li>\n<li>Remove existing expenses.</li>\n<li>Update existing expenses.</li>\n</ul>\n<p>Let’s now add some constraints:</p>\n<ul>\n<li>You’ll be using <a href=\"https://itnext.io/demystifying-jwt-a-guide-for-front-end-developers-ead6574531c3\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JWT</a> (JSON Web Token) to protect the endpoints and to identify the requester.</li>\n<li>For the different expense categories, you can use the following list (feel free to decide how to implement this as part of your data model):\n<ul>\n<li>Groceries</li>\n<li>Leisure</li>\n<li>Electronics</li>\n<li>Utilities</li>\n<li>Clothing</li>\n<li>Health</li>\n<li>Others.</li>\n</ul>\n</li>\n</ul>\n<p>As a recommendation, you can use MongoDB or an ORM for this project, such as <a href=\"https://mongoosejs.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Mongoose</a> (if you’re using JavaScript/Node for this).</p>\n<p>From everything you’ve done so far, you should feel pretty confident next time you have to build a new API.</p>\n<h2 id=\"5-markdown-note-taking-app\">5. Markdown Note-taking App</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Text processing, Markdown libraries, persistent storage, REST API with file upload.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/markdown-note-taking-app-tymi3.png\" alt=\"Markdown Note-taking App\"></p>\n<p>You’ve been building APIs all this time, so that concept alone should not be a problem by now. However, we’re increasing the difficulty by allowing file uploads through your RESTful API. You’ll need to understand how that part works inside a RESTful environment and then figure out a strategy to store those files while avoiding name collisions.</p>\n<p>You’ll also have to process the text in the following ways:</p>\n<ul>\n<li>You’ll provide an endpoint to check the grammar of the note.</li>\n<li>You’ll also provide an endpoint to save the note that can be passed in as Markdown text.</li>\n<li>Return the HTML version of the Markdown note (rendered note) through another endpoint.</li>\n</ul>\n<p>As a recommendation, if you’re using JavaScript for this particular project, you could use a library such as <a href=\"https://www.npmjs.com/package/multer\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Multer</a>, which is a Node.js module.</p>\n<h2 id=\"6-url-shortening-service\">6. URL Shortening Service</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Database indexing, HTTP redirects, RESTful endpoints</p>\n<p><img src=\"https://assets.roadmap.sh/guest/url-shortening-service-c1nzi.png\" alt=\"URL Shortening Service\"></p>\n<p>We’re now moving away from your standard APIs, and tackling URL shortening. This is a very common service, which allows you to shorten very long URLs, especially when looking to share them on social media or make them easily memorable.</p>\n<p>For this project idea let’s focus on the following features, which you should be more than capable of implementing on your local environment, no matter your OS.</p>\n<ul>\n<li>Ability to pass a long URL as part of the request and get a shorter version of it. You’re free to decide how you’ll perform the shortening .</li>\n<li>Save the shorter and longer versions of the URL in the database to be used later during redirection.</li>\n<li>Configure a catch-all route on your service that gets all the traffic (no matter the URI used), finds the correct longer version and performs a redirection so the user is seamlessly redirected to the proper destination.</li>\n</ul>\n<h2 id=\"7-real-time-polling-app\">7. Real-time Polling App</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: WebSockets, live data updates, state management</p>\n<p><img src=\"https://assets.roadmap.sh/guest/realtime-polling-app-8qx5h.png\" alt=\"Real-time Polling App\"></p>\n<p>Time to leave APIs alone for a while and focus on real-time interactions, another hot topic in web development. In fact, let’s try to use some sockets.</p>\n<p>Sockets are a fantastic way of enabling 2-way communication between two or more parties (systems) with very few lines of code. Read more about sockets <a href=\"https://www.digitalocean.com/community/tutorials/understanding-sockets\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">here</a>.</p>\n<p>That being said, we’re building both a client and a server for this project. The client can easily be a CLI (Command Line Interface) tool or a terminal program that will connect to the server and show the information being returned in real-time.</p>\n<p>The flow for this first socket-based project is simple:</p>\n<ul>\n<li>The client connects to the server and sends a pre-defined request.</li>\n<li>The server upon receiving this request, will send, through the same channel, an automatic response.</li>\n</ul>\n<p>While the flow might seem very similar to how HTTP-based communication works, the implementation is going to be very different. Keep in mind that from the client perspective, the request is sent, and there is no waiting logic, instead, the client will have code that gets triggered when the message from the server is received.</p>\n<p>This is a great first step towards building more complex socket-based systems.</p>\n<h2 id=\"8-simple-e-commerce-api\">8. Simple E-commerce API</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Shopping cart logic, payment gateway integration (Stripe, PayPal), product inventory management</p>\n<p><img src=\"https://assets.roadmap.sh/guest/simple-ecommerce-api-thzqo.png\" alt=\"Simple E-commerce API\"></p>\n<p>Back to the world of APIs, this time around we’re pushing for a logic-heavy implementation.</p>\n<p>For this one, you’ll have to keep in mind everything we’ve been covering so far:</p>\n<ul>\n<li>JWT authentication to ensure many users can interact with it.</li>\n<li>Interaction with external services. Here you’ll be integrating with payment gateways such as Stripe.</li>\n<li>A complex data model that can handle products, shopping carts, and more.</li>\n</ul>\n<p>With that in mind, let’s take a look at the responsibilities of this system:</p>\n<ul>\n<li>JWT creation and validation to handle authorization.</li>\n<li>Ability to create new users.</li>\n<li>Shopping cart management, which involves payment gateway integration as well.</li>\n<li>Product listings.</li>\n<li>Ability to create and edit products in the database.</li>\n</ul>\n<p>This project might not seem like it has a lot of features, but it compensates in complexity, so don’t skip it, as it acts as a great progress check since it’s re-using almost every skill you’ve picked up so far.</p>\n<h2 id=\"9-fitness-workout-tracker\">9. Fitness Workout Tracker</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: User-specific data storage, CRUD for workout sessions, date-time manipulation.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/fitness-workout-tracker-82uux.png\" alt=\"Fitness Workout Tracker\"></p>\n<p>This backend project is not just about taking in user-generated notes, but rather, about letting users create their own workout schedules with their own exercises and then go through them, checking the ones they’ve done, and the ones they haven’t.</p>\n<p>Making sure you also give them the space to add custom notes, with remarks about how the exercise in question felt and if they want to tweak it in the future.</p>\n<p>Keep in mind the following responsibilities for this backend project:</p>\n<ul>\n<li>There needs to be a user sign-up and log-in flow in this backend system, as many users should be able to use it.</li>\n<li>There needs to be a secure JWT flow for authentication.</li>\n<li>The system should let users create workouts composed of multiple exercises.</li>\n<li>For each workout, the user will be able to update it and provide comments on it.</li>\n<li>The schedule the user creates needs to be associated to a specific date, and any listing of active or pending workouts needs to also be sorted by date (and time if you want to take it one step further).</li>\n<li>There should also be a report of past workouts, showing the percentage of finished workouts during the queried period.</li>\n</ul>\n<p>The data model for this one can also be complex, as you’ll have predefined exercises that need to be grouped into workout sessions, and those can then have associated comments (input from the user).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/fitness-workout-tracker-datamodel-5mrkq.png\" alt=\"Fitness Workout Tracker Data Model\"></p>\n<p>Consider the benefits of using a structured model here vs something document-based, such as MongoDB and pick the one that feels better for your implementation.</p>\n<h2 id=\"10-recipe-sharing-platform\">10. Recipe Sharing Platform</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: File uploads and image processing (like Sharp), user permissions, complex querying</p>\n<p><img src=\"https://assets.roadmap.sh/guest/recipe-sharing-platform-jzs08.png\" alt=\"Recipe Sharing Platform\"></p>\n<p>While this project might feel a lot like the first one, the personal blogging platform, we’re taking the same concept, and then adding a lot more on top of it.</p>\n<p>We’re building a RESTful API (or rather several) that will let you perform the following actions:</p>\n<ul>\n<li>Access a list of recipes. You should be able to filter by keywords (text input), publication date, by chef, and by labels. Access to this endpoint should be public.</li>\n<li>The list should be paginated, and as part of the response on every page.</li>\n<li>Users should be able to sign up as chefs to the system to upload their own recipes.</li>\n<li>A JWT-secured login flow must be present to protect the endpoints in charge of creating new recipe posts.</li>\n<li>Images uploaded as part of the recipe should be processed to be re-sized into a standard size (you pick the dimensions). You can use a library such as <a href=\"https://sharp.pixelplumbing.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sharp</a> for this.</li>\n</ul>\n<h2 id=\"11-movie-reservation-system\">11. Movie Reservation System</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Relational data modeling (SQL), seat reservation logic, transaction management, schedule management.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/movie-reservation-system-5823e.png\" alt=\"Movie Reservation System\"></p>\n<p>There are very expensive pre-made tools that handle all this logic for companies, and the following diagram shows you a glimpse of that complexity.</p>\n<p>As backend projects go, this one is a great example of the many different problems you might need to solve while working in web development.</p>\n<p>A movie reservation system should allow any user to get tickets and their associated seats for any movie playing the specific day the user is looking to attend. This description alone already provides a lot of features and constraints we have to keep in mind:</p>\n<ul>\n<li>We’re going to have a list of movies (and maybe theaters as well).</li>\n<li>Each movie will have a recurring schedule for some time and then it’ll be taken out to never return.</li>\n<li>Users should be able to list movies, search for them and filter by dates, genres and even actors.</li>\n<li>Once found, the user should be able to pick the seats for their particular movie of choice, and for their date of choice.</li>\n<li>This leads us to you having to keep a virtual representation of your movie theater to understand seating distribution and availability.</li>\n<li>In the end, the user should also be able to pay using an external payment gateway such as Stripe (we’ve already covered this step in the past).</li>\n</ul>\n<h2 id=\"12-restaurant-review-platform-api-with-automatic-nlp-analysis\">12. Restaurant Review Platform (API) with automatic NLP analysis</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: RESTful API, In-memory database (for live leaderboard), SQL, Natural Language Processing to auto-label positive and negative comments.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/restaurant-review-platform-26c1f.png\" alt=\"Restaurant Review Platform\"></p>\n<p>Now this project takes a turn into the land of noSQL and AI by leading with user input. The aim of this particular backend project is to provide a very simple API that will let users:</p>\n<ul>\n<li>Input their own review of a restaurant (ideally, the API should request the restaurant’s ID to make sure users are reviewing the correct one).</li>\n<li>Keep a leaderboard of restaurants with a generic positive or negative score, based on the type of reviews these restaurants get. For this, you can use Redis as an in-memory leaderboard to have your API query it, instead of hitting the database you’re using. This also implies that you’ll have to keep the leaderboard updated on Redis as well (as a hint: look for type <a href=\"https://redis.io/docs/data-types/sorted-sets/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SortedSet</a> data type to understand how to do this).</li>\n<li>Perform NLP (Natural Language Processing) on the user’s text portion of the review, to understand if it’s a positive one or a negative one.</li>\n<li>Use the result of the NLP as a scoring system for the leaderboard.</li>\n</ul>\n<p>As a recommendation, you might want to use Python on this project, as there tend to be more libraries around NLP for this language.</p>\n<h2 id=\"13-multiplayer-battleship-game-server\">13. Multiplayer Battleship Game Server</h2>\n<p><strong>Difficulty</strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Game state synchronization, low-latency networking, concurrency control.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/multiplayer-battleship-lv5oj.png\" alt=\"Multiplayer Battleship Game Server\"></p>\n<p>For this project you’re not going to build a full game from scratch, so don’t worry.</p>\n<p>You will however, build a game server. Your game server will have to maintain the internal state of each player’s board, and it should also enable communication between them by broadcasting their actions and results. Since we have “low-latency networking” as a constraint here, the logical implementation would be through the use of Sockets (so if you haven’t done it yet, go back to project 7 and work on it first).</p>\n<p>You’re free to pick the programming language you feel more comfortable with, however, keep the mind that you’ll have to:</p>\n<ul>\n<li>Keep track of the player’s state and game state.</li>\n<li>Enable 2-way communication between players and server.</li>\n<li>Allow players to join the game and set up their initial state somehow.</li>\n</ul>\n<p>This can be a very fun project to work on, even if you’re “just” building a terminal version of this multiplayer game, as you’ll be using several of the concepts and technologies covered so far on this list.</p>\n<h2 id=\"14-database-backup-cli-utility\">14. Database Backup CLI utility</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Advanced SQL, Database fundamentals, CLI development, Node.js (for CLI)</p>\n<p><img src=\"https://assets.roadmap.sh/guest/database-backup-cli-jwrcj.png\" alt=\"Database Backup CLI utility\"></p>\n<p>We’re now moving away from the API world for a while, and into the world of command line interfaces, which is another very common space for backend developers to work on.</p>\n<p>This time around, the project is a CLI utility to back up an entire database.</p>\n<p>So for this project, you’ll be creating a command line utility that takes the following attributes:</p>\n<ul>\n<li><strong>Host:</strong> the host of your database (it can be localhost or anything else).</li>\n<li><strong>Username</strong>: the utility will need a username to login and query the database.</li>\n<li><strong>Password</strong>: same with the password, usually databases are protected this way.</li>\n<li><strong>DB Name</strong>: the name of the database to backup. We’re backing up the entire set of tables inside this database.</li>\n<li><strong>Destination folder</strong>: the folder where all the dump files will be stored.</li>\n</ul>\n<p>With all that information, your utility should be able to connect to the database, pull the list of tables, and for each one understand its structure and its data. In the end, the resulting files inside the destination folder should have everything you need to restore the database on another server simply by using these files.</p>\n<p>Finally, if you haven’t heard of it yet, you might want to check out the <a href=\"https://dev.mysql.com/doc/refman/8.3/en/show-create-table.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SHOW CREATE TABLE</a> statement.</p>\n<h2 id=\"15-online-code-compiler-api\">15. Online Code Compiler API</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Sandboxing code execution, integration with compilers, WebSocket communication.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/online-code-compiler-c7xjb.png\" alt=\"Online Code Compiler API\"></p>\n<p>For this project, you’ll be building the backend of a remote code execution application. In other words, your APIs will allow you to receive source code written using a specific language of choice (you can pick the one you want, and only allow that one), run it and then return the output of that execution.</p>\n<p>Of course, doing this without any restrictions is not worth it for being in the “difficult” section of this list, so let’s kick it up a notch:</p>\n<ul>\n<li>The code execution should be done inside a safe sandbox, which means that the code can’t hurt or affect the system it’s running on, no matter what the code or the logic dictates.</li>\n<li>On top of that, for long-running tasks, the API should also provide a status report containing the following information:</li>\n<li>Time running.</li>\n<li>Start time of the execution.</li>\n<li>Lines of code being executed.</li>\n</ul>\n<h2 id=\"16-messaging-platform-backend\">16. Messaging Platform Backend</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Real-time messaging, end-to-end encryption, contact synchronization</p>\n<p><img src=\"https://assets.roadmap.sh/guest/messaging-platform-backend-96jpw.png\" alt=\"Messaging Platform Backend\"></p>\n<p>Yes, we’re talking about a chat platform here. And as a backend developer you’re more than ready to implement both the server and the client application.</p>\n<p>This backend project would take project #7 to the next level, by implementing the following responsibilities:</p>\n<ul>\n<li>Adding message encryption between client applications</li>\n<li>The ability to understand who’s online</li>\n<li>Understand if those users are interacting with you (a.k.a showing the “[username] is typing” message in real-time).</li>\n<li>Sending a message from one of the clients into the server should be broadcasted to the rest of the clients connected.</li>\n</ul>\n<p>As a recommendation for technology implementing this project, <a href=\"http://socket.io\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Socket.io</a> would be a perfect match. This means you’d be using JavaScript (node.js) for this.</p>\n<h2 id=\"17-content-delivery-network-cdn-simulator\">17. Content Delivery Network (CDN) Simulator</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Load balancing algorithms, caching strategies, network latency simulation</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cdn-simulator-lv7kl.png\" alt=\"Content Delivery Network (CDN) Simulator\"></p>\n<p>For this particular backend project, we’re not going to focus on coding, but rather on backend tools and their configuration. A <a href=\"https://aws.amazon.com/what-is/cdn/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">CDN</a> (or Content Delivery Network) is a platform that allows you to serve static content (like text files, images, audio, etc) safely and reliably.</p>\n<p>Instead of having all files inside the same server, the content is replicated and distributed across a network of servers that can provide you with the files at any given point in time.</p>\n<p>The point of this project is for you to figure out a way to set up your own CDN keeping in mind the following points:</p>\n<ul>\n<li>Use cloud servers (you can pick your favorite cloud provider for this)</li>\n<li>Configure a load balancer to distribute the load between all servers.</li>\n<li>Set up a caching strategy.</li>\n</ul>\n<p>Remember that all major cloud providers have a free tier that allows you to use all their services for some time. AWS for example, allows for a full year of free tier limited to the type of resources you can use.</p>\n<h2 id=\"18-time-tracking-cli-for-freelancers\">18. Time-tracking CLI for Freelancers</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: time tracking, interactive CLI, Day.js for time operations, reporting.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/time-tracking-cli-freelancers-x7ldv.png\" alt=\"Time-tracking CLI for Freelancers\"></p>\n<p>As freelancers, sometimes understanding what you’re working on, or understanding how much time you’ve spent on a particular project once it’s time to get paid, can be a challenge.</p>\n<p>So, with this command line interface tool, we’ll try to solve that pain for freelancers. The tool you’re developing should let you specify that you’re starting to work on a project, and once you’re done, you should also be able to say that you’ve stopped.</p>\n<p>On top of that, there should be an interactive reporting mode that should tell you the amount of time spent so far on a particular project (with the ability to filter by date and time), so you can know exactly how much to charge each client.</p>\n<p>From the user’s POV, you could have commands like this:</p>\n<ul>\n<li>freelance start project1</li>\n<li>freelance stop project2</li>\n</ul>\n<p>And when in interactive mode, something like this should work:</p>\n<ul>\n<li>report project1 since 1/2/24</li>\n</ul>\n<p>The challenge on this backend project is not just the CLI itself, which you’ve built in the past, but the actual time tracking logic that needs to happen internally. You’ll be keeping track of small chunks of time associated with different backend projects, and once the report is requested, you need to properly query your DB and get only the right chunks, so you can later add them up and return a valid number.</p>\n<h2 id=\"19-js-obfuscator-cli-utility\">19. JS Obfuscator CLI utility</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: code obfuscation, batch processing of files using a CLI, Node.js.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/js-obfuscator-utility-f0dfi.png\" alt=\"JS Obfuscator CLI utility\"></p>\n<p>Code obfuscation happens when you turn a perfectly readable code into something that only a machine can understand, without changing the plain text nature of the file. In other words, you just make it impossible for a human to read and understand.</p>\n<p>Many tools do this in the JS ecosystem, it’s now your turn to create a new tool and perform the exact same action. As an added difficulty, you’ll be coding a tool that does this to an entire folder filled with files (not just one at the time).</p>\n<p>Make sure the output for each file is placed inside the same folder, with a “.obs.js” extension, and that you’re also navigating sub-folders searching for more files.</p>\n<p>Try to avoid libraries that already perform these exact same tasks, as you’ll be skipping through all the potential problems you can find, and effectively learning nothing from the experience.</p>\n<h2 id=\"20-web-scraper-cli\">20. Web Scraper CLI</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Web scraping, headless browsing, rules engine</p>\n<p><img src=\"https://assets.roadmap.sh/guest/webscraper-cli-ja5h2.png\" alt=\"Web Scraper CLI\"></p>\n<p>A web scraper is a tool that allows you to navigate a website through code, and in the process, capture information from the presented web pages.</p>\n<p>As part of the last backend project of this list, you’ll be implementing your very own web scraper CLI tool. This tool will take input from the user with a list of preset commands, such as:</p>\n<ul>\n<li>show code: to list the HTML code of the current page.</li>\n<li>navigate: to open a new URL</li>\n<li>capture: this will return a subsection of the HTML of the current page using the CSS selector you specify.</li>\n<li>click on: this command will trigger a click on a particular HTML element using a CSS selector provided.</li>\n</ul>\n<p>Feel free to add extra commands to make the navigation even more interactive.</p>\n<p>With the last of our backend project ideas, you’ve covered all the major areas involved in backend development and you’re more than ready to apply for a backend development job if you haven’t already.</p>\n<p>If you find a piece of technology that wasn’t covered here, you’ll have the skills required to pick it up in no time.</p>";

				const frontmatter$1e = {"title":"20 Backend Project Ideas to take you from Beginner to Pro","description":"Seeking backend projects to enhance your skills? Explore our top 20 project ideas, from simple apps to complex systems. Start building today!","authorId":"fernando","excludedBySlug":"/backend/project-ideas","seo":{"title":"20 Backend Project Ideas to take you from Beginner to Pro","description":"Seeking backend projects to enhance your skills? Explore our top 20 project ideas, from simple apps to complex systems. Start building today!","ogImageUrl":"https://assets.roadmap.sh/guest/backend-project-ideas-zxutw.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-05-09T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1e = "/workspace/src/data/guides/backend-project-ideas.md";
				const url$1e = undefined;
				function rawContent$1e() {
					return "   \n                                                                  \n                                                                                                                                                            \n                  \n                                        \n    \n                                                                    \n                                                                                                                                                              \n                                                                               \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Fresh ideas for backend projects.](https://assets.roadmap.sh/guest/backend-project-ideas-zxutw.jpg)\n\nAs backend developers, showcasing our work to others is not straightforward, given that what we do is not very visible.\n\nThat said, having a project portfolio, even as backend developers, it’s very important, as it can lead to new job opportunities.\n\nAs an added bonus, the experience you get out of the entire process of building the apps for your portfolio will help you improve your coding skills.\n\nLet’s take a look at 20 of the best backend projects you can work on to improve both your project portfolio and to learn [backend development](https://roadmap.sh/backend).\n\nKeep in mind that these project ideas are organized from easiest to hardest to complete, and the entire list should take you at least a year to complete, if you’re not rushing the process.\n\nSo sit back, grab a cup of your favorite hot drink, and let’s get started!\n\n## 1. Personal Blogging Platform API\n\n**Difficulty**: Easy\n\n**_Skills and technologies used_**: CRUD for main operations, databases (SQL or NoSQL), server-side RESTful API.\n\n![Blogging Platform API](https://assets.roadmap.sh/guest/blogging-platform-api.png)\n\nLet’s start with a very common one when it comes to backend projects.\n\nThis is a RESTful API that would power a personal blog. This implies that you’d have to create a backend API with the following responsibilities:\n\n- Return a list of articles. You can add filters such as publishing date, or tags.\n- Return a single article, specified by the ID of the article.\n- Create a new article to be published.\n- Delete a single article, specified by the ID.\n- Update a single article, again, you’d specify the article using its ID.\n\nAnd with those endpoints you’ve covered the basic CRUD operations (**C**reate, **R**ead, **U**pdate and **D**elete).\n\nAs a recommendation for techstack, you could use [Fastify](https://fastify.dev/) as the main [backend framework](https://roadmap.sh/backend/frameworks) if you’re going with Node, or perhaps [Django](https://www.djangoproject.com/) for Python or even [Ruby on Rails](https://rubyonrails.org/) or [Sinatra](https://sinatrarb.com/) for Ruby. As for your database, you could use [MongoDB](https://www.mongodb.com/) if you want to try NoSQL or [MySQL](https://www.mysql.com/) if you’re looking to get started with relational databases first.\n\n## 2. To-Do List API\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: REST API design, JSON, basic authentication middleware.\n\n![To-Do List API](https://assets.roadmap.sh/guest/todo-list-api-bsrdd.png)\n\nWe’re continuing with the APIs for our backend project ideas, this time around for a To-Do application. Why is it different from the previous one?\n\nWhile the previous project only focused on the main CRUD operations, here we’ll add some more interesting responsibilities, such as:\n\n1. An authentication logic, which means you’ll have to keep a new table of users and their credentials\n2. You’ll have to create both users and tasks.\n3. You’ll also have to be able to update tasks (their status) and even delete them.\n4. Get a list of tasks, filter them by status and get the details of each one.\n\nYou’re free to implement this with whatever programming language and framework you want, however, you could continue using the same stack from the previous project.\n\n## 3. Weather API Wrapper Service\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: Third-party API integration, caching strategy, environment variable management.\n\n![Weather API Wrapper Service](https://assets.roadmap.sh/guest/weather-api-f8i1q.png)\n\nLet’s take our API magic to the next level with this new backend project. Now instead of just relying on a database, we’re going to tackle two new topics:\n\n- Using external services.\n- Adding caching through the use of a quick in-memory storage.\n\nAs for the actual weather API to use, you can use your favorite one, as a suggestion, here is a link to [Visual Crossing’s API](https://www.visualcrossing.com/weather-api), it’s completely FREE and easy to use.\n\nRegarding the in-memory cache, a pretty common recommendation is to use [Redis](https://redis.io/), you can read more about it [here](https://redis.io/docs/manual/client-side-caching/), and as a recommendation, you could use the city code entered by the user as the key, and save there the result from calling the API.\n\nAt the same time, when you “set” the value in the cache, you can also give it an expiration time in seconds (using the EX flag on the [SET command](https://redis.io/commands/set/)). That way the cache (the keys) will automatically clean itself when the data is old enough (for example, giving it a 12-hours expiration time).\n\n## 4. Expense Tracker API\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: Data modeling, user authentication (JWT).\n\n![Expense Tracker API](https://assets.roadmap.sh/guest/expense-tracker-api-m72p5.png)\n\nFor the last of our “easy” backend projects, let’s cover one more API, an expense tracker API. This API should let you:\n\n- Sign up as a new user.\n- Generate and validate JWTs for handling authentication and user session.\n- List and filter your past expenses. You can add the following filters:\n  - Past week.\n  - Last month.\n  - Last 3 months.\n  - Custom (to specify a start and end date of your choosing).\n- Add new expenses.\n- Remove existing expenses.\n- Update existing expenses.\n\nLet’s now add some constraints:\n\n- You’ll be using [JWT](https://itnext.io/demystifying-jwt-a-guide-for-front-end-developers-ead6574531c3) (JSON Web Token) to protect the endpoints and to identify the requester.\n- For the different expense categories, you can use the following list (feel free to decide how to implement this as part of your data model):\n    - Groceries\n    - Leisure\n    - Electronics\n    - Utilities\n    - Clothing\n    - Health\n    - Others.\n\nAs a recommendation, you can use MongoDB or an ORM for this project, such as [Mongoose](https://mongoosejs.com/) (if you’re using JavaScript/Node for this).\n\nFrom everything you’ve done so far, you should feel pretty confident next time you have to build a new API.\n\n## 5. Markdown Note-taking App\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Text processing, Markdown libraries, persistent storage, REST API with file upload.\n\n![Markdown Note-taking App](https://assets.roadmap.sh/guest/markdown-note-taking-app-tymi3.png)\n\nYou’ve been building APIs all this time, so that concept alone should not be a problem by now. However, we’re increasing the difficulty by allowing file uploads through your RESTful API. You’ll need to understand how that part works inside a RESTful environment and then figure out a strategy to store those files while avoiding name collisions.\n\nYou’ll also have to process the text in the following ways:\n\n- You’ll provide an endpoint to check the grammar of the note.\n- You’ll also provide an endpoint to save the note that can be passed in as Markdown text.\n- Return the HTML version of the Markdown note (rendered note) through another endpoint.\n\nAs a recommendation, if you’re using JavaScript for this particular project, you could use a library such as [Multer](https://www.npmjs.com/package/multer), which is a Node.js module.\n\n## 6. URL Shortening Service\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Database indexing, HTTP redirects, RESTful endpoints\n\n![URL Shortening Service](https://assets.roadmap.sh/guest/url-shortening-service-c1nzi.png)\n\nWe’re now moving away from your standard APIs, and tackling URL shortening. This is a very common service, which allows you to shorten very long URLs, especially when looking to share them on social media or make them easily memorable.\n\nFor this project idea let’s focus on the following features, which you should be more than capable of implementing on your local environment, no matter your OS.\n\n- Ability to pass a long URL as part of the request and get a shorter version of it. You’re free to decide how you’ll perform the shortening .\n- Save the shorter and longer versions of the URL in the database to be used later during redirection.\n- Configure a catch-all route on your service that gets all the traffic (no matter the URI used), finds the correct longer version and performs a redirection so the user is seamlessly redirected to the proper destination.\n\n## 7. Real-time Polling App\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: WebSockets, live data updates, state management\n\n![Real-time Polling App](https://assets.roadmap.sh/guest/realtime-polling-app-8qx5h.png)\n\nTime to leave APIs alone for a while and focus on real-time interactions, another hot topic in web development. In fact, let’s try to use some sockets.\n\nSockets are a fantastic way of enabling 2-way communication between two or more parties (systems) with very few lines of code. Read more about sockets [here](https://www.digitalocean.com/community/tutorials/understanding-sockets).\n\nThat being said, we’re building both a client and a server for this project. The client can easily be a CLI (Command Line Interface) tool or a terminal program that will connect to the server and show the information being returned in real-time.\n\nThe flow for this first socket-based project is simple:\n\n- The client connects to the server and sends a pre-defined request.\n- The server upon receiving this request, will send, through the same channel, an automatic response.\n\nWhile the flow might seem very similar to how HTTP-based communication works, the implementation is going to be very different. Keep in mind that from the client perspective, the request is sent, and there is no waiting logic, instead, the client will have code that gets triggered when the message from the server is received.\n\nThis is a great first step towards building more complex socket-based systems.\n\n## 8. Simple E-commerce API\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Shopping cart logic, payment gateway integration (Stripe, PayPal), product inventory management\n\n![Simple E-commerce API](https://assets.roadmap.sh/guest/simple-ecommerce-api-thzqo.png)\n\nBack to the world of APIs, this time around we’re pushing for a logic-heavy implementation.\n\nFor this one, you’ll have to keep in mind everything we’ve been covering so far:\n\n- JWT authentication to ensure many users can interact with it.\n- Interaction with external services. Here you’ll be integrating with payment gateways such as Stripe.\n- A complex data model that can handle products, shopping carts, and more.\n\nWith that in mind, let’s take a look at the responsibilities of this system:\n\n- JWT creation and validation to handle authorization.\n- Ability to create new users.\n- Shopping cart management, which involves payment gateway integration as well.\n- Product listings.\n- Ability to create and edit products in the database.\n\nThis project might not seem like it has a lot of features, but it compensates in complexity, so don’t skip it, as it acts as a great progress check since it’s re-using almost every skill you’ve picked up so far.\n\n## 9. Fitness Workout Tracker\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: User-specific data storage, CRUD for workout sessions, date-time manipulation.\n\n![Fitness Workout Tracker](https://assets.roadmap.sh/guest/fitness-workout-tracker-82uux.png)\n\nThis backend project is not just about taking in user-generated notes, but rather, about letting users create their own workout schedules with their own exercises and then go through them, checking the ones they’ve done, and the ones they haven't.\n\nMaking sure you also give them the space to add custom notes, with remarks about how the exercise in question felt and if they want to tweak it in the future.\n\nKeep in mind the following responsibilities for this backend project:\n\n- There needs to be a user sign-up and log-in flow in this backend system, as many users should be able to use it.\n- There needs to be a secure JWT flow for authentication.\n- The system should let users create workouts composed of multiple exercises.\n- For each workout, the user will be able to update it and provide comments on it.\n- The schedule the user creates needs to be associated to a specific date, and any listing of active or pending workouts needs to also be sorted by date (and time if you want to take it one step further).\n- There should also be a report of past workouts, showing the percentage of finished workouts during the queried period.\n\nThe data model for this one can also be complex, as you’ll have predefined exercises that need to be grouped into workout sessions, and those can then have associated comments (input from the user).\n\n![Fitness Workout Tracker Data Model](https://assets.roadmap.sh/guest/fitness-workout-tracker-datamodel-5mrkq.png)\n\nConsider the benefits of using a structured model here vs something document-based, such as MongoDB and pick the one that feels better for your implementation.\n\n## 10. Recipe Sharing Platform\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: File uploads and image processing (like Sharp), user permissions, complex querying\n\n![Recipe Sharing Platform](https://assets.roadmap.sh/guest/recipe-sharing-platform-jzs08.png)\n\nWhile this project might feel a lot like the first one, the personal blogging platform, we’re taking the same concept, and then adding a lot more on top of it.\n\nWe’re building a RESTful API (or rather several) that will let you perform the following actions:\n\n- Access a list of recipes. You should be able to filter by keywords (text input), publication date, by chef, and by labels. Access to this endpoint should be public.\n- The list should be paginated, and as part of the response on every page.\n- Users should be able to sign up as chefs to the system to upload their own recipes.\n- A JWT-secured login flow must be present to protect the endpoints in charge of creating new recipe posts.\n- Images uploaded as part of the recipe should be processed to be re-sized into a standard size (you pick the dimensions). You can use a library such as [Sharp](https://sharp.pixelplumbing.com/) for this.\n\n## 11. Movie Reservation System\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Relational data modeling (SQL), seat reservation logic, transaction management, schedule management.\n\n![Movie Reservation System](https://assets.roadmap.sh/guest/movie-reservation-system-5823e.png)\n\nThere are very expensive pre-made tools that handle all this logic for companies, and the following diagram shows you a glimpse of that complexity.\n\nAs backend projects go, this one is a great example of the many different problems you might need to solve while working in web development.\n\nA movie reservation system should allow any user to get tickets and their associated seats for any movie playing the specific day the user is looking to attend. This description alone already provides a lot of features and constraints we have to keep in mind:\n\n- We’re going to have a list of movies (and maybe theaters as well).\n- Each movie will have a recurring schedule for some time and then it’ll be taken out to never return.\n- Users should be able to list movies, search for them and filter by dates, genres and even actors.\n- Once found, the user should be able to pick the seats for their particular movie of choice, and for their date of choice.\n- This leads us to you having to keep a virtual representation of your movie theater to understand seating distribution and availability.\n- In the end, the user should also be able to pay using an external payment gateway such as Stripe (we’ve already covered this step in the past).\n\n## 12. Restaurant Review Platform (API) with automatic NLP analysis\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: RESTful API, In-memory database (for live leaderboard), SQL, Natural Language Processing to auto-label positive and negative comments.\n\n![Restaurant Review Platform](https://assets.roadmap.sh/guest/restaurant-review-platform-26c1f.png)\n\nNow this project takes a turn into the land of noSQL and AI by leading with user input. The aim of this particular backend project is to provide a very simple API that will let users:\n\n- Input their own review of a restaurant (ideally, the API should request the restaurant’s ID to make sure users are reviewing the correct one).\n- Keep a leaderboard of restaurants with a generic positive or negative score, based on the type of reviews these restaurants get. For this, you can use Redis as an in-memory leaderboard to have your API query it, instead of hitting the database you’re using. This also implies that you’ll have to keep the leaderboard updated on Redis as well (as a hint: look for type [SortedSet](https://redis.io/docs/data-types/sorted-sets/) data type to understand how to do this).\n- Perform NLP (Natural Language Processing) on the user’s text portion of the review, to understand if it’s a positive one or a negative one.\n- Use the result of the NLP as a scoring system for the leaderboard.\n\nAs a recommendation, you might want to use Python on this project, as there tend to be more libraries around NLP for this language.\n\n## 13. Multiplayer Battleship Game Server\n\n**Difficulty**: Difficult\n\n**_Skills and technologies used_**: Game state synchronization, low-latency networking, concurrency control.\n\n![Multiplayer Battleship Game Server](https://assets.roadmap.sh/guest/multiplayer-battleship-lv5oj.png)\n\nFor this project you’re not going to build a full game from scratch, so don’t worry.\n\nYou will however, build a game server. Your game server will have to maintain the internal state of each player’s board, and it should also enable communication between them by broadcasting their actions and results. Since we have “low-latency networking” as a constraint here, the logical implementation would be through the use of Sockets (so if you haven’t done it yet, go back to project 7 and work on it first).\n\nYou’re free to pick the programming language you feel more comfortable with, however, keep the mind that you’ll have to:\n\n- Keep track of the player's state and game state.\n- Enable 2-way communication between players and server.\n- Allow players to join the game and set up their initial state somehow.\n\nThis can be a very fun project to work on, even if you’re “just” building a terminal version of this multiplayer game, as you’ll be using several of the concepts and technologies covered so far on this list.\n\n## 14. Database Backup CLI utility\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Advanced SQL, Database fundamentals, CLI development, Node.js (for CLI)\n\n![Database Backup CLI utility](https://assets.roadmap.sh/guest/database-backup-cli-jwrcj.png)\n\nWe’re now moving away from the API world for a while, and into the world of command line interfaces, which is another very common space for backend developers to work on.\n\nThis time around, the project is a CLI utility to back up an entire database.\n\nSo for this project, you’ll be creating a command line utility that takes the following attributes:\n\n- **Host:** the host of your database (it can be localhost or anything else).\n- **Username**: the utility will need a username to login and query the database.\n- **Password**: same with the password, usually databases are protected this way.\n- **DB Name**: the name of the database to backup. We’re backing up the entire set of tables inside this database.\n- **Destination folder**: the folder where all the dump files will be stored.\n\nWith all that information, your utility should be able to connect to the database, pull the list of tables, and for each one understand its structure and its data. In the end, the resulting files inside the destination folder should have everything you need to restore the database on another server simply by using these files.\n\nFinally, if you haven’t heard of it yet, you might want to check out the [SHOW CREATE TABLE](https://dev.mysql.com/doc/refman/8.3/en/show-create-table.html) statement.\n\n## 15. Online Code Compiler API\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Sandboxing code execution, integration with compilers, WebSocket communication.\n\n![Online Code Compiler API](https://assets.roadmap.sh/guest/online-code-compiler-c7xjb.png)\n\nFor this project, you’ll be building the backend of a remote code execution application. In other words, your APIs will allow you to receive source code written using a specific language of choice (you can pick the one you want, and only allow that one), run it and then return the output of that execution.\n\nOf course, doing this without any restrictions is not worth it for being in the “difficult” section of this list, so let’s kick it up a notch:\n\n- The code execution should be done inside a safe sandbox, which means that the code can’t hurt or affect the system it’s running on, no matter what the code or the logic dictates.\n- On top of that, for long-running tasks, the API should also provide a status report containing the following information:\n- Time running.\n- Start time of the execution.\n- Lines of code being executed.\n\n## 16. Messaging Platform Backend\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Real-time messaging, end-to-end encryption, contact synchronization\n\n![Messaging Platform Backend](https://assets.roadmap.sh/guest/messaging-platform-backend-96jpw.png)\n\nYes, we’re talking about a chat platform here. And as a backend developer you’re more than ready to implement both the server and the client application.\n\nThis backend project would take project #7 to the next level, by implementing the following responsibilities:\n\n- Adding message encryption between client applications\n- The ability to understand who’s online\n- Understand if those users are interacting with you (a.k.a showing the “\\[username\\] is typing” message in real-time).\n- Sending a message from one of the clients into the server should be broadcasted to the rest of the clients connected.\n\nAs a recommendation for technology implementing this project, [Socket.io](http://socket.io) would be a perfect match. This means you’d be using JavaScript (node.js) for this.\n\n## 17. Content Delivery Network (CDN) Simulator\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: Load balancing algorithms, caching strategies, network latency simulation\n\n![Content Delivery Network (CDN) Simulator](https://assets.roadmap.sh/guest/cdn-simulator-lv7kl.png)\n\nFor this particular backend project, we’re not going to focus on coding, but rather on backend tools and their configuration. A [CDN](https://aws.amazon.com/what-is/cdn/) (or Content Delivery Network) is a platform that allows you to serve static content (like text files, images, audio, etc) safely and reliably.\n\nInstead of having all files inside the same server, the content is replicated and distributed across a network of servers that can provide you with the files at any given point in time.\n\nThe point of this project is for you to figure out a way to set up your own CDN keeping in mind the following points:\n\n- Use cloud servers (you can pick your favorite cloud provider for this)\n- Configure a load balancer to distribute the load between all servers.\n- Set up a caching strategy.\n\nRemember that all major cloud providers have a free tier that allows you to use all their services for some time. AWS for example, allows for a full year of free tier limited to the type of resources you can use.\n\n## 18. Time-tracking CLI for Freelancers\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: time tracking, interactive CLI, Day.js for time operations, reporting.\n\n![Time-tracking CLI for Freelancers](https://assets.roadmap.sh/guest/time-tracking-cli-freelancers-x7ldv.png)\n\nAs freelancers, sometimes understanding what you’re working on, or understanding how much time you’ve spent on a particular project once it’s time to get paid, can be a challenge.\n\nSo, with this command line interface tool, we’ll try to solve that pain for freelancers. The tool you’re developing should let you specify that you’re starting to work on a project, and once you’re done, you should also be able to say that you’ve stopped.\n\nOn top of that, there should be an interactive reporting mode that should tell you the amount of time spent so far on a particular project (with the ability to filter by date and time), so you can know exactly how much to charge each client.\n\nFrom the user’s POV, you could have commands like this:\n\n- freelance start project1\n- freelance stop project2\n\nAnd when in interactive mode, something like this should work:\n\n- report project1 since 1/2/24\n\nThe challenge on this backend project is not just the CLI itself, which you’ve built in the past, but the actual time tracking logic that needs to happen internally. You’ll be keeping track of small chunks of time associated with different backend projects, and once the report is requested, you need to properly query your DB and get only the right chunks, so you can later add them up and return a valid number.\n\n## 19. JS Obfuscator CLI utility\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: code obfuscation, batch processing of files using a CLI, Node.js.\n\n![JS Obfuscator CLI utility](https://assets.roadmap.sh/guest/js-obfuscator-utility-f0dfi.png)\n\nCode obfuscation happens when you turn a perfectly readable code into something that only a machine can understand, without changing the plain text nature of the file. In other words, you just make it impossible for a human to read and understand.\n\nMany tools do this in the JS ecosystem, it’s now your turn to create a new tool and perform the exact same action. As an added difficulty, you’ll be coding a tool that does this to an entire folder filled with files (not just one at the time).\n\nMake sure the output for each file is placed inside the same folder, with a “.obs.js” extension, and that you’re also navigating sub-folders searching for more files.\n\nTry to avoid libraries that already perform these exact same tasks, as you’ll be skipping through all the potential problems you can find, and effectively learning nothing from the experience.\n\n## 20. Web Scraper CLI\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: Web scraping, headless browsing, rules engine\n\n![Web Scraper CLI](https://assets.roadmap.sh/guest/webscraper-cli-ja5h2.png)\n\nA web scraper is a tool that allows you to navigate a website through code, and in the process, capture information from the presented web pages.\n\nAs part of the last backend project of this list, you’ll be implementing your very own web scraper CLI tool. This tool will take input from the user with a list of preset commands, such as:\n\n- show code: to list the HTML code of the current page.\n- navigate: to open a new URL\n- capture: this will return a subsection of the HTML of the current page using the CSS selector you specify.\n- click on: this command will trigger a click on a particular HTML element using a CSS selector provided.\n\nFeel free to add extra commands to make the navigation even more interactive.\n\nWith the last of our backend project ideas, you’ve covered all the major areas involved in backend development and you’re more than ready to apply for a backend development job if you haven’t already.\n\nIf you find a piece of technology that wasn’t covered here, you’ll have the skills required to pick it up in no time.\n";
				}
				async function compiledContent$1e() {
					return await html$1e();
				}
				function getHeadings$1e() {
					return [{"depth":2,"slug":"1-personal-blogging-platform-api","text":"1. Personal Blogging Platform API"},{"depth":2,"slug":"2-to-do-list-api","text":"2. To-Do List API"},{"depth":2,"slug":"3-weather-api-wrapper-service","text":"3. Weather API Wrapper Service"},{"depth":2,"slug":"4-expense-tracker-api","text":"4. Expense Tracker API"},{"depth":2,"slug":"5-markdown-note-taking-app","text":"5. Markdown Note-taking App"},{"depth":2,"slug":"6-url-shortening-service","text":"6. URL Shortening Service"},{"depth":2,"slug":"7-real-time-polling-app","text":"7. Real-time Polling App"},{"depth":2,"slug":"8-simple-e-commerce-api","text":"8. Simple E-commerce API"},{"depth":2,"slug":"9-fitness-workout-tracker","text":"9. Fitness Workout Tracker"},{"depth":2,"slug":"10-recipe-sharing-platform","text":"10. Recipe Sharing Platform"},{"depth":2,"slug":"11-movie-reservation-system","text":"11. Movie Reservation System"},{"depth":2,"slug":"12-restaurant-review-platform-api-with-automatic-nlp-analysis","text":"12. Restaurant Review Platform (API) with automatic NLP analysis"},{"depth":2,"slug":"13-multiplayer-battleship-game-server","text":"13. Multiplayer Battleship Game Server"},{"depth":2,"slug":"14-database-backup-cli-utility","text":"14. Database Backup CLI utility"},{"depth":2,"slug":"15-online-code-compiler-api","text":"15. Online Code Compiler API"},{"depth":2,"slug":"16-messaging-platform-backend","text":"16. Messaging Platform Backend"},{"depth":2,"slug":"17-content-delivery-network-cdn-simulator","text":"17. Content Delivery Network (CDN) Simulator"},{"depth":2,"slug":"18-time-tracking-cli-for-freelancers","text":"18. Time-tracking CLI for Freelancers"},{"depth":2,"slug":"19-js-obfuscator-cli-utility","text":"19. JS Obfuscator CLI utility"},{"depth":2,"slug":"20-web-scraper-cli","text":"20. Web Scraper CLI"}];
				}

				const Content$1e = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1e;
					content.file = file$1e;
					content.url = url$1e;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1e())}`;
				});

const __vite_glob_0_20 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1e,
	compiledContent: compiledContent$1e,
	default: Content$1e,
	file: file$1e,
	frontmatter: frontmatter$1e,
	getHeadings: getHeadings$1e,
	rawContent: rawContent$1e,
	url: url$1e
}, Symbol.toStringTag, { value: 'Module' }));

const html$1d = () => "<p><img src=\"https://assets.roadmap.sh/guest/backend-technologies-pnof4.jpg\" alt=\"Best backend development technologies.\"></p>\n<p>Backend technologies are the key to building robust and scalable applications. They power all platforms and products on the web without even being visible to the users.</p>\n<p>While backend programming languages form the foundation of backend development, they aren’t enough on their own. Understanding and leveraging the right backend technologies can significantly enhance your development workflow and application performance.</p>\n<p>As a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend developer</a>, you’ll be faced with too many options while trying to define your backend technology stack, and that can feel overwhelming.</p>\n<p>So, in this article, we’re going to cover the best backend technologies in the following categories:</p>\n<ul>\n<li>Databases</li>\n<li>Version control systems</li>\n<li>Containerization and orchestration</li>\n<li>Cloud platforms</li>\n<li>APIs &#x26; Web Services</li>\n<li>Caching systems</li>\n<li>Message brokers</li>\n<li>Authentication and Authorization systems</li>\n<li>CI/CD</li>\n<li>Monitoring &#x26; Logging</li>\n</ul>\n<p>These should help you stay up-to-date or reach the required level to succeed as a backend developer.</p>\n<h2 id=\"databases\">Databases</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/databases-4a1kz.png\" alt=\"Databases\"></p>\n<p>We can’t have a list of backend technologies to learn without covering databases. After all, databases are a core piece of the best backend technologies in use today and the backbone of any application, providing the necessary storage and retrieval of data. Choosing the right type of database depends on your application’s requirements, such as data consistency, scalability, and complexity.</p>\n<h3 id=\"sql-databases\">SQL Databases</h3>\n<p>SQL databases (or relational databases as they’re also called) bring structure to your data and a standard querying language known as SQL.</p>\n<h4 id=\"postgresql\">PostgreSQL</h4>\n<p>PostgreSQL is an advanced open-source relational database known for its reliability and extensive feature set. It supports a wide range of data types and complex queries, making it ideal for applications that require ACID compliance and advanced data handling capabilities. PostgreSQL is commonly used in financial systems, data warehousing, and applications needing strong data integrity and complex reporting.</p>\n<p>PostgreSQL also offers robust support for JSON and JSONB data types, enabling seamless integration of relational and NoSQL capabilities within a single database system. Its powerful indexing mechanisms ensure efficient query performance even with large datasets.</p>\n<p>Additionally, PostgreSQL provides advanced security features like row-level security and multi-factor authentication, making it a secure choice for handling sensitive data.</p>\n<h4 id=\"mysql\">MySQL</h4>\n<p>MySQL is a widely used open-source SQL database praised for its speed, reliability, and ease of use. It is particularly popular backend technology for web applications and online transaction processing (OLTP) due to its performance and robust community support. MySQL is often the database of choice for content management systems, e-commerce platforms, and logging applications.</p>\n<p>MySQL also supports a variety of storage engines, including InnoDB, which provides ACID compliance, foreign key support, and transaction-safe operations, making it suitable for a wide range of applications.</p>\n<p>Its replication capabilities, including master-slave and group replication, ensure high availability and scalability for large-scale deployments. Additionally, MySQL offers advanced security features such as data encryption, user authentication, and role-based access control, enhancing its suitability for handling sensitive data.</p>\n<h4 id=\"microsoft-sql-server\">Microsoft SQL Server</h4>\n<p>SQL Server is a relational database management system from Microsoft that offers great performance, scalability, and deep integration with other Microsoft products. It provides comprehensive tools for database management, including advanced analytics and business intelligence features. SQL Server is ideal for enterprise-level applications, data warehousing, and environments where integration with Microsoft services, such as Azure, is beneficial.</p>\n<p>MSSQL Server also includes robust security features, such as transparent data encryption, dynamic data masking, and advanced threat protection, making it a trusted choice for handling sensitive data. It supports a wide range of data types, including spatial and XML data, and offers powerful indexing and query optimization techniques to ensure efficient data retrieval and processing.</p>\n<p>SQL Server’s integration with Visual Studio and other Microsoft development tools helps to streamline the development process.</p>\n<h4 id=\"sqlite\">SQLite</h4>\n<p>SQLite is a self-contained, serverless, and zero-configuration database engine known for its simplicity and ease of use. It is lightweight and efficient, making it perfect for small to medium-sized applications, mobile apps, desktop applications, and prototyping. SQLite is embedded within the application, eliminating the need for a separate database server, which simplifies deployment and maintenance. Its single-disk file format makes it highly portable across various operating systems and platforms.\nSQLite’s efficient memory and disk usage allow it to perform well even on devices with limited resources, such as IoT devices and embedded systems.</p>\n<p>This makes SQLite an excellent choice for applications where simplicity, reliability, and low overhead are essential.</p>\n<h3 id=\"nosql-databases\">NoSQL Databases</h3>\n<p>On the other hand, NoSQL databases allow for more flexibility by removing the need for a fixed schema and structure to your data. Each solution presented here covers a different type of unstructured database, and it’s up to you to decide if that focus actually makes sense for your business logic or not.</p>\n<h4 id=\"mongodb\">MongoDB</h4>\n<p>MongoDB is a document-oriented database that offers flexibility and scalability. It handles unstructured data with ease, making it ideal for applications with large-scale data and real-time analytics. MongoDB is commonly used in content management systems, e-commerce platforms, and applications that require a dynamic schema. Its ability to store data in JSON-like documents allows for easy data retrieval and manipulation.</p>\n<h4 id=\"dynamodb\">DynamoDB</h4>\n<p>DynamoDB is a fully managed NoSQL database service provided by AWS. It is designed for high-performance applications requiring seamless scalability and high availability. DynamoDB is best suited for high-traffic web applications, gaming, and IoT applications. Its serverless nature means it can automatically scale up or down based on demand, ensuring consistent performance and cost-efficiency.</p>\n<h4 id=\"cassandra\">Cassandra</h4>\n<p>Cassandra is an open-source distributed NoSQL database known for its high availability and fault tolerance without compromising performance. It is ideal for large-scale applications and real-time big data analytics. Cassandra’s distributed architecture makes it perfect for environments requiring continuous availability and the ability to handle large amounts of data across multiple nodes. It is commonly used in social media platforms, recommendation engines, and other data-intensive applications.</p>\n<h2 id=\"version-control-systems\">Version Control Systems</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/version-control-flow-bzojr.png\" alt=\"Version Control Systems\"></p>\n<p>Version control systems are essential for managing changes to source code over time, allowing multiple developers to collaborate effectively and maintain a history of changes.</p>\n<h3 id=\"git\">Git</h3>\n<p>When it comes to picking the right version control tool, Git is the most widely used one. It provides a powerful, flexible, and distributed model for tracking changes. Git’s architecture supports nonlinear development, allowing multiple branches to be created, merged, and managed independently. This makes Git essential for code collaboration and version tracking, making it a foundational tool for any developer.</p>\n<p>Let’s go through some of the key benefits that make Git one of the leading backend technologies in web development.</p>\n<h4 id=\"distributed-version-control\">Distributed Version Control</h4>\n<p>Unlike centralized version control systems (CVCS) where a single central repository holds the entire project history, Git allows each developer to have a complete copy of the repository, including its history. This decentralized approach enhances collaboration and ensures that work can continue even if the central server is down.</p>\n<h4 id=\"branching-and-merging\">Branching and Merging</h4>\n<p><strong>Branching</strong>: Git’s lightweight branching model allows developers to create, delete, and switch between branches effortlessly. This facilitates isolated development of features, bug fixes, or experiments without impacting the main codebase.</p>\n<p><strong>Merging</strong>: Git provides powerful merging capabilities to integrate changes from different branches. Tools like merge commits and rebasing help manage and resolve conflicts, ensuring a smooth integration process.</p>\n<h4 id=\"performance\">Performance</h4>\n<p>Git is designed to handle everything from small to very large projects with speed and efficiency. Its performance for both local operations (like committing and branching) and remote operations (like fetching and pushing changes) is optimized, making it suitable for high-performance needs.</p>\n<h4 id=\"commit-history-and-tracking\">Commit History and Tracking</h4>\n<p>Commit Granularity: Git encourages frequent commits, each with a descriptive message, making it easier to track changes, understand the project history, and identify when and why a change was made.</p>\n<p><strong>History Viewing</strong>: Commands like git log, git blame, and git bisect allow developers to explore the project’s history, pinpoint the introduction of bugs, and understand the evolution of the codebase.</p>\n<h4 id=\"collaboration\">Collaboration</h4>\n<p>While strictly not part of Git’s feature set, these functionalities enhance the basic set of features provided by the version control system.</p>\n<p><strong>Pull Requests</strong>: Platforms like GitHub, GitLab, and Bitbucket build on Git’s capabilities, offering features like pull requests to facilitate code reviews and discussions before integrating changes into the main branch.</p>\n<p><strong>Code Reviews</strong>: Integrating with continuous integration (CI) systems, Git platforms enable automated testing and code quality checks, ensuring that changes meet project standards before merging.</p>\n<h4 id=\"staging-area\">Staging Area</h4>\n<p>Git’s staging area (or index) provides an intermediate area where changes can be formatted and reviewed before committing. This allows for more granular control over what changes are included in a commit.</p>\n<h3 id=\"github\">GitHub</h3>\n<p>GitHub is a web-based platform that leverages Git for version control. It provides an extensive list of collaborative features, including (as already mentioned) pull requests, code reviews, and project management tools.</p>\n<h4 id=\"key-features-and-benefits\">Key Features and Benefits</h4>\n<p><strong>Pull Requests and Code Reviews</strong>:  Facilitate discussions around proposed changes before integrating them into the main codebase. Developers can review code, leave comments, and suggest improvements.  Built-in tools for reviewing code changes ensure collaborations are following coding standards and catch potential issues early.</p>\n<p><strong>Project Management</strong>: GitHub Issues allow tracking of bugs, enhancements, and tasks. Milestones help in organizing issues into targeted releases or sprints. Kanban-style boards provide a visual way to manage tasks, track progress, and organize workflows.</p>\n<p><strong>Continuous Integration and Deployment</strong>: Automate workflows for CI/CD, testing, deployment, and more. GitHub Actions supports custom scripts and pre-built actions to streamline DevOps processes.</p>\n<p><strong>Community and Collaboration</strong>: Developers can host static websites directly from a GitHub repository with Github Pages, they’re ideal for project documentation or personal websites. Integrated wikis can be used for detailed project documentation. And through forking, starring, and following repositories the platform encourages collaboration and knowledge sharing.</p>\n<p>GitHub’s extensive features and strong community support make it the de facto choice for many companies and developers, both for open-source and private projects.</p>\n<h3 id=\"gitlab\">GitLab</h3>\n<p>GitLab is a web-based platform for version control using Git, known for its robust CI/CD pipeline integration. It offers a comprehensive set of tools for the entire DevOps lifecycle, making it suitable for continuous integration, deployment, and monitoring.</p>\n<h4 id=\"key-features-and-benefits-1\">Key Features and Benefits</h4>\n<p><strong>Integrated CI/CD</strong>: Built-in continuous integration and continuous deployment pipelines allow backend developers to automate building, testing, and deploying code changes. With Gitlab they can even automatically configure CI/CD pipelines, deploy applications, and monitor performance, all through the same platform.</p>\n<p><strong>Security and Compliance</strong>: Gitlab provides key security capabilities for backend development: built-in static and dynamic application security testing (SAST/DAST).</p>\n<p><strong>Collaboration and Communication</strong>: Instead of Pull Requests like Github, Gitlab provides the concept of “Merge Requests”:  a simplified code review process with inline comments and suggestions.</p>\n<p>GitLab’s all-in-one platform makes it an excellent choice for teams looking to streamline their DevOps processes and improve collaboration and productivity.</p>\n<h3 id=\"bitbucket\">Bitbucket</h3>\n<p>Bitbucket is a Git-based source code repository hosting service that provides both commercial plans and free accounts for small teams. It integrates seamlessly with Atlassian products like Jira and Trello, making it a great choice for teams already using these tools.</p>\n<p><strong>Repository Hosting</strong>: Bitbucket supports both Git and Mercurial version control systems. And it offers unlimited private repositories for teams.</p>\n<p><strong>Integration with Atlassian Products</strong>: Seamlessly integrates with Jira for issue tracking and project management. It can create branches from Jira issues and view development progress which is a fantastic integration for big teams using both tools. If, on the other hand, you’re using Trello, it can connect to Trello’s boards for visual task management and tracking.</p>\n<p><strong>Continuous Integration and Deployment</strong>: Integrated CI/CD service for automating builds, tests, and deployments. It can be configured with a YAML file for custom workflows.</p>\n<p><strong>Security and Permissions</strong>: Control who accesses  specific branches to enforce workflows and protect critical branches. You can even enhance security with two-factor authentication.</p>\n<p>Bitbucket’s integration with Atlassian’s suite of products, along with its robust CI/CD capabilities, make it an attractive option for teams seeking a tightly integrated development and project management environment.</p>\n<h2 id=\"containerization-and-orchestration\">Containerization and Orchestration</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/containers-and-orchestrators-jb6xj.png\" alt=\"Containerization and Orchestration\"></p>\n<p>While backend developers aren’t always directly involved in the deployment process, understanding the basics of containerization and orchestration can help them work and interact with the team in charge of devops (who usually set up these CI/CD pipelines).</p>\n<p>While this is not an exhaustive list of backend technologies, the two main ones to learn about are:</p>\n<h3 id=\"docker\">Docker</h3>\n<p>Docker is a platform for developing, shipping, and running applications in containers. Containers package software and its dependencies, ensuring it runs consistently across different environments. Docker simplifies application deployment and testing, making it ideal for microservices architectures and continuous integration/continuous deployment (CI/CD) pipelines.</p>\n<h3 id=\"kubernetes\">Kubernetes</h3>\n<p>Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. It orchestrates containers across clusters of machines, providing high availability, scalability, and efficient resource utilization. Kubernetes is perfect for complex, large-scale applications requiring robust infrastructure management and automated scaling.</p>\n<h2 id=\"cloud-platforms\">Cloud Platforms</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/cloud-providers-ownec.png\" alt=\"Cloud Platforms\"></p>\n<p>Cloud platforms provide a range of services and infrastructure that allow developers to deploy, manage, and scale applications without maintaining physical servers. Mind you, the “cloud” is nothing else than someone else’s servers that you don’t have to manage.</p>\n<p>These platforms all offer very similar types of managed services (each with its own flavor) that allow you to set up powerful and scalable infrastructures with a few clicks.</p>\n<h3 id=\"amazon-web-services-aws\">Amazon Web Services (AWS)</h3>\n<p>Amazon Web Services (AWS) is a very complete cloud computing platform offered by Amazon. It provides a broad range of services, including computing power, storage solutions, and databases, catering to various needs and applications.</p>\n<h4 id=\"key-characteristics-of-aws\">Key Characteristics of AWS</h4>\n<p><strong>Scalability</strong>: AWS provides scalable solutions that allow businesses to easily adjust resources based on demand.\nGlobal Reach: With data centers located worldwide, AWS offers high availability and low latency for global applications.</p>\n<p><strong>Diverse Service Offerings</strong>: AWS offers a wide range of services, including EC2 for computing, S3 for storage, and RDS for databases.</p>\n<p><strong>Security and Compliance</strong>: AWS provides robust security features and complies with numerous industry standards and regulations.</p>\n<p><strong>Cost Management</strong>: Flexible pricing models and cost management tools help businesses optimize their cloud spending.</p>\n<h3 id=\"google-cloud-platform-gcp\">Google Cloud Platform (GCP)</h3>\n<p>Google Cloud Platform (GCP) is a suite of cloud computing services provided by Google. Like AWS and Microsoft Azure, GCP offers a variety of services, including computing power, storage, machine learning, and data analytics.</p>\n<h4 id=\"key-characteristics-of-gcp\">Key Characteristics of GCP</h4>\n<p><strong>AI and Machine Learning</strong>: GCP excels in providing advanced AI and machine learning tools, leveraging Google’s expertise.</p>\n<p><strong>Big Data and Analytics</strong>: GCP offers powerful analytics tools, including BigQuery, for handling large-scale data processing.</p>\n<p><strong>Networking</strong>: GCP provides a robust and secure global network infrastructure.</p>\n<p><strong>Integration with Google Services</strong>: Seamless integration with Google Workspace and other Google services enhances productivity and collaboration.</p>\n<p><strong>Open Source Support</strong>: GCP supports various open-source technologies, promoting flexibility and innovation.</p>\n<h3 id=\"microsoft-azure\">Microsoft Azure</h3>\n<p>Microsoft Azure is a cloud computing service created by Microsoft, offering a wide range of cloud services, including those for computing, analytics, storage, and networking.</p>\n<h4 id=\"key-characteristics-of-microsoft-azure\">Key Characteristics of Microsoft Azure</h4>\n<p><strong>Integration with Microsoft Products</strong>: Azure offers seamless integration with popular Microsoft software and services.</p>\n<p><strong>Hybrid Cloud Capabilities</strong>: Azure supports hybrid cloud environments, enabling smooth integration between on-premises and cloud resources.</p>\n<p><strong>Comprehensive Service Range</strong>: Azure provides a broad spectrum of services, including Azure Virtual Machines, Azure SQL Database, and Azure DevOps.</p>\n<p><strong>Enterprise-Grade Security</strong>: Azure emphasizes security with advanced features and compliance with industry standards.</p>\n<p><strong>Developer and IT Pro Tools</strong>: Azure offers a wide range of tools for developers and IT professionals, including Visual Studio and Azure DevOps.</p>\n<p>At a high level, all of these providers are very similar to each other, to the point where backend developers experienced in one of them, can extrapolate their understanding of the environment into others with minimum ramp-up time.</p>\n<h2 id=\"apis-and-web-services\">APIs and Web Services</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/rest-vs-graphql-vs-grpc-tp40c.png\" alt=\"APIs and Web Services\"></p>\n<p>APIs (or Application Programming Interfaces) and web services are another mandatory incorporation to the list of top backend technologies any developer should keep in mind. They enable communication between different software systems.</p>\n<p>The three most common types of APIs right now, are REST, GraphQL and gPRC, let’s take a closer look at each one of them.</p>\n<h3 id=\"rest\">REST</h3>\n<p>REST is a standard architecture for web services, known for its simplicity and scalability. It operates on stateless principles and uses standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations. RESTful APIs are typically used to access and manipulate web resources using URLs.</p>\n<p>REST is ideal for web applications and services due to its ease of implementation and broad compatibility with various web technologies. It is commonly used for developing APIs for web and mobile applications, providing endpoints that clients can interact with to perform various operations. RESTful APIs are also ideal for integrating with third-party services, enabling data exchange and interaction between different systems.</p>\n<h4 id=\"key-characteristics-of-rest\">Key Characteristics of REST</h4>\n<p><strong>Statelessness</strong>: Each request from a client contains all the information needed to process the request, without relying on stored context on the server.</p>\n<p><strong>Uniform Interface</strong>: REST APIs follow standard conventions, making them easy to understand and use. This includes using standard HTTP methods and status codes.</p>\n<p><strong>Client-Server Architecture</strong>: Separates the client and server concerns, improving scalability and flexibility. Clients handle the user interface and user experience, while servers handle data storage and business logic.</p>\n<p><strong>Cacheability</strong>: Responses from REST APIs can be cached to improve performance, reducing the need for repeated requests.</p>\n<p><strong>Layered System</strong>: REST allows for a layered system architecture, enabling intermediaries like load balancers and proxy servers to enhance security, performance, and scalability.</p>\n<p>If you’d like to know more about REST, you can read the full definition directly from <a href=\"https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">its source</a>.</p>\n<h3 id=\"graphql\">GraphQL</h3>\n<p>GraphQL is a query language for APIs and a runtime for executing those queries by using a type system you define for your data. Unlike REST, where multiple endpoints return fixed data structures, GraphQL allows clients to request exactly the data they need. This flexibility reduces the amount of data transferred over the network and can significantly improve performance.</p>\n<p>GraphQL is ideal for applications with complex and dynamic data requirements.</p>\n<h4 id=\"key-characteristics-of-graphql\">Key Characteristics of GraphQL</h4>\n<p><strong>Declarative Data Fetching</strong>: Clients specify the structure of the response, ensuring they receive only the data they need.</p>\n<p><strong>Strongly Typed Schema</strong>: The API schema is strongly typed, providing clear and detailed documentation of available data and operations.</p>\n<p><strong>Single Endpoint</strong>: Unlike REST, GraphQL uses a single endpoint to serve all requests, simplifying the API architecture.</p>\n<p><strong>Real-time Data</strong>: Supports real-time updates through subscriptions, enabling clients to receive live data changes.</p>\n<h3 id=\"grpc\">gRPC</h3>\n<p>gRPC is a high-performance, open-source RPC (Remote Procedure Call) framework developed by Google. gRPC is designed for low-latency, high-throughput communication, making it suitable for microservices architectures and real-time communication systems.</p>\n<p>gRPC is ideal for applications that require efficient, reliable, and bi-directional communication.</p>\n<h4 id=\"key-characteristics-of-grpc\">Key Characteristics of gRPC</h4>\n<p><strong>Protocol Buffers</strong>: Uses Protocol Buffers for compact, efficient, and platform-neutral serialization of structured data.</p>\n<p><strong>HTTP/2</strong>: Utilizes HTTP/2 for multiplexing, flow control, header compression, and efficient binary transport.</p>\n<p><strong>Bi-directional Streaming</strong>: Supports multiple types of streaming, including client-side, server-side, and bi-directional streaming.</p>\n<p><strong>Cross-Language Compatibility</strong>: Provides support for multiple backend programming languages, enabling interoperability between different systems.</p>\n<h2 id=\"caching-systems\">Caching Systems</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/working-cache-11kis.png\" alt=\"Caching Systems\"></p>\n<p>Caching systems store copies of frequently accessed data to reduce latency and improve application performance. They are essential for speeding up data retrieval and reducing the load on primary data stores.</p>\n<p>Implementing a successful caching strategy is not trivial, and one key aspect of it is the backend technology used for the implementation. While there might be multiple options out there, the industry currently recognizes only one de facto choice: Redis.</p>\n<h3 id=\"redis-a-fast-in-memory-storage-solution\">Redis: a fast in-memory storage solution</h3>\n<p>Redis is an in-memory data structure store that can function as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, sorted sets, bitmaps, hyperloglogs, and with the right add-ons, even vectors. Redis uses a key-value storage mechanism, which makes it simple yet powerful for a wide range of use cases.</p>\n<p>Let’s quickly review some of the characteristics of Redis that make it such a fantastic option.</p>\n<h4 id=\"high-availability-and-scalability\">High Availability and Scalability</h4>\n<ul>\n<li>\n<p><strong>Redis Sentinel</strong>: Provides high availability and monitoring, automatically promoting a slave to master in case of failure, ensuring minimal downtime.</p>\n</li>\n<li>\n<p><strong>Redis Cluster</strong>: Supports automatic sharding, allowing Redis to scale horizontally. It partitions data across multiple nodes, ensuring that the system can handle large datasets and high throughput.</p>\n</li>\n</ul>\n<h4 id=\"performance-and-use-cases\">Performance and Use Cases</h4>\n<p>Redis’s in-memory architecture gives it unmatched I/O speed, making it ideal for real-time applications such as:</p>\n<ul>\n<li><strong>Gaming</strong>: Managing leaderboards, player sessions, and real-time statistics.</li>\n<li><strong>Chat Applications</strong>: Storing messages, user presence information, and delivering real-time notifications.</li>\n<li><strong>Analytics</strong>: Real-time data processing and analytics, where rapid data access and manipulation are crucial.</li>\n<li><strong>Caching</strong>: Reducing database load by caching frequently accessed data, improving application response times.</li>\n</ul>\n<h4 id=\"persistence-and-durability\">Persistence and Durability</h4>\n<ul>\n<li><strong>RDB (Redis Database)</strong>: Creates snapshots of the dataset at specified intervals, allowing data to be restored from the last snapshot.</li>\n<li><strong>AOF (Append Only File)</strong>: Logs every write operation received by the server, providing a more durable solution that can replay the log to reconstruct the dataset.</li>\n<li><strong>Hybrid Approach</strong>: Combining RDB and AOF to leverage the benefits of both methods, balancing performance and data durability.</li>\n</ul>\n<h4 id=\"advanced-features\">Advanced Features</h4>\n<p>On top of all of that, Redis even provides some very powerful out-of-the-box features:</p>\n<ul>\n<li><strong>Lua Scripting</strong>: Supports server-side scripting with Lua, enabling complex operations to be executed atomically.</li>\n<li><strong>Pub/Sub Messaging</strong>: Allows for message broadcasting to multiple clients, supporting real-time messaging and notifications. You can create whole event-based architectures around Redis.</li>\n<li><strong>Modules</strong>: Extend Redis functionality with custom modules, such as RedisGraph for graph database capabilities and RedisJSON for JSON document storage.</li>\n</ul>\n<p>Redis’s robust feature set, combined with its high performance and flexibility, makes it a versatile tool for developers looking to build scalable and responsive applications.</p>\n<h2 id=\"message-brokers-and-streaming-platforms\">Message Brokers and Streaming Platforms</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/message-queue-yoq3q.png\" alt=\"Message Brokers and Streaming Platforms\"></p>\n<p>Message brokers and streaming platforms facilitate communication between different parts of a system, enabling efficient data exchange and processing. They are crucial for building scalable and resilient applications and they are the core of reactive architectures (also known as event-based architectures).</p>\n<h3 id=\"rabbitmq\">RabbitMQ</h3>\n<p>RabbitMQ is an open-source message broker that implements the Advanced Message Queuing Protocol (AMQP). It supports multiple messaging protocols and can be deployed in distributed and federated configurations. RabbitMQ is ideal for use cases that require reliable message delivery, complex routing, and interoperability with other messaging systems. It is commonly used in financial systems, order processing, and other applications that need robust messaging capabilities.</p>\n<h3 id=\"apache-kafka\">Apache Kafka</h3>\n<p>Apache Kafka is a distributed streaming platform designed for high-throughput, low-latency data processing. It excels at handling real-time data feeds, making it suitable for applications that require continuous data integration and processing. Kafka’s publish-subscribe messaging system is fault-tolerant and scalable, making it ideal for big data applications, real-time analytics, event sourcing, and log aggregation. Its ability to store streams of records in a fault-tolerant manner also makes it useful for building event-driven architectures and microservices.</p>\n<p>As backend developers, understanding how to take advantage of these message queues is critical to the development of scalable and resilient platforms. It is definitely a must-have skill and you need to master it.</p>\n<h2 id=\"authentication-and-authorization\">Authentication and Authorization</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/authentication-vs-authorization-vl6lg.png\" alt=\"Authentication and Authorization\"></p>\n<p>Authentication and authorization technologies are essential for securing applications, ensuring that users are who they claim to be and have the appropriate permissions to access resources.</p>\n<p>This space is filled with solutions and methodologies, so it’s not easy to pick one option here, however, these two are very common solutions used to implement both, authZ (authorization) and authN (authentication).</p>\n<h3 id=\"oauth\">OAuth</h3>\n<p>OAuth is an open standard for access delegation commonly used to grant websites or applications limited access to a user’s information without exposing their passwords. It is widely used in single sign-on (SSO) systems, enabling users to log in to multiple applications with a single set of credentials. OAuth is ideal for third-party applications that need access to user data, such as social media integrations and API access management.</p>\n<h3 id=\"jwt-json-web-tokens\">JWT (JSON Web Tokens)</h3>\n<p>JWT is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object, which is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure. JWTs are commonly used for authentication and authorization in web applications, providing a secure way to transmit information between parties. They are particularly useful in stateless authentication systems, where user state is not stored on the server (like when dealing with RESTful APIs).</p>\n<h2 id=\"cicd-pipelines\">CI/CD Pipelines</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-rg7t9.png\" alt=\"CI/CD Pipelines\"></p>\n<p>CI/CD (Continuous Integration/Continuous Deployment) pipelines automate the process of code integration, testing, and deployment, enabling faster and more reliable software delivery. This is one of the key areas backend developers need to understand to avoid creating code that simply gets in the way of the deployment process.</p>\n<h3 id=\"github-actions\">GitHub Actions</h3>\n<p>GitHub Actions is an integrated CI/CD service within GitHub repositories, allowing developers to automate build, test, and deployment workflows. It supports a wide range of actions and integrations, making it highly customizable and versatile for various development workflows.</p>\n<h3 id=\"circleci\">CircleCI</h3>\n<p>CircleCI is a continuous integration and delivery platform that automates the building, testing, and deployment of applications. It supports multiple backend languages and integrates with various version control systems, making it a popular choice for diverse development environments. CircleCI is known for its speed and ease of setup, providing robust tools for optimizing and monitoring CI/CD pipelines.</p>\n<h3 id=\"gitlab-cicd\">GitLab CI/CD</h3>\n<p>GitLab CI/CD is an integrated part of the GitLab platform (similar to how GitHub actions are a part of GitHub), offering continuous integration, delivery, and deployment features within the GitLab ecosystem. It allows developers to manage their entire DevOps lifecycle in a single application, from planning and coding to monitoring and security. GitLab CI/CD is particularly useful for teams seeking a seamless and comprehensive CI/CD solution.</p>\n<h3 id=\"jenkins\">Jenkins</h3>\n<p>If instead of a SaaS, you’re looking for a solution that you can potentially self-host, then you might want to look into Jenkins. Jenkins is an open-source automation server that provides hundreds of plugins to support building, deploying, and automating your software development process. It is highly extensible and can be integrated with a wide array of tools and technologies. Jenkins is ideal for complex, large-scale projects requiring a customizable and powerful CI/CD environment.</p>\n<h2 id=\"monitoring-and-logging\">Monitoring and Logging</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/server-monitoring-vk5nb.png\" alt=\"Monitoring and Logging\"></p>\n<p>Understanding how the systems that you develop behave and perform on a daily basis is crucial to launching a successful product. Here’s where monitoring and logging come into play. Monitoring and logging are crucial pieces of backend technology used for maintaining the health, performance, and security of applications. These tools help detect issues, analyze performance, and ensure system reliability.</p>\n<h3 id=\"elk-stack-elasticsearch-logstash-kibana\">ELK Stack (Elasticsearch, Logstash, Kibana)</h3>\n<p>The ELK Stack is a set of tools for searching, analyzing, and visualizing log data in real time. Elasticsearch is a search and analytics engine, Logstash is a server-side data processing pipeline, and Kibana is a visualization tool. Together, they provide a powerful platform for centralized logging and monitoring, making them ideal for applications requiring detailed log analysis and real-time insights.</p>\n<h3 id=\"grafana\">Grafana</h3>\n<p>Grafana is an open-source platform for monitoring and observability that integrates with various data sources. It provides powerful visualizations, dashboards, and alerting capabilities, making it a popular choice for monitoring infrastructure and application performance. Grafana is particularly useful for teams needing a flexible and customizable monitoring solution.</p>\n<h3 id=\"loki\">Loki</h3>\n<p>Loki is a log aggregation system designed to work with Grafana. It is optimized for cost-effective and scalable logging, making it suitable for applications with high log volumes. Loki simplifies log management by allowing developers to query logs using the same language as Grafana, providing seamless integration for comprehensive observability.</p>\n<h3 id=\"prometheus\">Prometheus</h3>\n<p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores metrics as time series data, providing powerful querying language and alerting capabilities. Prometheus is ideal for monitoring applications and infrastructure, particularly in cloud-native and microservices environments, where dynamic and ephemeral resources are common.</p>\n<p>In the end, you might want to go with one or several of these options, the point is that you, as a developer, should be aware of them and what type of value they add to the project.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>As backend developers, focusing on a backend programming language and a backend framework is not going to be enough. The backend ecosystem is very rich, and there are many areas that are either directly or indirectly related to the daily tasks that a backend dev needs to work on.</p>\n<p>This is why you need to stay up-to-date and look at the trends that develop within each area to make sure you’re still working with and focusing on the right solutions.</p>\n<p>If you’d like more details on the type of backend development technologies you should be focusing on to excel at your role as a backend developer, check out our <a href=\"https://roadmap.sh/backend\" target=\"_blank\">Backend Developer Roadmap</a>.</p>";

				const frontmatter$1d = {"title":"Top 10+ Backend Technologies to Use in @currentYear@: Expert Advice","description":"Looking for the best backend technologies in @currentYear@? Check out our expert list of top tools for developers.","authorId":"fernando","excludedBySlug":"/backend/technologies","seo":{"title":"Top 10+ Backend Technologies to Use in @currentYear@: Expert Advice","description":"Looking for the best backend technologies in @currentYear@? Check out our expert list of top tools for developers.","ogImageUrl":"https://assets.roadmap.sh/guest/backend-technologies-pnof4.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"backend","isNew":false,"type":"textual","date":"2024-08-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1d = "/workspace/src/data/guides/backend-technologies.md";
				const url$1d = undefined;
				function rawContent$1d() {
					return "   \n                                                                            \n                                                                                                                                 \n                  \n                                       \n    \n                                                                              \n                                                                                                                                   \n                                                                              \n                            \n                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Best backend development technologies.](https://assets.roadmap.sh/guest/backend-technologies-pnof4.jpg)\n\nBackend technologies are the key to building robust and scalable applications. They power all platforms and products on the web without even being visible to the users.\n\nWhile backend programming languages form the foundation of backend development, they aren't enough on their own. Understanding and leveraging the right backend technologies can significantly enhance your development workflow and application performance.\n\nAs a [backend developer](https://roadmap.sh/backend), you’ll be faced with too many options while trying to define your backend technology stack, and that can feel overwhelming.\n\nSo, in this article, we’re going to cover the best backend technologies in the following categories:\n\n- Databases\n- Version control systems\n- Containerization and orchestration\n- Cloud platforms\n- APIs & Web Services\n- Caching systems\n- Message brokers\n- Authentication and Authorization systems\n- CI/CD\n- Monitoring & Logging\n\nThese should help you stay up-to-date or reach the required level to succeed as a backend developer.\n\n## Databases\n\n![Databases](https://assets.roadmap.sh/guest/databases-4a1kz.png)\n\nWe can’t have a list of backend technologies to learn without covering databases. After all, databases are a core piece of the best backend technologies in use today and the backbone of any application, providing the necessary storage and retrieval of data. Choosing the right type of database depends on your application's requirements, such as data consistency, scalability, and complexity.\n\n### SQL Databases\n\nSQL databases (or relational databases as they’re also called) bring structure to your data and a standard querying language known as SQL.\n\n#### PostgreSQL\n\nPostgreSQL is an advanced open-source relational database known for its reliability and extensive feature set. It supports a wide range of data types and complex queries, making it ideal for applications that require ACID compliance and advanced data handling capabilities. PostgreSQL is commonly used in financial systems, data warehousing, and applications needing strong data integrity and complex reporting.\n\nPostgreSQL also offers robust support for JSON and JSONB data types, enabling seamless integration of relational and NoSQL capabilities within a single database system. Its powerful indexing mechanisms ensure efficient query performance even with large datasets.\n\nAdditionally, PostgreSQL provides advanced security features like row-level security and multi-factor authentication, making it a secure choice for handling sensitive data.\n\n#### MySQL\n\nMySQL is a widely used open-source SQL database praised for its speed, reliability, and ease of use. It is particularly popular backend technology for web applications and online transaction processing (OLTP) due to its performance and robust community support. MySQL is often the database of choice for content management systems, e-commerce platforms, and logging applications.\n\nMySQL also supports a variety of storage engines, including InnoDB, which provides ACID compliance, foreign key support, and transaction-safe operations, making it suitable for a wide range of applications.\n\nIts replication capabilities, including master-slave and group replication, ensure high availability and scalability for large-scale deployments. Additionally, MySQL offers advanced security features such as data encryption, user authentication, and role-based access control, enhancing its suitability for handling sensitive data.\n\n#### Microsoft SQL Server\n\nSQL Server is a relational database management system from Microsoft that offers great performance, scalability, and deep integration with other Microsoft products. It provides comprehensive tools for database management, including advanced analytics and business intelligence features. SQL Server is ideal for enterprise-level applications, data warehousing, and environments where integration with Microsoft services, such as Azure, is beneficial.\n\nMSSQL Server also includes robust security features, such as transparent data encryption, dynamic data masking, and advanced threat protection, making it a trusted choice for handling sensitive data. It supports a wide range of data types, including spatial and XML data, and offers powerful indexing and query optimization techniques to ensure efficient data retrieval and processing.\n\nSQL Server's integration with Visual Studio and other Microsoft development tools helps to streamline the development process.\n\n#### SQLite\n\nSQLite is a self-contained, serverless, and zero-configuration database engine known for its simplicity and ease of use. It is lightweight and efficient, making it perfect for small to medium-sized applications, mobile apps, desktop applications, and prototyping. SQLite is embedded within the application, eliminating the need for a separate database server, which simplifies deployment and maintenance. Its single-disk file format makes it highly portable across various operating systems and platforms.\nSQLite's efficient memory and disk usage allow it to perform well even on devices with limited resources, such as IoT devices and embedded systems.\n\nThis makes SQLite an excellent choice for applications where simplicity, reliability, and low overhead are essential.\n\n### NoSQL Databases\n\nOn the other hand, NoSQL databases allow for more flexibility by removing the need for a fixed schema and structure to your data. Each solution presented here covers a different type of unstructured database, and it’s up to you to decide if that focus actually makes sense for your business logic or not.\n\n#### MongoDB\n\nMongoDB is a document-oriented database that offers flexibility and scalability. It handles unstructured data with ease, making it ideal for applications with large-scale data and real-time analytics. MongoDB is commonly used in content management systems, e-commerce platforms, and applications that require a dynamic schema. Its ability to store data in JSON-like documents allows for easy data retrieval and manipulation.\n\n#### DynamoDB\n\nDynamoDB is a fully managed NoSQL database service provided by AWS. It is designed for high-performance applications requiring seamless scalability and high availability. DynamoDB is best suited for high-traffic web applications, gaming, and IoT applications. Its serverless nature means it can automatically scale up or down based on demand, ensuring consistent performance and cost-efficiency.\n\n#### Cassandra\n\nCassandra is an open-source distributed NoSQL database known for its high availability and fault tolerance without compromising performance. It is ideal for large-scale applications and real-time big data analytics. Cassandra's distributed architecture makes it perfect for environments requiring continuous availability and the ability to handle large amounts of data across multiple nodes. It is commonly used in social media platforms, recommendation engines, and other data-intensive applications.\n\n## Version Control Systems\n\n![Version Control Systems](https://assets.roadmap.sh/guest/version-control-flow-bzojr.png)\n\nVersion control systems are essential for managing changes to source code over time, allowing multiple developers to collaborate effectively and maintain a history of changes.\n\n### Git\n\nWhen it comes to picking the right version control tool, Git is the most widely used one. It provides a powerful, flexible, and distributed model for tracking changes. Git’s architecture supports nonlinear development, allowing multiple branches to be created, merged, and managed independently. This makes Git essential for code collaboration and version tracking, making it a foundational tool for any developer.\n\nLet’s go through some of the key benefits that make Git one of the leading backend technologies in web development.\n\n#### Distributed Version Control\n\nUnlike centralized version control systems (CVCS) where a single central repository holds the entire project history, Git allows each developer to have a complete copy of the repository, including its history. This decentralized approach enhances collaboration and ensures that work can continue even if the central server is down.\n\n#### Branching and Merging\n\n**Branching**: Git’s lightweight branching model allows developers to create, delete, and switch between branches effortlessly. This facilitates isolated development of features, bug fixes, or experiments without impacting the main codebase.\n\n**Merging**: Git provides powerful merging capabilities to integrate changes from different branches. Tools like merge commits and rebasing help manage and resolve conflicts, ensuring a smooth integration process.\n\n#### Performance\n\nGit is designed to handle everything from small to very large projects with speed and efficiency. Its performance for both local operations (like committing and branching) and remote operations (like fetching and pushing changes) is optimized, making it suitable for high-performance needs.\n\n#### Commit History and Tracking\n\nCommit Granularity: Git encourages frequent commits, each with a descriptive message, making it easier to track changes, understand the project history, and identify when and why a change was made.\n\n**History Viewing**: Commands like git log, git blame, and git bisect allow developers to explore the project’s history, pinpoint the introduction of bugs, and understand the evolution of the codebase.\n\n#### Collaboration\n\nWhile strictly not part of Git’s feature set, these functionalities enhance the basic set of features provided by the version control system.\n\n**Pull Requests**: Platforms like GitHub, GitLab, and Bitbucket build on Git’s capabilities, offering features like pull requests to facilitate code reviews and discussions before integrating changes into the main branch.\n\n**Code Reviews**: Integrating with continuous integration (CI) systems, Git platforms enable automated testing and code quality checks, ensuring that changes meet project standards before merging.\n\n#### Staging Area\n\nGit’s staging area (or index) provides an intermediate area where changes can be formatted and reviewed before committing. This allows for more granular control over what changes are included in a commit.\n\n### GitHub\n\nGitHub is a web-based platform that leverages Git for version control. It provides an extensive list of collaborative features, including (as already mentioned) pull requests, code reviews, and project management tools.\n\n#### Key Features and Benefits\n\n**Pull Requests and Code Reviews**:  Facilitate discussions around proposed changes before integrating them into the main codebase. Developers can review code, leave comments, and suggest improvements.  Built-in tools for reviewing code changes ensure collaborations are following coding standards and catch potential issues early.\n\n**Project Management**: GitHub Issues allow tracking of bugs, enhancements, and tasks. Milestones help in organizing issues into targeted releases or sprints. Kanban-style boards provide a visual way to manage tasks, track progress, and organize workflows.\n\n**Continuous Integration and Deployment**: Automate workflows for CI/CD, testing, deployment, and more. GitHub Actions supports custom scripts and pre-built actions to streamline DevOps processes.\n\n**Community and Collaboration**: Developers can host static websites directly from a GitHub repository with Github Pages, they’re ideal for project documentation or personal websites. Integrated wikis can be used for detailed project documentation. And through forking, starring, and following repositories the platform encourages collaboration and knowledge sharing.\n\nGitHub’s extensive features and strong community support make it the de facto choice for many companies and developers, both for open-source and private projects.\n\n### GitLab\n\nGitLab is a web-based platform for version control using Git, known for its robust CI/CD pipeline integration. It offers a comprehensive set of tools for the entire DevOps lifecycle, making it suitable for continuous integration, deployment, and monitoring.\n\n#### Key Features and Benefits\n\n**Integrated CI/CD**: Built-in continuous integration and continuous deployment pipelines allow backend developers to automate building, testing, and deploying code changes. With Gitlab they can even automatically configure CI/CD pipelines, deploy applications, and monitor performance, all through the same platform.\n\n**Security and Compliance**: Gitlab provides key security capabilities for backend development: built-in static and dynamic application security testing (SAST/DAST).\n\n**Collaboration and Communication**: Instead of Pull Requests like Github, Gitlab provides the concept of “Merge Requests”:  a simplified code review process with inline comments and suggestions.\n\nGitLab’s all-in-one platform makes it an excellent choice for teams looking to streamline their DevOps processes and improve collaboration and productivity.\n\n### Bitbucket\n\nBitbucket is a Git-based source code repository hosting service that provides both commercial plans and free accounts for small teams. It integrates seamlessly with Atlassian products like Jira and Trello, making it a great choice for teams already using these tools.\n\n**Repository Hosting**: Bitbucket supports both Git and Mercurial version control systems. And it offers unlimited private repositories for teams.\n\n**Integration with Atlassian Products**: Seamlessly integrates with Jira for issue tracking and project management. It can create branches from Jira issues and view development progress which is a fantastic integration for big teams using both tools. If, on the other hand, you’re using Trello, it can connect to Trello’s boards for visual task management and tracking.\n\n**Continuous Integration and Deployment**: Integrated CI/CD service for automating builds, tests, and deployments. It can be configured with a YAML file for custom workflows.\n\n**Security and Permissions**: Control who accesses  specific branches to enforce workflows and protect critical branches. You can even enhance security with two-factor authentication.\n\nBitbucket’s integration with Atlassian’s suite of products, along with its robust CI/CD capabilities, make it an attractive option for teams seeking a tightly integrated development and project management environment.\n\n## Containerization and Orchestration\n\n![Containerization and Orchestration](https://assets.roadmap.sh/guest/containers-and-orchestrators-jb6xj.png)\n\nWhile backend developers aren’t always directly involved in the deployment process, understanding the basics of containerization and orchestration can help them work and interact with the team in charge of devops (who usually set up these CI/CD pipelines).\n\nWhile this is not an exhaustive list of backend technologies, the two main ones to learn about are:\n\n### Docker\n\nDocker is a platform for developing, shipping, and running applications in containers. Containers package software and its dependencies, ensuring it runs consistently across different environments. Docker simplifies application deployment and testing, making it ideal for microservices architectures and continuous integration/continuous deployment (CI/CD) pipelines.\n\n### Kubernetes\n\nKubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. It orchestrates containers across clusters of machines, providing high availability, scalability, and efficient resource utilization. Kubernetes is perfect for complex, large-scale applications requiring robust infrastructure management and automated scaling.\n\n## Cloud Platforms\n\n![Cloud Platforms](https://assets.roadmap.sh/guest/cloud-providers-ownec.png)\n\nCloud platforms provide a range of services and infrastructure that allow developers to deploy, manage, and scale applications without maintaining physical servers. Mind you, the “cloud” is nothing else than someone else’s servers that you don’t have to manage.\n\nThese platforms all offer very similar types of managed services (each with its own flavor) that allow you to set up powerful and scalable infrastructures with a few clicks.\n\n### Amazon Web Services (AWS)\n\nAmazon Web Services (AWS) is a very complete cloud computing platform offered by Amazon. It provides a broad range of services, including computing power, storage solutions, and databases, catering to various needs and applications.\n\n#### Key Characteristics of AWS\n\n**Scalability**: AWS provides scalable solutions that allow businesses to easily adjust resources based on demand.\nGlobal Reach: With data centers located worldwide, AWS offers high availability and low latency for global applications.\n\n**Diverse Service Offerings**: AWS offers a wide range of services, including EC2 for computing, S3 for storage, and RDS for databases.\n\n**Security and Compliance**: AWS provides robust security features and complies with numerous industry standards and regulations.\n\n**Cost Management**: Flexible pricing models and cost management tools help businesses optimize their cloud spending.\n\n### Google Cloud Platform (GCP)\n\nGoogle Cloud Platform (GCP) is a suite of cloud computing services provided by Google. Like AWS and Microsoft Azure, GCP offers a variety of services, including computing power, storage, machine learning, and data analytics.\n\n#### Key Characteristics of GCP\n\n**AI and Machine Learning**: GCP excels in providing advanced AI and machine learning tools, leveraging Google's expertise.\n\n**Big Data and Analytics**: GCP offers powerful analytics tools, including BigQuery, for handling large-scale data processing.\n\n**Networking**: GCP provides a robust and secure global network infrastructure.\n\n**Integration with Google Services**: Seamless integration with Google Workspace and other Google services enhances productivity and collaboration.\n\n**Open Source Support**: GCP supports various open-source technologies, promoting flexibility and innovation.\n\n### Microsoft Azure\n\nMicrosoft Azure is a cloud computing service created by Microsoft, offering a wide range of cloud services, including those for computing, analytics, storage, and networking.\n\n#### Key Characteristics of Microsoft Azure\n\n**Integration with Microsoft Products**: Azure offers seamless integration with popular Microsoft software and services.\n\n**Hybrid Cloud Capabilities**: Azure supports hybrid cloud environments, enabling smooth integration between on-premises and cloud resources.\n\n**Comprehensive Service Range**: Azure provides a broad spectrum of services, including Azure Virtual Machines, Azure SQL Database, and Azure DevOps.\n\n**Enterprise-Grade Security**: Azure emphasizes security with advanced features and compliance with industry standards.\n\n**Developer and IT Pro Tools**: Azure offers a wide range of tools for developers and IT professionals, including Visual Studio and Azure DevOps.\n\nAt a high level, all of these providers are very similar to each other, to the point where backend developers experienced in one of them, can extrapolate their understanding of the environment into others with minimum ramp-up time.\n\n## APIs and Web Services\n\n![APIs and Web Services](https://assets.roadmap.sh/guest/rest-vs-graphql-vs-grpc-tp40c.png)\n\nAPIs (or Application Programming Interfaces) and web services are another mandatory incorporation to the list of top backend technologies any developer should keep in mind. They enable communication between different software systems.\n\nThe three most common types of APIs right now, are REST, GraphQL and gPRC, let’s take a closer look at each one of them.\n\n### REST\n\nREST is a standard architecture for web services, known for its simplicity and scalability. It operates on stateless principles and uses standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations. RESTful APIs are typically used to access and manipulate web resources using URLs.\n\nREST is ideal for web applications and services due to its ease of implementation and broad compatibility with various web technologies. It is commonly used for developing APIs for web and mobile applications, providing endpoints that clients can interact with to perform various operations. RESTful APIs are also ideal for integrating with third-party services, enabling data exchange and interaction between different systems.\n\n#### Key Characteristics of REST\n\n**Statelessness**: Each request from a client contains all the information needed to process the request, without relying on stored context on the server.\n\n**Uniform Interface**: REST APIs follow standard conventions, making them easy to understand and use. This includes using standard HTTP methods and status codes.\n\n**Client-Server Architecture**: Separates the client and server concerns, improving scalability and flexibility. Clients handle the user interface and user experience, while servers handle data storage and business logic.\n\n**Cacheability**: Responses from REST APIs can be cached to improve performance, reducing the need for repeated requests.\n\n**Layered System**: REST allows for a layered system architecture, enabling intermediaries like load balancers and proxy servers to enhance security, performance, and scalability.\n\nIf you’d like to know more about REST, you can read the full definition directly from [its source](https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm).\n\n### GraphQL\n\nGraphQL is a query language for APIs and a runtime for executing those queries by using a type system you define for your data. Unlike REST, where multiple endpoints return fixed data structures, GraphQL allows clients to request exactly the data they need. This flexibility reduces the amount of data transferred over the network and can significantly improve performance.\n\nGraphQL is ideal for applications with complex and dynamic data requirements.\n\n#### Key Characteristics of GraphQL\n\n**Declarative Data Fetching**: Clients specify the structure of the response, ensuring they receive only the data they need.\n\n**Strongly Typed Schema**: The API schema is strongly typed, providing clear and detailed documentation of available data and operations.\n\n**Single Endpoint**: Unlike REST, GraphQL uses a single endpoint to serve all requests, simplifying the API architecture.\n\n**Real-time Data**: Supports real-time updates through subscriptions, enabling clients to receive live data changes.\n\n### gRPC\n\ngRPC is a high-performance, open-source RPC (Remote Procedure Call) framework developed by Google. gRPC is designed for low-latency, high-throughput communication, making it suitable for microservices architectures and real-time communication systems.\n\ngRPC is ideal for applications that require efficient, reliable, and bi-directional communication.\n\n#### Key Characteristics of gRPC\n\n**Protocol Buffers**: Uses Protocol Buffers for compact, efficient, and platform-neutral serialization of structured data.\n\n**HTTP/2**: Utilizes HTTP/2 for multiplexing, flow control, header compression, and efficient binary transport.\n\n**Bi-directional Streaming**: Supports multiple types of streaming, including client-side, server-side, and bi-directional streaming.\n\n**Cross-Language Compatibility**: Provides support for multiple backend programming languages, enabling interoperability between different systems.\n\n## Caching Systems\n\n![Caching Systems](https://assets.roadmap.sh/guest/working-cache-11kis.png)\n\nCaching systems store copies of frequently accessed data to reduce latency and improve application performance. They are essential for speeding up data retrieval and reducing the load on primary data stores.\n\nImplementing a successful caching strategy is not trivial, and one key aspect of it is the backend technology used for the implementation. While there might be multiple options out there, the industry currently recognizes only one de facto choice: Redis.\n\n### Redis: a fast in-memory storage solution\n\nRedis is an in-memory data structure store that can function as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, sorted sets, bitmaps, hyperloglogs, and with the right add-ons, even vectors. Redis uses a key-value storage mechanism, which makes it simple yet powerful for a wide range of use cases.\n\nLet’s quickly review some of the characteristics of Redis that make it such a fantastic option.\n\n#### High Availability and Scalability\n\n- **Redis Sentinel**: Provides high availability and monitoring, automatically promoting a slave to master in case of failure, ensuring minimal downtime.\n\n- **Redis Cluster**: Supports automatic sharding, allowing Redis to scale horizontally. It partitions data across multiple nodes, ensuring that the system can handle large datasets and high throughput.\n\n#### Performance and Use Cases\n\nRedis's in-memory architecture gives it unmatched I/O speed, making it ideal for real-time applications such as:\n\n- **Gaming**: Managing leaderboards, player sessions, and real-time statistics.\n- **Chat Applications**: Storing messages, user presence information, and delivering real-time notifications.\n- **Analytics**: Real-time data processing and analytics, where rapid data access and manipulation are crucial.\n- **Caching**: Reducing database load by caching frequently accessed data, improving application response times.\n\n#### Persistence and Durability\n\n- **RDB (Redis Database)**: Creates snapshots of the dataset at specified intervals, allowing data to be restored from the last snapshot.\n- **AOF (Append Only File)**: Logs every write operation received by the server, providing a more durable solution that can replay the log to reconstruct the dataset.\n- **Hybrid Approach**: Combining RDB and AOF to leverage the benefits of both methods, balancing performance and data durability.\n\n#### Advanced Features\n\nOn top of all of that, Redis even provides some very powerful out-of-the-box features:\n\n- **Lua Scripting**: Supports server-side scripting with Lua, enabling complex operations to be executed atomically.\n- **Pub/Sub Messaging**: Allows for message broadcasting to multiple clients, supporting real-time messaging and notifications. You can create whole event-based architectures around Redis.\n- **Modules**: Extend Redis functionality with custom modules, such as RedisGraph for graph database capabilities and RedisJSON for JSON document storage.\n\nRedis's robust feature set, combined with its high performance and flexibility, makes it a versatile tool for developers looking to build scalable and responsive applications.\n\n## Message Brokers and Streaming Platforms\n\n![Message Brokers and Streaming Platforms](https://assets.roadmap.sh/guest/message-queue-yoq3q.png)\n\nMessage brokers and streaming platforms facilitate communication between different parts of a system, enabling efficient data exchange and processing. They are crucial for building scalable and resilient applications and they are the core of reactive architectures (also known as event-based architectures).\n\n### RabbitMQ\n\nRabbitMQ is an open-source message broker that implements the Advanced Message Queuing Protocol (AMQP). It supports multiple messaging protocols and can be deployed in distributed and federated configurations. RabbitMQ is ideal for use cases that require reliable message delivery, complex routing, and interoperability with other messaging systems. It is commonly used in financial systems, order processing, and other applications that need robust messaging capabilities.\n\n### Apache Kafka\n\nApache Kafka is a distributed streaming platform designed for high-throughput, low-latency data processing. It excels at handling real-time data feeds, making it suitable for applications that require continuous data integration and processing. Kafka’s publish-subscribe messaging system is fault-tolerant and scalable, making it ideal for big data applications, real-time analytics, event sourcing, and log aggregation. Its ability to store streams of records in a fault-tolerant manner also makes it useful for building event-driven architectures and microservices.\n\nAs backend developers, understanding how to take advantage of these message queues is critical to the development of scalable and resilient platforms. It is definitely a must-have skill and you need to master it.\n\n## Authentication and Authorization\n\n![Authentication and Authorization](https://assets.roadmap.sh/guest/authentication-vs-authorization-vl6lg.png)\n\nAuthentication and authorization technologies are essential for securing applications, ensuring that users are who they claim to be and have the appropriate permissions to access resources.\n\nThis space is filled with solutions and methodologies, so it’s not easy to pick one option here, however, these two are very common solutions used to implement both, authZ (authorization) and authN (authentication).\n\n### OAuth\n\nOAuth is an open standard for access delegation commonly used to grant websites or applications limited access to a user’s information without exposing their passwords. It is widely used in single sign-on (SSO) systems, enabling users to log in to multiple applications with a single set of credentials. OAuth is ideal for third-party applications that need access to user data, such as social media integrations and API access management.\n\n### JWT (JSON Web Tokens)\n\nJWT is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object, which is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure. JWTs are commonly used for authentication and authorization in web applications, providing a secure way to transmit information between parties. They are particularly useful in stateless authentication systems, where user state is not stored on the server (like when dealing with RESTful APIs).\n\n## CI/CD Pipelines\n\n![CI/CD Pipelines](https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-rg7t9.png)\n\nCI/CD (Continuous Integration/Continuous Deployment) pipelines automate the process of code integration, testing, and deployment, enabling faster and more reliable software delivery. This is one of the key areas backend developers need to understand to avoid creating code that simply gets in the way of the deployment process.\n\n### GitHub Actions\n\nGitHub Actions is an integrated CI/CD service within GitHub repositories, allowing developers to automate build, test, and deployment workflows. It supports a wide range of actions and integrations, making it highly customizable and versatile for various development workflows.\n\n### CircleCI\n\nCircleCI is a continuous integration and delivery platform that automates the building, testing, and deployment of applications. It supports multiple backend languages and integrates with various version control systems, making it a popular choice for diverse development environments. CircleCI is known for its speed and ease of setup, providing robust tools for optimizing and monitoring CI/CD pipelines.\n\n### GitLab CI/CD\n\nGitLab CI/CD is an integrated part of the GitLab platform (similar to how GitHub actions are a part of GitHub), offering continuous integration, delivery, and deployment features within the GitLab ecosystem. It allows developers to manage their entire DevOps lifecycle in a single application, from planning and coding to monitoring and security. GitLab CI/CD is particularly useful for teams seeking a seamless and comprehensive CI/CD solution.\n\n### Jenkins\n\nIf instead of a SaaS, you’re looking for a solution that you can potentially self-host, then you might want to look into Jenkins. Jenkins is an open-source automation server that provides hundreds of plugins to support building, deploying, and automating your software development process. It is highly extensible and can be integrated with a wide array of tools and technologies. Jenkins is ideal for complex, large-scale projects requiring a customizable and powerful CI/CD environment.\n\n## Monitoring and Logging\n\n![Monitoring and Logging](https://assets.roadmap.sh/guest/server-monitoring-vk5nb.png)\n\nUnderstanding how the systems that you develop behave and perform on a daily basis is crucial to launching a successful product. Here’s where monitoring and logging come into play. Monitoring and logging are crucial pieces of backend technology used for maintaining the health, performance, and security of applications. These tools help detect issues, analyze performance, and ensure system reliability.\n\n### ELK Stack (Elasticsearch, Logstash, Kibana)\n\nThe ELK Stack is a set of tools for searching, analyzing, and visualizing log data in real time. Elasticsearch is a search and analytics engine, Logstash is a server-side data processing pipeline, and Kibana is a visualization tool. Together, they provide a powerful platform for centralized logging and monitoring, making them ideal for applications requiring detailed log analysis and real-time insights.\n\n### Grafana\n\nGrafana is an open-source platform for monitoring and observability that integrates with various data sources. It provides powerful visualizations, dashboards, and alerting capabilities, making it a popular choice for monitoring infrastructure and application performance. Grafana is particularly useful for teams needing a flexible and customizable monitoring solution.\n\n### Loki\n\nLoki is a log aggregation system designed to work with Grafana. It is optimized for cost-effective and scalable logging, making it suitable for applications with high log volumes. Loki simplifies log management by allowing developers to query logs using the same language as Grafana, providing seamless integration for comprehensive observability.\n\n### Prometheus\n\nPrometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores metrics as time series data, providing powerful querying language and alerting capabilities. Prometheus is ideal for monitoring applications and infrastructure, particularly in cloud-native and microservices environments, where dynamic and ephemeral resources are common.\n\nIn the end, you might want to go with one or several of these options, the point is that you, as a developer, should be aware of them and what type of value they add to the project.\n\n## Conclusion\n\nAs backend developers, focusing on a backend programming language and a backend framework is not going to be enough. The backend ecosystem is very rich, and there are many areas that are either directly or indirectly related to the daily tasks that a backend dev needs to work on.\n\nThis is why you need to stay up-to-date and look at the trends that develop within each area to make sure you’re still working with and focusing on the right solutions.\n\nIf you'd like more details on the type of backend development technologies you should be focusing on to excel at your role as a backend developer, check out our [Backend Developer Roadmap](https://roadmap.sh/backend).\n";
				}
				async function compiledContent$1d() {
					return await html$1d();
				}
				function getHeadings$1d() {
					return [{"depth":2,"slug":"databases","text":"Databases"},{"depth":3,"slug":"sql-databases","text":"SQL Databases"},{"depth":4,"slug":"postgresql","text":"PostgreSQL"},{"depth":4,"slug":"mysql","text":"MySQL"},{"depth":4,"slug":"microsoft-sql-server","text":"Microsoft SQL Server"},{"depth":4,"slug":"sqlite","text":"SQLite"},{"depth":3,"slug":"nosql-databases","text":"NoSQL Databases"},{"depth":4,"slug":"mongodb","text":"MongoDB"},{"depth":4,"slug":"dynamodb","text":"DynamoDB"},{"depth":4,"slug":"cassandra","text":"Cassandra"},{"depth":2,"slug":"version-control-systems","text":"Version Control Systems"},{"depth":3,"slug":"git","text":"Git"},{"depth":4,"slug":"distributed-version-control","text":"Distributed Version Control"},{"depth":4,"slug":"branching-and-merging","text":"Branching and Merging"},{"depth":4,"slug":"performance","text":"Performance"},{"depth":4,"slug":"commit-history-and-tracking","text":"Commit History and Tracking"},{"depth":4,"slug":"collaboration","text":"Collaboration"},{"depth":4,"slug":"staging-area","text":"Staging Area"},{"depth":3,"slug":"github","text":"GitHub"},{"depth":4,"slug":"key-features-and-benefits","text":"Key Features and Benefits"},{"depth":3,"slug":"gitlab","text":"GitLab"},{"depth":4,"slug":"key-features-and-benefits-1","text":"Key Features and Benefits"},{"depth":3,"slug":"bitbucket","text":"Bitbucket"},{"depth":2,"slug":"containerization-and-orchestration","text":"Containerization and Orchestration"},{"depth":3,"slug":"docker","text":"Docker"},{"depth":3,"slug":"kubernetes","text":"Kubernetes"},{"depth":2,"slug":"cloud-platforms","text":"Cloud Platforms"},{"depth":3,"slug":"amazon-web-services-aws","text":"Amazon Web Services (AWS)"},{"depth":4,"slug":"key-characteristics-of-aws","text":"Key Characteristics of AWS"},{"depth":3,"slug":"google-cloud-platform-gcp","text":"Google Cloud Platform (GCP)"},{"depth":4,"slug":"key-characteristics-of-gcp","text":"Key Characteristics of GCP"},{"depth":3,"slug":"microsoft-azure","text":"Microsoft Azure"},{"depth":4,"slug":"key-characteristics-of-microsoft-azure","text":"Key Characteristics of Microsoft Azure"},{"depth":2,"slug":"apis-and-web-services","text":"APIs and Web Services"},{"depth":3,"slug":"rest","text":"REST"},{"depth":4,"slug":"key-characteristics-of-rest","text":"Key Characteristics of REST"},{"depth":3,"slug":"graphql","text":"GraphQL"},{"depth":4,"slug":"key-characteristics-of-graphql","text":"Key Characteristics of GraphQL"},{"depth":3,"slug":"grpc","text":"gRPC"},{"depth":4,"slug":"key-characteristics-of-grpc","text":"Key Characteristics of gRPC"},{"depth":2,"slug":"caching-systems","text":"Caching Systems"},{"depth":3,"slug":"redis-a-fast-in-memory-storage-solution","text":"Redis: a fast in-memory storage solution"},{"depth":4,"slug":"high-availability-and-scalability","text":"High Availability and Scalability"},{"depth":4,"slug":"performance-and-use-cases","text":"Performance and Use Cases"},{"depth":4,"slug":"persistence-and-durability","text":"Persistence and Durability"},{"depth":4,"slug":"advanced-features","text":"Advanced Features"},{"depth":2,"slug":"message-brokers-and-streaming-platforms","text":"Message Brokers and Streaming Platforms"},{"depth":3,"slug":"rabbitmq","text":"RabbitMQ"},{"depth":3,"slug":"apache-kafka","text":"Apache Kafka"},{"depth":2,"slug":"authentication-and-authorization","text":"Authentication and Authorization"},{"depth":3,"slug":"oauth","text":"OAuth"},{"depth":3,"slug":"jwt-json-web-tokens","text":"JWT (JSON Web Tokens)"},{"depth":2,"slug":"cicd-pipelines","text":"CI/CD Pipelines"},{"depth":3,"slug":"github-actions","text":"GitHub Actions"},{"depth":3,"slug":"circleci","text":"CircleCI"},{"depth":3,"slug":"gitlab-cicd","text":"GitLab CI/CD"},{"depth":3,"slug":"jenkins","text":"Jenkins"},{"depth":2,"slug":"monitoring-and-logging","text":"Monitoring and Logging"},{"depth":3,"slug":"elk-stack-elasticsearch-logstash-kibana","text":"ELK Stack (Elasticsearch, Logstash, Kibana)"},{"depth":3,"slug":"grafana","text":"Grafana"},{"depth":3,"slug":"loki","text":"Loki"},{"depth":3,"slug":"prometheus","text":"Prometheus"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$1d = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1d;
					content.file = file$1d;
					content.url = url$1d;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1d())}`;
				});

const __vite_glob_0_21 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1d,
	compiledContent: compiledContent$1d,
	default: Content$1d,
	file: file$1d,
	frontmatter: frontmatter$1d,
	getHeadings: getHeadings$1d,
	rawContent: rawContent$1d,
	url: url$1d
}, Symbol.toStringTag, { value: 'Module' }));

const html$1c = () => "<p><a href=\"/guides/basic-authentication.png\"><img src=\"/guides/basic-authentication.png\" alt=\"Basic Authentication\"></a></p>";

				const frontmatter$1c = {"title":"Basic Authentication","description":"Understand what is basic authentication and how it is implemented","authorId":"kamran","seo":{"title":"Basic Authentication - roadmap.sh","description":"Understand what is basic authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-05-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1c = "/workspace/src/data/guides/basic-authentication.md";
				const url$1c = undefined;
				function rawContent$1c() {
					return "   \n                             \n                                                                                \n                  \n    \n                                            \n                                                                                  \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Basic Authentication](/guides/basic-authentication.png)](/guides/basic-authentication.png)\n";
				}
				async function compiledContent$1c() {
					return await html$1c();
				}
				function getHeadings$1c() {
					return [];
				}

				const Content$1c = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1c;
					content.file = file$1c;
					content.url = url$1c;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1c())}`;
				});

const __vite_glob_0_22 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1c,
	compiledContent: compiledContent$1c,
	default: Content$1c,
	file: file$1c,
	frontmatter: frontmatter$1c,
	getHeadings: getHeadings$1c,
	rawContent: rawContent$1c,
	url: url$1c
}, Symbol.toStringTag, { value: 'Module' }));

const html$1b = () => "<p>Our last video series was about data structures. We looked at the most common data structures, their use cases, pros and cons, and the different operations you could perform on each data structure.</p>\n<p>Today, we are kicking off a similar series for Authentication strategies where we will discuss everything you need to know about authentication and authentication strategies.</p>\n<p>In this guide today will be talking about what authentication is, and we will cover some terminology that will help us later in the series. You can watch the video below or continue reading this guide.</p>\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/Mcyt9SrZT6g\" title=\"Basics of Authentication\"></iframe>\n<h2 id=\"what-is-authentication\">What is Authentication?</h2>\n<p>Authentication is the process of verifying someone’s identity. A real-world example of that would be when you board a plane, the airline worker checks your passport to verify your identity, so the airport worker authenticates you.</p>\n<p>If we talk about computers, when you log in to any website, you usually authenticate yourself by entering your username and password, which is then checked by the website to ensure that you are who you claim to be. There are two things you should keep in mind:</p>\n<ul>\n<li>Authentication is not only for the persons</li>\n<li>And username and password are not the only way to authenticate.</li>\n</ul>\n<p>Some other examples are:</p>\n<ul>\n<li>\n<p>When you open a website in the browser. If the website uses HTTP, TLS is used to authenticate the server and avoid the fake loading of websites.</p>\n</li>\n<li>\n<p>There might be server-to-server communication on the website. The server may need to authenticate the incoming request to avoid malicious usage.</p>\n</li>\n</ul>\n<h2 id=\"how-does-authentication-work\">How does Authentication Work?</h2>\n<p>On a high level, we have the following factors used for authentication.</p>\n<ul>\n<li><strong>Username and Password</strong></li>\n<li><strong>Security Codes, Pin Codes, or Security Questions</strong> — An example would be the pin code you enter at an ATM to withdraw cash.</li>\n<li><strong>Hard Tokens and Soft Tokens</strong> — Hard tokens are the special hardware devices that you attach to your device to authenticate yourself. Soft tokens, unlike hard tokens, don’t have any authentication-specific device; we must verify the possession of a device that was used to set up the identity. For example, you may receive an OTP to log in to your account on a website.</li>\n<li><strong>Biometric Authentication</strong> — In biometric authentication, we authenticate using biometrics such as iris, facial, or voice recognition.</li>\n</ul>\n<p>We can categorize the factors above into three different types.</p>\n<ul>\n<li>\n<p>Username / Password and Security codes rely on the person’s knowledge: we can group them under the <strong>Knowledge Factor</strong>.</p>\n</li>\n<li>\n<p>In hard and soft tokens, we authenticate by checking the possession of hardware, so this would be a <strong>Possession Factor</strong>.</p>\n</li>\n<li>\n<p>And in biometrics, we test the person’s inherent qualities, i.e., iris, face, or voice, so this would be a <strong>Qualities</strong> factor.</p>\n</li>\n</ul>\n<p>This brings us to our next topic: Multi-factor Authentication and Two-Factor Authentication.</p>\n<h2 id=\"multifactor-authentication\">Multifactor Authentication</h2>\n<p>Multifactor authentication is the type of authentication in which we rely on more than one factor to authenticate a user.</p>\n<p>For example, if we pick up username/password from the <strong>knowledge factor</strong>. And we pick soft tokens from the <strong>possession factor</strong>, and we say that for a user to authenticate, they must enter their credentials and an OTP, which will be sent to their mobile phone, so this would be an example of multifactor authentication.</p>\n<p>In multifactor authentication, since we rely on more than one factor, this way of authentication is much more secure than single-factor authentication.</p>\n<p>One important thing to note here is that the factors you pick for authentication, they must differ. So, for example, if we pick up a username/password and security question or security codes, it is still not true multifactor authentication because we still rely on the knowledge factor. The factors have to be different from each other.</p>\n<h3 id=\"two-factor-authentication\">Two-Factor Authentication</h3>\n<p>Two-factor authentication is similar to multifactor authentication. The only difference is that there are precisely two factors in 2FA. In MFA, we can have 2, 3, 4, or any authentication factors; 2FA has exactly two factors. We can say that 2FA is always MFA, because there are more than one factors. MFA is not always 2FA because there may be more than two factors involved.</p>\n<p>Next we have the difference between authentication and authorization. This comes up a lot in the interviews, and beginners often confuse them.</p>\n<h3 id=\"what-is-authentication-1\">What is Authentication</h3>\n<p>Authentication is the process of verifying the identity. For example, when you enter your credentials at a login screen, the application here identifies you through your credentials. So this is what the authentication is, the process of verifying the identity.</p>\n<p>In case of an authentication failure, for example, if you enter an invalid username and password, the HTTP response code is “Unauthorized” 401.</p>\n<h3 id=\"what-is-authorization\">What is Authorization</h3>\n<p>Authorization is the process of checking permission. Once the user has logged in, i.e., the user has been authenticated, the process of reviewing the permission to see if the user can perform the relevant operation or not is called authorization.</p>\n<p>And in case of authorization failure, i.e., if the user tries to perform an operation they are not allowed to perform, the HTTP response code is forbidden 403.</p>\n<h2 id=\"authentication-strategies\">Authentication Strategies</h2>\n<p>Given below is the list of common authentication strategies:</p>\n<ul>\n<li>Basic Authentication</li>\n<li>Session Based Authentication</li>\n<li>Token-Based Authentication</li>\n<li>JWT Authentication</li>\n<li>OAuth - Open Authorization</li>\n<li>Single Sign On (SSO)</li>\n</ul>\n<p>In this series of illustrated videos and textual guides, we will be going through each of the strategies discussing what they are, how they are implemented, the pros and cons and so on.</p>\n<p>So stay tuned, and I will see you in the next one.</p>";

				const frontmatter$1b = {"title":"Basics of Authentication","description":"Learn the basics of Authentication and Authorization","authorId":"kamran","seo":{"title":"Basics of Authentication - roadmap.sh","description":"Learn the basics of Authentication and Authorization"},"isNew":false,"type":"textual","date":"2022-09-21T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$1b = "/workspace/src/data/guides/basics-of-authentication.md";
				const url$1b = undefined;
				function rawContent$1b() {
					return "   \n                                 \n                                                                   \n                  \n    \n                                                \n                                                                     \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nOur last video series was about data structures. We looked at the most common data structures, their use cases, pros and cons, and the different operations you could perform on each data structure.\n\nToday, we are kicking off a similar series for Authentication strategies where we will discuss everything you need to know about authentication and authentication strategies.\n\nIn this guide today will be talking about what authentication is, and we will cover some terminology that will help us later in the series. You can watch the video below or continue reading this guide.\n\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/Mcyt9SrZT6g\" title=\"Basics of Authentication\"></iframe>\n\n## What is Authentication?\n\nAuthentication is the process of verifying someone's identity. A real-world example of that would be when you board a plane, the airline worker checks your passport to verify your identity, so the airport worker authenticates you.\n\nIf we talk about computers, when you log in to any website, you usually authenticate yourself by entering your username and password, which is then checked by the website to ensure that you are who you claim to be. There are two things you should keep in mind:\n\n- Authentication is not only for the persons\n- And username and password are not the only way to authenticate.\n\nSome other examples are:\n\n- When you open a website in the browser. If the website uses HTTP, TLS is used to authenticate the server and avoid the fake loading of websites.\n\n- There might be server-to-server communication on the website. The server may need to authenticate the incoming request to avoid malicious usage.\n\n## How does Authentication Work?\n\nOn a high level, we have the following factors used for authentication.\n\n- **Username and Password**\n- **Security Codes, Pin Codes, or Security Questions** — An example would be the pin code you enter at an ATM to withdraw cash.\n- **Hard Tokens and Soft Tokens** — Hard tokens are the special hardware devices that you attach to your device to authenticate yourself. Soft tokens, unlike hard tokens, don't have any authentication-specific device; we must verify the possession of a device that was used to set up the identity. For example, you may receive an OTP to log in to your account on a website.\n- **Biometric Authentication** — In biometric authentication, we authenticate using biometrics such as iris, facial, or voice recognition.\n\nWe can categorize the factors above into three different types.\n\n- Username / Password and Security codes rely on the person's knowledge: we can group them under the **Knowledge Factor**.\n\n- In hard and soft tokens, we authenticate by checking the possession of hardware, so this would be a **Possession Factor**.\n\n- And in biometrics, we test the person's inherent qualities, i.e., iris, face, or voice, so this would be a **Qualities** factor.\n\nThis brings us to our next topic: Multi-factor Authentication and Two-Factor Authentication.\n\n## Multifactor Authentication\n\nMultifactor authentication is the type of authentication in which we rely on more than one factor to authenticate a user.\n\nFor example, if we pick up username/password from the **knowledge factor**. And we pick soft tokens from the **possession factor**, and we say that for a user to authenticate, they must enter their credentials and an OTP, which will be sent to their mobile phone, so this would be an example of multifactor authentication.\n\nIn multifactor authentication, since we rely on more than one factor, this way of authentication is much more secure than single-factor authentication.\n\nOne important thing to note here is that the factors you pick for authentication, they must differ. So, for example, if we pick up a username/password and security question or security codes, it is still not true multifactor authentication because we still rely on the knowledge factor. The factors have to be different from each other.\n\n### Two-Factor Authentication\n\nTwo-factor authentication is similar to multifactor authentication. The only difference is that there are precisely two factors in 2FA. In MFA, we can have 2, 3, 4, or any authentication factors; 2FA has exactly two factors. We can say that 2FA is always MFA, because there are more than one factors. MFA is not always 2FA because there may be more than two factors involved.\n\nNext we have the difference between authentication and authorization. This comes up a lot in the interviews, and beginners often confuse them.\n\n### What is Authentication\n\nAuthentication is the process of verifying the identity. For example, when you enter your credentials at a login screen, the application here identifies you through your credentials. So this is what the authentication is, the process of verifying the identity.\n\nIn case of an authentication failure, for example, if you enter an invalid username and password, the HTTP response code is \"Unauthorized\" 401.\n\n### What is Authorization\n\nAuthorization is the process of checking permission. Once the user has logged in, i.e., the user has been authenticated, the process of reviewing the permission to see if the user can perform the relevant operation or not is called authorization.\n\nAnd in case of authorization failure, i.e., if the user tries to perform an operation they are not allowed to perform, the HTTP response code is forbidden 403.\n\n## Authentication Strategies\n\nGiven below is the list of common authentication strategies:\n\n- Basic Authentication\n- Session Based Authentication\n- Token-Based Authentication\n- JWT Authentication\n- OAuth - Open Authorization\n- Single Sign On (SSO)\n\nIn this series of illustrated videos and textual guides, we will be going through each of the strategies discussing what they are, how they are implemented, the pros and cons and so on.\n\nSo stay tuned, and I will see you in the next one.\n";
				}
				async function compiledContent$1b() {
					return await html$1b();
				}
				function getHeadings$1b() {
					return [{"depth":2,"slug":"what-is-authentication","text":"What is Authentication?"},{"depth":2,"slug":"how-does-authentication-work","text":"How does Authentication Work?"},{"depth":2,"slug":"multifactor-authentication","text":"Multifactor Authentication"},{"depth":3,"slug":"two-factor-authentication","text":"Two-Factor Authentication"},{"depth":3,"slug":"what-is-authentication-1","text":"What is Authentication"},{"depth":3,"slug":"what-is-authorization","text":"What is Authorization"},{"depth":2,"slug":"authentication-strategies","text":"Authentication Strategies"}];
				}

				const Content$1b = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1b;
					content.file = file$1b;
					content.url = url$1b;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1b())}`;
				});

const __vite_glob_0_23 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1b,
	compiledContent: compiledContent$1b,
	default: Content$1b,
	file: file$1b,
	frontmatter: frontmatter$1b,
	getHeadings: getHeadings$1b,
	rawContent: rawContent$1b,
	url: url$1b
}, Symbol.toStringTag, { value: 'Module' }));

const html$1a = () => "<p>Big-O notation is the mathematical notation that helps analyse the algorithms to get an idea about how they might perform as the input grows. The image below explains Big-O in a simple way without using any fancy terminology.</p>\n<p><a href=\"/guides/big-o-notation.png\"><img src=\"/guides/big-o-notation.png\" alt=\"Big-O Notation\"></a></p>";

				const frontmatter$1a = {"title":"Big-O Notation","description":"Easy to understand explanation of Big-O notation without any fancy terms","authorId":"kamran","seo":{"title":"Big-O Notation - roadmap.sh","description":"Easy to understand explanation of Big-O notation without any fancy terms"},"isNew":false,"type":"visual","date":"2021-03-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1a = "/workspace/src/data/guides/big-o-notation.md";
				const url$1a = undefined;
				function rawContent$1a() {
					return "   \n                       \n                                                                                       \n                  \n    \n                                      \n                                                                                         \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nBig-O notation is the mathematical notation that helps analyse the algorithms to get an idea about how they might perform as the input grows. The image below explains Big-O in a simple way without using any fancy terminology.\n\n[![Big-O Notation](/guides/big-o-notation.png)](/guides/big-o-notation.png)\n";
				}
				async function compiledContent$1a() {
					return await html$1a();
				}
				function getHeadings$1a() {
					return [];
				}

				const Content$1a = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1a;
					content.file = file$1a;
					content.url = url$1a;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1a())}`;
				});

const __vite_glob_0_24 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1a,
	compiledContent: compiledContent$1a,
	default: Content$1a,
	file: file$1a,
	frontmatter: frontmatter$1a,
	getHeadings: getHeadings$1a,
	rawContent: rawContent$1a,
	url: url$1a
}, Symbol.toStringTag, { value: 'Module' }));

const html$19 = () => "<p><a href=\"/guides/character-encodings.png\"><img src=\"/guides/character-encodings.png\" alt=\"Character Encodings\"></a></p>";

				const frontmatter$19 = {"title":"Character Encodings","description":"Covers the basics of character encodings and explains ASCII vs Unicode","authorId":"kamran","seo":{"title":"Character Encodings - roadmap.sh","description":"Covers the basics of character encodings and explains ASCII vs Unicode"},"isNew":false,"type":"visual","date":"2021-05-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$19 = "/workspace/src/data/guides/character-encodings.md";
				const url$19 = undefined;
				function rawContent$19() {
					return "   \n                            \n                                                                                     \n                  \n    \n                                           \n                                                                                       \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Character Encodings](/guides/character-encodings.png)](/guides/character-encodings.png)\n";
				}
				async function compiledContent$19() {
					return await html$19();
				}
				function getHeadings$19() {
					return [];
				}

				const Content$19 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$19;
					content.file = file$19;
					content.url = url$19;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$19())}`;
				});

const __vite_glob_0_25 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$19,
	compiledContent: compiledContent$19,
	default: Content$19,
	file: file$19,
	frontmatter: frontmatter$19,
	getHeadings: getHeadings$19,
	rawContent: rawContent$19,
	url: url$19
}, Symbol.toStringTag, { value: 'Module' }));

const html$18 = () => "<p>The image below details the differences between the continuous integration and continuous delivery. Also, here is the <a href=\"https://www.youtube.com/watch?v=nyKZTKQS_EQ\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">accompanying video on implementing that with GitHub actions</a>.</p>\n<p><a href=\"/guides/ci-cd.png\"><img src=\"/guides/ci-cd.png\" alt=\"CI vs CD\"></a></p>";

				const frontmatter$18 = {"title":"What is CI and CD?","description":"Learn the basics of CI/CD and how to implement that with GitHub Actions.","authorId":"kamran","seo":{"title":"What is CI and CD? - roadmap.sh","description":"Learn the basics of CI/CD and how to implement that with GitHub Actions."},"isNew":false,"type":"visual","date":"2021-07-09T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$18 = "/workspace/src/data/guides/ci-cd.md";
				const url$18 = undefined;
				function rawContent$18() {
					return "   \n                           \n                                                                                       \n                  \n    \n                                          \n                                                                                         \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nThe image below details the differences between the continuous integration and continuous delivery. Also, here is the [accompanying video on implementing that with GitHub actions](https://www.youtube.com/watch?v=nyKZTKQS_EQ).\n\n[![CI vs CD](/guides/ci-cd.png)](/guides/ci-cd.png)\n";
				}
				async function compiledContent$18() {
					return await html$18();
				}
				function getHeadings$18() {
					return [];
				}

				const Content$18 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$18;
					content.file = file$18;
					content.url = url$18;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$18())}`;
				});

const __vite_glob_0_26 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$18,
	compiledContent: compiledContent$18,
	default: Content$18,
	file: file$18,
	frontmatter: frontmatter$18,
	getHeadings: getHeadings$18,
	rawContent: rawContent$18,
	url: url$18
}, Symbol.toStringTag, { value: 'Module' }));

const html$17 = () => "<p>Before we talk about the Consistency Patterns, we should know what a distributed system is. Simply put, a distributed system is a system that consists of more than one components, and each component is responsible for one part of the application.</p>\n<blockquote>\n<p>A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. - Wikipedia</p>\n</blockquote>\n<h2 id=\"distributed-systems\">Distributed Systems</h2>\n<p>Imagine we have an e-commerce application where we are selling books. This application may consist of multiple different components. For example, one server might be responsible for the accounts, another might be responsible for the payments, one might be responsible for storing orders, one might be responsible for loyalty points and relevant functionalities, and another might be responsible for maintaining the books inventory and so on.</p>\n<p><img src=\"https://i.imgur.com/VHATt7a.png\" alt=\"Book Store - Distributed System\"></p>\n<p>Now, if a user buys a book, there might be different services involved in placing the order; order service for storing the order, payment service for handling the payments, and inventory service for keeping the stock of that ordered book up to date. This is an example of a distributed system, an application that consists of multiple different components, each of which is responsible for a different part of the application.</p>\n<h2 id=\"why-is-consistency-important\">Why is Consistency Important?</h2>\n<p>When working with distributed systems, we need to think about managing the data across different servers. If we take the above example of the e-commerce application, we can see that the inventory service must have up-to-date stock information for the ordered items if the user places an order. Now, there might be two different users looking at the same book. Now imagine if one of the customers places a successful order, and before the inventory service can update the stock, the second customer also places the order for the same book. In that case, when the inventory wasn’t updated, we will have the wrong stock information when the second order was placed, i.e., the ordered book may or may not be available in stock. This is where different consistency patterns come into play. They help ensure that the data is consistent across the application.</p>\n<h2 id=\"consistency-patterns\">Consistency Patterns</h2>\n<p>Consistency patterns refer to the ways in which data is stored and managed in a distributed system and how that data is made available to users and applications. There are three main types of consistency patterns:</p>\n<ul>\n<li>Strong consistency</li>\n<li>Weak consistency</li>\n<li>Eventual Consistency</li>\n</ul>\n<p>Each of these patterns has its own advantages and disadvantages, and the choice of which pattern to use will depend on the specific requirements of the application or system.</p>\n<h3 id=\"strong-consistency\">Strong Consistency</h3>\n<blockquote>\n<p>After an update is made to the data, it will be immediately visible to any subsequent read operations. The data is replicated in a synchronous manner, ensuring that all copies of the data are updated at the same time.</p>\n</blockquote>\n<p>In a strong consistency system, any updates to some data are immediately propagated to all locations. This ensures that all locations have the same version of the data, but it also means that the system is not highly available and has high latency.</p>\n<p>An example of strong consistency is a financial system where users can transfer money between accounts. The system is designed for <strong>high data integrity</strong>, so the data is stored in a single location and updates to that data are immediately propagated to all other locations. This ensures that all users and applications are working with the same, accurate data. For instance, when a user initiates a transfer of funds from one account to another, the system immediately updates the balance of both accounts and all other system components are immediately aware of the change. This ensures that all users can see the updated balance of both accounts and prevents any discrepancies.</p>\n<h3 id=\"weak-consistency\">Weak Consistency</h3>\n<blockquote>\n<p>After an update is made to the data, it is not guaranteed that any subsequent read operation will immediately reflect the changes made. The read <strong>may or may not</strong> see the recent write.</p>\n</blockquote>\n<p>In a weakly consistent system, updates to the data may not be immediately propagated. This can lead to inconsistencies and conflicts between different versions of the data, but it also allows for <strong>high availability and low latency</strong>.</p>\n<p>Another example of weak consistency is a gaming platform where users can play online multiplayer games. When a user plays a game, their actions are immediately visible to other players in the same data center, but if there was a lag or temporary connection loss, the actions may not be seen by some of the users and the game will continue. This can lead to inconsistencies between different versions of the game state, but it also allows for a high level of availability and low latency.</p>\n<h3 id=\"eventual-consistency\">Eventual Consistency</h3>\n<blockquote>\n<p>Eventual consistency is a form of Weak Consistency. After an update is made to the data, it will be eventually visible to any subsequent read operations. The data is replicated in an asynchronous manner, ensuring that all copies of the data are eventually updated.</p>\n</blockquote>\n<p>In an eventually consistent system, data is typically stored in multiple locations, and updates to that data are eventually propagated to all locations. This means that the system is highly available and has low latency, but it also means that there may be inconsistencies and conflicts between different versions of the data.</p>\n<p>An example of eventual consistency is a social media platform where users can post updates, comments, and messages. The platform is designed for high availability and low latency, so the data is stored in multiple data centers around the world. When a user posts an update, the update is immediately visible to other users in the same data center, but it may take some time for the update to propagate to other data centers. This means that some users may see the update while others may not, depending on which data center they are connected to. This can lead to inconsistencies between different versions of the data, but it also allows for a high level of availability and low latency.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In conclusion, consistency patterns play a crucial role in distributed systems, and the choice of which pattern to use will depend on the specific requirements of the application or system. Each pattern has its own advantages and disadvantages, and each is more suitable for different use cases. Weak consistency is suitable for systems that require high availability and low latency, strong consistency is suitable for systems that require high data integrity, and eventual consistency is suitable for systems that require both high availability and high data integrity.</p>";

				const frontmatter$17 = {"title":"Consistency Patterns","description":"Everything you need to know about Week, Strong and Eventual Consistency","authorId":"kamran","seo":{"title":"Consistency Patterns - roadmap.sh","description":"Everything you need to know about Week, Strong and Eventual Consistency"},"isNew":false,"type":"textual","date":"2023-01-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$17 = "/workspace/src/data/guides/consistency-patterns-in-distributed-systems.md";
				const url$17 = undefined;
				function rawContent$17() {
					return "   \n                             \n                                                                                      \n                  \n    \n                                            \n                                                                                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nBefore we talk about the Consistency Patterns, we should know what a distributed system is. Simply put, a distributed system is a system that consists of more than one components, and each component is responsible for one part of the application.\n\n> A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. - Wikipedia\n\n## Distributed Systems\n\nImagine we have an e-commerce application where we are selling books. This application may consist of multiple different components. For example, one server might be responsible for the accounts, another might be responsible for the payments, one might be responsible for storing orders, one might be responsible for loyalty points and relevant functionalities, and another might be responsible for maintaining the books inventory and so on.\n\n![Book Store - Distributed System](https://i.imgur.com/VHATt7a.png)\n\nNow, if a user buys a book, there might be different services involved in placing the order; order service for storing the order, payment service for handling the payments, and inventory service for keeping the stock of that ordered book up to date. This is an example of a distributed system, an application that consists of multiple different components, each of which is responsible for a different part of the application.\n\n## Why is Consistency Important?\n\nWhen working with distributed systems, we need to think about managing the data across different servers. If we take the above example of the e-commerce application, we can see that the inventory service must have up-to-date stock information for the ordered items if the user places an order. Now, there might be two different users looking at the same book. Now imagine if one of the customers places a successful order, and before the inventory service can update the stock, the second customer also places the order for the same book. In that case, when the inventory wasn't updated, we will have the wrong stock information when the second order was placed, i.e., the ordered book may or may not be available in stock. This is where different consistency patterns come into play. They help ensure that the data is consistent across the application.\n\n## Consistency Patterns\n\nConsistency patterns refer to the ways in which data is stored and managed in a distributed system and how that data is made available to users and applications. There are three main types of consistency patterns:\n\n- Strong consistency\n- Weak consistency\n- Eventual Consistency\n\nEach of these patterns has its own advantages and disadvantages, and the choice of which pattern to use will depend on the specific requirements of the application or system.\n\n### Strong Consistency\n\n> After an update is made to the data, it will be immediately visible to any subsequent read operations. The data is replicated in a synchronous manner, ensuring that all copies of the data are updated at the same time.\n\nIn a strong consistency system, any updates to some data are immediately propagated to all locations. This ensures that all locations have the same version of the data, but it also means that the system is not highly available and has high latency.\n\nAn example of strong consistency is a financial system where users can transfer money between accounts. The system is designed for **high data integrity**, so the data is stored in a single location and updates to that data are immediately propagated to all other locations. This ensures that all users and applications are working with the same, accurate data. For instance, when a user initiates a transfer of funds from one account to another, the system immediately updates the balance of both accounts and all other system components are immediately aware of the change. This ensures that all users can see the updated balance of both accounts and prevents any discrepancies.\n\n### Weak Consistency\n\n> After an update is made to the data, it is not guaranteed that any subsequent read operation will immediately reflect the changes made. The read **may or may not** see the recent write.\n\nIn a weakly consistent system, updates to the data may not be immediately propagated. This can lead to inconsistencies and conflicts between different versions of the data, but it also allows for **high availability and low latency**.\n\nAnother example of weak consistency is a gaming platform where users can play online multiplayer games. When a user plays a game, their actions are immediately visible to other players in the same data center, but if there was a lag or temporary connection loss, the actions may not be seen by some of the users and the game will continue. This can lead to inconsistencies between different versions of the game state, but it also allows for a high level of availability and low latency.\n\n### Eventual Consistency\n\n> Eventual consistency is a form of Weak Consistency. After an update is made to the data, it will be eventually visible to any subsequent read operations. The data is replicated in an asynchronous manner, ensuring that all copies of the data are eventually updated.\n\nIn an eventually consistent system, data is typically stored in multiple locations, and updates to that data are eventually propagated to all locations. This means that the system is highly available and has low latency, but it also means that there may be inconsistencies and conflicts between different versions of the data.\n\nAn example of eventual consistency is a social media platform where users can post updates, comments, and messages. The platform is designed for high availability and low latency, so the data is stored in multiple data centers around the world. When a user posts an update, the update is immediately visible to other users in the same data center, but it may take some time for the update to propagate to other data centers. This means that some users may see the update while others may not, depending on which data center they are connected to. This can lead to inconsistencies between different versions of the data, but it also allows for a high level of availability and low latency.\n\n## Conclusion\n\nIn conclusion, consistency patterns play a crucial role in distributed systems, and the choice of which pattern to use will depend on the specific requirements of the application or system. Each pattern has its own advantages and disadvantages, and each is more suitable for different use cases. Weak consistency is suitable for systems that require high availability and low latency, strong consistency is suitable for systems that require high data integrity, and eventual consistency is suitable for systems that require both high availability and high data integrity.\n";
				}
				async function compiledContent$17() {
					return await html$17();
				}
				function getHeadings$17() {
					return [{"depth":2,"slug":"distributed-systems","text":"Distributed Systems"},{"depth":2,"slug":"why-is-consistency-important","text":"Why is Consistency Important?"},{"depth":2,"slug":"consistency-patterns","text":"Consistency Patterns"},{"depth":3,"slug":"strong-consistency","text":"Strong Consistency"},{"depth":3,"slug":"weak-consistency","text":"Weak Consistency"},{"depth":3,"slug":"eventual-consistency","text":"Eventual Consistency"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$17 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$17;
					content.file = file$17;
					content.url = url$17;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$17())}`;
				});

const __vite_glob_0_27 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$17,
	compiledContent: compiledContent$17,
	default: Content$17,
	file: file$17,
	frontmatter: frontmatter$17,
	getHeadings: getHeadings$17,
	rawContent: rawContent$17,
	url: url$17
}, Symbol.toStringTag, { value: 'Module' }));

const html$16 = () => "<p><img src=\"https://assets.roadmap.sh/guest/data-analyst-career-path-heu4b.jpg\" alt=\"Choosing your data analyst career path\"></p>\n<h1 id=\"data-analyst-career-path-my-pro-advice\">Data Analyst Career Path: My Pro Advice</h1>\n<p>Data analysts sit at the heart of decision‑making in virtually every industry today. From uncovering customer behavior patterns in retail to optimizing operations in healthcare, the ability to collect, clean, and interpret data has become a critical superpower.</p>\n<p>To help you map out your future data analyst career path, in this guide I’ll mix in two cornerstone resources from roadmap.sh: the very detailed <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a>, which lays out the skills and milestones you’ll need from beginner to pro, and the hands‑on <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL Course</a>, designed to build your foundation in one of the most common languages when it comes to data operations. Together, these tools will serve as your compass and toolkit, ensuring you have a clear path forward and the practical know‑how to tackle real‑world challenges.</p>\n<h2 id=\"options-for-a-data-analyst-career-path\">Options for a Data Analyst Career Path</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/data-analyst-career-options-ct705.png\" alt=\"Options for a Data Analyst Career Path\"></p>\n<p>Knowing where to go and how to grow in data analysis is not trivial, simply because there are too many very valid and interesting options for data analysts.</p>\n<p>To narrow the list of options, we can think of three core trajectories, each with its own set of responsibilities, key skills, and growth opportunities:</p>\n<h3 id=\"junior-data-analyst--senior-data-analyst--analytics-manager\">Junior Data Analyst → Senior Data Analyst → Analytics Manager</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Level</th><th align=\"left\">Focus</th><th align=\"left\">Key skills</th><th align=\"left\">Goal</th></tr></thead><tbody><tr><td align=\"left\"><strong>Entry-level (i.e junior analyst)</strong></td><td align=\"left\">Clean &#x26; transform data using SQL or MS Excel</td><td align=\"left\">Basic data modeling, reporting, req. gathering.</td><td align=\"left\">Provide actionable insights.</td></tr><tr><td align=\"left\"><strong>Mid-level</strong></td><td align=\"left\">Complex analysis, advanced statistical analysis, and project ownership.</td><td align=\"left\">Python/R, creating ETLs, mentoring</td><td align=\"left\">Shaping data strategy, collaborating with business or operations, and influencing decision-making</td></tr><tr><td align=\"left\"><strong>Leadership</strong></td><td align=\"left\">Defining implementation roadmaps</td><td align=\"left\">Leadership, stakeholder management, expectation management with clients.</td><td align=\"left\">Lead key meetings with clients, become VP of analytics, or similar role.</td></tr></tbody></table>\n<h3 id=\"data-analytics-consultant--bi-analyst\">Data Analytics Consultant / BI Analyst</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Level</th><th align=\"left\">Focus</th><th align=\"left\">Key Skills</th><th align=\"left\">Goal</th></tr></thead><tbody><tr><td align=\"left\"><strong>Data Analytics Consultant</strong></td><td align=\"left\">Acting as a strategic advisor, you help organizations define their data strategy and translate business requirements.</td><td align=\"left\">Data Strategy &#x26; Governance, Client Engagement, deep SQL.</td><td align=\"left\">Delivering a scalable analytics roadmap, implementing dashboards, and earning trust as a go‑to advisor.</td></tr><tr><td align=\"left\"><strong>BI Analyst</strong></td><td align=\"left\">Embedding within a single organization or business unit to build and maintain self‑service reporting environments.</td><td align=\"left\">ETL, dashboard development.</td><td align=\"left\">Influence data strategy, mentor JR Data Scientists.</td></tr></tbody></table>\n<h3 id=\"specialized-data-scientist-tracks--chief-data-officer\">Specialized Data Scientist Tracks → Chief Data Officer</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Level</th><th align=\"left\">Focus</th><th align=\"left\">Key Skills</th><th align=\"left\">Goal</th></tr></thead><tbody><tr><td align=\"left\"><strong>Data science option</strong></td><td align=\"left\">Go from descriptive analytics to machine learning algorithms.</td><td align=\"left\">Advanced Python, Statistical Analysis, Data modeling.</td><td align=\"left\">Deliver a working predictive solution</td></tr><tr><td align=\"left\"><strong>Advanced Statistics</strong></td><td align=\"left\">Tackle large‑scale analytical problems</td><td align=\"left\">Expertise in advanced statistical programming, big Data, and a bit of storytelling</td><td align=\"left\">Influence data strategy, mentor JR Data Scientists</td></tr><tr><td align=\"left\"><strong>CDO</strong></td><td align=\"left\">Oversee data governance, compliance, and ensure that analytics and machine learning initiatives align with strategic objectives.</td><td align=\"left\">Strategic leadership, understanding of data privacy, data governance.</td><td align=\"left\">Implement robust data governance &#x26; privacy frameworks,  deliver analytics roadmap.</td></tr></tbody></table>\n<h3 id=\"what-should-you-pick\">What should you pick?</h3>\n<p>In the end, either through any of these variations of the data analyst career path, there isn’t a single option that is clearly better than the others.</p>\n<ul>\n<li>\n<p>If you love turning raw numbers into charts and dashboards, the <strong>junior→senior analyst</strong> route offers steady, skill‑based progression.</p>\n</li>\n<li>\n<p>If you thrive on variety and advising multiple teams, consider the <strong>analytics consultant/BI analyst</strong> track.</p>\n</li>\n<li>\n<p>If you’re drawn to algorithms and predictive work, the <strong>data science</strong> trajectory can propel you toward senior data scientist roles and, ultimately, a chief data officer position.</p>\n</li>\n</ul>\n<h2 id=\"is-data-analysis-right-for-you\">Is Data Analysis Right for You?</h2>\n<p>Figuring out if the data analyst career path is the right place for you is not an easy task; in fact, many will need to go through the process of working in the field to retroactively answer the question.</p>\n<p>But to give you a basic guide and help you understand whether you’d enjoy the position or not, you have to consider that pursuing a data analytics career begins with an honest curiosity about how raw data translates into actionable insights. Data analysis isn’t just number crunching; it’s about asking the right questions, designing robust statistical tests, and building data models that answer real business problems.</p>\n<h2 id=\"learning-path--essential-skills\">Learning Path &#x26; Essential Skills</h2>\n<p>Charting your learning path starts with a clear learning roadmap, and there’s no better place to begin than the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/learning-path-essential-skills-k9zy3.png\" alt=\"Learning Path &#x26; Essential Skills\"></p>\n<p>Following its structured progression ensures you’re building the right technical skill set in the right order.</p>\n<p>As part of the roadmap, you’ll have to tackle different languages such as SQL, R, Python, and others. To learn more about it, you can try this hands-on <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL Course</a> that walks you through writing efficient queries, designing relational schemas, and performing complex joins and aggregations.</p>\n<p>You’ll also need <strong>data visualization tools</strong> and the storytelling mindset that makes your analyses resonate.</p>\n<p>Finally, you’ll start noticing that soft skills are particularly needed as a data analyst. For example, clear communication, problem solving, and a collaborative spirit are non‑negotiable when gathering requirements, iterating on dashboards, or presenting to senior management.</p>\n<h2 id=\"3-portfolio-project-ideas\">3 Portfolio Project Ideas</h2>\n<p>Below are three end‑to‑end projects designed to showcase the abilities that hiring managers look for in data analyst candidates. Each idea maps to stages on the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a> and gives you a chance to apply SQL, Python/R, and visualization tools to real‑world questions.</p>\n<h3 id=\"interactive-sales-dashboard\">Interactive Sales Dashboard</h3>\n<p><strong>Objective:</strong> In this project, you can build a live dashboard that empowers marketing and senior management to spot seasonal patterns, best‑selling products, and under‑performing regions.</p>\n<p><strong>Data &#x26; tools:</strong> For this project, you can source a public retail or e-commerce dataset (such as Kaggle “Online Retail II”). You can use Python and SQL, the rest is up to you to decide how to show the results.</p>\n<p><strong>Key skills demonstrated:</strong> In this project, you’re covering a bit of Data Modeling, ETL pipelines, and mostly Data Visualization tools.</p>\n<h3 id=\"customer-churn-prediction-model\">Customer Churn Prediction Model</h3>\n<p><strong>Objective:</strong> For this one, you’ll show how statistical analysis and basic machine learning can predict which customers are most likely to churn, enabling proactive retention strategies.</p>\n<p><strong>Data &#x26; Tools:</strong> For this one, you can find some sort of telecom dataset (like IBM Telco Customer Churn), use Python and SQL again to do some exploratory analysis, and finally train a classification model using scikit-learn.</p>\n<p><strong>Key skills demonstrated:</strong> During this project, you’ll work on statistical analysis, data mining, and, as usual, some actionable insights turned into storytelling.</p>\n<h3 id=\"ab-testing-analysis-for-website-redesign\">A/B Testing Analysis for Website Redesign</h3>\n<p><strong>Objective</strong>: Conduct and interpret an A/B test to determine which landing‑page design maximizes conversion, showcasing your ability to drive business analytics projects from hypothesis to recommendation.</p>\n<p><strong>Data &#x26; Tools</strong>: You can get some synthetic data for this one using something like ChatGPT, as long as it simulates A/B test data. Then, using either SQL or even MS Excel, you can do some aggregations and finally do the last calculations with Python or R. Try to plot the results on something like PowerBI at the end.</p>\n<p><strong>Key skills demonstrated</strong>: For this project, you’ll be doing some experimental design, some business intelligence, and of course, decision making by translating statistical outcomes into a go/no‑go recommendation, acting as a market research analyst.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/data-analyst-portfolio-projects-tjm2y.png\" alt=\"Data Analyst Portfolio Projects\"></p>\n<h2 id=\"my-tips-from-personal-experience\">My tips from personal experience</h2>\n<p>With all of this out of the way, let me quickly run you through some of my personal tips when it comes to growing and moving forward as a data analyst.</p>\n<ol>\n<li><strong>Build a strong network and find mentors:</strong> Connect with other data analysts, data scientists, and analytics managers through LinkedIn groups, local meetups, or virtual conferences. Ask others who have gone through the same about their journey, about the problems they found along the way. Learn from them.</li>\n<li><strong>Showcase your work with purpose:</strong> Your first data analyst job will depend on having a solid portfolio (since you don’t have any actual experience). Try to host your projects on GitHub or a personal blog, and include clear READMEs that explain your data strategy, the tech stack you used, and the business impact (showing you understand the value of your work), whether it’s “increased conversion rate by X%” or “optimized inventory planning”.</li>\n<li><strong>Stay ahead with the latest tools and techniques:</strong> Data visualization tools and programming languages are constantly evolving. One key language you’ll be using quite regularly is SQL, and if you ignore it, your progress will slow down. Find yourself a <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL Course</a> that works for you and ensure you master it as soon as possible.</li>\n<li><strong>Embrace feedback and cultivate a growth mindset:</strong> Whether you’re presenting to marketing teams or senior management, feedback is your friend. After each project or presentation, or even on a regular basis try to get constructive feedback on your data modeling, storytelling, and communication style. Use this input to refine your processes, improving both your essential skills and your ability to communicate insights.</li>\n<li><strong>Plan for credentials that matter:</strong> Getting credentials that validate your expertise with a certain tool or a type of analysis is going to help you stand out in the sea of analysts fighting for the same position. So, consider pursuing data analytics certifications (e.g., Google Data Analytics or Microsoft Power BI). They will not ensure you get the job, but they’ll help you demonstrate a certain level of expertise at first glance.</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Congrats, you now have a clear playbook for launching and advancing your data analyst career:</p>\n<ol>\n<li>\n<p><strong>Choose your path.</strong> Understand exactly what you enjoy the most, and find the best career path for you.</p>\n</li>\n<li>\n<p><strong>Assess your fit</strong>. Understand the role you want, and make sure you’ll enjoy the day-to-day of it.</p>\n</li>\n<li>\n<p><strong>Build your skills</strong>. Follow the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a> to structure your learning, and dive into the <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL Course</a> to master the foundation of every data role.</p>\n</li>\n<li>\n<p><strong>Practice with real projects</strong>. Even if it’s with fake, test or even raw data, tackle real-world problems to show you’re able to transmit insights in the right way.</p>\n</li>\n<li>\n<p><strong>Finally,</strong>  remember to network with other analysts, seek feedback, stay current on tools and techniques, and earn targeted certifications when you’re ready to stand out.</p>\n</li>\n</ol>\n<p>Your journey into becoming a successful data analyst begins today: pick one section of the roadmap, schedule time to complete the SQL course module, and start your first portfolio project.</p>\n<p>Go!</p>";

				const frontmatter$16 = {"title":"Data Analyst Career Path: My Pro Advice","description":"Wondering where a data analyst role can take you? Learn what your data analyst career path could look like.","authorId":"fernando","excludedBySlug":"/data-analyst/career-path","seo":{"title":"Data Analyst Career Path: My Pro Advice","description":"Wondering where a data analyst role can take you? Learn what your data analyst career path could look like.","ogImageUrl":"https://assets.roadmap.sh/guest/data-analyst-career-path-heu4b.jpg"},"isNew":false,"type":"textual","date":"2025-05-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$16 = "/workspace/src/data/guides/data-analyst-career-path.md";
				const url$16 = undefined;
				function rawContent$16() {
					return "   \n                                                \n                                                                                                                          \n                  \n                                           \n    \n                                                  \n                                                                                                                            \n                                                                                  \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Choosing your data analyst career path](https://assets.roadmap.sh/guest/data-analyst-career-path-heu4b.jpg)\n\n# Data Analyst Career Path: My Pro Advice\n\nData analysts sit at the heart of decision‑making in virtually every industry today. From uncovering customer behavior patterns in retail to optimizing operations in healthcare, the ability to collect, clean, and interpret data has become a critical superpower. \n\nTo help you map out your future data analyst career path, in this guide I'll mix in two cornerstone resources from roadmap.sh: the very detailed [Data Analyst Roadmap](https://roadmap.sh/data-analyst), which lays out the skills and milestones you'll need from beginner to pro, and the hands‑on [SQL Course](https://roadmap.sh/courses/sql), designed to build your foundation in one of the most common languages when it comes to data operations. Together, these tools will serve as your compass and toolkit, ensuring you have a clear path forward and the practical know‑how to tackle real‑world challenges.\n\n## Options for a Data Analyst Career Path\n\n![Options for a Data Analyst Career Path](https://assets.roadmap.sh/guest/data-analyst-career-options-ct705.png)\n\nKnowing where to go and how to grow in data analysis is not trivial, simply because there are too many very valid and interesting options for data analysts.\n\nTo narrow the list of options, we can think of three core trajectories, each with its own set of responsibilities, key skills, and growth opportunities:\n\n### Junior Data Analyst → Senior Data Analyst → Analytics Manager\n\n| Level | Focus | Key skills | Goal |\n| :---- | :---- | :---- | :---- |\n| **Entry-level (i.e junior analyst)**  | Clean & transform data using SQL or MS Excel | Basic data modeling, reporting, req. gathering. | Provide actionable insights. |\n| **Mid-level**  | Complex analysis, advanced statistical analysis, and project ownership. | Python/R, creating ETLs, mentoring | Shaping data strategy, collaborating with business or operations, and influencing decision-making |\n| **Leadership** | Defining implementation roadmaps | Leadership, stakeholder management, expectation management with clients. | Lead key meetings with clients, become VP of analytics, or similar role. |\n\n### Data Analytics Consultant / BI Analyst\n\n| Level | Focus | Key Skills | Goal |\n| :---- | :---- | :---- | :---- |\n| **Data Analytics Consultant** | Acting as a strategic advisor, you help organizations define their data strategy and translate business requirements. | Data Strategy & Governance, Client Engagement, deep SQL. | Delivering a scalable analytics roadmap, implementing dashboards, and earning trust as a go‑to advisor. |\n| **BI Analyst** | Embedding within a single organization or business unit to build and maintain self‑service reporting environments. | ETL, dashboard development.  | Influence data strategy, mentor JR Data Scientists. |\n\n### Specialized Data Scientist Tracks → Chief Data Officer\n\n| Level | Focus | Key Skills | Goal |\n| :---- | :---- | :---- | :---- |\n| **Data science option** | Go from descriptive analytics to machine learning algorithms. | Advanced Python, Statistical Analysis, Data modeling. | Deliver a working predictive solution |\n| **Advanced Statistics** | Tackle large‑scale analytical problems  | Expertise in advanced statistical programming, big Data, and a bit of storytelling | Influence data strategy, mentor JR Data Scientists |\n| **CDO** | Oversee data governance, compliance, and ensure that analytics and machine learning initiatives align with strategic objectives. | Strategic leadership, understanding of data privacy, data governance. | Implement robust data governance & privacy frameworks,  deliver analytics roadmap. |\n\n### What should you pick?\n\nIn the end, either through any of these variations of the data analyst career path, there isn't a single option that is clearly better than the others.\n\n* If you love turning raw numbers into charts and dashboards, the **junior→senior analyst** route offers steady, skill‑based progression.\n\n* If you thrive on variety and advising multiple teams, consider the **analytics consultant/BI analyst** track.\n\n* If you're drawn to algorithms and predictive work, the **data science** trajectory can propel you toward senior data scientist roles and, ultimately, a chief data officer position.\n\n## Is Data Analysis Right for You?\n\nFiguring out if the data analyst career path is the right place for you is not an easy task; in fact, many will need to go through the process of working in the field to retroactively answer the question.\n\nBut to give you a basic guide and help you understand whether you'd enjoy the position or not, you have to consider that pursuing a data analytics career begins with an honest curiosity about how raw data translates into actionable insights. Data analysis isn't just number crunching; it's about asking the right questions, designing robust statistical tests, and building data models that answer real business problems.\n\n## Learning Path & Essential Skills\n\nCharting your learning path starts with a clear learning roadmap, and there's no better place to begin than the [Data Analyst Roadmap](https://roadmap.sh/data-analyst). \n\n![Learning Path & Essential Skills](https://assets.roadmap.sh/guest/learning-path-essential-skills-k9zy3.png)\n\nFollowing its structured progression ensures you're building the right technical skill set in the right order.\n\nAs part of the roadmap, you'll have to tackle different languages such as SQL, R, Python, and others. To learn more about it, you can try this hands-on [SQL Course](https://roadmap.sh/courses/sql) that walks you through writing efficient queries, designing relational schemas, and performing complex joins and aggregations.\n\nYou'll also need **data visualization tools** and the storytelling mindset that makes your analyses resonate. \n\nFinally, you'll start noticing that soft skills are particularly needed as a data analyst. For example, clear communication, problem solving, and a collaborative spirit are non‑negotiable when gathering requirements, iterating on dashboards, or presenting to senior management. \n\n## 3 Portfolio Project Ideas\n\nBelow are three end‑to‑end projects designed to showcase the abilities that hiring managers look for in data analyst candidates. Each idea maps to stages on the [Data Analyst Roadmap](https://roadmap.sh/data-analyst) and gives you a chance to apply SQL, Python/R, and visualization tools to real‑world questions.\n\n### Interactive Sales Dashboard\n\n**Objective:** In this project, you can build a live dashboard that empowers marketing and senior management to spot seasonal patterns, best‑selling products, and under‑performing regions.\n\n**Data & tools:** For this project, you can source a public retail or e-commerce dataset (such as Kaggle \"Online Retail II\"). You can use Python and SQL, the rest is up to you to decide how to show the results.\n\n**Key skills demonstrated:** In this project, you're covering a bit of Data Modeling, ETL pipelines, and mostly Data Visualization tools.\n\n### Customer Churn Prediction Model\n\n**Objective:** For this one, you'll show how statistical analysis and basic machine learning can predict which customers are most likely to churn, enabling proactive retention strategies.\n\n**Data & Tools:** For this one, you can find some sort of telecom dataset (like IBM Telco Customer Churn), use Python and SQL again to do some exploratory analysis, and finally train a classification model using scikit-learn. \n\n**Key skills demonstrated:** During this project, you'll work on statistical analysis, data mining, and, as usual, some actionable insights turned into storytelling.\n\n### A/B Testing Analysis for Website Redesign\n\n**Objective**: Conduct and interpret an A/B test to determine which landing‑page design maximizes conversion, showcasing your ability to drive business analytics projects from hypothesis to recommendation.\n\n**Data & Tools**: You can get some synthetic data for this one using something like ChatGPT, as long as it simulates A/B test data. Then, using either SQL or even MS Excel, you can do some aggregations and finally do the last calculations with Python or R. Try to plot the results on something like PowerBI at the end.\n\n**Key skills demonstrated**: For this project, you'll be doing some experimental design, some business intelligence, and of course, decision making by translating statistical outcomes into a go/no‑go recommendation, acting as a market research analyst.\n\n![Data Analyst Portfolio Projects](https://assets.roadmap.sh/guest/data-analyst-portfolio-projects-tjm2y.png)\n\n## My tips from personal experience\n\nWith all of this out of the way, let me quickly run you through some of my personal tips when it comes to growing and moving forward as a data analyst.\n\n1. **Build a strong network and find mentors:** Connect with other data analysts, data scientists, and analytics managers through LinkedIn groups, local meetups, or virtual conferences. Ask others who have gone through the same about their journey, about the problems they found along the way. Learn from them.  \n2. **Showcase your work with purpose:** Your first data analyst job will depend on having a solid portfolio (since you don't have any actual experience). Try to host your projects on GitHub or a personal blog, and include clear READMEs that explain your data strategy, the tech stack you used, and the business impact (showing you understand the value of your work), whether it's \"increased conversion rate by X%\" or \"optimized inventory planning\".  \n3. **Stay ahead with the latest tools and techniques:** Data visualization tools and programming languages are constantly evolving. One key language you'll be using quite regularly is SQL, and if you ignore it, your progress will slow down. Find yourself a [SQL Course](https://roadmap.sh/courses/sql) that works for you and ensure you master it as soon as possible.  \n4. **Embrace feedback and cultivate a growth mindset:** Whether you're presenting to marketing teams or senior management, feedback is your friend. After each project or presentation, or even on a regular basis try to get constructive feedback on your data modeling, storytelling, and communication style. Use this input to refine your processes, improving both your essential skills and your ability to communicate insights.  \n5. **Plan for credentials that matter:** Getting credentials that validate your expertise with a certain tool or a type of analysis is going to help you stand out in the sea of analysts fighting for the same position. So, consider pursuing data analytics certifications (e.g., Google Data Analytics or Microsoft Power BI). They will not ensure you get the job, but they'll help you demonstrate a certain level of expertise at first glance.\n\n## Conclusion\n\nCongrats, you now have a clear playbook for launching and advancing your data analyst career:\n\n1. **Choose your path.** Understand exactly what you enjoy the most, and find the best career path for you.\n\n2. **Assess your fit**. Understand the role you want, and make sure you'll enjoy the day-to-day of it.\n\n3. **Build your skills**. Follow the [Data Analyst Roadmap](https://roadmap.sh/data-analyst) to structure your learning, and dive into the [SQL Course](https://roadmap.sh/courses/sql) to master the foundation of every data role.\n\n4. **Practice with real projects**. Even if it's with fake, test or even raw data, tackle real-world problems to show you're able to transmit insights in the right way.\n\n5. **Finally,**  remember to network with other analysts, seek feedback, stay current on tools and techniques, and earn targeted certifications when you're ready to stand out.\n\nYour journey into becoming a successful data analyst begins today: pick one section of the roadmap, schedule time to complete the SQL course module, and start your first portfolio project. \n\nGo!";
				}
				async function compiledContent$16() {
					return await html$16();
				}
				function getHeadings$16() {
					return [{"depth":1,"slug":"data-analyst-career-path-my-pro-advice","text":"Data Analyst Career Path: My Pro Advice"},{"depth":2,"slug":"options-for-a-data-analyst-career-path","text":"Options for a Data Analyst Career Path"},{"depth":3,"slug":"junior-data-analyst--senior-data-analyst--analytics-manager","text":"Junior Data Analyst → Senior Data Analyst → Analytics Manager"},{"depth":3,"slug":"data-analytics-consultant--bi-analyst","text":"Data Analytics Consultant / BI Analyst"},{"depth":3,"slug":"specialized-data-scientist-tracks--chief-data-officer","text":"Specialized Data Scientist Tracks → Chief Data Officer"},{"depth":3,"slug":"what-should-you-pick","text":"What should you pick?"},{"depth":2,"slug":"is-data-analysis-right-for-you","text":"Is Data Analysis Right for You?"},{"depth":2,"slug":"learning-path--essential-skills","text":"Learning Path & Essential Skills"},{"depth":2,"slug":"3-portfolio-project-ideas","text":"3 Portfolio Project Ideas"},{"depth":3,"slug":"interactive-sales-dashboard","text":"Interactive Sales Dashboard"},{"depth":3,"slug":"customer-churn-prediction-model","text":"Customer Churn Prediction Model"},{"depth":3,"slug":"ab-testing-analysis-for-website-redesign","text":"A/B Testing Analysis for Website Redesign"},{"depth":2,"slug":"my-tips-from-personal-experience","text":"My tips from personal experience"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$16 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$16;
					content.file = file$16;
					content.url = url$16;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$16())}`;
				});

const __vite_glob_0_28 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$16,
	compiledContent: compiledContent$16,
	default: Content$16,
	file: file$16,
	frontmatter: frontmatter$16,
	getHeadings: getHeadings$16,
	rawContent: rawContent$16,
	url: url$16
}, Symbol.toStringTag, { value: 'Module' }));

const html$15 = () => "<p><img src=\"https://assets.roadmap.sh/guest/become-a-data-analyst-with-no-experience-khk03.jpg\" alt=\"How to Become a Data Analyst with No Experience\"></p>\n<p>Breaking into the data analytics industry can be scary, especially when you have no prior background in data analysis.</p>\n<p>Yet the need for entry-level data analysts has never been higher, data is at the heart of everything, and organizations across the globe depend on data-driven insights to inform strategic decisions in every area of the enterprise.</p>\n<p>Many aspiring data professionals incorrectly believe that a degree in computer science or a long resume in data science is a prerequisite for anything. The truth is that mastering the <strong>data analysis process</strong>, building a solid <strong>analytics portfolio</strong>, and showcasing your <strong>data skills</strong> can open doors to your first <strong>junior data analyst</strong> role, just like a long resume or a fancy degree.</p>\n<p>In this practical guide on how to become a data analyst with no experience, I’m going to show you the key skills you should focus your learning path on (like SQL and statistical analysis).</p>\n<p>I’ll also prepare you on how to hone critical soft skills and leverage expert resources such as the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a> and this <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> to help you improve your skills in that language.</p>\n<h2 id=\"step-1-master-the-essential-data-analyst-skills\">Step 1: Master the Essential Data Analyst Skills</h2>\n<p>In the analysis life cycle (from data collection and unprocessed data wrangling to statistical modeling and presentation), some <strong>techniques</strong> and <strong>skills (both technical and non-technical)</strong> are non-negotiable. The first thing you have to do is to focus on these core areas to build a solid foundation for your first <strong>entry-level data analyst</strong> or <strong>junior data analyst</strong> role:</p>\n<h3 id=\"technical-skills\">Technical Skills:</h3>\n<p>A data analyst’s toolkit revolves around five foundational technical domains, each critical to unlocking insights from raw data and driving informed decisions. Begin by mastering <strong>Structured Query Language (SQL)</strong>, the backbone of relational data interrogation. With our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\"><strong>SQL course on roadmap.sh</strong></a>, you will learn to write complex queries—filtering, joining, aggregations, and advanced window functions—that enable you to extract and <strong>manipulate data</strong> at scale.</p>\n<p>Next, tackle Data cleansing and Manipulation, the art of transforming messy inputs into reliable analytical datasets. Utilizing libraries such as pandas in Python or dplyr in R, you will develop workflows for handling missing values, normalizing formats, and removing duplicates, thereby ensuring high <strong>data quality</strong> before any modeling or visualization begins.</p>\n<p>With a pristine dataset in hand, dive into different Analysis techniques to derive meaningful patterns. Key concepts such as descriptive statistics, hypothesis testing, correlations, and regression form the core of <strong>these analysis techniques</strong> used to validate assumptions and generate <strong>actionable insights</strong>. Proficiency in these methods equips you to support business cases with evidence-backed conclusions.</p>\n<p>Translating numerical results into compelling narratives requires strong <strong>Data Visualization</strong> skills. Whether you choose Tableau, Power BI, or Python’s matplotlib and seaborn libraries, you will create interactive dashboards and visual stories that highlight trends, outliers, and opportunities. Effective visualization not only conveys findings clearly but also drives stakeholder engagement.</p>\n<p>Finally, solid programming skills in Python or R tie your analytical process together. From automating repetitive tasks and integrating APIs to building end-to-end <strong>data analytics</strong> pipelines, a programming mindset enables scalability, reproducibility, and integration of advanced tools, positioning you for roles across the industry.</p>\n<h3 id=\"soft-skills\">Soft Skills:</h3>\n<p>In the realm of data analytics, technical prowess must be complemented by strong interpersonal abilities (i.e, soft skills). Analytical thinking and structured problem-solving are at the heart of your daily workflow. When you encounter complex datasets, you must decide which analysis techniques best uncover the story hidden in the numbers.</p>\n<p>This thoughtful approach ensures you derive accurate, actionable insights from unprocessed data.</p>\n<p>Equally vital is the capacity to interpret data and translate it into meaningful recommendations. Effective communication means crafting a narrative around your findings that resonates with diverse audiences, from C-suite executives to frontline team members.</p>\n<p>By designing clear visualizations and presenting data insights through compelling dashboards or concise slide decks, you empower stakeholders to make informed decisions.</p>\n<p>Documenting every phase of your analysis process (data collection, cleaning, transformation, modeling, and reporting) creates a transparent audit trail. This meticulous record-keeping not only bolsters confidence in your results but also sets the foundation for reproducibility and continuous improvement.</p>\n<p>Collaboration and adaptability define success in dynamic business environments. As a business intelligence analyst, sales data analyst, or healthcare data analyst, you’ll partner with professionals across marketing, finance, operations, and IT.</p>\n<p>Learning to navigate different communication styles, incorporating feedback, and swiftly adopting new tools or programming skills are essential to deliver timely, value-driven analyses.</p>\n<p>Finally, incorporate a growth mindset by viewing every project as an opportunity to refine your soft skills. Seek constructive feedback from mentors and peers, participate in cross-functional workshops, and mentor aspiring professionals. Cultivating empathy, resilience, and lifelong learning habits ensures you evolve into a well-rounded data analyst capable of driving organizational success.</p>\n<p>Starting with these essential skills will give you the confidence to tackle <strong>data-projects</strong>, close the <strong>data skills gap</strong>, and stand out among <strong>aspiring analysts</strong> in a competitive <strong>job market.</strong> After the foundation is done, you’re free to specialize and focus in the areas that you feel are more appealing to you.</p>\n<h2 id=\"step-2-follow-a-structured-learning-path\">Step 2: Follow a Structured Learning Path</h2>\n<p>Getting started on your journey as a new data analyst without formal experience can feel a bit overwhelming, so it’s very important to follow a <strong>structured learning path</strong>. This way, you’ll ensure you acquire the right <strong>data analysis skills</strong> in a way that makes sense according to your progression during your journey.</p>\n<p>Here’s how to follow a proven roadmap:</p>\n<ol>\n<li><strong>Explore the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a></strong>: Start with the roadmap to grasp the full analysis life cycle.</li>\n<li><strong>Master SQL Early</strong>: As a key technology for the field, the sooner you start tackling SQL, the better it will be. So, enroll in a <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> to build a strong foundation in SQL (Structured Query Language). Practice querying, filtering, aggregations, and manipulation on realistic datasets.</li>\n<li><strong>Earn Recognized Certifications</strong>: Boost your resume with entry-level certifications that validate your expertise. Consider doing any of the following:\n<ul>\n<li><strong>Google Data Analytics Professional Certificate</strong> (Coursera)</li>\n<li><strong>IBM Data Analyst Professional Certificate</strong></li>\n<li><strong>Microsoft Certified: Data Analyst Associate</strong>. These programs cover essential <strong>data science</strong> concepts, <strong>data cleansing</strong>, <strong>visualization</strong>, and real-world <strong>data projects</strong>.</li>\n</ul>\n</li>\n<li><strong>Take Complementary Courses</strong>: Figure out what your <strong>data analysis skills gaps</strong> are and fill them up by learning:\n<ul>\n<li><strong>Programming languages</strong> (Python, R)</li>\n<li><strong>Statistical analysis</strong> and hypothesis testing</li>\n<li><strong>Business intelligence</strong> tools (Tableau, Power BI). Platforms like DataCamp, Udacity, and LinkedIn Learning offer targeted modules.</li>\n</ul>\n</li>\n<li><strong>Apply Knowledge Through Projects</strong>: Especially at the beginning, when you don’t have any experience, try to reinforce your learning by tackling guided analysis projects on platforms like <a href=\"https://www.kaggle.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Kaggle</a> or GitHub. Focus on end-to-end workflows (data collection, data cleaning, analyzing data, visualizing data, and presenting insights).</li>\n</ol>\n<p>This structured learning path will help you in several ways:</p>\n<ul>\n<li>You’ll be able to systematically build basic data analysis skills.</li>\n<li>You’ll end up developing a compelling and very complete portfolio showcasing your skills.</li>\n<li>And you’ll also be able to demonstrate to potential hiring managers your commitment to becoming a great junior data analyst.</li>\n</ul>\n<h2 id=\"step-3-build-a-data-analytics-portfolio\">Step 3: Build a Data Analytics Portfolio</h2>\n<p>Building a robust data analyst portfolio will help you demonstrate your ability to tackle end-to-end <strong>projects</strong>, making you a standout candidate in a competitive <strong>job market</strong>. Here’s why it matters and how to craft compelling portfolio pieces:</p>\n<h3 id=\"why-a-strong-portfolio-matters\">Why a Strong Portfolio Matters</h3>\n<p>Building a strong portfolio helps you validate your own <strong>analysis process</strong>, from <strong>data collection</strong> and cleaning to visualization and interpretation, you’ll be working on the entire thing.</p>\n<p>It also helps you showcase your proficiency in <strong>data manipulation &#x26; cleaning</strong>, and extracting <strong>actionable insights</strong> from unprocessed data.</p>\n<p>As part of the analysis life cycle,  your <strong>data visualization</strong> and storytelling skills will have to shine in your portfolio. They’re critical for roles like <strong>BI analyst</strong> or <strong>data analyst</strong>, so make sure you use them on every project in your portfolio.</p>\n<p>Overall, the portfolio will help you highlight every single skill that is needed for the job, and if you build one with varied projects, different types of visualizations, and business goals, by the end, you’ll be broadcasting to every hiring manager that you know what you’re doing.</p>\n<h3 id=\"portfolio-project-ideas\">Portfolio Project Ideas</h3>\n<p>But what project can you put into your portfolio? Let’s go over some ideas that might highlight just the right set of skills:</p>\n<ul>\n<li><strong>Public Dataset Analysis</strong>: Pick datasets (e.g., healthcare metrics, sales transactions, fraud detection) and perform a full workflow—ingestion, cleaning, exploratory analysis, statistical modeling, and reporting.</li>\n<li><strong>Data Cleaning &#x26; QA Showcase</strong>: Use a messy real-world dataset to demonstrate handling missing values, outliers, normalization, and quality checks—include before/after snapshots and code snippets.</li>\n<li><strong>Interactive Dashboards</strong>: Build dashboards with Tableau, Power BI, or Plotly to <strong>visualize data</strong> trends and present insights; add filters, annotations, and user controls.</li>\n<li><strong>Domain-Specific Projects</strong>: Create analyses for niche roles—e.g.,  evaluate patient outcomes as a <strong>healthcare data analyst</strong>.</li>\n<li><strong>Data Storytelling</strong>: Craft a narrative-driven project (e.g., COVID-19 trends, climate data) combining charts, maps, and written insights to tell a compelling story.</li>\n</ul>\n<p>And if you don’t really know how to begin working on them, you can simply ask one of the many LLMs available online to give you a detailed project plan, and start working on it. You’ll be closing projects right and left in no time.</p>\n<h3 id=\"best-practices\">Best Practices</h3>\n<p>Where should you create your portfolio? What tech stack should you use? How often should you update it? When should you publish it?<br>\nThese are all valid questions that don’t have a single answer, however, I can show you some of the best practices I’ve seen around throughout my career when it comes to building data analyst portfolios:</p>\n<ul>\n<li>Host projects on GitHub with clear READMEs, organized code, and visual previews.</li>\n<li>Document your <strong>analysis life cycle</strong> in Jupyter notebooks or blog posts, explaining each step and decision.</li>\n<li>Use authentic tools and workflows: query public APIs with <strong>SQL</strong>, automate tasks with Python or R, and integrate BI tools.</li>\n<li>Continuously update your portfolio as you learn new <strong>data analysis techniques</strong> and <strong>programming skills</strong>.</li>\n</ul>\n<h2 id=\"step-4-gain-practical-experience\">Step 4: Gain Practical Experience</h2>\n<p>Securing practical experience allows you to apply theoretical knowledge, bridge the skills gap, and prove to hiring managers that you can deliver on real-world data analysis projects. Here are several pathways to get your foot in the door:</p>\n<ul>\n<li><strong>Internships &#x26; Volunteer Projects:</strong><br>\nLook for data internships (even unpaid if you can) or volunteer to help non‑profits, student organizations, or local businesses with their <strong>data collection</strong>, <strong>data cleaning</strong>, and <strong>data visualization</strong> needs. These roles not only strengthen your <strong>technical skills</strong> but also give you concrete examples for your <strong>data analytics portfolio</strong>.</li>\n<li><strong>Freelance &#x26; Gig Work:</strong><br>\nPlatforms like Upwork, Fiverr, or even LinkedIn can connect you with short‑term gigs, everything from database queries to dashboard creation. Freelance tasks force you to <strong>manipulate data</strong>, produce <strong>actionable insights</strong>, and <strong>present data-driven insights</strong> under real-world deadlines, building both technical chops and business communication skills.</li>\n<li><strong>Entry‑Level &#x26; Support Roles:</strong><br>\nApply for roles labeled <strong>data technician</strong>, <strong>data entry</strong>, or <strong>junior data analyst</strong>. These positions often focus on <strong>data quality</strong>, routine reports, and simple analyses; they’re perfect stepping stones that let you collaborate with senior analysts and refine your <strong>analysis</strong> and <strong>manipulation</strong> techniques.</li>\n<li><strong>Kaggle Competitions &#x26; Public Challenges:</strong><br>\nI’ve mentioned this platform before, but consider participating in Kaggle or similar platforms to demonstrate your ability to tackle problems like a <strong>fraud detection</strong> challenge or sales forecasting. Even if you don’t win, documenting your approach, code, and learnings shows resilience and a methodical <strong>analysis process</strong>.</li>\n<li><strong>Capstone &#x26; Guided Projects:</strong><br>\nMany certification programs include capstone projects. Treat these as mini‑portfolio pieces: choose datasets relevant to your target roles, and clearly outline your <strong>data analysis life cycle</strong>, from <strong>raw data</strong> ingestion through <strong>data visualization</strong> and storytelling.</li>\n</ul>\n<p>Build experience in as many diverse <strong>practical experiences as you can</strong>. That way, you’ll not only close any <strong>data skills gap</strong> you might have, but also amass a collection of tangible accomplishments, making it far easier to articulate your value as an <strong>aspiring data analyst</strong> during interviews.</p>\n<h2 id=\"step-5-network-and-engage-with-the-data-community\">Step 5: Network and Engage with the Data Community</h2>\n<p>Spending time in the right communities accelerates your growth as an <strong>aspiring data analyst</strong> by helping you stay current with industry trends, learn from seasoned <strong>professionals</strong>, and uncover hidden <strong>data analytics job</strong> opportunities. After all, a big part of growing in any technology role is about networking (shocking, I know!) with other professionals who’ve gone through what you’re going through now and can provide advice, help, or even a boost when least expected.</p>\n<p>Networking is not easy, and there are many ways to do it. Here’s just one example of how to build and leverage your own network:</p>\n<ul>\n<li><strong>Leverage Professional Platforms:</strong> Connect with <strong>qualified data analysts</strong> and <strong>data scientists</strong> on LinkedIn, GitHub, and specialized forums like Stack Overflow or Reddit’s r/datascience. Engage by asking thoughtful questions, sharing your <strong>data analysis projects</strong>, and commenting on discussions.</li>\n<li><strong>Attend Industry Events:</strong> Participate in local meetups, virtual conferences, webinars, and workshops hosted by organizations such as Data Science Saudi, Meetup groups, or platform-specific events (e.g., Tableau User Groups). These gatherings expose you to emerging <strong>analysis techniques</strong>, <strong>data visualization</strong> best practices, and evolving industry standards.</li>\n<li><strong>Join Online Communities:</strong> Become active in Slack channels, Discord servers, or professional associations where <strong>data analysts</strong> share resources, job leads, and <strong>actionable insights</strong>. Regularly review community channels for project feedback, collaboration opportunities, and announcements about <strong>entry-level data analyst</strong> roles.</li>\n<li><strong>Find a Mentor or Buddy:</strong> Seek out mentorship programs through bootcamps or university-alumni networks. A mentor, someone like a <strong>senior data analyst</strong> or BI (<strong>business intelligence) analyst</strong>, can provide personalized advice on your <strong>data analysis life cycle</strong>, resume reviews, and mock interviews.</li>\n<li><strong>Share Your Knowledge:</strong> Contribute to blogs, record tutorials, or present lightning talks at virtual events. While you might just be starting, chances are someone else is going through the same process, and learning how you solved it can help them. Also, creating content like this will force you to truly understand the topic you’re covering before being able to explain it. So even while you’re teaching others, you’re also cementing that understanding within you.</li>\n</ul>\n<p>Networking is not easy, and when you’re just getting started, it might seem even harder than getting an actual data analyst job. The above list is just a set of options, you don’t have to go through all of them (or any, to be honest), just find a way that works for you and follow that path.</p>\n<h2 id=\"step-6-continuous-learning-and-career-development\">Step 6: Continuous Learning and Career Development</h2>\n<p>The analytics industry is constantly evolving, and your professional growth must keep up accordingly. Continuous learning is probably one of the only ways to ensure you stay ahead of emerging trends, refine your existing skills, and prepare for more advanced roles.</p>\n<h3 id=\"lifelong-learning-and-advanced-skills\">Lifelong Learning and Advanced Skills</h3>\n<p>You should embrace a mindset of lifelong learning by deepening your technical expertise over time. Accept that you’ll never be done learning and revisit fundamental tools like SQL and master advanced features such as window functions and recursive queries.</p>\n<p>Expand your proficiency in Python by exploring libraries like pandas for data manipulation and scikit-learn for machine learning workflows. If you prefer R, dive into packages like tidyverse for efficient data processing and ggplot2 for sophisticated visualizations.</p>\n<p>Additionally, enroll in specialized courses on machine learning algorithms, cloud-based analytics platforms (e.g., AWS Redshift, Google BigQuery), and emerging open-source tools. Staying informed through industry blogs, podcasts, and research publications will help you hone your skills in both data science and data mining.</p>\n<h3 id=\"charting-your-career-path\">Charting Your Career Path</h3>\n<p>Once you have a solid foundation in data analysis techniques, the next step is to start mapping out your career trajectory. In other words: where do you want to go?</p>\n<p>Initially, you might specialize as a BI analyst, crafting interactive dashboards and KPI reports that inform strategic decisions.</p>\n<p>Next, consider roles such as sales data analyst, where you’ll focus on revenue analytics and customer behavior modeling, or healthcare analyst, tasked with evaluating patient outcomes and ensuring regulatory compliance.</p>\n<p>As you gain experience, you might want to pivot toward senior data analyst or data scientist positions, taking on end-to-end projects that incorporate predictive modeling, anomaly detection, and advanced statistical analysis.</p>\n<h3 id=\"setting-goals-and-measuring-progress\">Setting Goals and Measuring Progress</h3>\n<p>You can’t know if you’re moving in the right direction if you don’t measure your progress. It’s a very common mistake many new analysts make, and one you should try to avoid.</p>\n<p>Define clear, measurable objectives to guide your learning journey. Set milestones—such as completing a certification, publishing a portfolio project, or mastering a new visualization tool (and celebrate each achievement once you get it).</p>\n<p>Keep a learning journal or log within your portfolio to document projects, record the techniques applied, and reflect on lessons learned.</p>\n<p>Regularly try to get feedback from peers and mentors through code reviews, presentations, or mock interviews to identify areas for improvement and validate your progress.</p>\n<h3 id=\"mentorship-and-community-involvement\">Mentorship and Community Involvement</h3>\n<p>Long-term success in data analysis relies on strong professional relationships and community engagement. Continue participating in forums, meetups, and virtual conferences to exchange insights with both aspiring analysts and seasoned professionals.</p>\n<p>Seek opportunities to mentor newcomers, contribute to open-source or community-driven data projects, and share your expertise through blog posts or lightning talks.</p>\n<p>Teaching concepts such as data cleansing, analysis workflows, and visualization best practices not only reinforces your own knowledge but also establishes your reputation as a qualified data professional in the broader data analyst job market.</p>\n<p>Try to incorporate these strategies into your routine; that way, you’ll enhance your data analyst skills dynamically, showcase your commitment to growth, and position yourself for roles with greater responsibility and impact.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Embarking on the path of how to become a data analyst with no experience may seem challenging, yes, but by leveraging structured learning pathways like the <a href=\"https://roadmap.sh/data-analyst\" target=\"_blank\">Data Analyst Roadmap</a> and our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">Mastering SQL course</a>, you’ll build the core technical foundation.</p>\n<p>Complementing these tools with thoughtfully chosen data analysis projects in your portfolio will validate your practical skills and demonstrate your ability to extract actionable insights from complex datasets (which is the end goal of a good data analyst).</p>\n<p>Beyond technical proficiency, remember that confidence and communication are equally critical. Whether you’re preparing for your first entry-level data analyst interview or collaborating as a junior data analyst on real-world projects, articulating your data analysis process will set you apart.</p>\n<p>Practical experiences, such as internships or community-driven challenges, will further reinforce your résumé and show your commitment to continuous growth in the analytics industry.</p>\n<p>Every day, countless developers and analysts successfully transition into data roles by following these strategies.</p>\n<p>Now it’s your turn: take the first step, mapping out your learning journey, and launching your own data analytics projects. Your journey from aspiring analyst to qualified data professional starts today!</p>";

				const frontmatter$15 = {"title":"How to Become a Data Analyst with No Experience: My Advice","description":"Learn how to become a data analyst with no experience through smart steps, skill-building tips, and my real-world guidance.","authorId":"fernando","excludedBySlug":"/data-analyst/how-to-become","seo":{"title":"How to Become a Data Analyst with No Experience: My Advice","description":"Learn how to become a data analyst with no experience through smart steps, skill-building tips, and my real-world guidance.","ogImageUrl":"https://assets.roadmap.sh/guest/become-a-data-analyst-with-no-experience-khk03.jpg"},"isNew":true,"relatedTitle":"Other Guides","relatedGuidesId":"data-analyst","type":"textual","date":"2025-05-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$15 = "/workspace/src/data/guides/data-analyst-how-to-become.md";
				const url$15 = undefined;
				function rawContent$15() {
					return "   \n                                                                   \n                                                                                                                                          \n                  \n                                             \n    \n                                                                     \n                                                                                                                                            \n                                                                                                  \n           \n                            \n                             \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How to Become a Data Analyst with No Experience](https://assets.roadmap.sh/guest/become-a-data-analyst-with-no-experience-khk03.jpg)\n\nBreaking into the data analytics industry can be scary, especially when you have no prior background in data analysis.\n\nYet the need for entry-level data analysts has never been higher, data is at the heart of everything, and organizations across the globe depend on data-driven insights to inform strategic decisions in every area of the enterprise.\n\nMany aspiring data professionals incorrectly believe that a degree in computer science or a long resume in data science is a prerequisite for anything. The truth is that mastering the **data analysis process**, building a solid **analytics portfolio**, and showcasing your **data skills** can open doors to your first **junior data analyst** role, just like a long resume or a fancy degree. \n\nIn this practical guide on how to become a data analyst with no experience, I'm going to show you the key skills you should focus your learning path on (like SQL and statistical analysis).\n\nI'll also prepare you on how to hone critical soft skills and leverage expert resources such as the [Data Analyst Roadmap](https://roadmap.sh/data-analyst) and this [SQL course](https://roadmap.sh/courses/sql) to help you improve your skills in that language.\n\n## Step 1: Master the Essential Data Analyst Skills\n\nIn the analysis life cycle (from data collection and unprocessed data wrangling to statistical modeling and presentation), some **techniques** and **skills (both technical and non-technical)** are non-negotiable. The first thing you have to do is to focus on these core areas to build a solid foundation for your first **entry-level data analyst** or **junior data analyst** role:\n\n### Technical Skills:\n\nA data analyst's toolkit revolves around five foundational technical domains, each critical to unlocking insights from raw data and driving informed decisions. Begin by mastering **Structured Query Language (SQL)**, the backbone of relational data interrogation. With our [**SQL course on roadmap.sh**](https://roadmap.sh/courses/sql), you will learn to write complex queries—filtering, joining, aggregations, and advanced window functions—that enable you to extract and **manipulate data** at scale.\n\nNext, tackle Data cleansing and Manipulation, the art of transforming messy inputs into reliable analytical datasets. Utilizing libraries such as pandas in Python or dplyr in R, you will develop workflows for handling missing values, normalizing formats, and removing duplicates, thereby ensuring high **data quality** before any modeling or visualization begins.\n\nWith a pristine dataset in hand, dive into different Analysis techniques to derive meaningful patterns. Key concepts such as descriptive statistics, hypothesis testing, correlations, and regression form the core of **these analysis techniques** used to validate assumptions and generate **actionable insights**. Proficiency in these methods equips you to support business cases with evidence-backed conclusions.\n\nTranslating numerical results into compelling narratives requires strong **Data Visualization** skills. Whether you choose Tableau, Power BI, or Python's matplotlib and seaborn libraries, you will create interactive dashboards and visual stories that highlight trends, outliers, and opportunities. Effective visualization not only conveys findings clearly but also drives stakeholder engagement.\n\nFinally, solid programming skills in Python or R tie your analytical process together. From automating repetitive tasks and integrating APIs to building end-to-end **data analytics** pipelines, a programming mindset enables scalability, reproducibility, and integration of advanced tools, positioning you for roles across the industry.\n\n### Soft Skills:\n\nIn the realm of data analytics, technical prowess must be complemented by strong interpersonal abilities (i.e, soft skills). Analytical thinking and structured problem-solving are at the heart of your daily workflow. When you encounter complex datasets, you must decide which analysis techniques best uncover the story hidden in the numbers. \n\nThis thoughtful approach ensures you derive accurate, actionable insights from unprocessed data.\n\nEqually vital is the capacity to interpret data and translate it into meaningful recommendations. Effective communication means crafting a narrative around your findings that resonates with diverse audiences, from C-suite executives to frontline team members. \n\nBy designing clear visualizations and presenting data insights through compelling dashboards or concise slide decks, you empower stakeholders to make informed decisions.\n\nDocumenting every phase of your analysis process (data collection, cleaning, transformation, modeling, and reporting) creates a transparent audit trail. This meticulous record-keeping not only bolsters confidence in your results but also sets the foundation for reproducibility and continuous improvement.\n\nCollaboration and adaptability define success in dynamic business environments. As a business intelligence analyst, sales data analyst, or healthcare data analyst, you'll partner with professionals across marketing, finance, operations, and IT. \n\nLearning to navigate different communication styles, incorporating feedback, and swiftly adopting new tools or programming skills are essential to deliver timely, value-driven analyses.\n\nFinally, incorporate a growth mindset by viewing every project as an opportunity to refine your soft skills. Seek constructive feedback from mentors and peers, participate in cross-functional workshops, and mentor aspiring professionals. Cultivating empathy, resilience, and lifelong learning habits ensures you evolve into a well-rounded data analyst capable of driving organizational success.\n\nStarting with these essential skills will give you the confidence to tackle **data-projects**, close the **data skills gap**, and stand out among **aspiring analysts** in a competitive **job market.** After the foundation is done, you're free to specialize and focus in the areas that you feel are more appealing to you.\n\n## Step 2: Follow a Structured Learning Path\n\nGetting started on your journey as a new data analyst without formal experience can feel a bit overwhelming, so it's very important to follow a **structured learning path**. This way, you'll ensure you acquire the right **data analysis skills** in a way that makes sense according to your progression during your journey. \n\nHere's how to follow a proven roadmap:\n\n1. **Explore the [Data Analyst Roadmap](https://roadmap.sh/data-analyst)**: Start with the roadmap to grasp the full analysis life cycle.  \n2. **Master SQL Early**: As a key technology for the field, the sooner you start tackling SQL, the better it will be. So, enroll in a [SQL course](https://roadmap.sh/courses/sql) to build a strong foundation in SQL (Structured Query Language). Practice querying, filtering, aggregations, and manipulation on realistic datasets.  \n3. **Earn Recognized Certifications**: Boost your resume with entry-level certifications that validate your expertise. Consider doing any of the following:  \n   * **Google Data Analytics Professional Certificate** (Coursera)  \n   * **IBM Data Analyst Professional Certificate**  \n   * **Microsoft Certified: Data Analyst Associate**. These programs cover essential **data science** concepts, **data cleansing**, **visualization**, and real-world **data projects**.  \n4. **Take Complementary Courses**: Figure out what your **data analysis skills gaps** are and fill them up by learning:  \n   * **Programming languages** (Python, R)  \n   * **Statistical analysis** and hypothesis testing  \n   * **Business intelligence** tools (Tableau, Power BI). Platforms like DataCamp, Udacity, and LinkedIn Learning offer targeted modules.  \n5. **Apply Knowledge Through Projects**: Especially at the beginning, when you don't have any experience, try to reinforce your learning by tackling guided analysis projects on platforms like [Kaggle](https://www.kaggle.com/) or GitHub. Focus on end-to-end workflows (data collection, data cleaning, analyzing data, visualizing data, and presenting insights).\n\nThis structured learning path will help you in several ways:\n\n* You'll be able to systematically build basic data analysis skills.  \n* You'll end up developing a compelling and very complete portfolio showcasing your skills.  \n* And you'll also be able to demonstrate to potential hiring managers your commitment to becoming a great junior data analyst.\n\n## Step 3: Build a Data Analytics Portfolio\n\nBuilding a robust data analyst portfolio will help you demonstrate your ability to tackle end-to-end **projects**, making you a standout candidate in a competitive **job market**. Here's why it matters and how to craft compelling portfolio pieces:\n\n### Why a Strong Portfolio Matters\n\nBuilding a strong portfolio helps you validate your own **analysis process**, from **data collection** and cleaning to visualization and interpretation, you'll be working on the entire thing.\n\nIt also helps you showcase your proficiency in **data manipulation & cleaning**, and extracting **actionable insights** from unprocessed data. \n\nAs part of the analysis life cycle,  your **data visualization** and storytelling skills will have to shine in your portfolio. They're critical for roles like **BI analyst** or **data analyst**, so make sure you use them on every project in your portfolio.\n\nOverall, the portfolio will help you highlight every single skill that is needed for the job, and if you build one with varied projects, different types of visualizations, and business goals, by the end, you'll be broadcasting to every hiring manager that you know what you're doing.\n\n### Portfolio Project Ideas\n\nBut what project can you put into your portfolio? Let's go over some ideas that might highlight just the right set of skills:\n\n* **Public Dataset Analysis**: Pick datasets (e.g., healthcare metrics, sales transactions, fraud detection) and perform a full workflow—ingestion, cleaning, exploratory analysis, statistical modeling, and reporting.  \n* **Data Cleaning & QA Showcase**: Use a messy real-world dataset to demonstrate handling missing values, outliers, normalization, and quality checks—include before/after snapshots and code snippets.  \n* **Interactive Dashboards**: Build dashboards with Tableau, Power BI, or Plotly to **visualize data** trends and present insights; add filters, annotations, and user controls.  \n* **Domain-Specific Projects**: Create analyses for niche roles—e.g.,  evaluate patient outcomes as a **healthcare data analyst**.  \n* **Data Storytelling**: Craft a narrative-driven project (e.g., COVID-19 trends, climate data) combining charts, maps, and written insights to tell a compelling story.\n\nAnd if you don't really know how to begin working on them, you can simply ask one of the many LLMs available online to give you a detailed project plan, and start working on it. You'll be closing projects right and left in no time.\n\n### Best Practices\n\nWhere should you create your portfolio? What tech stack should you use? How often should you update it? When should you publish it?   \nThese are all valid questions that don't have a single answer, however, I can show you some of the best practices I've seen around throughout my career when it comes to building data analyst portfolios:\n\n* Host projects on GitHub with clear READMEs, organized code, and visual previews.  \n* Document your **analysis life cycle** in Jupyter notebooks or blog posts, explaining each step and decision.  \n* Use authentic tools and workflows: query public APIs with **SQL**, automate tasks with Python or R, and integrate BI tools.  \n* Continuously update your portfolio as you learn new **data analysis techniques** and **programming skills**.\n\n## Step 4: Gain Practical Experience\n\nSecuring practical experience allows you to apply theoretical knowledge, bridge the skills gap, and prove to hiring managers that you can deliver on real-world data analysis projects. Here are several pathways to get your foot in the door:\n\n* **Internships & Volunteer Projects:**  \n  Look for data internships (even unpaid if you can) or volunteer to help non‑profits, student organizations, or local businesses with their **data collection**, **data cleaning**, and **data visualization** needs. These roles not only strengthen your **technical skills** but also give you concrete examples for your **data analytics portfolio**.  \n* **Freelance & Gig Work:**  \n  Platforms like Upwork, Fiverr, or even LinkedIn can connect you with short‑term gigs, everything from database queries to dashboard creation. Freelance tasks force you to **manipulate data**, produce **actionable insights**, and **present data-driven insights** under real-world deadlines, building both technical chops and business communication skills.  \n* **Entry‑Level & Support Roles:**  \n  Apply for roles labeled **data technician**, **data entry**, or **junior data analyst**. These positions often focus on **data quality**, routine reports, and simple analyses; they're perfect stepping stones that let you collaborate with senior analysts and refine your **analysis** and **manipulation** techniques.  \n* **Kaggle Competitions & Public Challenges:**  \n  I've mentioned this platform before, but consider participating in Kaggle or similar platforms to demonstrate your ability to tackle problems like a **fraud detection** challenge or sales forecasting. Even if you don't win, documenting your approach, code, and learnings shows resilience and a methodical **analysis process**.  \n* **Capstone & Guided Projects:**  \n  Many certification programs include capstone projects. Treat these as mini‑portfolio pieces: choose datasets relevant to your target roles, and clearly outline your **data analysis life cycle**, from **raw data** ingestion through **data visualization** and storytelling.\n\nBuild experience in as many diverse **practical experiences as you can**. That way, you'll not only close any **data skills gap** you might have, but also amass a collection of tangible accomplishments, making it far easier to articulate your value as an **aspiring data analyst** during interviews.\n\n## Step 5: Network and Engage with the Data Community\n\nSpending time in the right communities accelerates your growth as an **aspiring data analyst** by helping you stay current with industry trends, learn from seasoned **professionals**, and uncover hidden **data analytics job** opportunities. After all, a big part of growing in any technology role is about networking (shocking, I know\\!) with other professionals who've gone through what you're going through now and can provide advice, help, or even a boost when least expected.\n\nNetworking is not easy, and there are many ways to do it. Here's just one example of how to build and leverage your own network:\n\n* **Leverage Professional Platforms:** Connect with **qualified data analysts** and **data scientists** on LinkedIn, GitHub, and specialized forums like Stack Overflow or Reddit's r/datascience. Engage by asking thoughtful questions, sharing your **data analysis projects**, and commenting on discussions.  \n* **Attend Industry Events:** Participate in local meetups, virtual conferences, webinars, and workshops hosted by organizations such as Data Science Saudi, Meetup groups, or platform-specific events (e.g., Tableau User Groups). These gatherings expose you to emerging **analysis techniques**, **data visualization** best practices, and evolving industry standards.  \n* **Join Online Communities:** Become active in Slack channels, Discord servers, or professional associations where **data analysts** share resources, job leads, and **actionable insights**. Regularly review community channels for project feedback, collaboration opportunities, and announcements about **entry-level data analyst** roles.  \n* **Find a Mentor or Buddy:** Seek out mentorship programs through bootcamps or university-alumni networks. A mentor, someone like a **senior data analyst** or BI (**business intelligence) analyst**, can provide personalized advice on your **data analysis life cycle**, resume reviews, and mock interviews.  \n* **Share Your Knowledge:** Contribute to blogs, record tutorials, or present lightning talks at virtual events. While you might just be starting, chances are someone else is going through the same process, and learning how you solved it can help them. Also, creating content like this will force you to truly understand the topic you're covering before being able to explain it. So even while you're teaching others, you're also cementing that understanding within you.\n\nNetworking is not easy, and when you're just getting started, it might seem even harder than getting an actual data analyst job. The above list is just a set of options, you don't have to go through all of them (or any, to be honest), just find a way that works for you and follow that path.\n\n## Step 6: Continuous Learning and Career Development\n\nThe analytics industry is constantly evolving, and your professional growth must keep up accordingly. Continuous learning is probably one of the only ways to ensure you stay ahead of emerging trends, refine your existing skills, and prepare for more advanced roles.\n\n### Lifelong Learning and Advanced Skills\n\nYou should embrace a mindset of lifelong learning by deepening your technical expertise over time. Accept that you'll never be done learning and revisit fundamental tools like SQL and master advanced features such as window functions and recursive queries. \n\nExpand your proficiency in Python by exploring libraries like pandas for data manipulation and scikit-learn for machine learning workflows. If you prefer R, dive into packages like tidyverse for efficient data processing and ggplot2 for sophisticated visualizations. \n\nAdditionally, enroll in specialized courses on machine learning algorithms, cloud-based analytics platforms (e.g., AWS Redshift, Google BigQuery), and emerging open-source tools. Staying informed through industry blogs, podcasts, and research publications will help you hone your skills in both data science and data mining.\n\n### Charting Your Career Path\n\nOnce you have a solid foundation in data analysis techniques, the next step is to start mapping out your career trajectory. In other words: where do you want to go?\n\nInitially, you might specialize as a BI analyst, crafting interactive dashboards and KPI reports that inform strategic decisions. \n\nNext, consider roles such as sales data analyst, where you'll focus on revenue analytics and customer behavior modeling, or healthcare analyst, tasked with evaluating patient outcomes and ensuring regulatory compliance. \n\nAs you gain experience, you might want to pivot toward senior data analyst or data scientist positions, taking on end-to-end projects that incorporate predictive modeling, anomaly detection, and advanced statistical analysis.\n\n### Setting Goals and Measuring Progress\n\nYou can't know if you're moving in the right direction if you don't measure your progress. It's a very common mistake many new analysts make, and one you should try to avoid.\n\nDefine clear, measurable objectives to guide your learning journey. Set milestones—such as completing a certification, publishing a portfolio project, or mastering a new visualization tool (and celebrate each achievement once you get it). \n\nKeep a learning journal or log within your portfolio to document projects, record the techniques applied, and reflect on lessons learned. \n\nRegularly try to get feedback from peers and mentors through code reviews, presentations, or mock interviews to identify areas for improvement and validate your progress.\n\n### Mentorship and Community Involvement\n\nLong-term success in data analysis relies on strong professional relationships and community engagement. Continue participating in forums, meetups, and virtual conferences to exchange insights with both aspiring analysts and seasoned professionals. \n\nSeek opportunities to mentor newcomers, contribute to open-source or community-driven data projects, and share your expertise through blog posts or lightning talks. \n\nTeaching concepts such as data cleansing, analysis workflows, and visualization best practices not only reinforces your own knowledge but also establishes your reputation as a qualified data professional in the broader data analyst job market.\n\nTry to incorporate these strategies into your routine; that way, you'll enhance your data analyst skills dynamically, showcase your commitment to growth, and position yourself for roles with greater responsibility and impact.\n\n## Conclusion\n\nEmbarking on the path of how to become a data analyst with no experience may seem challenging, yes, but by leveraging structured learning pathways like the [Data Analyst Roadmap](https://roadmap.sh/data-analyst) and our [Mastering SQL course](https://roadmap.sh/courses/sql), you'll build the core technical foundation. \n\nComplementing these tools with thoughtfully chosen data analysis projects in your portfolio will validate your practical skills and demonstrate your ability to extract actionable insights from complex datasets (which is the end goal of a good data analyst).\n\nBeyond technical proficiency, remember that confidence and communication are equally critical. Whether you're preparing for your first entry-level data analyst interview or collaborating as a junior data analyst on real-world projects, articulating your data analysis process will set you apart. \n\nPractical experiences, such as internships or community-driven challenges, will further reinforce your résumé and show your commitment to continuous growth in the analytics industry.\n\nEvery day, countless developers and analysts successfully transition into data roles by following these strategies. \n\nNow it's your turn: take the first step, mapping out your learning journey, and launching your own data analytics projects. Your journey from aspiring analyst to qualified data professional starts today!\n\n";
				}
				async function compiledContent$15() {
					return await html$15();
				}
				function getHeadings$15() {
					return [{"depth":2,"slug":"step-1-master-the-essential-data-analyst-skills","text":"Step 1: Master the Essential Data Analyst Skills"},{"depth":3,"slug":"technical-skills","text":"Technical Skills:"},{"depth":3,"slug":"soft-skills","text":"Soft Skills:"},{"depth":2,"slug":"step-2-follow-a-structured-learning-path","text":"Step 2: Follow a Structured Learning Path"},{"depth":2,"slug":"step-3-build-a-data-analytics-portfolio","text":"Step 3: Build a Data Analytics Portfolio"},{"depth":3,"slug":"why-a-strong-portfolio-matters","text":"Why a Strong Portfolio Matters"},{"depth":3,"slug":"portfolio-project-ideas","text":"Portfolio Project Ideas"},{"depth":3,"slug":"best-practices","text":"Best Practices"},{"depth":2,"slug":"step-4-gain-practical-experience","text":"Step 4: Gain Practical Experience"},{"depth":2,"slug":"step-5-network-and-engage-with-the-data-community","text":"Step 5: Network and Engage with the Data Community"},{"depth":2,"slug":"step-6-continuous-learning-and-career-development","text":"Step 6: Continuous Learning and Career Development"},{"depth":3,"slug":"lifelong-learning-and-advanced-skills","text":"Lifelong Learning and Advanced Skills"},{"depth":3,"slug":"charting-your-career-path","text":"Charting Your Career Path"},{"depth":3,"slug":"setting-goals-and-measuring-progress","text":"Setting Goals and Measuring Progress"},{"depth":3,"slug":"mentorship-and-community-involvement","text":"Mentorship and Community Involvement"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$15 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$15;
					content.file = file$15;
					content.url = url$15;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$15())}`;
				});

const __vite_glob_0_29 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$15,
	compiledContent: compiledContent$15,
	default: Content$15,
	file: file$15,
	frontmatter: frontmatter$15,
	getHeadings: getHeadings$15,
	rawContent: rawContent$15,
	url: url$15
}, Symbol.toStringTag, { value: 'Module' }));

const html$14 = () => "<p>Design patterns are solutions to recurring problems; <strong>guidelines on how to tackle certain problems</strong>. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.</p>\n<blockquote>\n<p>Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems</p>\n</blockquote>\n<p>Wikipedia describes them as</p>\n<blockquote>\n<p>In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations.</p>\n</blockquote>\n<h2 id=\"be-careful\">Be Careful</h2>\n<p>Developers, mostly beginners, make the mistake of over-thinking and forcing the design patterns which results in a horrible un-maintainable mess. The rule of thumb is to keep the codebase as simple as possible, once you start developing, you will start to see the patterns repeating in the codebase in which case you can go ahead and implement the relevant design patterns.</p>\n<ul>\n<li>Design patterns are not a silver bullet to all your problems.</li>\n<li>Do not try to force them; bad things are supposed to happen, if done so.</li>\n<li>Keep in mind that design patterns are solutions <strong>to</strong> problems, not solutions <strong>finding</strong> problems; so don’t overthink.</li>\n<li>If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code.</li>\n</ul>\n<blockquote>\n<p>Also note that the code samples below are in PHP-7, however this shouldn’t stop you because the concepts are same anyways.</p>\n</blockquote>\n<h2 id=\"types-of-design-patterns\">Types of Design Patterns</h2>\n<p>This guide is about Gang of Four (GoF) design patterns, which refers to the four authors of <a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">the book which introduced these design patterns</a>. There are three types of design patterns:</p>\n<ul>\n<li><a href=\"#creational-design-patterns\">Creational</a></li>\n<li><a href=\"#structural-design-patterns\">Structural</a></li>\n<li><a href=\"#behavioral-design-patterns\">Behavioral</a></li>\n</ul>\n<h2 id=\"creational-design-patterns\">Creational Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>Creational patterns are focused towards how to instantiate an object or group of related objects.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.</p>\n</blockquote>\n<p>There are 6 types of Creational patterns</p>\n<ul>\n<li><a href=\"#-simple-factory\">Simple Factory</a></li>\n<li><a href=\"#-factory-method\">Factory Method</a></li>\n<li><a href=\"#-abstract-factory\">Abstract Factory</a></li>\n<li><a href=\"#-builder\">Builder</a></li>\n<li><a href=\"#-prototype\">Prototype</a></li>\n<li><a href=\"#-singleton\">Singleton</a></li>\n</ul>\n<h2 id=\"-simple-factory\">🏠 Simple Factory</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider, you are building a house and you need doors. You can either put on your carpenter clothes, bring some wood, glue, nails and all the tools required to build the door and start building it in your house or you can simply call the factory and get the built door delivered to you so that you don’t need to learn anything about the door making or to deal with the mess that comes with making it.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Simple factory simply generates an instance for client without exposing any instantiation logic to the client</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be “new”.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>First of all we have a door interface and the implementation</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getWidth</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getHeight</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $width;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $height;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $width, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $height)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">width </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $width;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">height </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $height;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getWidth</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">width;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getHeight</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">height;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our door factory that makes the door and returns it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">($width, $height)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoor</span><span style=\"color:#F8F8F2\">($width,</span><span style=\"color:#F8F8F2\"> $height);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Make me a door of 100x200</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">200</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Width: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getWidth</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Height: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getHeight</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Make me a door of 50x100</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door2 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">50</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">);</span></span></code></pre>\n<p><strong>When to Use?</strong></p>\n<p>When creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.</p>\n<h2 id=\"-factory-method\">🏭 Factory Method</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It provides a way to delegate the instantiation logic to child classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our hiring manager example above. First of all we have an interviewer interface and some implementations for it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Developer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Asking about design patterns!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> CommunityExecutive</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Asking about community building</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Now let us create our <code>HiringManager</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Factory method</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> takeInterview</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $interviewer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeInterviewer</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $interviewer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">askQuestions</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now any child can extend it and provide the required interviewer</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DevelopmentManager</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Developer</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> MarketingManager</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> CommunityExecutive</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>and then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$devManager </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> DevelopmentManager</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$devManager</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeInterview</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: Asking about design patterns</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$marketingManager </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> MarketingManager</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$marketingManager</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeInterview</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: Asking about community building.</span></span></code></pre>\n<p><strong>When to use?</strong></p>\n<p>Useful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn’t know what exact sub-class it might need.</p>\n<h2 id=\"-abstract-factory\">🔨 Abstract Factory</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Extending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter, iron door needs a welder etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating the door example above. First of all we have our <code>Door</code> interface and some implementation for it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I am a wooden door</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IronDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I am an iron door</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have some fitting experts for each door type</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Welder</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I can only fit iron doors</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Carpenter</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I can only fit wooden doors</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Now we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Wooden factory to return carpenter and wooden door</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoorFactory</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Carpenter</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Iron door factory to get iron door and the relevant fitting expert</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IronDoorFactory</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IronDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Welder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$woodenFactory </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoorFactory</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $woodenFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $woodenFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeFittingExpert</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">();  </span><span style=\"color:#6272A4\">// Output: I am a wooden door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: I can only fit wooden doors</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Same for Iron Factory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$ironFactory </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IronDoorFactory</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $ironFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $ironFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeFittingExpert</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">();  </span><span style=\"color:#6272A4\">// Output: I am an iron door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: I can only fit iron doors</span></span></code></pre>\n<p>As you can see the wooden door factory has encapsulated the <code>carpenter</code> and the <code>wooden door</code> also iron door factory has encapsulated the <code>iron door</code> and <code>welder</code>. And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.</p>\n<p><strong>When to use?</strong></p>\n<p>When there are interrelated dependencies with not-that-simple creation logic involved</p>\n<h2 id=\"-builder\">👷 Builder</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you are at Hardee’s and you order a specific deal, lets say, “Big Hardee” and they hand it over to you without <em>any questions</em>; this is the example of simple factory. But there are cases when the creation logic might involve more steps. For example you want a customized Subway deal, you have several options in how your burger is made e.g what bread do you want? what types of sauces would you like? What cheese would you want? etc. In such cases builder pattern comes to the rescue.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor anti-pattern.</p>\n</blockquote>\n<p>Having said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">($size, $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">, $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">, $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">, $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>As you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>The sane alternative is to use the builder pattern. First of all we have our burger that we want to make</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Burger</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">BurgerBuilder</span><span style=\"color:#F8F8F2\"> $builder)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then we have the builder</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> BurgerBuilder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">int</span><span style=\"color:#F8F8F2\"> $size)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addPepperoni</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addLettuce</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addCheese</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addTomato</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> build</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Burger</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Burger</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$burger </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> BurgerBuilder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">14</span><span style=\"color:#F8F8F2\">))</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addPepperoni</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addLettuce</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addTomato</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span></code></pre>\n<p><strong>When to use?</strong></p>\n<p>When there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.</p>\n<h2 id=\"-prototype\">🐑 Prototype</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Remember dolly? The sheep that was cloned! Lets not get into the details but the key point here is that it is all about cloning</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Create object based on an existing object through cloning.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.</p>\n</blockquote>\n<p>In short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>In PHP, it can be easily done using <code>clone</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Sheep</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Mountain Sheep</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setName</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setCategory</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $category)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCategory</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then it can be cloned like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$original </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sheep</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jolly</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $original</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Jolly</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $original</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCategory</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Mountain Sheep</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Clone and modify what is required</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$cloned </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> clone</span><span style=\"color:#F8F8F2\"> $original;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setName</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Dolly</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Dolly</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCategory</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Mountain sheep</span></span></code></pre>\n<p>Also you could use the magic method <code>__clone</code> to modify the cloning behavior.</p>\n<p><strong>When to use?</strong></p>\n<p>When an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.</p>\n<h2 id=\"-singleton\">💍 Singleton</h2>\n<p>Real world example</p>\n<blockquote>\n<p>There can only be one president of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Ensures that only one object of a particular class is ever created.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.</p>\n</blockquote>\n<p>Singleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>To create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">final</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> President</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#F8F8F2\"> $instance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Hide the constructor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getInstance</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">!</span><span style=\"color:#8BE9FD;font-style:italic\">self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">            self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> self</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD;font-style:italic\"> self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#BD93F9\"> __clone</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Disable cloning</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#BD93F9\"> __wakeup</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Disable unserialize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then in order to use</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$president1 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">getInstance</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$president2 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">getInstance</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">var_dump</span><span style=\"color:#F8F8F2\">($president1</span><span style=\"color:#FF79C6\"> ===</span><span style=\"color:#F8F8F2\"> $president2); </span><span style=\"color:#6272A4\">// true</span></span></code></pre>\n<h2 id=\"structural-design-patterns\">Structural Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>Structural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering “How to build a software component?”</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.</p>\n</blockquote>\n<p>There are 7 types of structural patterns</p>\n<ul>\n<li><a href=\"#-adapter\">Adapter</a></li>\n<li><a href=\"#-bridge\">Bridge</a></li>\n<li><a href=\"#-composite\">Composite</a></li>\n<li><a href=\"#-decorator\">Decorator</a></li>\n<li><a href=\"#-facade\">Facade</a></li>\n<li><a href=\"#-flyweight\">Flyweight</a></li>\n<li><a href=\"#-proxy\">Proxy</a></li>\n</ul>\n<h2 id=\"-adapter\">🔌 Adapter</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter.\nAnother example would be the famous power adapter; a three legged plug can’t be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet.\nYet another example would be a translator translating words spoken by one person to another</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Consider a game where there is a hunter and he hunts lions.</p>\n<p>First we have an interface <code>Lion</code> that all types of lions have to implement</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AfricanLion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AsianLion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And hunter expects any implementation of <code>Lion</code> interface to hunt.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Hunter</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> hunt</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Now let’s say we have to add a <code>WildDog</code> in our game so that hunter can hunt that also. But we can’t do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// This needs to be added to the game</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WildDog</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> bark</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Adapter around wild dog to make it compatible with our game</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WildDogAdapter</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $dog;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WildDog</span><span style=\"color:#F8F8F2\"> $dog)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">dog </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $dog;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">dog</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">bark</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And now the <code>WildDog</code> can be used in our game using <code>WildDogAdapter</code>.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$wildDog </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WildDog</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$wildDogAdapter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WildDogAdapter</span><span style=\"color:#F8F8F2\">($wildDog);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$hunter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Hunter</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$hunter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">hunt</span><span style=\"color:#F8F8F2\">($wildDogAdapter);</span></span></code></pre>\n<h2 id=\"-bridge\">🚡 Bridge</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on the user’s preferences? Bridge pattern allows you to do the second i.e.</p>\n</blockquote>\n<p><img src=\"https://cloud.githubusercontent.com/assets/11269635/23065293/33b7aea0-f515-11e6-983f-98823c9845ee.png\" alt=\"With and without the bridge pattern\"></p>\n<p>In Plain Words</p>\n<blockquote>\n<p>Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The bridge pattern is a design pattern used in software engineering that is meant to “decouple an abstraction from its implementation so that the two can vary independently”</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating our WebPage example from above. Here we have the <code>WebPage</code> hierarchy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> About</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">About page in </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Careers</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Careers page in </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And the separate theme hierarchy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DarkTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Dark Black</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LightTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Off white</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AquaTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Light blue</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And both the hierarchies</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$darkTheme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> DarkTheme</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$about </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> About</span><span style=\"color:#F8F8F2\">($darkTheme);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$careers </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Careers</span><span style=\"color:#F8F8F2\">($darkTheme);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $about</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// \"About page in Dark Black\";</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $careers</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// \"Careers page in Dark Black\";</span></span></code></pre>\n<h2 id=\"-composite\">🌿 Composite</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Every organization is composed of employees. Each of the employees has the same features i.e. has a salary, has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Composite pattern lets clients treat the individual objects in a uniform manner.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to “compose” objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our employees example from above. Here we have different employee types</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Developer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $roles;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">roles;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Designer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $roles;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">roles;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have an organization which consists of several different types of employees</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Organization</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $employees;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addEmployee</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Employee</span><span style=\"color:#F8F8F2\"> $employee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">employees[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $employee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getNetSalaries</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $netSalary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">employees </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $employee) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            $netSalary </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> $employee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getSalary</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $netSalary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Prepare the employees</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Developer</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#BD93F9\"> 12000</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Designer</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#BD93F9\"> 15000</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Add them to organization</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Organization</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addEmployee</span><span style=\"color:#F8F8F2\">($john);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addEmployee</span><span style=\"color:#F8F8F2\">($jane);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Net salaries: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getNetSalaries</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Net Salaries: 27000</span></span></code></pre>\n<h2 id=\"-decorator\">☕ Decorator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Lets take coffee for example. First of all we have a simple coffee implementing the coffee interface</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> SimpleCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> 10</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Simple coffee</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>We want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> MilkCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 2</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, milk</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WhipCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 5</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, whip</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> VanillaCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 3</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, vanilla</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Lets make a coffee now</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> SimpleCoffee</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 10</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> MilkCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 12</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WhipCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 17</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk, whip</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> VanillaCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 20</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk, whip, vanilla</span></span></code></pre>\n<h2 id=\"-facade\">📦 Facade</h2>\n<p>Real world example</p>\n<blockquote>\n<p>How do you turn on the computer? “Hit the power button” you say! That is what you believe because you are using a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Facade pattern provides a simplified interface to a complex subsystem.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>A facade is an object that provides a simplified interface to a larger body of code, such as a class library.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our computer example from above. Here we have the computer class</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Computer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getElectricShock</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Ouch!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeSound</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Beep beep!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showLoadingScreen</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Loading..</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> bam</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Ready to be used!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> closeEverything</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Bup bup bup buzzzz!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sooth</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Zzzzz</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> pullCurrent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Haaah!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Here we have the facade</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> ComputerFacade</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $computer;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Computer</span><span style=\"color:#F8F8F2\"> $computer)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $computer;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOn</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getElectricShock</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeSound</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">showLoadingScreen</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">bam</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOff</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">closeEverything</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pullCurrent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sooth</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Now to use the facade</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$computer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> ComputerFacade</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> Computer</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Ouch! Beep beep! Loading.. Ready to be used!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Bup bup buzzz! Haah! Zzzzz</span></span></code></pre>\n<h2 id=\"-flyweight\">🍃 Flyweight</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Did you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our tea example from above. First of all we have tea types and tea maker</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Anything that will be cached is flyweight.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Types of tea here will be flyweights.</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> KarakTea</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Acts as a factory and saves the tea</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TeaMaker</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $availableTea </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">($preference)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD\">empty</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference])) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> KarakTea</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference];</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have the <code>TeaShop</code> which takes orders and serves them</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TeaShop</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $orders;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $teaMaker;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">TeaMaker</span><span style=\"color:#F8F8F2\"> $teaMaker)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">teaMaker </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $teaMaker;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $teaType, </span><span style=\"color:#FF79C6\">int</span><span style=\"color:#F8F8F2\"> $table)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">orders[$table] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">teaMaker</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">($teaType);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> serve</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">orders </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $table </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> $tea) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Serving tea to table# </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $table;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And it can be used as below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$teaMaker </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TeaMaker</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TeaShop</span><span style=\"color:#F8F8F2\">($teaMaker);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">less sugar</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">more milk</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">without sugar</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">serve</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 1</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 2</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 5</span></span></code></pre>\n<h2 id=\"-proxy\">🎱 Proxy</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Have you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door’s main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Using the proxy pattern, a class represents the functionality of another class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our security door example from above. Firstly we have the door interface and an implementation of door</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LabDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Opening lab door</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Closing the lab door</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have a proxy to secure any doors that we want</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> SecuredDoor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $door;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Door</span><span style=\"color:#F8F8F2\"> $door)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $door;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">($password)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">authenticate</span><span style=\"color:#F8F8F2\">($password)) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">else</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Big no! It ain't possible.</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> authenticate</span><span style=\"color:#F8F8F2\">($password)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $password </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">$ecr@t</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And here is how it can be used</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> SecuredDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> LabDoor</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">invalid</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// Big no! It ain't possible.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">$ecr@t</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// Opening lab door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Closing lab door</span></span></code></pre>\n<p>Yet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method <code>__call()</code>. All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of <code>find</code> or <code>findOne</code> data was mapped to the required class objects and the object was returned instead of <code>Cursor</code>.</p>\n<h2 id=\"behavioral-design-patterns\">Behavioral Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don’t just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering “How to run a behavior in software component?”</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.</p>\n</blockquote>\n<p>There are 10 types of behavioral design patterns</p>\n<ul>\n<li><a href=\"#-chain-of-responsibility\">Chain of Responsibility</a></li>\n<li><a href=\"#-command\">Command</a></li>\n<li><a href=\"#-iterator\">Iterator</a></li>\n<li><a href=\"#-mediator\">Mediator</a></li>\n<li><a href=\"#-memento\">Memento</a></li>\n<li><a href=\"#-observer\">Observer</a></li>\n<li><a href=\"#-visitor\">Visitor</a></li>\n<li><a href=\"#-strategy\">Strategy</a></li>\n<li><a href=\"#-state\">State</a></li>\n<li><a href=\"#-template-method\">Template Method</a></li>\n</ul>\n<h2 id=\"-chain-of-responsibility\">🔗 Chain of Responsibility</h2>\n<p>Real world example</p>\n<blockquote>\n<p>For example, you have three payment methods (<code>A</code>, <code>B</code> and <code>C</code>) setup in your account; each having a different amount in it. <code>A</code> has 100 USD, <code>B</code> has 300 USD and <code>C</code> having 1000 USD and the preference for payments is chosen as <code>A</code> then <code>B</code> then <code>C</code>. You try to purchase something that is worth 210 USD. Using Chain of Responsibility, first of all account <code>A</code> will be checked if it can make the purchase, if yes purchase will be made and the chain will be broken. If not, request will move forward to account <code>B</code> checking for amount if yes chain will be broken otherwise the request will keep forwarding till it finds the suitable handler. Here <code>A</code>, <code>B</code> and <code>C</code> are links of the chain and the whole phenomenon is Chain of Responsibility.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $successor;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setNext</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Account</span><span style=\"color:#F8F8F2\"> $account)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $account;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> pay</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $amountToPay)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">canPay</span><span style=\"color:#F8F8F2\">($amountToPay)) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#8BE9FD\"> sprintf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Paid %s using %s</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#F8F8F2\"> $amountToPay,</span><span style=\"color:#8BE9FD\"> get_called_class</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">elseif</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#8BE9FD\"> sprintf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Cannot pay using %s. Proceeding ..</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#8BE9FD\"> get_called_class</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pay</span><span style=\"color:#F8F8F2\">($amountToPay);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">else</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            throw</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Exception</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">None of the accounts have enough balance</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> canPay</span><span style=\"color:#F8F8F2\">($amount)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> bool</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">>=</span><span style=\"color:#F8F8F2\"> $amount;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bank</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Paypal</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bitcoin</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Now let’s prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Let's prepare a chain like below</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      $bank->$paypal->$bitcoin</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// First priority bank</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      If bank can't pay then paypal</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      If paypal can't pay then bit coin</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bank</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">);          </span><span style=\"color:#6272A4\">// Bank with balance 100</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$paypal </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Paypal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">200</span><span style=\"color:#F8F8F2\">);      </span><span style=\"color:#6272A4\">// Paypal with balance 200</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bitcoin </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bitcoin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">300</span><span style=\"color:#F8F8F2\">);    </span><span style=\"color:#6272A4\">// Bitcoin with balance 300</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setNext</span><span style=\"color:#F8F8F2\">($paypal);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$paypal</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setNext</span><span style=\"color:#F8F8F2\">($bitcoin);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Let's try to pay using the first priority i.e. bank</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pay</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">259</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output will be</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// ==============</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Cannot pay using bank. Proceeding ..</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Cannot pay using paypal. Proceeding ..:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Paid 259 using Bitcoin!</span></span></code></pre>\n<h2 id=\"-command\">👮 Command</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A generic example would be you ordering food at a restaurant. You (i.e. <code>Client</code>) ask the waiter (i.e. <code>Invoker</code>) to bring some food (i.e. <code>Command</code>) and waiter simply forwards the request to Chef (i.e. <code>Receiver</code>) who has the knowledge of what and how to cook.\nAnother example would be you (i.e. <code>Client</code>) switching on (i.e. <code>Command</code>) the television (i.e. <code>Receiver</code>) using a remote control (<code>Invoker</code>).</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Allows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client from receiver.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>First of all we have the receiver that has the implementation of every action that could be performed</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Receiver</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bulb</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOn</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Bulb has been lit</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOff</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Darkness!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>then we have an interface that each of the commands are going to implement and then we have a set of commands</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Command</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TurnOn</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Bulb</span><span style=\"color:#F8F8F2\"> $bulb)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TurnOff</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Bulb</span><span style=\"color:#F8F8F2\"> $bulb)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have an <code>Invoker</code> with whom the client will interact to process any commands</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Invoker</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> RemoteControl</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> submit</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Command</span><span style=\"color:#F8F8F2\"> $command)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $command</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Finally let’s see how we can use it in our client</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bulb</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$turnOn </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TurnOn</span><span style=\"color:#F8F8F2\">($bulb);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$turnOff </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TurnOff</span><span style=\"color:#F8F8F2\">($bulb);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> RemoteControl</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">submit</span><span style=\"color:#F8F8F2\">($turnOn); </span><span style=\"color:#6272A4\">// Bulb has been lit!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">submit</span><span style=\"color:#F8F8F2\">($turnOff); </span><span style=\"color:#6272A4\">// Darkness!</span></span></code></pre>\n<p>Command pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the <code>undo</code> on all the executed commands.</p>\n<h2 id=\"-iterator\">➿ Iterator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It presents a way to access the elements of an object without exposing the underlying presentation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container’s elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>In PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have <code>RadioStation</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> RadioStation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $frequency;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $frequency)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">frequency </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $frequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getFrequency</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">frequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our iterator</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">use</span><span style=\"color:#8BE9FD;font-style:italic\"> Countable</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">use</span><span style=\"color:#8BE9FD;font-style:italic\"> Iterator</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> StationList</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Countable</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">Iterator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    /** </span><span style=\"color:#FF79C6\">@var</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#FF79C6\">[]</span><span style=\"color:#6272A4\"> $stations */</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $stations </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    /** </span><span style=\"color:#FF79C6\">@var</span><span style=\"color:#FF79C6\"> int</span><span style=\"color:#6272A4\"> $counter */</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $counter;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $station)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $station;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> removeStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $toRemove)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $toRemoveFrequency </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $toRemove</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD\"> array_filter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations,</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $station)</span><span style=\"color:#FF79C6\"> use</span><span style=\"color:#F8F8F2\"> ($toRemoveFrequency)</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#F8F8F2\"> $station</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\"> !==</span><span style=\"color:#F8F8F2\"> $toRemoveFrequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        });</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> count</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD\"> count</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> current</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter];</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> key</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> next</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter</span><span style=\"color:#FF79C6\">++</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> rewind</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> valid</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> bool</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD\"> isset</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter]);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$stationList </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> StationList</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">89</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">101</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">102</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">103</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">foreach</span><span style=\"color:#F8F8F2\">($stationList </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $station) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">    echo</span><span style=\"color:#F8F8F2\"> $station</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">removeStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">89</span><span style=\"color:#F8F8F2\">)); </span><span style=\"color:#6272A4\">// Will remove station 89</span></span></code></pre>\n<h2 id=\"-mediator\">👽 Mediator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A general example would be when you talk to someone on your mobile phone, there is a network provider sitting between you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Mediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). It helps reduce the coupling between the classes communicating with each other. Because now they don’t need to have the knowledge of each other’s implementation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program’s running behavior.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Here is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.</p>\n<p>First of all, we have the mediator i.e. the chat room</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoomMediator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">User</span><span style=\"color:#F8F8F2\"> $user, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $message);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Mediator</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> ChatRoom</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoomMediator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">User</span><span style=\"color:#F8F8F2\"> $user, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $message)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $time </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD\"> date</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">M d, y H:i</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $sender </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $user</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#F8F8F2\"> $time </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">[</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $sender </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">]:</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $message;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our users i.e. colleagues</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> User</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $chatMediator;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#8BE9FD;font-style:italic\">ChatRoomMediator</span><span style=\"color:#F8F8F2\"> $chatMediator) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">chatMediator </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $chatMediator;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> send</span><span style=\"color:#F8F8F2\">($message) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">chatMediator</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">, $message);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And the usage</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$mediator </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoom</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> User</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#F8F8F2\"> $mediator);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> User</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#F8F8F2\"> $mediator);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hi there!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hey!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output will be</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Feb 14, 10:58 [John]: Hi there!</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Feb 14, 10:58 [Jane]: Hey!</span></span></code></pre>\n<h2 id=\"-memento\">💾 Memento</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Take the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons (i.e. caretaker).</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Memento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on in a smooth manner.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).</p>\n</blockquote>\n<p>Usually useful when you need to provide some sort of undo functionality.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>Lets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.</p>\n<p>First of all we have our memento object that will be able to hold the editor state</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> EditorMemento</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $content;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $content)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our editor i.e. originator that is going to use memento object</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Editor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> ''</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $words;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> save</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> EditorMemento</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> restore</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">EditorMemento</span><span style=\"color:#F8F8F2\"> $memento)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $memento</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$editor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Editor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Type some stuff</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">This is the first sentence.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">This is second.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Save the state to restore to : This is the first sentence. This is second.</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$saved </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">save</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Type some more</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">And this is third.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output: Content before Saving</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// This is the first sentence. This is second. And this is third.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Restoring to last saved state</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">restore</span><span style=\"color:#F8F8F2\">($saved);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// This is the first sentence. This is second.</span></span></code></pre>\n<h2 id=\"-observer\">😎 Observer</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our example from above. First of all we have job seekers that need to be notified for a job posting</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> JobPost</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $title;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $title)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">title </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $title;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getTitle</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">title;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> JobSeeker</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Observer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> onJobPosted</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $job)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do something with the job posting</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Hi </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">! New job posted: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\">.</span><span style=\"color:#F8F8F2\"> $job</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getTitle</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our job postings to which the job seekers will subscribe</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> EmploymentAgency</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Observable</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $observers </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> notify</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $jobPosting)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">observers </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $observer) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            $observer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">onJobPosted</span><span style=\"color:#F8F8F2\">($jobPosting);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> attach</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Observer</span><span style=\"color:#F8F8F2\"> $observer)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">observers[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $observer;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addJob</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $jobPosting)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">notify</span><span style=\"color:#F8F8F2\">($jobPosting);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Create subscribers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$johnDoe </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobSeeker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$janeDoe </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobSeeker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Create publisher and attach subscribers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> EmploymentAgency</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">attach</span><span style=\"color:#F8F8F2\">($johnDoe);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">attach</span><span style=\"color:#F8F8F2\">($janeDoe);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Add a new job and see if subscribers get notified</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addJob</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobPost</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Software Engineer</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Hi John Doe! New job posted: Software Engineer</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Hi Jane Doe! New job posted: Software Engineer</span></span></code></pre>\n<h2 id=\"-visitor\">🏃 Visitor</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places to visit so that they can visit as much as they can without having to do any legwork.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Visitor pattern lets you add further operations to objects without having to modify them.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Let’s take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let’s translate this using visitor pattern</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Visitee</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Visitor</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our implementations for the animals</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Monkey</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> shout</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Ooh oo aa aa!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Lion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Roaaar!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Dolphin</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> speak</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Tuut tuttu tuutt!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Let’s implement our visitor</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Speak</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">shout</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">speak</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$monkey </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Monkey</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Dolphin</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$speak </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Speak</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);    </span><span style=\"color:#6272A4\">// Ooh oo aa aa!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);      </span><span style=\"color:#6272A4\">// Roaaar!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);   </span><span style=\"color:#6272A4\">// Tuut tutt tuutt!</span></span></code></pre>\n<p>We could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let’s say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Jump</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Jumped 20 feet high! on to the tree!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Jumped 7 feet! Back on the ground!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Walked on water a little and disappeared</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And for the usage</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$jump </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Jump</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);   </span><span style=\"color:#6272A4\">// Ooh oo aa aa!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);    </span><span style=\"color:#6272A4\">// Jumped 20 feet high! on to the tree!</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);     </span><span style=\"color:#6272A4\">// Roaaar!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);      </span><span style=\"color:#6272A4\">// Jumped 7 feet! Back on the ground!</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);  </span><span style=\"color:#6272A4\">// Tuut tutt tuutt!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);   </span><span style=\"color:#6272A4\">// Walked on water a little and disappeared</span></span></code></pre>\n<h2 id=\"-strategy\">💡 Strategy</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Strategy pattern allows you to switch the algorithm or strategy based upon the situation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm’s behavior to be selected at runtime.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our example from above. First of all we have our strategy interface and different strategy implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> BubbleSortStrategy</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Sorting using bubble sort</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do sorting</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $dataset;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> QuickSortStrategy</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Sorting using quick sort</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do sorting</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $dataset;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then we have our client that is going to use any strategy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Sorter</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $sorter;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">SortStrategy</span><span style=\"color:#F8F8F2\"> $sorter)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $sorter;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$dataset </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">3</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">8</span><span style=\"color:#F8F8F2\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sorter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> BubbleSortStrategy</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset); </span><span style=\"color:#6272A4\">// Output : Sorting using bubble sort</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sorter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> QuickSortStrategy</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset); </span><span style=\"color:#6272A4\">// Output : Sorting using quick sort</span></span></code></pre>\n<h2 id=\"-state\">💢 State</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It lets you change the behavior of a class when the state changes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern’s superclass.\nThe state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern’s interface.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Let’s take an example of text editor, it lets you change the state of text that is typed i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc.</p>\n<p>First of all we have our state interface and some state implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> UpperCase</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#8BE9FD\"> strtoupper</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LowerCase</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#8BE9FD\"> strtolower</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DefaultText</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#F8F8F2\"> $words;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we have our editor</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TextEditor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WritingState</span><span style=\"color:#F8F8F2\"> $state)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WritingState</span><span style=\"color:#F8F8F2\"> $state)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$editor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TextEditor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> DefaultText</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">First line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> UpperCase</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Second line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Third line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> LowerCase</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Fourth line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Fifth line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// First line</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// SECOND LINE</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// THIRD LINE</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// fourth line</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// fifth line</span></span></code></pre>\n<h2 id=\"-template-method\">📒 Template Method</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Suppose we are getting some house built. The steps for building might look like</p>\n<ul>\n<li>Prepare the base of house</li>\n<li>Build the walls</li>\n<li>Add roof</li>\n<li>Add other floors</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>The order of these steps could never be changed i.e. you can’t build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Template method defines the skeleton of how a certain algorithm could be performed, but defers the implementation of those steps to the children classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm’s structure.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Imagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.</p>\n<p>First of all we have our base class that specifies the skeleton for the build algorithm</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Template method</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    final</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> build</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">test</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">lint</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">assemble</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">deploy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Then we can have our implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AndroidBuilder</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Running android tests</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Linting the android code</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Assembling the android build</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Deploying android build to server</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IosBuilder</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Running ios tests</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Linting the ios code</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Assembling the ios build</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Deploying ios build to server</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$androidBuilder </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> AndroidBuilder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$androidBuilder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Running android tests</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Linting the android code</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Assembling the android build</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Deploying android build to server</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$iosBuilder </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IosBuilder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$iosBuilder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Running ios tests</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Linting the ios code</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Assembling the ios build</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Deploying ios build to server</span></span></code></pre>\n<h2 id=\"wrap-up-folks\">Wrap Up Folks</h2>\n<p>And that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.</p>";

				const frontmatter$14 = {"title":"Design Patterns for Humans","description":"A language agnostic, ultra-simplified explanation to design patterns","authorId":"kamran","seo":{"title":"Design Patterns for Humans - roadmap.sh","description":"A language agnostic, ultra-simplified explanation to design patterns"},"isNew":false,"type":"textual","date":"2019-01-23T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$14 = "/workspace/src/data/guides/design-patterns-for-humans.md";
				const url$14 = undefined;
				function rawContent$14() {
					return "   \n                                   \n                                                                                   \n                  \n    \n                                                  \n                                                                                     \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nDesign patterns are solutions to recurring problems; **guidelines on how to tackle certain problems**. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.\n\n> Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems\n\nWikipedia describes them as\n\n> In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations.\n\n## Be Careful\n\nDevelopers, mostly beginners, make the mistake of over-thinking and forcing the design patterns which results in a horrible un-maintainable mess. The rule of thumb is to keep the codebase as simple as possible, once you start developing, you will start to see the patterns repeating in the codebase in which case you can go ahead and implement the relevant design patterns.\n\n- Design patterns are not a silver bullet to all your problems.\n- Do not try to force them; bad things are supposed to happen, if done so.\n- Keep in mind that design patterns are solutions **to** problems, not solutions **finding** problems; so don't overthink.\n- If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code.\n\n> Also note that the code samples below are in PHP-7, however this shouldn't stop you because the concepts are same anyways.\n\n## Types of Design Patterns\n\nThis guide is about Gang of Four (GoF) design patterns, which refers to the four authors of [the book which introduced these design patterns](https://en.wikipedia.org/wiki/Design_Patterns). There are three types of design patterns:\n\n- [Creational](#creational-design-patterns)\n- [Structural](#structural-design-patterns)\n- [Behavioral](#behavioral-design-patterns)\n\n## Creational Design Patterns\n\nIn plain words\n\n> Creational patterns are focused towards how to instantiate an object or group of related objects.\n\nWikipedia says\n\n> In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.\n\nThere are 6 types of Creational patterns\n\n- [Simple Factory](#-simple-factory)\n- [Factory Method](#-factory-method)\n- [Abstract Factory](#-abstract-factory)\n- [Builder](#-builder)\n- [Prototype](#-prototype)\n- [Singleton](#-singleton)\n\n## 🏠 Simple Factory\n\nReal world example\n\n> Consider, you are building a house and you need doors. You can either put on your carpenter clothes, bring some wood, glue, nails and all the tools required to build the door and start building it in your house or you can simply call the factory and get the built door delivered to you so that you don't need to learn anything about the door making or to deal with the mess that comes with making it.\n\nIn plain words\n\n> Simple factory simply generates an instance for client without exposing any instantiation logic to the client\n\nWikipedia says\n\n> In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be \"new\".\n\n**Programmatic Example**\n\nFirst of all we have a door interface and the implementation\n\n```php\ninterface Door\n{\n    public function getWidth(): float;\n    public function getHeight(): float;\n}\n\nclass WoodenDoor implements Door\n{\n    protected $width;\n    protected $height;\n\n    public function __construct(float $width, float $height)\n    {\n        $this->width = $width;\n        $this->height = $height;\n    }\n\n    public function getWidth(): float\n    {\n        return $this->width;\n    }\n\n    public function getHeight(): float\n    {\n        return $this->height;\n    }\n}\n```\n\nThen we have our door factory that makes the door and returns it\n\n```php\nclass DoorFactory\n{\n    public static function makeDoor($width, $height): Door\n    {\n        return new WoodenDoor($width, $height);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n// Make me a door of 100x200\n$door = DoorFactory::makeDoor(100, 200);\n\necho 'Width: ' . $door->getWidth();\necho 'Height: ' . $door->getHeight();\n\n// Make me a door of 50x100\n$door2 = DoorFactory::makeDoor(50, 100);\n```\n\n**When to Use?**\n\nWhen creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.\n\n## 🏭 Factory Method\n\nReal world example\n\n> Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people.\n\nIn plain words\n\n> It provides a way to delegate the instantiation logic to child classes.\n\nWikipedia says\n\n> In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.\n\n**Programmatic Example**\n\nTaking our hiring manager example above. First of all we have an interviewer interface and some implementations for it\n\n```php\ninterface Interviewer\n{\n    public function askQuestions();\n}\n\nclass Developer implements Interviewer\n{\n    public function askQuestions()\n    {\n        echo 'Asking about design patterns!';\n    }\n}\n\nclass CommunityExecutive implements Interviewer\n{\n    public function askQuestions()\n    {\n        echo 'Asking about community building';\n    }\n}\n```\n\nNow let us create our `HiringManager`\n\n```php\nabstract class HiringManager\n{\n\n    // Factory method\n    abstract protected function makeInterviewer(): Interviewer;\n\n    public function takeInterview()\n    {\n        $interviewer = $this->makeInterviewer();\n        $interviewer->askQuestions();\n    }\n}\n\n```\n\nNow any child can extend it and provide the required interviewer\n\n```php\nclass DevelopmentManager extends HiringManager\n{\n    protected function makeInterviewer(): Interviewer\n    {\n        return new Developer();\n    }\n}\n\nclass MarketingManager extends HiringManager\n{\n    protected function makeInterviewer(): Interviewer\n    {\n        return new CommunityExecutive();\n    }\n}\n```\n\nand then it can be used as\n\n```php\n$devManager = new DevelopmentManager();\n$devManager->takeInterview(); // Output: Asking about design patterns\n\n$marketingManager = new MarketingManager();\n$marketingManager->takeInterview(); // Output: Asking about community building.\n```\n\n**When to use?**\n\nUseful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn't know what exact sub-class it might need.\n\n## 🔨 Abstract Factory\n\nReal world example\n\n> Extending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter, iron door needs a welder etc.\n\nIn plain words\n\n> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.\n\nWikipedia says\n\n> The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes\n\n**Programmatic Example**\n\nTranslating the door example above. First of all we have our `Door` interface and some implementation for it\n\n```php\ninterface Door\n{\n    public function getDescription();\n}\n\nclass WoodenDoor implements Door\n{\n    public function getDescription()\n    {\n        echo 'I am a wooden door';\n    }\n}\n\nclass IronDoor implements Door\n{\n    public function getDescription()\n    {\n        echo 'I am an iron door';\n    }\n}\n```\n\nThen we have some fitting experts for each door type\n\n```php\ninterface DoorFittingExpert\n{\n    public function getDescription();\n}\n\nclass Welder implements DoorFittingExpert\n{\n    public function getDescription()\n    {\n        echo 'I can only fit iron doors';\n    }\n}\n\nclass Carpenter implements DoorFittingExpert\n{\n    public function getDescription()\n    {\n        echo 'I can only fit wooden doors';\n    }\n}\n```\n\nNow we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert\n\n```php\ninterface DoorFactory\n{\n    public function makeDoor(): Door;\n    public function makeFittingExpert(): DoorFittingExpert;\n}\n\n// Wooden factory to return carpenter and wooden door\nclass WoodenDoorFactory implements DoorFactory\n{\n    public function makeDoor(): Door\n    {\n        return new WoodenDoor();\n    }\n\n    public function makeFittingExpert(): DoorFittingExpert\n    {\n        return new Carpenter();\n    }\n}\n\n// Iron door factory to get iron door and the relevant fitting expert\nclass IronDoorFactory implements DoorFactory\n{\n    public function makeDoor(): Door\n    {\n        return new IronDoor();\n    }\n\n    public function makeFittingExpert(): DoorFittingExpert\n    {\n        return new Welder();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$woodenFactory = new WoodenDoorFactory();\n\n$door = $woodenFactory->makeDoor();\n$expert = $woodenFactory->makeFittingExpert();\n\n$door->getDescription();  // Output: I am a wooden door\n$expert->getDescription(); // Output: I can only fit wooden doors\n\n// Same for Iron Factory\n$ironFactory = new IronDoorFactory();\n\n$door = $ironFactory->makeDoor();\n$expert = $ironFactory->makeFittingExpert();\n\n$door->getDescription();  // Output: I am an iron door\n$expert->getDescription(); // Output: I can only fit iron doors\n```\n\nAs you can see the wooden door factory has encapsulated the `carpenter` and the `wooden door` also iron door factory has encapsulated the `iron door` and `welder`. And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.\n\n**When to use?**\n\nWhen there are interrelated dependencies with not-that-simple creation logic involved\n\n## 👷 Builder\n\nReal world example\n\n> Imagine you are at Hardee's and you order a specific deal, lets say, \"Big Hardee\" and they hand it over to you without _any questions_; this is the example of simple factory. But there are cases when the creation logic might involve more steps. For example you want a customized Subway deal, you have several options in how your burger is made e.g what bread do you want? what types of sauces would you like? What cheese would you want? etc. In such cases builder pattern comes to the rescue.\n\nIn plain words\n\n> Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.\n\nWikipedia says\n\n> The builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor anti-pattern.\n\nHaving said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:\n\n```php\npublic function __construct($size, $cheese = true, $pepperoni = true, $tomato = false, $lettuce = true)\n{\n}\n```\n\nAs you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.\n\n**Programmatic Example**\n\nThe sane alternative is to use the builder pattern. First of all we have our burger that we want to make\n\n```php\nclass Burger\n{\n    protected $size;\n\n    protected $cheese = false;\n    protected $pepperoni = false;\n    protected $lettuce = false;\n    protected $tomato = false;\n\n    public function __construct(BurgerBuilder $builder)\n    {\n        $this->size = $builder->size;\n        $this->cheese = $builder->cheese;\n        $this->pepperoni = $builder->pepperoni;\n        $this->lettuce = $builder->lettuce;\n        $this->tomato = $builder->tomato;\n    }\n}\n```\n\nAnd then we have the builder\n\n```php\nclass BurgerBuilder\n{\n    public $size;\n\n    public $cheese = false;\n    public $pepperoni = false;\n    public $lettuce = false;\n    public $tomato = false;\n\n    public function __construct(int $size)\n    {\n        $this->size = $size;\n    }\n\n    public function addPepperoni()\n    {\n        $this->pepperoni = true;\n        return $this;\n    }\n\n    public function addLettuce()\n    {\n        $this->lettuce = true;\n        return $this;\n    }\n\n    public function addCheese()\n    {\n        $this->cheese = true;\n        return $this;\n    }\n\n    public function addTomato()\n    {\n        $this->tomato = true;\n        return $this;\n    }\n\n    public function build(): Burger\n    {\n        return new Burger($this);\n    }\n}\n```\n\nAnd then it can be used as:\n\n```php\n$burger = (new BurgerBuilder(14))\n                    ->addPepperoni()\n                    ->addLettuce()\n                    ->addTomato()\n                    ->build();\n```\n\n**When to use?**\n\nWhen there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.\n\n## 🐑 Prototype\n\nReal world example\n\n> Remember dolly? The sheep that was cloned! Lets not get into the details but the key point here is that it is all about cloning\n\nIn plain words\n\n> Create object based on an existing object through cloning.\n\nWikipedia says\n\n> The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.\n\nIn short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.\n\n**Programmatic Example**\n\nIn PHP, it can be easily done using `clone`\n\n```php\nclass Sheep\n{\n    protected $name;\n    protected $category;\n\n    public function __construct(string $name, string $category = 'Mountain Sheep')\n    {\n        $this->name = $name;\n        $this->category = $category;\n    }\n\n    public function setName(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function setCategory(string $category)\n    {\n        $this->category = $category;\n    }\n\n    public function getCategory()\n    {\n        return $this->category;\n    }\n}\n```\n\nThen it can be cloned like below\n\n```php\n$original = new Sheep('Jolly');\necho $original->getName(); // Jolly\necho $original->getCategory(); // Mountain Sheep\n\n// Clone and modify what is required\n$cloned = clone $original;\n$cloned->setName('Dolly');\necho $cloned->getName(); // Dolly\necho $cloned->getCategory(); // Mountain sheep\n```\n\nAlso you could use the magic method `__clone` to modify the cloning behavior.\n\n**When to use?**\n\nWhen an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.\n\n## 💍 Singleton\n\nReal world example\n\n> There can only be one president of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.\n\nIn plain words\n\n> Ensures that only one object of a particular class is ever created.\n\nWikipedia says\n\n> In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\n\nSingleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.\n\n**Programmatic Example**\n\nTo create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance\n\n```php\nfinal class President\n{\n    private static $instance;\n\n    private function __construct()\n    {\n        // Hide the constructor\n    }\n\n    public static function getInstance(): President\n    {\n        if (!self::$instance) {\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    private function __clone()\n    {\n        // Disable cloning\n    }\n\n    private function __wakeup()\n    {\n        // Disable unserialize\n    }\n}\n```\n\nThen in order to use\n\n```php\n$president1 = President::getInstance();\n$president2 = President::getInstance();\n\nvar_dump($president1 === $president2); // true\n```\n\n## Structural Design Patterns\n\nIn plain words\n\n> Structural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering \"How to build a software component?\"\n\nWikipedia says\n\n> In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.\n\nThere are 7 types of structural patterns\n\n- [Adapter](#-adapter)\n- [Bridge](#-bridge)\n- [Composite](#-composite)\n- [Decorator](#-decorator)\n- [Facade](#-facade)\n- [Flyweight](#-flyweight)\n- [Proxy](#-proxy)\n\n## 🔌 Adapter\n\nReal world example\n\n> Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter.\n> Another example would be the famous power adapter; a three legged plug can't be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet.\n> Yet another example would be a translator translating words spoken by one person to another\n\nIn plain words\n\n> Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.\n\nWikipedia says\n\n> In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.\n\n**Programmatic Example**\n\nConsider a game where there is a hunter and he hunts lions.\n\nFirst we have an interface `Lion` that all types of lions have to implement\n\n```php\ninterface Lion\n{\n    public function roar();\n}\n\nclass AfricanLion implements Lion\n{\n    public function roar()\n    {\n    }\n}\n\nclass AsianLion implements Lion\n{\n    public function roar()\n    {\n    }\n}\n```\n\nAnd hunter expects any implementation of `Lion` interface to hunt.\n\n```php\nclass Hunter\n{\n    public function hunt(Lion $lion)\n    {\n        $lion->roar();\n    }\n}\n```\n\nNow let's say we have to add a `WildDog` in our game so that hunter can hunt that also. But we can't do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible\n\n```php\n// This needs to be added to the game\nclass WildDog\n{\n    public function bark()\n    {\n    }\n}\n\n// Adapter around wild dog to make it compatible with our game\nclass WildDogAdapter implements Lion\n{\n    protected $dog;\n\n    public function __construct(WildDog $dog)\n    {\n        $this->dog = $dog;\n    }\n\n    public function roar()\n    {\n        $this->dog->bark();\n    }\n}\n```\n\nAnd now the `WildDog` can be used in our game using `WildDogAdapter`.\n\n```php\n$wildDog = new WildDog();\n$wildDogAdapter = new WildDogAdapter($wildDog);\n\n$hunter = new Hunter();\n$hunter->hunt($wildDogAdapter);\n```\n\n## 🚡 Bridge\n\nReal world example\n\n> Consider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on the user's preferences? Bridge pattern allows you to do the second i.e.\n\n![With and without the bridge pattern](https://cloud.githubusercontent.com/assets/11269635/23065293/33b7aea0-f515-11e6-983f-98823c9845ee.png)\n\nIn Plain Words\n\n> Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy.\n\nWikipedia says\n\n> The bridge pattern is a design pattern used in software engineering that is meant to \"decouple an abstraction from its implementation so that the two can vary independently\"\n\n**Programmatic Example**\n\nTranslating our WebPage example from above. Here we have the `WebPage` hierarchy\n\n```php\ninterface WebPage\n{\n    public function __construct(Theme $theme);\n    public function getContent();\n}\n\nclass About implements WebPage\n{\n    protected $theme;\n\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n    }\n\n    public function getContent()\n    {\n        return \"About page in \" . $this->theme->getColor();\n    }\n}\n\nclass Careers implements WebPage\n{\n    protected $theme;\n\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n    }\n\n    public function getContent()\n    {\n        return \"Careers page in \" . $this->theme->getColor();\n    }\n}\n```\n\nAnd the separate theme hierarchy\n\n```php\n\ninterface Theme\n{\n    public function getColor();\n}\n\nclass DarkTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Dark Black';\n    }\n}\nclass LightTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Off white';\n    }\n}\nclass AquaTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Light blue';\n    }\n}\n```\n\nAnd both the hierarchies\n\n```php\n$darkTheme = new DarkTheme();\n\n$about = new About($darkTheme);\n$careers = new Careers($darkTheme);\n\necho $about->getContent(); // \"About page in Dark Black\";\necho $careers->getContent(); // \"Careers page in Dark Black\";\n```\n\n## 🌿 Composite\n\nReal world example\n\n> Every organization is composed of employees. Each of the employees has the same features i.e. has a salary, has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.\n\nIn plain words\n\n> Composite pattern lets clients treat the individual objects in a uniform manner.\n\nWikipedia says\n\n> In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to \"compose\" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.\n\n**Programmatic Example**\n\nTaking our employees example from above. Here we have different employee types\n\n```php\ninterface Employee\n{\n    public function __construct(string $name, float $salary);\n    public function getName(): string;\n    public function setSalary(float $salary);\n    public function getSalary(): float;\n    public function getRoles(): array;\n}\n\nclass Developer implements Employee\n{\n    protected $salary;\n    protected $name;\n    protected $roles;\n\n    public function __construct(string $name, float $salary)\n    {\n        $this->name = $name;\n        $this->salary = $salary;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setSalary(float $salary)\n    {\n        $this->salary = $salary;\n    }\n\n    public function getSalary(): float\n    {\n        return $this->salary;\n    }\n\n    public function getRoles(): array\n    {\n        return $this->roles;\n    }\n}\n\nclass Designer implements Employee\n{\n    protected $salary;\n    protected $name;\n    protected $roles;\n\n    public function __construct(string $name, float $salary)\n    {\n        $this->name = $name;\n        $this->salary = $salary;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setSalary(float $salary)\n    {\n        $this->salary = $salary;\n    }\n\n    public function getSalary(): float\n    {\n        return $this->salary;\n    }\n\n    public function getRoles(): array\n    {\n        return $this->roles;\n    }\n}\n```\n\nThen we have an organization which consists of several different types of employees\n\n```php\nclass Organization\n{\n    protected $employees;\n\n    public function addEmployee(Employee $employee)\n    {\n        $this->employees[] = $employee;\n    }\n\n    public function getNetSalaries(): float\n    {\n        $netSalary = 0;\n\n        foreach ($this->employees as $employee) {\n            $netSalary += $employee->getSalary();\n        }\n\n        return $netSalary;\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n// Prepare the employees\n$john = new Developer('John Doe', 12000);\n$jane = new Designer('Jane Doe', 15000);\n\n// Add them to organization\n$organization = new Organization();\n$organization->addEmployee($john);\n$organization->addEmployee($jane);\n\necho \"Net salaries: \" . $organization->getNetSalaries(); // Net Salaries: 27000\n```\n\n## ☕ Decorator\n\nReal world example\n\n> Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.\n\nIn plain words\n\n> Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.\n\nWikipedia says\n\n> In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.\n\n**Programmatic Example**\n\nLets take coffee for example. First of all we have a simple coffee implementing the coffee interface\n\n```php\ninterface Coffee\n{\n    public function getCost();\n    public function getDescription();\n}\n\nclass SimpleCoffee implements Coffee\n{\n    public function getCost()\n    {\n        return 10;\n    }\n\n    public function getDescription()\n    {\n        return 'Simple coffee';\n    }\n}\n```\n\nWe want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)\n\n```php\nclass MilkCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 2;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', milk';\n    }\n}\n\nclass WhipCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 5;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', whip';\n    }\n}\n\nclass VanillaCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 3;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', vanilla';\n    }\n}\n```\n\nLets make a coffee now\n\n```php\n$someCoffee = new SimpleCoffee();\necho $someCoffee->getCost(); // 10\necho $someCoffee->getDescription(); // Simple Coffee\n\n$someCoffee = new MilkCoffee($someCoffee);\necho $someCoffee->getCost(); // 12\necho $someCoffee->getDescription(); // Simple Coffee, milk\n\n$someCoffee = new WhipCoffee($someCoffee);\necho $someCoffee->getCost(); // 17\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip\n\n$someCoffee = new VanillaCoffee($someCoffee);\necho $someCoffee->getCost(); // 20\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip, vanilla\n```\n\n## 📦 Facade\n\nReal world example\n\n> How do you turn on the computer? \"Hit the power button\" you say! That is what you believe because you are using a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.\n\nIn plain words\n\n> Facade pattern provides a simplified interface to a complex subsystem.\n\nWikipedia says\n\n> A facade is an object that provides a simplified interface to a larger body of code, such as a class library.\n\n**Programmatic Example**\n\nTaking our computer example from above. Here we have the computer class\n\n```php\nclass Computer\n{\n    public function getElectricShock()\n    {\n        echo \"Ouch!\";\n    }\n\n    public function makeSound()\n    {\n        echo \"Beep beep!\";\n    }\n\n    public function showLoadingScreen()\n    {\n        echo \"Loading..\";\n    }\n\n    public function bam()\n    {\n        echo \"Ready to be used!\";\n    }\n\n    public function closeEverything()\n    {\n        echo \"Bup bup bup buzzzz!\";\n    }\n\n    public function sooth()\n    {\n        echo \"Zzzzz\";\n    }\n\n    public function pullCurrent()\n    {\n        echo \"Haaah!\";\n    }\n}\n```\n\nHere we have the facade\n\n```php\nclass ComputerFacade\n{\n    protected $computer;\n\n    public function __construct(Computer $computer)\n    {\n        $this->computer = $computer;\n    }\n\n    public function turnOn()\n    {\n        $this->computer->getElectricShock();\n        $this->computer->makeSound();\n        $this->computer->showLoadingScreen();\n        $this->computer->bam();\n    }\n\n    public function turnOff()\n    {\n        $this->computer->closeEverything();\n        $this->computer->pullCurrent();\n        $this->computer->sooth();\n    }\n}\n```\n\nNow to use the facade\n\n```php\n$computer = new ComputerFacade(new Computer());\n$computer->turnOn(); // Ouch! Beep beep! Loading.. Ready to be used!\n$computer->turnOff(); // Bup bup buzzz! Haah! Zzzzz\n```\n\n## 🍃 Flyweight\n\nReal world example\n\n> Did you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.\n\nIn plain words\n\n> It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.\n\nWikipedia says\n\n> In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.\n\n**Programmatic example**\n\nTranslating our tea example from above. First of all we have tea types and tea maker\n\n```php\n// Anything that will be cached is flyweight.\n// Types of tea here will be flyweights.\nclass KarakTea\n{\n}\n\n// Acts as a factory and saves the tea\nclass TeaMaker\n{\n    protected $availableTea = [];\n\n    public function make($preference)\n    {\n        if (empty($this->availableTea[$preference])) {\n            $this->availableTea[$preference] = new KarakTea();\n        }\n\n        return $this->availableTea[$preference];\n    }\n}\n```\n\nThen we have the `TeaShop` which takes orders and serves them\n\n```php\nclass TeaShop\n{\n    protected $orders;\n    protected $teaMaker;\n\n    public function __construct(TeaMaker $teaMaker)\n    {\n        $this->teaMaker = $teaMaker;\n    }\n\n    public function takeOrder(string $teaType, int $table)\n    {\n        $this->orders[$table] = $this->teaMaker->make($teaType);\n    }\n\n    public function serve()\n    {\n        foreach ($this->orders as $table => $tea) {\n            echo \"Serving tea to table# \" . $table;\n        }\n    }\n}\n```\n\nAnd it can be used as below\n\n```php\n$teaMaker = new TeaMaker();\n$shop = new TeaShop($teaMaker);\n\n$shop->takeOrder('less sugar', 1);\n$shop->takeOrder('more milk', 2);\n$shop->takeOrder('without sugar', 5);\n\n$shop->serve();\n// Serving tea to table# 1\n// Serving tea to table# 2\n// Serving tea to table# 5\n```\n\n## 🎱 Proxy\n\nReal world example\n\n> Have you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door's main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.\n\nIn plain words\n\n> Using the proxy pattern, a class represents the functionality of another class.\n\nWikipedia says\n\n> A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.\n\n**Programmatic Example**\n\nTaking our security door example from above. Firstly we have the door interface and an implementation of door\n\n```php\ninterface Door\n{\n    public function open();\n    public function close();\n}\n\nclass LabDoor implements Door\n{\n    public function open()\n    {\n        echo \"Opening lab door\";\n    }\n\n    public function close()\n    {\n        echo \"Closing the lab door\";\n    }\n}\n```\n\nThen we have a proxy to secure any doors that we want\n\n```php\nclass SecuredDoor\n{\n    protected $door;\n\n    public function __construct(Door $door)\n    {\n        $this->door = $door;\n    }\n\n    public function open($password)\n    {\n        if ($this->authenticate($password)) {\n            $this->door->open();\n        } else {\n            echo \"Big no! It ain't possible.\";\n        }\n    }\n\n    public function authenticate($password)\n    {\n        return $password === '$ecr@t';\n    }\n\n    public function close()\n    {\n        $this->door->close();\n    }\n}\n```\n\nAnd here is how it can be used\n\n```php\n$door = new SecuredDoor(new LabDoor());\n$door->open('invalid'); // Big no! It ain't possible.\n\n$door->open('$ecr@t'); // Opening lab door\n$door->close(); // Closing lab door\n```\n\nYet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method `__call()`. All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of `find` or `findOne` data was mapped to the required class objects and the object was returned instead of `Cursor`.\n\n## Behavioral Design Patterns\n\nIn plain words\n\n> It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don't just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering \"How to run a behavior in software component?\"\n\nWikipedia says\n\n> In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.\n\nThere are 10 types of behavioral design patterns\n\n- [Chain of Responsibility](#-chain-of-responsibility)\n- [Command](#-command)\n- [Iterator](#-iterator)\n- [Mediator](#-mediator)\n- [Memento](#-memento)\n- [Observer](#-observer)\n- [Visitor](#-visitor)\n- [Strategy](#-strategy)\n- [State](#-state)\n- [Template Method](#-template-method)\n\n## 🔗 Chain of Responsibility\n\nReal world example\n\n> For example, you have three payment methods (`A`, `B` and `C`) setup in your account; each having a different amount in it. `A` has 100 USD, `B` has 300 USD and `C` having 1000 USD and the preference for payments is chosen as `A` then `B` then `C`. You try to purchase something that is worth 210 USD. Using Chain of Responsibility, first of all account `A` will be checked if it can make the purchase, if yes purchase will be made and the chain will be broken. If not, request will move forward to account `B` checking for amount if yes chain will be broken otherwise the request will keep forwarding till it finds the suitable handler. Here `A`, `B` and `C` are links of the chain and the whole phenomenon is Chain of Responsibility.\n\nIn plain words\n\n> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler.\n\nWikipedia says\n\n> In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain.\n\n**Programmatic Example**\n\nTranslating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts\n\n```php\nabstract class Account\n{\n    protected $successor;\n    protected $balance;\n\n    public function setNext(Account $account)\n    {\n        $this->successor = $account;\n    }\n\n    public function pay(float $amountToPay)\n    {\n        if ($this->canPay($amountToPay)) {\n            echo sprintf('Paid %s using %s' . PHP_EOL, $amountToPay, get_called_class());\n        } elseif ($this->successor) {\n            echo sprintf('Cannot pay using %s. Proceeding ..' . PHP_EOL, get_called_class());\n            $this->successor->pay($amountToPay);\n        } else {\n            throw new Exception('None of the accounts have enough balance');\n        }\n    }\n\n    public function canPay($amount): bool\n    {\n        return $this->balance >= $amount;\n    }\n}\n\nclass Bank extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n\nclass Paypal extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n\nclass Bitcoin extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n```\n\nNow let's prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)\n\n```php\n// Let's prepare a chain like below\n//      $bank->$paypal->$bitcoin\n//\n// First priority bank\n//      If bank can't pay then paypal\n//      If paypal can't pay then bit coin\n\n$bank = new Bank(100);          // Bank with balance 100\n$paypal = new Paypal(200);      // Paypal with balance 200\n$bitcoin = new Bitcoin(300);    // Bitcoin with balance 300\n\n$bank->setNext($paypal);\n$paypal->setNext($bitcoin);\n\n// Let's try to pay using the first priority i.e. bank\n$bank->pay(259);\n\n// Output will be\n// ==============\n// Cannot pay using bank. Proceeding ..\n// Cannot pay using paypal. Proceeding ..:\n// Paid 259 using Bitcoin!\n```\n\n## 👮 Command\n\nReal world example\n\n> A generic example would be you ordering food at a restaurant. You (i.e. `Client`) ask the waiter (i.e. `Invoker`) to bring some food (i.e. `Command`) and waiter simply forwards the request to Chef (i.e. `Receiver`) who has the knowledge of what and how to cook.\n> Another example would be you (i.e. `Client`) switching on (i.e. `Command`) the television (i.e. `Receiver`) using a remote control (`Invoker`).\n\nIn plain words\n\n> Allows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client from receiver.\n\nWikipedia says\n\n> In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.\n\n**Programmatic Example**\n\nFirst of all we have the receiver that has the implementation of every action that could be performed\n\n```php\n// Receiver\nclass Bulb\n{\n    public function turnOn()\n    {\n        echo \"Bulb has been lit\";\n    }\n\n    public function turnOff()\n    {\n        echo \"Darkness!\";\n    }\n}\n```\n\nthen we have an interface that each of the commands are going to implement and then we have a set of commands\n\n```php\ninterface Command\n{\n    public function execute();\n    public function undo();\n    public function redo();\n}\n\n// Command\nclass TurnOn implements Command\n{\n    protected $bulb;\n\n    public function __construct(Bulb $bulb)\n    {\n        $this->bulb = $bulb;\n    }\n\n    public function execute()\n    {\n        $this->bulb->turnOn();\n    }\n\n    public function undo()\n    {\n        $this->bulb->turnOff();\n    }\n\n    public function redo()\n    {\n        $this->execute();\n    }\n}\n\nclass TurnOff implements Command\n{\n    protected $bulb;\n\n    public function __construct(Bulb $bulb)\n    {\n        $this->bulb = $bulb;\n    }\n\n    public function execute()\n    {\n        $this->bulb->turnOff();\n    }\n\n    public function undo()\n    {\n        $this->bulb->turnOn();\n    }\n\n    public function redo()\n    {\n        $this->execute();\n    }\n}\n```\n\nThen we have an `Invoker` with whom the client will interact to process any commands\n\n```php\n// Invoker\nclass RemoteControl\n{\n    public function submit(Command $command)\n    {\n        $command->execute();\n    }\n}\n```\n\nFinally let's see how we can use it in our client\n\n```php\n$bulb = new Bulb();\n\n$turnOn = new TurnOn($bulb);\n$turnOff = new TurnOff($bulb);\n\n$remote = new RemoteControl();\n$remote->submit($turnOn); // Bulb has been lit!\n$remote->submit($turnOff); // Darkness!\n```\n\nCommand pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the `undo` on all the executed commands.\n\n## ➿ Iterator\n\nReal world example\n\n> An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations.\n\nIn plain words\n\n> It presents a way to access the elements of an object without exposing the underlying presentation.\n\nWikipedia says\n\n> In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.\n\n**Programmatic example**\n\nIn PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have `RadioStation`\n\n```php\nclass RadioStation\n{\n    protected $frequency;\n\n    public function __construct(float $frequency)\n    {\n        $this->frequency = $frequency;\n    }\n\n    public function getFrequency(): float\n    {\n        return $this->frequency;\n    }\n}\n```\n\nThen we have our iterator\n\n```php\nuse Countable;\nuse Iterator;\n\nclass StationList implements Countable, Iterator\n{\n    /** @var RadioStation[] $stations */\n    protected $stations = [];\n\n    /** @var int $counter */\n    protected $counter;\n\n    public function addStation(RadioStation $station)\n    {\n        $this->stations[] = $station;\n    }\n\n    public function removeStation(RadioStation $toRemove)\n    {\n        $toRemoveFrequency = $toRemove->getFrequency();\n        $this->stations = array_filter($this->stations, function (RadioStation $station) use ($toRemoveFrequency) {\n            return $station->getFrequency() !== $toRemoveFrequency;\n        });\n    }\n\n    public function count(): int\n    {\n        return count($this->stations);\n    }\n\n    public function current(): RadioStation\n    {\n        return $this->stations[$this->counter];\n    }\n\n    public function key()\n    {\n        return $this->counter;\n    }\n\n    public function next()\n    {\n        $this->counter++;\n    }\n\n    public function rewind()\n    {\n        $this->counter = 0;\n    }\n\n    public function valid(): bool\n    {\n        return isset($this->stations[$this->counter]);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$stationList = new StationList();\n\n$stationList->addStation(new RadioStation(89));\n$stationList->addStation(new RadioStation(101));\n$stationList->addStation(new RadioStation(102));\n$stationList->addStation(new RadioStation(103.2));\n\nforeach($stationList as $station) {\n    echo $station->getFrequency() . PHP_EOL;\n}\n\n$stationList->removeStation(new RadioStation(89)); // Will remove station 89\n```\n\n## 👽 Mediator\n\nReal world example\n\n> A general example would be when you talk to someone on your mobile phone, there is a network provider sitting between you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.\n\nIn plain words\n\n> Mediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). It helps reduce the coupling between the classes communicating with each other. Because now they don't need to have the knowledge of each other's implementation.\n\nWikipedia says\n\n> In software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program's running behavior.\n\n**Programmatic Example**\n\nHere is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.\n\nFirst of all, we have the mediator i.e. the chat room\n\n```php\ninterface ChatRoomMediator\n{\n    public function showMessage(User $user, string $message);\n}\n\n// Mediator\nclass ChatRoom implements ChatRoomMediator\n{\n    public function showMessage(User $user, string $message)\n    {\n        $time = date('M d, y H:i');\n        $sender = $user->getName();\n\n        echo $time . '[' . $sender . ']:' . $message;\n    }\n}\n```\n\nThen we have our users i.e. colleagues\n\n```php\nclass User {\n    protected $name;\n    protected $chatMediator;\n\n    public function __construct(string $name, ChatRoomMediator $chatMediator) {\n        $this->name = $name;\n        $this->chatMediator = $chatMediator;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function send($message) {\n        $this->chatMediator->showMessage($this, $message);\n    }\n}\n```\n\nAnd the usage\n\n```php\n$mediator = new ChatRoom();\n\n$john = new User('John Doe', $mediator);\n$jane = new User('Jane Doe', $mediator);\n\n$john->send('Hi there!');\n$jane->send('Hey!');\n\n// Output will be\n// Feb 14, 10:58 [John]: Hi there!\n// Feb 14, 10:58 [Jane]: Hey!\n```\n\n## 💾 Memento\n\nReal world example\n\n> Take the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons (i.e. caretaker).\n\nIn plain words\n\n> Memento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on in a smooth manner.\n\nWikipedia says\n\n> The memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).\n\nUsually useful when you need to provide some sort of undo functionality.\n\n**Programmatic Example**\n\nLets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.\n\nFirst of all we have our memento object that will be able to hold the editor state\n\n```php\nclass EditorMemento\n{\n    protected $content;\n\n    public function __construct(string $content)\n    {\n        $this->content = $content;\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n}\n```\n\nThen we have our editor i.e. originator that is going to use memento object\n\n```php\nclass Editor\n{\n    protected $content = '';\n\n    public function type(string $words)\n    {\n        $this->content = $this->content . ' ' . $words;\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    public function save()\n    {\n        return new EditorMemento($this->content);\n    }\n\n    public function restore(EditorMemento $memento)\n    {\n        $this->content = $memento->getContent();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$editor = new Editor();\n\n// Type some stuff\n$editor->type('This is the first sentence.');\n$editor->type('This is second.');\n\n// Save the state to restore to : This is the first sentence. This is second.\n$saved = $editor->save();\n\n// Type some more\n$editor->type('And this is third.');\n\n// Output: Content before Saving\necho $editor->getContent(); // This is the first sentence. This is second. And this is third.\n\n// Restoring to last saved state\n$editor->restore($saved);\n\n$editor->getContent(); // This is the first sentence. This is second.\n```\n\n## 😎 Observer\n\nReal world example\n\n> A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity.\n\nIn plain words\n\n> Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.\n\nWikipedia says\n\n> The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\n\n**Programmatic example**\n\nTranslating our example from above. First of all we have job seekers that need to be notified for a job posting\n\n```php\nclass JobPost\n{\n    protected $title;\n\n    public function __construct(string $title)\n    {\n        $this->title = $title;\n    }\n\n    public function getTitle()\n    {\n        return $this->title;\n    }\n}\n\nclass JobSeeker implements Observer\n{\n    protected $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function onJobPosted(JobPost $job)\n    {\n        // Do something with the job posting\n        echo 'Hi ' . $this->name . '! New job posted: '. $job->getTitle();\n    }\n}\n```\n\nThen we have our job postings to which the job seekers will subscribe\n\n```php\nclass EmploymentAgency implements Observable\n{\n    protected $observers = [];\n\n    protected function notify(JobPost $jobPosting)\n    {\n        foreach ($this->observers as $observer) {\n            $observer->onJobPosted($jobPosting);\n        }\n    }\n\n    public function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    public function addJob(JobPost $jobPosting)\n    {\n        $this->notify($jobPosting);\n    }\n}\n```\n\nThen it can be used as\n\n```php\n// Create subscribers\n$johnDoe = new JobSeeker('John Doe');\n$janeDoe = new JobSeeker('Jane Doe');\n\n// Create publisher and attach subscribers\n$jobPostings = new EmploymentAgency();\n$jobPostings->attach($johnDoe);\n$jobPostings->attach($janeDoe);\n\n// Add a new job and see if subscribers get notified\n$jobPostings->addJob(new JobPost('Software Engineer'));\n\n// Output\n// Hi John Doe! New job posted: Software Engineer\n// Hi Jane Doe! New job posted: Software Engineer\n```\n\n## 🏃 Visitor\n\nReal world example\n\n> Consider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places to visit so that they can visit as much as they can without having to do any legwork.\n\nIn plain words\n\n> Visitor pattern lets you add further operations to objects without having to modify them.\n\nWikipedia says\n\n> In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.\n\n**Programmatic example**\n\nLet's take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let's translate this using visitor pattern\n\n```php\n// Visitee\ninterface Animal\n{\n    public function accept(AnimalOperation $operation);\n}\n\n// Visitor\ninterface AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey);\n    public function visitLion(Lion $lion);\n    public function visitDolphin(Dolphin $dolphin);\n}\n```\n\nThen we have our implementations for the animals\n\n```php\nclass Monkey implements Animal\n{\n    public function shout()\n    {\n        echo 'Ooh oo aa aa!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitMonkey($this);\n    }\n}\n\nclass Lion implements Animal\n{\n    public function roar()\n    {\n        echo 'Roaaar!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitLion($this);\n    }\n}\n\nclass Dolphin implements Animal\n{\n    public function speak()\n    {\n        echo 'Tuut tuttu tuutt!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitDolphin($this);\n    }\n}\n```\n\nLet's implement our visitor\n\n```php\nclass Speak implements AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey)\n    {\n        $monkey->shout();\n    }\n\n    public function visitLion(Lion $lion)\n    {\n        $lion->roar();\n    }\n\n    public function visitDolphin(Dolphin $dolphin)\n    {\n        $dolphin->speak();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$monkey = new Monkey();\n$lion = new Lion();\n$dolphin = new Dolphin();\n\n$speak = new Speak();\n\n$monkey->accept($speak);    // Ooh oo aa aa!\n$lion->accept($speak);      // Roaaar!\n$dolphin->accept($speak);   // Tuut tutt tuutt!\n```\n\nWe could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let's say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.\n\n```php\nclass Jump implements AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey)\n    {\n        echo 'Jumped 20 feet high! on to the tree!';\n    }\n\n    public function visitLion(Lion $lion)\n    {\n        echo 'Jumped 7 feet! Back on the ground!';\n    }\n\n    public function visitDolphin(Dolphin $dolphin)\n    {\n        echo 'Walked on water a little and disappeared';\n    }\n}\n```\n\nAnd for the usage\n\n```php\n$jump = new Jump();\n\n$monkey->accept($speak);   // Ooh oo aa aa!\n$monkey->accept($jump);    // Jumped 20 feet high! on to the tree!\n\n$lion->accept($speak);     // Roaaar!\n$lion->accept($jump);      // Jumped 7 feet! Back on the ground!\n\n$dolphin->accept($speak);  // Tuut tutt tuutt!\n$dolphin->accept($jump);   // Walked on water a little and disappeared\n```\n\n## 💡 Strategy\n\nReal world example\n\n> Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort.\n\nIn plain words\n\n> Strategy pattern allows you to switch the algorithm or strategy based upon the situation.\n\nWikipedia says\n\n> In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm's behavior to be selected at runtime.\n\n**Programmatic example**\n\nTranslating our example from above. First of all we have our strategy interface and different strategy implementations\n\n```php\ninterface SortStrategy\n{\n    public function sort(array $dataset): array;\n}\n\nclass BubbleSortStrategy implements SortStrategy\n{\n    public function sort(array $dataset): array\n    {\n        echo \"Sorting using bubble sort\";\n\n        // Do sorting\n        return $dataset;\n    }\n}\n\nclass QuickSortStrategy implements SortStrategy\n{\n    public function sort(array $dataset): array\n    {\n        echo \"Sorting using quick sort\";\n\n        // Do sorting\n        return $dataset;\n    }\n}\n```\n\nAnd then we have our client that is going to use any strategy\n\n```php\nclass Sorter\n{\n    protected $sorter;\n\n    public function __construct(SortStrategy $sorter)\n    {\n        $this->sorter = $sorter;\n    }\n\n    public function sort(array $dataset): array\n    {\n        return $this->sorter->sort($dataset);\n    }\n}\n```\n\nAnd it can be used as\n\n```php\n$dataset = [1, 5, 4, 3, 2, 8];\n\n$sorter = new Sorter(new BubbleSortStrategy());\n$sorter->sort($dataset); // Output : Sorting using bubble sort\n\n$sorter = new Sorter(new QuickSortStrategy());\n$sorter->sort($dataset); // Output : Sorting using quick sort\n```\n\n## 💢 State\n\nReal world example\n\n> Imagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.\n\nIn plain words\n\n> It lets you change the behavior of a class when the state changes.\n\nWikipedia says\n\n> The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern's superclass.\n> The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern's interface.\n\n**Programmatic example**\n\nLet's take an example of text editor, it lets you change the state of text that is typed i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc.\n\nFirst of all we have our state interface and some state implementations\n\n```php\ninterface WritingState\n{\n    public function write(string $words);\n}\n\nclass UpperCase implements WritingState\n{\n    public function write(string $words)\n    {\n        echo strtoupper($words);\n    }\n}\n\nclass LowerCase implements WritingState\n{\n    public function write(string $words)\n    {\n        echo strtolower($words);\n    }\n}\n\nclass DefaultText implements WritingState\n{\n    public function write(string $words)\n    {\n        echo $words;\n    }\n}\n```\n\nThen we have our editor\n\n```php\nclass TextEditor\n{\n    protected $state;\n\n    public function __construct(WritingState $state)\n    {\n        $this->state = $state;\n    }\n\n    public function setState(WritingState $state)\n    {\n        $this->state = $state;\n    }\n\n    public function type(string $words)\n    {\n        $this->state->write($words);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$editor = new TextEditor(new DefaultText());\n\n$editor->type('First line');\n\n$editor->setState(new UpperCase());\n\n$editor->type('Second line');\n$editor->type('Third line');\n\n$editor->setState(new LowerCase());\n\n$editor->type('Fourth line');\n$editor->type('Fifth line');\n\n// Output:\n// First line\n// SECOND LINE\n// THIRD LINE\n// fourth line\n// fifth line\n```\n\n## 📒 Template Method\n\nReal world example\n\n> Suppose we are getting some house built. The steps for building might look like\n>\n> - Prepare the base of house\n> - Build the walls\n> - Add roof\n> - Add other floors\n\n> The order of these steps could never be changed i.e. you can't build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.\n\nIn plain words\n\n> Template method defines the skeleton of how a certain algorithm could be performed, but defers the implementation of those steps to the children classes.\n\nWikipedia says\n\n> In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure.\n\n**Programmatic Example**\n\nImagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.\n\nFirst of all we have our base class that specifies the skeleton for the build algorithm\n\n```php\nabstract class Builder\n{\n\n    // Template method\n    final public function build()\n    {\n        $this->test();\n        $this->lint();\n        $this->assemble();\n        $this->deploy();\n    }\n\n    abstract public function test();\n    abstract public function lint();\n    abstract public function assemble();\n    abstract public function deploy();\n}\n```\n\nThen we can have our implementations\n\n```php\nclass AndroidBuilder extends Builder\n{\n    public function test()\n    {\n        echo 'Running android tests';\n    }\n\n    public function lint()\n    {\n        echo 'Linting the android code';\n    }\n\n    public function assemble()\n    {\n        echo 'Assembling the android build';\n    }\n\n    public function deploy()\n    {\n        echo 'Deploying android build to server';\n    }\n}\n\nclass IosBuilder extends Builder\n{\n    public function test()\n    {\n        echo 'Running ios tests';\n    }\n\n    public function lint()\n    {\n        echo 'Linting the ios code';\n    }\n\n    public function assemble()\n    {\n        echo 'Assembling the ios build';\n    }\n\n    public function deploy()\n    {\n        echo 'Deploying ios build to server';\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$androidBuilder = new AndroidBuilder();\n$androidBuilder->build();\n\n// Output:\n// Running android tests\n// Linting the android code\n// Assembling the android build\n// Deploying android build to server\n\n$iosBuilder = new IosBuilder();\n$iosBuilder->build();\n\n// Output:\n// Running ios tests\n// Linting the ios code\n// Assembling the ios build\n// Deploying ios build to server\n```\n\n## Wrap Up Folks\n\nAnd that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.\n";
				}
				async function compiledContent$14() {
					return await html$14();
				}
				function getHeadings$14() {
					return [{"depth":2,"slug":"be-careful","text":"Be Careful"},{"depth":2,"slug":"types-of-design-patterns","text":"Types of Design Patterns"},{"depth":2,"slug":"creational-design-patterns","text":"Creational Design Patterns"},{"depth":2,"slug":"-simple-factory","text":"🏠 Simple Factory"},{"depth":2,"slug":"-factory-method","text":"🏭 Factory Method"},{"depth":2,"slug":"-abstract-factory","text":"🔨 Abstract Factory"},{"depth":2,"slug":"-builder","text":"👷 Builder"},{"depth":2,"slug":"-prototype","text":"🐑 Prototype"},{"depth":2,"slug":"-singleton","text":"💍 Singleton"},{"depth":2,"slug":"structural-design-patterns","text":"Structural Design Patterns"},{"depth":2,"slug":"-adapter","text":"🔌 Adapter"},{"depth":2,"slug":"-bridge","text":"🚡 Bridge"},{"depth":2,"slug":"-composite","text":"🌿 Composite"},{"depth":2,"slug":"-decorator","text":"☕ Decorator"},{"depth":2,"slug":"-facade","text":"📦 Facade"},{"depth":2,"slug":"-flyweight","text":"🍃 Flyweight"},{"depth":2,"slug":"-proxy","text":"🎱 Proxy"},{"depth":2,"slug":"behavioral-design-patterns","text":"Behavioral Design Patterns"},{"depth":2,"slug":"-chain-of-responsibility","text":"🔗 Chain of Responsibility"},{"depth":2,"slug":"-command","text":"👮 Command"},{"depth":2,"slug":"-iterator","text":"➿ Iterator"},{"depth":2,"slug":"-mediator","text":"👽 Mediator"},{"depth":2,"slug":"-memento","text":"💾 Memento"},{"depth":2,"slug":"-observer","text":"😎 Observer"},{"depth":2,"slug":"-visitor","text":"🏃 Visitor"},{"depth":2,"slug":"-strategy","text":"💡 Strategy"},{"depth":2,"slug":"-state","text":"💢 State"},{"depth":2,"slug":"-template-method","text":"📒 Template Method"},{"depth":2,"slug":"wrap-up-folks","text":"Wrap Up Folks"}];
				}

				const Content$14 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$14;
					content.file = file$14;
					content.url = url$14;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$14())}`;
				});

const __vite_glob_0_30 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$14,
	compiledContent: compiledContent$14,
	default: Content$14,
	file: file$14,
	frontmatter: frontmatter$14,
	getHeadings: getHeadings$14,
	rawContent: rawContent$14,
	url: url$14
}, Symbol.toStringTag, { value: 'Module' }));

const html$13 = () => "<p><img src=\"https://assets.roadmap.sh/guest/best-devops-automation-tools-aoyls.jpg\" alt=\"DevOps Automation Tools\"></p>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> is like the ultimate team-up between development and operations teams, constantly looking to deliver software faster and more reliably. It all boils down to breaking silos, fostering collaboration, and continuously improving the development lifecycle. After all, developers and operations are just two sides of the same coin.</p>\n<p>Now, imagine trying to keep everything running smoothly but doing it manually—sounds like a recipe for chaos, right? <a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">Automation in DevOps</a> is crucial because it streamlines workflows and minimizes human intervention.</p>\n<p>In this article, we’ll dive into the <strong>6 best DevOps automation tools</strong> that can help you streamline your workflow and keep your projects on track. Here’s the full list of the tools we’ll be covering:</p>\n<ol>\n<li>GitHub Actions</li>\n<li>Jenkins</li>\n<li>Ansible</li>\n<li>Puppet</li>\n<li>Terraform</li>\n<li>AWS CloudFormation</li>\n</ol>\n<h2 id=\"criteria-for-selecting-the-best-devops-automation-tools\">Criteria for Selecting the Best DevOps Automation Tools</h2>\n<p>Choosing the right DevOps automation tools is crucial for optimizing your workflow and ensuring smooth operations. To help you navigate the vast landscape of available options, let’s break down the primary categories of automation tools that you’ll encounter in the DevOps ecosystem.</p>\n<h3 id=\"key-features-to-consider\">Key Features to Consider</h3>\n<p>Before diving into the actual DevOps automation tools, it’s important to keep in mind the key features that make a DevOps tool stand out.</p>\n<p>While we won’t delve into the specifics here, remember to consider aspects like:</p>\n<ul>\n<li><strong>Integration capabilities</strong>: how well do these tools work with others in the DevOps ecosystem? Considering we’re reviewing automation-related tools, the more and easier they integrate with other systems, the better they’ll be.</li>\n<li><strong>Scalability</strong>: how much automation can be done through these tools? How easy is it to grow that number? Scalability is a key feature for automation tools, as they’re expected to work unsupervised.</li>\n<li><strong>User-friendliness</strong>: UX is an important aspect of any tool, especially so for mission-critical systems. The easier they are to set up and maintain, the better.</li>\n<li><strong>Community support</strong>: an active community around a tool speaks volumes of the quality of that tool.</li>\n<li><strong>Documentation</strong>: any tool is worthless if it doesn’t have detailed and well-structured documentation.</li>\n<li><strong>Security features</strong>: understanding how easy these tools make it for the operations team to set up a secure environment will dictate how safe they are (in the context of this article).</li>\n</ul>\n<h3 id=\"categories-of-automation-tools\">Categories of Automation Tools</h3>\n<p>DevOps automation tools can be grouped into several categories, each addressing different aspects of the development process and operations lifecycle. Understanding these categories will help you identify which tools are best suited for your specific needs.</p>\n<h4 id=\"1-continuous-integrationcontinuous-deployment-cicd\">1. Continuous Integration/Continuous Deployment (CI/CD)</h4>\n<p>CI/CD tools are the backbone of modern DevOps practices. They automate the process of integrating code changes, running tests, and deploying applications. By streamlining these steps, CI/CD tools help ensure that code is consistently built, tested, and released with minimal manual intervention.</p>\n<h4 id=\"2-configuration-management\">2. Configuration Management</h4>\n<p>Configuration management tools focus on maintaining consistency across your infrastructure. They automate the setup, deployment, and management of servers and applications, ensuring that environments remain stable and reproducible. This category is essential for managing large-scale deployments and minimizing configuration drift.</p>\n<h4 id=\"3-infrastructure-as-code-iac\">3. Infrastructure as Code (IaC)</h4>\n<p>IaC tools are all about infrastructure management and infrastructure automation. This approach enables version control for your infra, reproducibility for your environments, and scalability, making it easier to provision and manage resources across different environments.</p>\n<h3 id=\"my-favorite-devops-automation-tools\">My Favorite DevOps Automation Tools</h3>\n<p>Alright, and before we go into the details of each tool, let me share my personal favorite ones.</p>\n<p>While all the tools we’re about to discuss are fantastic in their own right, there are three that have truly won my nerd heart: <strong>GitHub Actions</strong>, <strong>AWS CloudFormation</strong>, and <strong>Ansible</strong>.</p>\n<p><strong>GitHub Actions</strong> is like that all-in-one Swiss Army knife you didn’t know you needed—but now you can’t live without it. With a perfect <strong>5/5</strong> in Integration Capabilities, Scalability, User-Friendliness, and Community Support, it checks all the boxes effortlessly. I can’t remember how many times I’ve relied on it for setting up quick CI/CD pipelines with just a few clicks.</p>\n<p><strong>AWS CloudFormation</strong> is my go-to for managing AWS resources. It scores <strong>5/5</strong> in Integration Capabilities, Scalability, and Security Features, making it indispensable for anyone deeply embedded in the AWS ecosystem.</p>\n<p>Finally, <strong>Ansible</strong> takes the cake when it comes to configuration management and automation. With an outstanding <strong>5/5</strong> ratings across Integration Capabilities, Scalability, User-Friendliness, and Community Support, it’s no wonder Ansible is the go-to tool for so many other DevOps in the industry.</p>\n<p>The following table summarizes the data presented throughout this article:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-automation-tools-wns3s.png\" alt=\"DevOps Automation Tools\"></p>\n<p>Let’s now take a closer look at all the tools, and let you decide which ones are your favorite ones.</p>\n<h2 id=\"top-6-devops-automation-tools\">Top 6 DevOps Automation Tools</h2>\n<p>Now that we’ve covered the criteria for selecting the best DevOps automation tools, let’s dive into our top picks. Each tool is evaluated based on key features from the previous point:  integration capabilities, scalability, user-friendliness, community support, and security features.</p>\n<p>Get comfortable, because it’s going to be a long read.</p>\n<h3 id=\"1-github-actions\">1. GitHub Actions</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/github-actions-sddcg.png\" alt=\"Github Actions\"></p>\n<h4 id=\"overview\">Overview</h4>\n<p><strong>GitHub Actions</strong> is GitHub’s native continuous integration &#x26; continuous deployment (CI/CD)  tool, designed to automate your software workflows directly within your GitHub repositories. No matter where in the SDLC (Software Development Lifecycle) you are, GitHub Actions provides a seamless way to integrate these processes into your workflow.</p>\n<h4 id=\"integration-capabilities-55\">Integration Capabilities 5/5 ★★★★★</h4>\n<p>GitHub Actions shines when it comes to integration. Being part of GitHub, it naturally integrates with your repositories, issues, and pull requests. Plus, with a vast marketplace of pre-built actions, you can easily connect with tools like Slack, Docker, and AWS without breaking a sweat.</p>\n<h4 id=\"scalability-55\">Scalability 5/5 ★★★★★</h4>\n<p>Whether you’re a solo developer or part of a massive enterprise, GitHub Actions scales effortlessly. Its cloud-based runners can handle anything from small projects to large, complex workflows without skipping a beat.</p>\n<h4 id=\"user-friendliness-45\">User-Friendliness 4/5 ★★★★☆</h4>\n<p>While in theory, setting up GitHub Actions should be as easy as pie, in practice, it takes a while to understand their configuration syntax. The YAML syntax and extensive documentation make it accessible (although not trivially simple) even for those new to CI/CD. Plus, the GitHub interface provides a clear view of your workflows, making management a breeze.</p>\n<h4 id=\"community-support-and-documentation-55\">Community Support and Documentation 5/5 ★★★★★</h4>\n<p>With GitHub’s massive user base, community support is top-notch. You’ll find countless tutorials, forums, and GitHub-hosted actions to help you troubleshoot and enhance your workflows. The official documentation is comprehensive and regularly updated.</p>\n<h4 id=\"security-features-45\">Security Features 4/5 ★★★★☆</h4>\n<p>GitHub Actions offers robust security features, including encrypted secrets, granular permissions, and support for various authentication methods. While it’s secure out of the box, always stay updated with best practices to maintain optimal security.</p>\n<h3 id=\"2-jenkins\">2. Jenkins</h3>\n<p><a href=\"https://assets.roadmap.sh/guest/jenkins-3ns0g.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://assets.roadmap.sh/guest/jenkins-3ns0g.png\" alt=\"Jenkins CI\"></a></p>\n<h4 id=\"overview-1\">Overview</h4>\n<p><strong>Jenkins</strong> is one of the oldest and most popular open-source CI/CD tools in the DevOps landscape. Renowned for its flexibility, Jenkins allows you to automate virtually any part of your development pipeline with its extensive plugin ecosystem.</p>\n<h4 id=\"integration-capabilities-55--1\">Integration Capabilities 5/5 ★★★★★</h4>\n<p>Jenkins has an impressive array of plugins that enable integration with almost every tool you can think of—from version control systems like Git and SVN to containerization tools like Docker and Kubernetes. If it exists, there’s likely a Jenkins plugin for it.</p>\n<h4 id=\"scalability-45\">Scalability 4/5 ★★★★☆</h4>\n<p>Jenkins can handle large-scale projects with ease, especially when set up in a distributed architecture. However, managing numerous plugins and maintaining performance can require a bit more elbow grease compared to some newer tools.</p>\n<h4 id=\"user-friendliness-35\">User-Friendliness 3/5 ★★★☆☆</h4>\n<p>Jenkins offers immense flexibility, but this comes at the cost of a steeper learning curve. The user interface is functional but not the most intuitive, and setting up complex pipelines may require a good grasp of Jenkinsfile syntax. In other words, from the UX perspective, Jenkins tends to be geared towards advanced users.</p>\n<h4 id=\"community-support-and-documentation-55--1\">Community Support and Documentation 5/5 ★★★★★</h4>\n<p>With decades in the game, Jenkins has a vast and active community. You’ll find extensive documentation, countless plugins, and numerous forums and tutorials to help you navigate any challenges.</p>\n<h4 id=\"security-features-45--1\">Security Features 4/5 ★★★★☆</h4>\n<p>Jenkins provides essential security features like role-based access control, credentials management, and support for various authentication protocols. Regular updates and a proactive community help keep security tight.</p>\n<h3 id=\"3-ansible\">3. Ansible</h3>\n<p><a href=\"https://assets.roadmap.sh/guest/ansible-jxqvt.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://assets.roadmap.sh/guest/ansible-jxqvt.png\" alt=\"Ansible\"></a></p>\n<h4 id=\"overview-2\">Overview</h4>\n<p><strong>Ansible</strong> is a powerful automation tool focused on configuration management, application deployment, and task automation. It’s agentless architecture and simple syntax makes it a favorite among DevOps professionals.</p>\n<h4 id=\"integration-capabilities-55--2\">Integration Capabilities 5/5 ★★★★★</h4>\n<p>Ansible integrates seamlessly with a wide range of tools and platforms, including cloud providers like AWS, Azure, and Google Cloud, as well as container platforms like Docker and Kubernetes. Its modular design ensures compatibility with most environments.</p>\n<h4 id=\"scalability-55--1\">Scalability 5/5 ★★★★★</h4>\n<p>Ansible scales effortlessly from managing a handful of servers to thousands. Its push-based model simplifies scaling, allowing you to manage large infrastructures without the need for additional agents. You could say it was designed to scale.</p>\n<h4 id=\"user-friendliness-55\">User-Friendliness 5/5 ★★★★★</h4>\n<p>Ansible is known for its simplicity. The YAML-based playbooks are easy to write and understand, making them accessible even for those new to automation. The learning curve is gentle, and the clear documentation supports smooth adoption.</p>\n<h4 id=\"community-support-and-documentation-55--2\">Community Support and Documentation 5/5 ★★★★★</h4>\n<p>Ansible has a vibrant community and extensive documentation. From official guides to community-contributed modules and roles, you’ll find plenty of resources to help you understand Ansible and troubleshoot any issues.</p>\n<h4 id=\"security-features-45--2\">Security Features 4/5 ★★★★☆</h4>\n<p>Ansible includes several security features, such as encrypted secrets with Ansible Vault, SSH-based communication, and support for various authentication methods. While it’s secure by default, you can never be 100% sure, especially with tools that handle the lowest level of our infrastructure, so keep an eye out for best practices as well.</p>\n<h3 id=\"4-puppet\">4. Puppet</h3>\n<p><a href=\"https://assets.roadmap.sh/guest/puppet-cq4m0.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://assets.roadmap.sh/guest/puppet-cq4m0.png\" alt=\"\"></a></p>\n<h4 id=\"overview-3\">Overview</h4>\n<p><strong>Puppet</strong> is a robust configuration management tool designed to automate the provisioning, configuration, and management of infrastructure. It’s particularly well-suited for large and complex environments.</p>\n<h4 id=\"integration-capabilities-45\">Integration Capabilities 4/5 ★★★★☆</h4>\n<p>Puppet integrates well with a variety of platforms and tools, including major cloud providers, container platforms, and monitoring tools. Its API and plugin ecosystem extend its compatibility, though it may not be as extensive as some competitors.</p>\n<h4 id=\"scalability-55--2\">Scalability 5/5 ★★★★★</h4>\n<p>Puppet excels in scalability, making it ideal for managing really large infrastructures across multiple environments. Its client-server architecture and efficient resource management ensure smooth operations even at scale.</p>\n<h4 id=\"user-friendliness-45--1\">User-Friendliness 4/5 ★★★★☆</h4>\n<p>Puppet offers a user-friendly experience with its declarative language and comprehensive toolset. However, mastering Puppet’s intricacies can take some time, especially for those new to configuration management. Much like Jenkins in its category, you could say Puppet is the choice for advanced users.</p>\n<h4 id=\"community-support-and-documentation-45\">Community Support and Documentation 4/5 ★★★★☆</h4>\n<p>Puppet has a strong community and extensive documentation, including modules, tutorials, and forums. While not as large as some other communities, the available resources are highly valuable and well-maintained.</p>\n<h4 id=\"security-features-45--3\">Security Features 4/5 ★★★★☆</h4>\n<p>Puppet provides solid security features, including encrypted data handling, role-based access control, and compliance reporting. Regular updates and a focus on security best practices help maintain a secure environment.</p>\n<h3 id=\"5-terraform\">5. Terraform</h3>\n<p><a href=\"https://assets.roadmap.sh/guest/terraform-lapz6.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://assets.roadmap.sh/guest/terraform-lapz6.png\" alt=\"\"></a></p>\n<h4 id=\"overview-4\">Overview</h4>\n<p>If you’re talking about DevOps automation tools, Terraform is definitely up there on the list. <strong>Terraform</strong> by HashiCorp is a leading Infrastructure as Code (IaC) tool that enables you to define and provision infrastructure across various cloud providers using a declarative configuration language.</p>\n<h4 id=\"integration-capabilities-55--3\">Integration Capabilities 5/5 ★★★★★</h4>\n<p>Terraform’s extensive provider ecosystem allows it to integrate with almost any cloud service, platform, or tool you can think of. From AWS, Azure, and Google Cloud to Kubernetes, Docker, and even SaaS applications, Terraform is everywhere.</p>\n<h4 id=\"scalability-55--3\">Scalability 5/5 ★★★★★</h4>\n<p>Terraform scales beautifully, managing everything from small projects to large, multi-cloud infrastructures. Its modular approach and state management ensure that scaling up doesn’t introduce complexity or instability.</p>\n<h4 id=\"user-friendliness-45--2\">User-Friendliness 4/5 ★★★★☆</h4>\n<p>Terraform offers a straightforward syntax with HashiCorp Configuration Language (HCL), making it relatively easy to learn and use. While powerful, some advanced features may require a deeper understanding, but overall it’s user-friendly.</p>\n<h4 id=\"community-support-and-documentation-55--3\">Community Support and Documentation 5/5 ★★★★★</h4>\n<p>Terraform boasts a vibrant community and comprehensive documentation. With countless modules available in the Terraform Registry, along with tutorials and active forums, finding support and resources is a breeze.</p>\n<h4 id=\"security-features-45--4\">Security Features 4/5 ★★★★☆</h4>\n<p>Terraform emphasizes security with features like state encryption, integration with secret management tools, and support for various authentication methods. Proper configuration and adherence to best practices ensure a secure infrastructure.</p>\n<h3 id=\"6-aws-cloudformation\">6. AWS CloudFormation</h3>\n<p><a href=\"https://assets.roadmap.sh/guest/cloudformation-cd374.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://assets.roadmap.sh/guest/cloudformation-cd374.png\" alt=\"\"></a></p>\n<h4 id=\"overview-5\">Overview</h4>\n<p><strong>AWS CloudFormation</strong> is Amazon Web Services’ native IaC tool, allowing you to model and set up your AWS cloud infrastructure using templates written in JSON or YAML. It’s a go-to choice for those deeply embedded in the AWS ecosystem.</p>\n<h4 id=\"integration-capabilities-55--4\">Integration Capabilities 5/5 ★★★★★</h4>\n<p>CloudFormation integrates seamlessly with all AWS services, providing a unified experience for managing your AWS infrastructure. While it’s primarily AWS-focused, it can also work with third-party services through custom resources.</p>\n<h4 id=\"scalability-55--4\">Scalability 5/5 ★★★★★</h4>\n<p>Designed to handle the full scale of AWS environments, CloudFormation effortlessly manages everything from single instances to complex multi-region architectures. Its stack management ensures that scaling is both efficient and reliable.</p>\n<h4 id=\"user-friendliness-45--3\">User-Friendliness 4/5 ★★★★☆</h4>\n<p>CloudFormation offers a powerful way to manage AWS resources, but the complexity of some templates can be daunting. The AWS Management Console provides a user-friendly interface, and tools like the AWS CLI and SDKs enhance usability.</p>\n<h4 id=\"community-support-and-documentation-45--1\">Community Support and Documentation 4/5 ★★★★☆</h4>\n<p>AWS provides extensive documentation and a solid support ecosystem for CloudFormation. While the community is strong, it’s more niche compared to multi-cloud tools like Terraform. Nevertheless, AWS forums and third-party resources are quite helpful.</p>\n<h4 id=\"security-features-55\">Security Features 5/5 ★★★★★</h4>\n<p>Security is a strong suit for CloudFormation, with deep integration with AWS Identity and Access Management (IAM), support for encrypted parameters, and compliance with numerous industry standards. AWS’s robust security infrastructure further enhances CloudFormation’s security capabilities.</p>\n<h2 id=\"how-to-choose-the-right-devops-automation-tool-for-your-workflow\">How to Choose the Right DevOps Automation Tool for Your Workflow</h2>\n<p>Selecting the perfect DevOps automation tool can feel like a daunting task, especially if your decision will affect many others. Maybe you’re picking the DevOps automation tools for your team or maybe you’re the one deciding for the standards of the company.</p>\n<p>Truth is, when choosing a DevOps automation tool there are some essential factors to consider that have to align with your workflow and organizational needs. If that happens, then you can sleep comfortably at night, knowing you made the best possible choice for your specific context.</p>\n<p>Let’s take a look.</p>\n<h3 id=\"assessing-your-teams-needs\">Assessing Your Team’s Needs</h3>\n<p>Before diving headfirst into the sea of DevOps automation tools, it’s crucial to take a step back and assess what your team truly needs. It might seem obvious, but you’d be surprised how many times a choice is made out of familiarity with a tool rather than by taking into consideration the actual needs of the project.</p>\n<p>Understanding your project requirements and team size will set the foundation for making an informed choice.</p>\n<h4 id=\"1-project-requirements\">1. Project Requirements</h4>\n<ul>\n<li><strong>Type of Projects:</strong> Are you working on small, agile projects or large-scale, enterprise-level applications? Different tools excel in different scenarios.</li>\n<li><strong>Development Practices:</strong> Do you follow specific methodologies like Agile, Scrum, or Kanban? Ensure the tool supports your preferred workflow.</li>\n<li><strong>Deployment Frequency:</strong> High-frequency deployments require robust CI/CD tools like GitHub Actions or Jenkins to keep up with the pace.</li>\n<li><strong>Timeline</strong>: Do you have the time to learn a new skill? Is it better to go with something that gets the job done and is familiar to you vs. picking the ideal tool which has a steeper learning curve and will require you to spend some months fiddling around and making educated guesses.</li>\n</ul>\n<h4 id=\"2-team-size-and-expertise\">2. Team Size and Expertise</h4>\n<ul>\n<li><strong>Skill Level:</strong> If your team is new to DevOps, tools with a gentle learning curve like Ansible or GitHub Actions might be more suitable.</li>\n<li><strong>Resource Availability:</strong> Larger teams might benefit from more comprehensive tools with extensive features, while smaller teams might prefer lightweight solutions to avoid overcomplicating things.</li>\n<li><strong>Collaboration Needs:</strong> Consider how the tool facilitates teamwork. Features like shared dashboards and integrated communication can enhance collaboration.</li>\n</ul>\n<h3 id=\"considering-integration-with-existing-tools\">Considering Integration with Existing Tools</h3>\n<p>No one likes playing nice with others? Well, in the DevOps world, seamless integration is a must. Ensuring compatibility with your current tech stack can save you a lot of time and headaches down the road.</p>\n<h4 id=\"1-compatibility-with-existing-tools\">1. Compatibility with Existing Tools</h4>\n<ul>\n<li><strong>Version Control Systems:</strong> Ensure the automation tool integrates smoothly with your version control system, whether it’s GitHub, GitLab, or Bitbucket.</li>\n<li><strong>CI/CD Pipelines:</strong> If you’re already using certain CI/CD tools, check if your new tool can complement or replace them without causing disruptions.</li>\n<li><strong>Containerization and Orchestration:</strong> Tools like Docker and Kubernetes are staples in many DevOps workflows. Make sure your automation tool plays well with these technologies.</li>\n</ul>\n<h4 id=\"2-apis-and-extensibility\">2. APIs and Extensibility</h4>\n<ul>\n<li><strong>Custom Integrations:</strong> Look for tools that offer robust APIs, allowing you to create custom integrations tailored to your specific needs.</li>\n<li><strong>Plugin Ecosystems:</strong> Tools with extensive plugin libraries (like Jenkins) offer greater flexibility and the ability to extend functionality as needed.</li>\n</ul>\n<h3 id=\"evaluating-scalability-and-flexibility\">Evaluating Scalability and Flexibility</h3>\n<p>Your organization might be small now, but you’re playing the long game, and who knows what the future holds! Choosing DevOps automation tools that can scale and adapt as your company grows is essential for long-term success.</p>\n<h4 id=\"1-scalability\">1. Scalability</h4>\n<ul>\n<li><strong>Handling Increased Load:</strong> Ensure the tool can manage an increase in projects, users, and deployments without performance degradation.</li>\n<li><strong>Multi-Project Support:</strong> If you plan to expand your project portfolio, choose tools that can handle multiple projects efficiently.</li>\n</ul>\n<h4 id=\"2-flexibility\">2. Flexibility</h4>\n<ul>\n<li><strong>Customization Options:</strong> The ability to customize workflows, scripts, and configurations ensures the tool can adapt to your unique processes. This will make the tool useful in more situations/projects, giving you a higher ROI.</li>\n<li><strong>Support for Multiple Environments:</strong> Tools that support various environments (development, staging, production) offer greater flexibility in managing different stages of your projects.</li>\n</ul>\n<h3 id=\"budget-considerations\">Budget Considerations</h3>\n<p>Let’s face it—budget constraints are a reality for most organizations. Balancing the features you need with what you can afford sometimes feels like a balancing act.</p>\n<h4 id=\"1-cost-vs-features\">1. Cost vs. Features</h4>\n<ul>\n<li><strong>Free vs. Paid Plans:</strong> Many DevOps tools offer free tiers with basic features, which can be great for small teams or startups. Evaluate whether the paid features are worth the investment for your needs.</li>\n<li><strong>License Models:</strong> Understand the pricing structure—whether it’s based on the number of users, projects, or usage levels. Choose a model that aligns with your usage patterns.</li>\n</ul>\n<h4 id=\"2-total-cost-of-ownership-tco\">2. Total Cost of Ownership (TCO)</h4>\n<ul>\n<li><strong>Initial Setup Costs:</strong> Consider the time and resources required to implement and configure the tool.</li>\n<li><strong>Maintenance and Support:</strong> Factor in ongoing costs related to updates, support, and potential training for your team.</li>\n<li><strong>Hidden Costs:</strong> Watch out for additional costs like premium plugins, integrations, or storage fees that might not be apparent upfront.</li>\n</ul>\n<h3 id=\"quick-tips-for-choosing-the-right-tool\">Quick Tips for Choosing the Right Tool</h3>\n<p>With all of that said, you might still have some doubts about specific areas where multiple DevOps tools seem equivalent to each other, making it really hard to decide one over the other. At this stage, you can use some of the following techniques to help you make the final call:</p>\n<ol>\n<li><strong>List Your Priorities:</strong> Cut through all the fluff and identify which features are non-negotiable and which ones are nice to have. Evaluate if there is only one tool that properly gives you all the must-have ones, and go with that one.</li>\n<li><strong>Trial and Error:</strong> Take advantage of free trials or demo versions to test how well the tool fits your workflow before committing. Make a POC, test the tool out. In the end, you might find out that the documentation tells one story, and the actual implementation is very different.</li>\n<li><strong>Seek Feedback:</strong> Involve your team in the decision-making process to ensure the tool meets everyone’s needs and preferences. And if your team hasn’t heard of any of the options, check out online forums, or look for reviews (ideally bad ones) to understand what others have to say about them. In some situations, this is much better and faster than gathering all the information and making an informed decision on your own.</li>\n<li><strong>Stay Updated:</strong> The DevOps landscape is constantly evolving. Choose tools that are regularly updated and have a strong roadmap for future enhancements.</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Throughout this article, we’ve explored the <strong>6 best DevOps automation tools</strong> that can significantly streamline your workflow. From <strong>GitHub Actions</strong> and <strong>Jenkins</strong> to <strong>Ansible</strong>, <strong>Puppet</strong>, <strong>Terraform</strong>, and <strong>AWS CloudFormation</strong>, each tool offers unique strengths tailored to different aspects of the DevOps lifecycle.</p>\n<p>DevOps automation tools are essential because they <strong>enhance efficiency, help reduce errors</strong> (by taking care of the repetitive tasks instead of us)<strong>, accelerate delivery, improve collaboration, and ensure scalability.</strong></p>\n<p>In essence, these tools are the backbone of a successful DevOps strategy, enabling teams to deliver high-quality software.</p>\n<p>Adopting many of these <strong>DevOps automation tools</strong> can transform the way your team works, making your processes more efficient, reliable, and scalable.</p>\n<p>If you’re ready to take the next step in your DevOps journey, you should check out our <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps Roadmap</a> to get started on learning about these powerful automation tools and take your skills to the next level.</p>";

				const frontmatter$13 = {"title":"6 Best DevOps Automation Tools: Streamline your workflow","description":"Explore the best DevOps automation tools designed to optimize CI/CD, reduce manual tasks, and drive efficiency in your development cycle.","authorId":"fernando","excludedBySlug":"/devops/automation-tools","seo":{"title":"6 Best DevOps Automation Tools: Streamline your workflow","description":"Explore the best DevOps automation tools designed to optimize CI/CD, reduce manual tasks, and drive efficiency in your development cycle.","ogImageUrl":"https://assets.roadmap.sh/guest/best-devops-automation-tools-aoyls.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$13 = "/workspace/src/data/guides/devops-automation-tools.md";
				const url$13 = undefined;
				function rawContent$13() {
					return "   \n                                                                 \n                                                                                                                                                        \n                  \n                                          \n    \n                                                                   \n                                                                                                                                                          \n                                                                                      \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps Automation Tools](https://assets.roadmap.sh/guest/best-devops-automation-tools-aoyls.jpg)\n\n[DevOps](https://roadmap.sh/devops) is like the ultimate team-up between development and operations teams, constantly looking to deliver software faster and more reliably. It all boils down to breaking silos, fostering collaboration, and continuously improving the development lifecycle. After all, developers and operations are just two sides of the same coin.\n\nNow, imagine trying to keep everything running smoothly but doing it manually—sounds like a recipe for chaos, right? [Automation in DevOps](https://roadmap.sh/devops/automation) is crucial because it streamlines workflows and minimizes human intervention.\n\nIn this article, we’ll dive into the **6 best DevOps automation tools** that can help you streamline your workflow and keep your projects on track. Here’s the full list of the tools we’ll be covering:\n\n1. GitHub Actions\n2. Jenkins\n3. Ansible\n4. Puppet\n5. Terraform\n6. AWS CloudFormation\n\n## Criteria for Selecting the Best DevOps Automation Tools\n\nChoosing the right DevOps automation tools is crucial for optimizing your workflow and ensuring smooth operations. To help you navigate the vast landscape of available options, let's break down the primary categories of automation tools that you'll encounter in the DevOps ecosystem.\n\n### Key Features to Consider\n\nBefore diving into the actual DevOps automation tools, it's important to keep in mind the key features that make a DevOps tool stand out.\n\nWhile we won't delve into the specifics here, remember to consider aspects like:\n\n- **Integration capabilities**: how well do these tools work with others in the DevOps ecosystem? Considering we’re reviewing automation-related tools, the more and easier they integrate with other systems, the better they’ll be.\n- **Scalability**: how much automation can be done through these tools? How easy is it to grow that number? Scalability is a key feature for automation tools, as they’re expected to work unsupervised.\n- **User-friendliness**: UX is an important aspect of any tool, especially so for mission-critical systems. The easier they are to set up and maintain, the better.\n- **Community support**: an active community around a tool speaks volumes of the quality of that tool.\n- **Documentation**: any tool is worthless if it doesn’t have detailed and well-structured documentation.\n- **Security features**: understanding how easy these tools make it for the operations team to set up a secure environment will dictate how safe they are (in the context of this article).\n\n### Categories of Automation Tools\n\nDevOps automation tools can be grouped into several categories, each addressing different aspects of the development process and operations lifecycle. Understanding these categories will help you identify which tools are best suited for your specific needs.\n\n#### 1. Continuous Integration/Continuous Deployment (CI/CD)\n\nCI/CD tools are the backbone of modern DevOps practices. They automate the process of integrating code changes, running tests, and deploying applications. By streamlining these steps, CI/CD tools help ensure that code is consistently built, tested, and released with minimal manual intervention.\n\n#### 2. Configuration Management\n\nConfiguration management tools focus on maintaining consistency across your infrastructure. They automate the setup, deployment, and management of servers and applications, ensuring that environments remain stable and reproducible. This category is essential for managing large-scale deployments and minimizing configuration drift.\n\n#### 3. Infrastructure as Code (IaC)\n\nIaC tools are all about infrastructure management and infrastructure automation. This approach enables version control for your infra, reproducibility for your environments, and scalability, making it easier to provision and manage resources across different environments.\n\n### My Favorite DevOps Automation Tools\n\nAlright, and before we go into the details of each tool, let me share my personal favorite ones.\n\nWhile all the tools we're about to discuss are fantastic in their own right, there are three that have truly won my nerd heart: **GitHub Actions**, **AWS CloudFormation**, and **Ansible**.\n\n**GitHub Actions** is like that all-in-one Swiss Army knife you didn’t know you needed—but now you can’t live without it. With a perfect **5/5** in Integration Capabilities, Scalability, User-Friendliness, and Community Support, it checks all the boxes effortlessly. I can’t remember how many times I’ve relied on it for setting up quick CI/CD pipelines with just a few clicks.\n\n**AWS CloudFormation** is my go-to for managing AWS resources. It scores **5/5** in Integration Capabilities, Scalability, and Security Features, making it indispensable for anyone deeply embedded in the AWS ecosystem.\n\nFinally, **Ansible** takes the cake when it comes to configuration management and automation. With an outstanding **5/5** ratings across Integration Capabilities, Scalability, User-Friendliness, and Community Support, it’s no wonder Ansible is the go-to tool for so many other DevOps in the industry.\n\nThe following table summarizes the data presented throughout this article:\n\n![DevOps Automation Tools](https://assets.roadmap.sh/guest/devops-automation-tools-wns3s.png)\n\nLet’s now take a closer look at all the tools, and let you decide which ones are your favorite ones.\n\n## Top 6 DevOps Automation Tools\n\nNow that we've covered the criteria for selecting the best DevOps automation tools, let's dive into our top picks. Each tool is evaluated based on key features from the previous point:  integration capabilities, scalability, user-friendliness, community support, and security features.\n\nGet comfortable, because it’s going to be a long read.\n\n### 1. GitHub Actions\n\n![Github Actions](https://assets.roadmap.sh/guest/github-actions-sddcg.png)\n\n#### Overview\n\n**GitHub Actions** is GitHub's native continuous integration & continuous deployment (CI/CD)  tool, designed to automate your software workflows directly within your GitHub repositories. No matter where in the SDLC (Software Development Lifecycle) you are, GitHub Actions provides a seamless way to integrate these processes into your workflow.\n\n#### Integration Capabilities 5/5 ★★★★★\n\nGitHub Actions shines when it comes to integration. Being part of GitHub, it naturally integrates with your repositories, issues, and pull requests. Plus, with a vast marketplace of pre-built actions, you can easily connect with tools like Slack, Docker, and AWS without breaking a sweat.\n\n#### Scalability 5/5 ★★★★★\n\nWhether you're a solo developer or part of a massive enterprise, GitHub Actions scales effortlessly. Its cloud-based runners can handle anything from small projects to large, complex workflows without skipping a beat.\n\n#### User-Friendliness 4/5 ★★★★☆\n\nWhile in theory, setting up GitHub Actions should be as easy as pie, in practice, it takes a while to understand their configuration syntax. The YAML syntax and extensive documentation make it accessible (although not trivially simple) even for those new to CI/CD. Plus, the GitHub interface provides a clear view of your workflows, making management a breeze.\n\n#### Community Support and Documentation 5/5 ★★★★★\n\nWith GitHub's massive user base, community support is top-notch. You'll find countless tutorials, forums, and GitHub-hosted actions to help you troubleshoot and enhance your workflows. The official documentation is comprehensive and regularly updated.\n\n#### Security Features 4/5 ★★★★☆\n\nGitHub Actions offers robust security features, including encrypted secrets, granular permissions, and support for various authentication methods. While it's secure out of the box, always stay updated with best practices to maintain optimal security.\n\n### 2. Jenkins\n\n[![Jenkins CI](https://assets.roadmap.sh/guest/jenkins-3ns0g.png)](https://assets.roadmap.sh/guest/jenkins-3ns0g.png)\n\n#### Overview\n\n**Jenkins** is one of the oldest and most popular open-source CI/CD tools in the DevOps landscape. Renowned for its flexibility, Jenkins allows you to automate virtually any part of your development pipeline with its extensive plugin ecosystem.\n\n#### Integration Capabilities 5/5 ★★★★★\n\nJenkins has an impressive array of plugins that enable integration with almost every tool you can think of—from version control systems like Git and SVN to containerization tools like Docker and Kubernetes. If it exists, there's likely a Jenkins plugin for it.\n\n#### Scalability 4/5 ★★★★☆\n\nJenkins can handle large-scale projects with ease, especially when set up in a distributed architecture. However, managing numerous plugins and maintaining performance can require a bit more elbow grease compared to some newer tools.\n\n#### User-Friendliness 3/5 ★★★☆☆\n\nJenkins offers immense flexibility, but this comes at the cost of a steeper learning curve. The user interface is functional but not the most intuitive, and setting up complex pipelines may require a good grasp of Jenkinsfile syntax. In other words, from the UX perspective, Jenkins tends to be geared towards advanced users.\n\n#### Community Support and Documentation 5/5 ★★★★★\n\nWith decades in the game, Jenkins has a vast and active community. You'll find extensive documentation, countless plugins, and numerous forums and tutorials to help you navigate any challenges.\n\n#### Security Features 4/5 ★★★★☆\n\nJenkins provides essential security features like role-based access control, credentials management, and support for various authentication protocols. Regular updates and a proactive community help keep security tight.\n\n### 3. Ansible\n\n[![Ansible](https://assets.roadmap.sh/guest/ansible-jxqvt.png)](https://assets.roadmap.sh/guest/ansible-jxqvt.png)\n\n#### Overview\n\n**Ansible** is a powerful automation tool focused on configuration management, application deployment, and task automation. It's agentless architecture and simple syntax makes it a favorite among DevOps professionals.\n\n#### Integration Capabilities 5/5 ★★★★★\n\nAnsible integrates seamlessly with a wide range of tools and platforms, including cloud providers like AWS, Azure, and Google Cloud, as well as container platforms like Docker and Kubernetes. Its modular design ensures compatibility with most environments.\n\n#### Scalability 5/5 ★★★★★\n\nAnsible scales effortlessly from managing a handful of servers to thousands. Its push-based model simplifies scaling, allowing you to manage large infrastructures without the need for additional agents. You could say it was designed to scale.\n\n#### User-Friendliness 5/5 ★★★★★\n\nAnsible is known for its simplicity. The YAML-based playbooks are easy to write and understand, making them accessible even for those new to automation. The learning curve is gentle, and the clear documentation supports smooth adoption.\n\n#### Community Support and Documentation 5/5 ★★★★★\n\nAnsible has a vibrant community and extensive documentation. From official guides to community-contributed modules and roles, you'll find plenty of resources to help you understand Ansible and troubleshoot any issues.\n\n#### Security Features 4/5 ★★★★☆\n\nAnsible includes several security features, such as encrypted secrets with Ansible Vault, SSH-based communication, and support for various authentication methods. While it's secure by default, you can never be 100% sure, especially with tools that handle the lowest level of our infrastructure, so keep an eye out for best practices as well.\n\n### 4. Puppet\n\n[![](https://assets.roadmap.sh/guest/puppet-cq4m0.png)](https://assets.roadmap.sh/guest/puppet-cq4m0.png)\n\n#### Overview\n\n**Puppet** is a robust configuration management tool designed to automate the provisioning, configuration, and management of infrastructure. It's particularly well-suited for large and complex environments.\n\n#### Integration Capabilities 4/5 ★★★★☆\n\nPuppet integrates well with a variety of platforms and tools, including major cloud providers, container platforms, and monitoring tools. Its API and plugin ecosystem extend its compatibility, though it may not be as extensive as some competitors.\n\n#### Scalability 5/5 ★★★★★\n\nPuppet excels in scalability, making it ideal for managing really large infrastructures across multiple environments. Its client-server architecture and efficient resource management ensure smooth operations even at scale.\n\n#### User-Friendliness 4/5 ★★★★☆\n\nPuppet offers a user-friendly experience with its declarative language and comprehensive toolset. However, mastering Puppet's intricacies can take some time, especially for those new to configuration management. Much like Jenkins in its category, you could say Puppet is the choice for advanced users.\n\n#### Community Support and Documentation 4/5 ★★★★☆\n\nPuppet has a strong community and extensive documentation, including modules, tutorials, and forums. While not as large as some other communities, the available resources are highly valuable and well-maintained.\n\n#### Security Features 4/5 ★★★★☆\n\nPuppet provides solid security features, including encrypted data handling, role-based access control, and compliance reporting. Regular updates and a focus on security best practices help maintain a secure environment.\n\n### 5. Terraform\n\n[![](https://assets.roadmap.sh/guest/terraform-lapz6.png)](https://assets.roadmap.sh/guest/terraform-lapz6.png)\n\n#### Overview\n\nIf you’re talking about DevOps automation tools, Terraform is definitely up there on the list. **Terraform** by HashiCorp is a leading Infrastructure as Code (IaC) tool that enables you to define and provision infrastructure across various cloud providers using a declarative configuration language.\n\n#### Integration Capabilities 5/5 ★★★★★\n\nTerraform's extensive provider ecosystem allows it to integrate with almost any cloud service, platform, or tool you can think of. From AWS, Azure, and Google Cloud to Kubernetes, Docker, and even SaaS applications, Terraform is everywhere.\n\n#### Scalability 5/5 ★★★★★\n\nTerraform scales beautifully, managing everything from small projects to large, multi-cloud infrastructures. Its modular approach and state management ensure that scaling up doesn't introduce complexity or instability.\n\n#### User-Friendliness 4/5 ★★★★☆\n\nTerraform offers a straightforward syntax with HashiCorp Configuration Language (HCL), making it relatively easy to learn and use. While powerful, some advanced features may require a deeper understanding, but overall it's user-friendly.\n\n#### Community Support and Documentation 5/5 ★★★★★\n\nTerraform boasts a vibrant community and comprehensive documentation. With countless modules available in the Terraform Registry, along with tutorials and active forums, finding support and resources is a breeze.\n\n#### Security Features 4/5 ★★★★☆\n\nTerraform emphasizes security with features like state encryption, integration with secret management tools, and support for various authentication methods. Proper configuration and adherence to best practices ensure a secure infrastructure.\n\n### 6. AWS CloudFormation\n\n[![](https://assets.roadmap.sh/guest/cloudformation-cd374.png)](https://assets.roadmap.sh/guest/cloudformation-cd374.png)\n\n#### Overview\n\n**AWS CloudFormation** is Amazon Web Services' native IaC tool, allowing you to model and set up your AWS cloud infrastructure using templates written in JSON or YAML. It's a go-to choice for those deeply embedded in the AWS ecosystem.\n\n#### Integration Capabilities 5/5 ★★★★★\n\nCloudFormation integrates seamlessly with all AWS services, providing a unified experience for managing your AWS infrastructure. While it's primarily AWS-focused, it can also work with third-party services through custom resources.\n\n#### Scalability 5/5 ★★★★★\n\nDesigned to handle the full scale of AWS environments, CloudFormation effortlessly manages everything from single instances to complex multi-region architectures. Its stack management ensures that scaling is both efficient and reliable.\n\n#### User-Friendliness 4/5 ★★★★☆\n\nCloudFormation offers a powerful way to manage AWS resources, but the complexity of some templates can be daunting. The AWS Management Console provides a user-friendly interface, and tools like the AWS CLI and SDKs enhance usability.\n\n#### Community Support and Documentation 4/5 ★★★★☆\n\nAWS provides extensive documentation and a solid support ecosystem for CloudFormation. While the community is strong, it’s more niche compared to multi-cloud tools like Terraform. Nevertheless, AWS forums and third-party resources are quite helpful.\n\n#### Security Features 5/5 ★★★★★\n\nSecurity is a strong suit for CloudFormation, with deep integration with AWS Identity and Access Management (IAM), support for encrypted parameters, and compliance with numerous industry standards. AWS’s robust security infrastructure further enhances CloudFormation's security capabilities.\n\n## How to Choose the Right DevOps Automation Tool for Your Workflow\n\nSelecting the perfect DevOps automation tool can feel like a daunting task, especially if your decision will affect many others. Maybe you’re picking the DevOps automation tools for your team or maybe you’re the one deciding for the standards of the company.\n\nTruth is, when choosing a DevOps automation tool there are some essential factors to consider that have to align with your workflow and organizational needs. If that happens, then you can sleep comfortably at night, knowing you made the best possible choice for your specific context.\n\nLet’s take a look.\n\n### Assessing Your Team’s Needs\n\nBefore diving headfirst into the sea of DevOps automation tools, it’s crucial to take a step back and assess what your team truly needs. It might seem obvious, but you’d be surprised how many times a choice is made out of familiarity with a tool rather than by taking into consideration the actual needs of the project.\n\nUnderstanding your project requirements and team size will set the foundation for making an informed choice.\n\n#### 1. Project Requirements\n\n- **Type of Projects:** Are you working on small, agile projects or large-scale, enterprise-level applications? Different tools excel in different scenarios.\n- **Development Practices:** Do you follow specific methodologies like Agile, Scrum, or Kanban? Ensure the tool supports your preferred workflow.\n- **Deployment Frequency:** High-frequency deployments require robust CI/CD tools like GitHub Actions or Jenkins to keep up with the pace.\n- **Timeline**: Do you have the time to learn a new skill? Is it better to go with something that gets the job done and is familiar to you vs. picking the ideal tool which has a steeper learning curve and will require you to spend some months fiddling around and making educated guesses.\n\n#### 2. Team Size and Expertise\n\n- **Skill Level:** If your team is new to DevOps, tools with a gentle learning curve like Ansible or GitHub Actions might be more suitable.\n- **Resource Availability:** Larger teams might benefit from more comprehensive tools with extensive features, while smaller teams might prefer lightweight solutions to avoid overcomplicating things.\n- **Collaboration Needs:** Consider how the tool facilitates teamwork. Features like shared dashboards and integrated communication can enhance collaboration.\n\n### Considering Integration with Existing Tools\n\nNo one likes playing nice with others? Well, in the DevOps world, seamless integration is a must. Ensuring compatibility with your current tech stack can save you a lot of time and headaches down the road.\n\n#### 1. Compatibility with Existing Tools\n\n- **Version Control Systems:** Ensure the automation tool integrates smoothly with your version control system, whether it’s GitHub, GitLab, or Bitbucket.\n- **CI/CD Pipelines:** If you’re already using certain CI/CD tools, check if your new tool can complement or replace them without causing disruptions.\n- **Containerization and Orchestration:** Tools like Docker and Kubernetes are staples in many DevOps workflows. Make sure your automation tool plays well with these technologies.\n\n#### 2. APIs and Extensibility\n\n- **Custom Integrations:** Look for tools that offer robust APIs, allowing you to create custom integrations tailored to your specific needs.\n- **Plugin Ecosystems:** Tools with extensive plugin libraries (like Jenkins) offer greater flexibility and the ability to extend functionality as needed.\n\n### Evaluating Scalability and Flexibility\n\nYour organization might be small now, but you’re playing the long game, and who knows what the future holds\\! Choosing DevOps automation tools that can scale and adapt as your company grows is essential for long-term success.\n\n#### 1. Scalability\n\n- **Handling Increased Load:** Ensure the tool can manage an increase in projects, users, and deployments without performance degradation.\n- **Multi-Project Support:** If you plan to expand your project portfolio, choose tools that can handle multiple projects efficiently.\n\n#### 2. Flexibility\n\n- **Customization Options:** The ability to customize workflows, scripts, and configurations ensures the tool can adapt to your unique processes. This will make the tool useful in more situations/projects, giving you a higher ROI.\n- **Support for Multiple Environments:** Tools that support various environments (development, staging, production) offer greater flexibility in managing different stages of your projects.\n\n### Budget Considerations\n\nLet’s face it—budget constraints are a reality for most organizations. Balancing the features you need with what you can afford sometimes feels like a balancing act.\n\n#### 1. Cost vs. Features\n\n- **Free vs. Paid Plans:** Many DevOps tools offer free tiers with basic features, which can be great for small teams or startups. Evaluate whether the paid features are worth the investment for your needs.\n- **License Models:** Understand the pricing structure—whether it’s based on the number of users, projects, or usage levels. Choose a model that aligns with your usage patterns.\n\n#### 2. Total Cost of Ownership (TCO)\n\n- **Initial Setup Costs:** Consider the time and resources required to implement and configure the tool.\n- **Maintenance and Support:** Factor in ongoing costs related to updates, support, and potential training for your team.\n- **Hidden Costs:** Watch out for additional costs like premium plugins, integrations, or storage fees that might not be apparent upfront.\n\n### Quick Tips for Choosing the Right Tool\n\nWith all of that said, you might still have some doubts about specific areas where multiple DevOps tools seem equivalent to each other, making it really hard to decide one over the other. At this stage, you can use some of the following techniques to help you make the final call:\n\n1. **List Your Priorities:** Cut through all the fluff and identify which features are non-negotiable and which ones are nice to have. Evaluate if there is only one tool that properly gives you all the must-have ones, and go with that one.\n2. **Trial and Error:** Take advantage of free trials or demo versions to test how well the tool fits your workflow before committing. Make a POC, test the tool out. In the end, you might find out that the documentation tells one story, and the actual implementation is very different.\n3. **Seek Feedback:** Involve your team in the decision-making process to ensure the tool meets everyone’s needs and preferences. And if your team hasn’t heard of any of the options, check out online forums, or look for reviews (ideally bad ones) to understand what others have to say about them. In some situations, this is much better and faster than gathering all the information and making an informed decision on your own.\n4. **Stay Updated:** The DevOps landscape is constantly evolving. Choose tools that are regularly updated and have a strong roadmap for future enhancements.\n\n## Conclusion\n\nThroughout this article, we've explored the **6 best DevOps automation tools** that can significantly streamline your workflow. From **GitHub Actions** and **Jenkins** to **Ansible**, **Puppet**, **Terraform**, and **AWS CloudFormation**, each tool offers unique strengths tailored to different aspects of the DevOps lifecycle.\n\nDevOps automation tools are essential because they **enhance efficiency, help reduce errors** (by taking care of the repetitive tasks instead of us)**, accelerate delivery, improve collaboration, and ensure scalability.**\n\nIn essence, these tools are the backbone of a successful DevOps strategy, enabling teams to deliver high-quality software.\n\nAdopting many of these **DevOps automation tools** can transform the way your team works, making your processes more efficient, reliable, and scalable.\n\nIf you’re ready to take the next step in your DevOps journey, you should check out our [DevOps Roadmap](https://roadmap.sh/devops) to get started on learning about these powerful automation tools and take your skills to the next level.\n";
				}
				async function compiledContent$13() {
					return await html$13();
				}
				function getHeadings$13() {
					return [{"depth":2,"slug":"criteria-for-selecting-the-best-devops-automation-tools","text":"Criteria for Selecting the Best DevOps Automation Tools"},{"depth":3,"slug":"key-features-to-consider","text":"Key Features to Consider"},{"depth":3,"slug":"categories-of-automation-tools","text":"Categories of Automation Tools"},{"depth":4,"slug":"1-continuous-integrationcontinuous-deployment-cicd","text":"1. Continuous Integration/Continuous Deployment (CI/CD)"},{"depth":4,"slug":"2-configuration-management","text":"2. Configuration Management"},{"depth":4,"slug":"3-infrastructure-as-code-iac","text":"3. Infrastructure as Code (IaC)"},{"depth":3,"slug":"my-favorite-devops-automation-tools","text":"My Favorite DevOps Automation Tools"},{"depth":2,"slug":"top-6-devops-automation-tools","text":"Top 6 DevOps Automation Tools"},{"depth":3,"slug":"1-github-actions","text":"1. GitHub Actions"},{"depth":4,"slug":"overview","text":"Overview"},{"depth":4,"slug":"integration-capabilities-55","text":"Integration Capabilities 5/5 ★★★★★"},{"depth":4,"slug":"scalability-55","text":"Scalability 5/5 ★★★★★"},{"depth":4,"slug":"user-friendliness-45","text":"User-Friendliness 4/5 ★★★★☆"},{"depth":4,"slug":"community-support-and-documentation-55","text":"Community Support and Documentation 5/5 ★★★★★"},{"depth":4,"slug":"security-features-45","text":"Security Features 4/5 ★★★★☆"},{"depth":3,"slug":"2-jenkins","text":"2. Jenkins"},{"depth":4,"slug":"overview-1","text":"Overview"},{"depth":4,"slug":"integration-capabilities-55--1","text":"Integration Capabilities 5/5 ★★★★★"},{"depth":4,"slug":"scalability-45","text":"Scalability 4/5 ★★★★☆"},{"depth":4,"slug":"user-friendliness-35","text":"User-Friendliness 3/5 ★★★☆☆"},{"depth":4,"slug":"community-support-and-documentation-55--1","text":"Community Support and Documentation 5/5 ★★★★★"},{"depth":4,"slug":"security-features-45--1","text":"Security Features 4/5 ★★★★☆"},{"depth":3,"slug":"3-ansible","text":"3. Ansible"},{"depth":4,"slug":"overview-2","text":"Overview"},{"depth":4,"slug":"integration-capabilities-55--2","text":"Integration Capabilities 5/5 ★★★★★"},{"depth":4,"slug":"scalability-55--1","text":"Scalability 5/5 ★★★★★"},{"depth":4,"slug":"user-friendliness-55","text":"User-Friendliness 5/5 ★★★★★"},{"depth":4,"slug":"community-support-and-documentation-55--2","text":"Community Support and Documentation 5/5 ★★★★★"},{"depth":4,"slug":"security-features-45--2","text":"Security Features 4/5 ★★★★☆"},{"depth":3,"slug":"4-puppet","text":"4. Puppet"},{"depth":4,"slug":"overview-3","text":"Overview"},{"depth":4,"slug":"integration-capabilities-45","text":"Integration Capabilities 4/5 ★★★★☆"},{"depth":4,"slug":"scalability-55--2","text":"Scalability 5/5 ★★★★★"},{"depth":4,"slug":"user-friendliness-45--1","text":"User-Friendliness 4/5 ★★★★☆"},{"depth":4,"slug":"community-support-and-documentation-45","text":"Community Support and Documentation 4/5 ★★★★☆"},{"depth":4,"slug":"security-features-45--3","text":"Security Features 4/5 ★★★★☆"},{"depth":3,"slug":"5-terraform","text":"5. Terraform"},{"depth":4,"slug":"overview-4","text":"Overview"},{"depth":4,"slug":"integration-capabilities-55--3","text":"Integration Capabilities 5/5 ★★★★★"},{"depth":4,"slug":"scalability-55--3","text":"Scalability 5/5 ★★★★★"},{"depth":4,"slug":"user-friendliness-45--2","text":"User-Friendliness 4/5 ★★★★☆"},{"depth":4,"slug":"community-support-and-documentation-55--3","text":"Community Support and Documentation 5/5 ★★★★★"},{"depth":4,"slug":"security-features-45--4","text":"Security Features 4/5 ★★★★☆"},{"depth":3,"slug":"6-aws-cloudformation","text":"6. AWS CloudFormation"},{"depth":4,"slug":"overview-5","text":"Overview"},{"depth":4,"slug":"integration-capabilities-55--4","text":"Integration Capabilities 5/5 ★★★★★"},{"depth":4,"slug":"scalability-55--4","text":"Scalability 5/5 ★★★★★"},{"depth":4,"slug":"user-friendliness-45--3","text":"User-Friendliness 4/5 ★★★★☆"},{"depth":4,"slug":"community-support-and-documentation-45--1","text":"Community Support and Documentation 4/5 ★★★★☆"},{"depth":4,"slug":"security-features-55","text":"Security Features 5/5 ★★★★★"},{"depth":2,"slug":"how-to-choose-the-right-devops-automation-tool-for-your-workflow","text":"How to Choose the Right DevOps Automation Tool for Your Workflow"},{"depth":3,"slug":"assessing-your-teams-needs","text":"Assessing Your Team’s Needs"},{"depth":4,"slug":"1-project-requirements","text":"1. Project Requirements"},{"depth":4,"slug":"2-team-size-and-expertise","text":"2. Team Size and Expertise"},{"depth":3,"slug":"considering-integration-with-existing-tools","text":"Considering Integration with Existing Tools"},{"depth":4,"slug":"1-compatibility-with-existing-tools","text":"1. Compatibility with Existing Tools"},{"depth":4,"slug":"2-apis-and-extensibility","text":"2. APIs and Extensibility"},{"depth":3,"slug":"evaluating-scalability-and-flexibility","text":"Evaluating Scalability and Flexibility"},{"depth":4,"slug":"1-scalability","text":"1. Scalability"},{"depth":4,"slug":"2-flexibility","text":"2. Flexibility"},{"depth":3,"slug":"budget-considerations","text":"Budget Considerations"},{"depth":4,"slug":"1-cost-vs-features","text":"1. Cost vs. Features"},{"depth":4,"slug":"2-total-cost-of-ownership-tco","text":"2. Total Cost of Ownership (TCO)"},{"depth":3,"slug":"quick-tips-for-choosing-the-right-tool","text":"Quick Tips for Choosing the Right Tool"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$13 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$13;
					content.file = file$13;
					content.url = url$13;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$13())}`;
				});

const __vite_glob_0_31 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$13,
	compiledContent: compiledContent$13,
	default: Content$13,
	file: file$13,
	frontmatter: frontmatter$13,
	getHeadings: getHeadings$13,
	rawContent: rawContent$13,
	url: url$13
}, Symbol.toStringTag, { value: 'Module' }));

const html$12 = () => "<p><img src=\"https://assets.roadmap.sh/guest/what-is-devops-automation-03k11.jpg\" alt=\"What is DevOps Automation?\"></p>\n<p>DevOps Automation is all about using technology to streamline and enhance the processes involved in software development and IT operations. By automating repetitive tasks, teams can focus more on innovation and less on manual work, in other words, making the job fun and interesting while delivering the boring parts at the same time.</p>\n<p>In this article, we’ll explore what DevOps Automation really is, its key components, the benefits it offers, and the best <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> practices you should follow to get the most out of it.</p>\n<h2 id=\"what-is-devops-automation\">What is DevOps Automation?</h2>\n<p>DevOps Automation refers to the use of <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">automation tools</a> and scripts to automate the different stages of the DevOps lifecycle and many aspects of the software development life cycle. This includes everything from code integration and application deployment to infrastructure management and monitoring.</p>\n<p>Automation is one of the key methodologies that help you ensure that these processes are, in the end, efficient, consistent, and reliable.</p>\n<h2 id=\"key-devops-processes-to-automate\">Key DevOps Processes to Automate</h2>\n<p>The following key DevOps processes are the core of what automation in the DevOps space is:</p>\n<ul>\n<li><strong>Continuous Integration/Continuous Deployment (CI/CD):</strong> Automates the process of integrating code changes and deploying them to production.</li>\n<li><strong>Infrastructure Management:</strong> Uses code to manage and provision infrastructure, ensuring consistency across environments.</li>\n<li><strong>Monitoring:</strong> Automatically tracks system performance and alerts DevOps teams to any issues.</li>\n</ul>\n<h2 id=\"components-of-devops-automation\">Components of DevOps Automation</h2>\n<p>DevOps Automation isn’t just a single tool or process—it’s a collection of various components that work together to streamline and enhance your development and operations workflows. Let’s dive deeper into these key components to understand how they contribute to a robust DevOps strategy.</p>\n<h3 id=\"1-continuous-integration-ci\">1. Continuous Integration (CI)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-integration1-cw7ms.png\" alt=\"Continuous Integration\"></p>\n<p>Continuous Integration (CI) is all about integrating code changes into a shared repository frequently, often multiple times a day. This practice helps detect issues early in the development cycle, making it easier to address them before they become bigger problems.</p>\n<ul>\n<li><strong>How It Works:</strong> Developers commit their code changes to a central repository. Automated tools then build the application and run a suite of tests (like unit tests and integration tests) to ensure that the new code doesn’t break existing functionality.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li><strong>Early Detection of Bugs:</strong> By integrating and testing code regularly, teams can identify and fix bugs quickly.</li>\n<li><strong>Reduced Integration Problems:</strong> Frequent integrations minimize the complexity and effort required to merge changes from different developers.</li>\n<li><strong>Improved Code Quality:</strong> Automated testing ensures that code meets quality standards before it’s merged.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-continuous-deployment-cd\">2. Continuous Deployment (CD)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-deployment1-xqyc2.png\" alt=\"Continuous Deployment\"></p>\n<p>Continuous Deployment (CD) takes CI a step further by automatically deploying code changes to production once they pass all the necessary tests.</p>\n<ul>\n<li><strong>How It Works:</strong> After the CI process successfully builds and tests the code, the CD pipeline automatically deploys the changes to the live environment without manual intervention.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li><strong>Faster Time-to-Market:</strong> With the automation in place, you significantly reduce the time it takes to deploy changes into production, thus keeping your product competitive.</li>\n<li><strong>Reduced Risk of Deployments:</strong> Automated deployments minimize human errors, ensuring that deployments are consistent and reliable.</li>\n<li><strong>Continuous Feedback:</strong> Rapid deployments allow for quicker feedback from users, enabling faster iterations and improvements.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-infrastructure-as-code-iac\">3. Infrastructure as Code (IaC)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/infrastructure-as-code1-ly5zn.png\" alt=\"Infrastructure as Code\"></p>\n<p>Infrastructure as Code (IaC) is the practice of managing and provisioning your IT infrastructure through machine-readable code rather than manual processes.</p>\n<ul>\n<li><strong>How It Works:</strong> Automation tools like Terraform, Ansible, or AWS CloudFormation allow you to define your infrastructure (servers, databases, networks, etc.) in code. This code can be stored in version control systems, reviewed, and reused across different environments.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li><strong>Consistency Across Environments:</strong> Ensures that development, testing, and production environments are identical, reducing the so-called “it works on my machine” syndrome.</li>\n<li><strong>Versioning your infrastructure:</strong> Changes to infrastructure can be tracked, reviewed, and rolled back if necessary, just like application code.</li>\n<li><strong>Scalability:</strong> Easily scale your infrastructure up or down by modifying the code, making it adaptable to changing needs.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-automated-testing\">4. Automated Testing</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/automated-test-execution-0uwu9.png\" alt=\"Automated Testing\"></p>\n<p>Automated testing involves using software tools to run tests on your code automatically. This ensures that your application behaves as expected and maintains high quality as it evolves.</p>\n<ul>\n<li><strong>How It Works:</strong> Automated tests (such as unit tests, integration tests, and end-to-end tests) are written alongside your code. These tests are executed automatically during the CI/CD pipeline to verify that new changes don’t introduce bugs or regressions.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li><strong>Enhanced Code Quality:</strong> Regular automated testing catches bugs early, ensuring that only reliable code reaches production.</li>\n<li><strong>Faster Feedback:</strong> Developers receive immediate feedback on their code changes, allowing for quicker iterations and improvements.</li>\n<li><strong>Efficiency:</strong> Automating repetitive testing tasks saves time and allows teams to focus on more complex testing scenarios and feature development.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-monitoring-and-logging\">5. Monitoring and Logging</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/server-monitoring-logging-ye24z.png\" alt=\"Monitoring and Logging\"></p>\n<p>Monitoring and logging are essential for maintaining the health and performance of your applications and infrastructure. They provide real-time insights and historical data that help you troubleshoot issues and optimize performance.</p>\n<ul>\n<li><strong>How It Works:</strong> Monitoring tools continuously track various metrics (like CPU usage, memory consumption, and response times) and logs from your applications and infrastructure. These tools can alert teams to potential issues and even trigger automated responses to certain conditions.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li><strong>Proactive Issue Detection:</strong> Real-time monitoring helps identify and address problems before they impact users.</li>\n<li><strong>Automated Responses:</strong> Triggering automated actions (like scaling resources during traffic spikes or restarting services after a crash) ensures that your systems remain resilient and performant without manual intervention.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"benefits-of-devops-automation\">Benefits of DevOps Automation</h3>\n<p>DevOps automation provides many benefits, including as already mentioned, the side effect of removing humans from almost the entire DevOps workflow, thus reducing the chances of human error and granting DevOps operators more time to focus on more interesting activities.</p>\n<p>However, there are more benefits than just reduced chance of errors. In fact, the following list covers some of the most relevant ones:</p>\n<ul>\n<li><strong>Increased Speed and Efficiency:</strong> Automated processes run faster and on time, every time, allowing for faster development and deployment cycles.</li>\n<li><strong>Enhanced Collaboration Between Teams:</strong> Streamlines workflows, making it easier for development and operations teams to work together. This is, in fact, one of the core <a href=\"https://roadmap.sh/devops/principles\" target=\"_blank\">principles of the DevOps practice</a>.</li>\n<li><strong>Faster Time-to-Market:</strong> Everything covered so far helps accelerate the delivery of features and updates, keeping your products competitive.</li>\n</ul>\n<h2 id=\"best-practices-for-devops-automation\">Best Practices for DevOps Automation</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-best-practices-rizoz.png\" alt=\"Best Practices for DevOps Automation\"></p>\n<h3 id=\"start-with-clear-objectives\">Start with Clear Objectives</h3>\n<p>Automation for the sake of automation makes no sense. Before diving into automation, it’s essential that you define your goals.</p>\n<p>What are you looking to achieve? Whether it’s reducing deployment times, improving code quality, or enhancing collaboration, having clear objectives will guide the rest of your automation strategies and ensure they align with your business goals.</p>\n<h3 id=\"automate-repetitive-and-time-consuming-tasks\">Automate Repetitive and Time-Consuming Tasks</h3>\n<p>Identifying the repetitive and manual tasks (especially the ones that take a long time to complete) is a crucial next step to understanding what can and should be automated. In fact, these tasks should be the first set of candidates to be automated, as they are directly consuming the time of your teammates with activities that can obviously be done by a machine.</p>\n<p>By automating these tasks, you are effectively freeing up your team to focus on more strategic and creative work, enhancing overall productivity.</p>\n<h3 id=\"implement-continuous-integration-and-deployment\">Implement Continuous Integration and Deployment</h3>\n<p>Whenever possible, code changes and the corresponding production deployment should be something that happens automatically with the least amount of human intervention possible.</p>\n<p>This is because it’s such a critical task for any product, that it needs to be 100% reliable and efficient. In other words, it should always work, whether you do it once a week or 5 times on the same day, and it should always be performed as fast as possible.</p>\n<p>This not only speeds up the development process but also ensures that any issues are detected and addressed promptly. CI tools usually offer the option of a rollback, in case something goes wrong. This is another key best practice, as errors will undoubtedly reach production, no matter how much we plan to avoid it, so it’s better to be prepared than to ignore the possibility and then have to manually perform rollbacks, or even worse, apply fixes directly in production.</p>\n<h3 id=\"use-infrastructure-as-code-iac\">Use Infrastructure as Code (IaC)</h3>\n<p>Managing your infrastructure can be a daunting task for projects that have a complex architecture.</p>\n<p>With IaC DevOps operators can manage the infra through code ensuring consistency across all environments.</p>\n<p>Thanks to the “code” part of IaC, you can version control your infrastructure, making it easier to reproduce environments and roll back changes if needed.</p>\n<h3 id=\"ensure-proper-monitoring-and-logging\">Ensure Proper Monitoring and Logging</h3>\n<p>Implement comprehensive monitoring solutions to keep an eye on your applications and infrastructure is a key DevOps automation practice.</p>\n<p>After all, if you plan to improve, you need to measure, right?</p>\n<p>In the same train of thought, effective logging helps you gain valuable insights and troubleshoot issues in your platform, ensuring your systems run smoothly for as long as possible.</p>\n<h3 id=\"foster-a-culture-of-collaboration-and-continuous-improvement\">Foster a Culture of Collaboration and Continuous Improvement</h3>\n<p>Break with the idea that developers and operations should not work together side-by-side, and instead encourage open communication between both teams.</p>\n<p>Promote a culture of continuous learning and adaptation, where teams regularly review and improve their processes based on feedback and new insights.</p>\n<h3 id=\"integrate-security-into-the-automation-process-devsecops\">Integrate Security into the Automation Process (DevSecOps)</h3>\n<p>Security should be an integral part of your DevOps pipeline and adding automation tools into the mix should not affect that.</p>\n<p>Make sure to embed security practices within your DevOps automation processes and automate security testing and compliance checks to ensure that your applications are secure from the ground up.</p>\n<h3 id=\"address-and-eliminate-toil\">Address and Eliminate Toil</h3>\n<p>Toil refers to repetitive, manual tasks that do not provide lasting value, for instance: performing manual deployments after each sprint.</p>\n<p>Imagine your development team needs to deploy a new version of your web application every week. Each deployment involves several repetitive steps, like logging into the server, copying the files, configuring the server, restarting all services and checking if everything went right.</p>\n<p>While you might consider production deployments to be very valuable, the truth is that if you have to do it every week, then the <strong>lasting</strong> value is non-existent.</p>\n<p>Try to identify sources of toil in your workflows and continuously work to reduce or eliminate them through automation.</p>\n<h2 id=\"choose-your-devops-automation-tools\">Choose your DevOps automation tools</h2>\n<p>Once you’ve incorporated these best practices into your DevOps activities, the next immediate action is to decide what your top <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">DevOps automation tools</a> will be.\nThese tools should allow you to:</p>\n<ul>\n<li>Comply with the best practices already covered.</li>\n<li>Empower your team to accomplish their tasks without getting in their way.</li>\n<li>Actually provide the automation level you require.</li>\n</ul>\n<p>Regardless of the automation tools you decide to go with, some of the recommended categories that you should tackle are:</p>\n<ul>\n<li><strong>Continuous Integration/Continuous Deployment</strong> (CI/CD): these will help you reduce your time-to-market and increase the confidence on every new deployment.</li>\n<li><strong>Configuration Management tools</strong>: incredibly useful when you have to manage large infrastructures.</li>\n<li><strong>Infrastructure as Code</strong> (IaC): they allow you to version your infrastructure and collaborate on it through simple text files, speeding up resource deployment &#x26; environment setups.</li>\n<li><strong>Test automation tools</strong>: they will help you ensure quality by automating the testing of many aspects of your application (i.e automatically running UI tests as part of your deployment process).</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>DevOps automation is a powerful approach to streamline your software development and IT operations interactions.</p>\n<p>By automating key portions of your software development process like CI/CD, infrastructure management, and monitoring, you can achieve better speed, consistency, and overall improvement in collaboration within your teams.</p>\n<p>Implementing best practices will ensure your automation efforts are successful and aligned with your business goals.</p>\n<p>If you’re looking for more details on how to get started as a DevOps or you’d like to learn more about this practice, check out our <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap here</a>.</p>";

				const frontmatter$12 = {"title":"What is DevOps Automation? 8 Best Practices & Advice","description":"Streamline your DevOps pipeline! Explore what DevOps automation is and the 8 best practices for seamless delivery.","authorId":"fernando","excludedBySlug":"/devops/automation","seo":{"title":"What is DevOps Automation? 8 Best Practices & Advice","description":"Streamline your DevOps pipeline! Explore what DevOps automation is and the 8 best practices for seamless delivery.","ogImageUrl":"https://assets.roadmap.sh/guest/what-is-devops-automation-03k11.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-05T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$12 = "/workspace/src/data/guides/devops-automation.md";
				const url$12 = undefined;
				function rawContent$12() {
					return "   \n                                                             \n                                                                                                                                 \n                  \n                                    \n    \n                                                               \n                                                                                                                                   \n                                                                                   \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![What is DevOps Automation?](https://assets.roadmap.sh/guest/what-is-devops-automation-03k11.jpg)\n\nDevOps Automation is all about using technology to streamline and enhance the processes involved in software development and IT operations. By automating repetitive tasks, teams can focus more on innovation and less on manual work, in other words, making the job fun and interesting while delivering the boring parts at the same time.\n\nIn this article, we'll explore what DevOps Automation really is, its key components, the benefits it offers, and the best [DevOps](https://roadmap.sh/devops) practices you should follow to get the most out of it.\n\n## What is DevOps Automation?\n\nDevOps Automation refers to the use of [automation tools](https://roadmap.sh/devops/automation-tools) and scripts to automate the different stages of the DevOps lifecycle and many aspects of the software development life cycle. This includes everything from code integration and application deployment to infrastructure management and monitoring.\n\nAutomation is one of the key methodologies that help you ensure that these processes are, in the end, efficient, consistent, and reliable.\n\n## Key DevOps Processes to Automate\n\nThe following key DevOps processes are the core of what automation in the DevOps space is:\n\n* **Continuous Integration/Continuous Deployment (CI/CD):** Automates the process of integrating code changes and deploying them to production.\n* **Infrastructure Management:** Uses code to manage and provision infrastructure, ensuring consistency across environments.\n* **Monitoring:** Automatically tracks system performance and alerts DevOps teams to any issues.\n\n## Components of DevOps Automation\n\nDevOps Automation isn't just a single tool or process—it's a collection of various components that work together to streamline and enhance your development and operations workflows. Let's dive deeper into these key components to understand how they contribute to a robust DevOps strategy.\n\n### 1. Continuous Integration (CI)\n\n![Continuous Integration](https://assets.roadmap.sh/guest/continuous-integration1-cw7ms.png)\n\nContinuous Integration (CI) is all about integrating code changes into a shared repository frequently, often multiple times a day. This practice helps detect issues early in the development cycle, making it easier to address them before they become bigger problems.\n\n* **How It Works:** Developers commit their code changes to a central repository. Automated tools then build the application and run a suite of tests (like unit tests and integration tests) to ensure that the new code doesn't break existing functionality.\n* **Benefits:**\n  * **Early Detection of Bugs:** By integrating and testing code regularly, teams can identify and fix bugs quickly.\n  * **Reduced Integration Problems:** Frequent integrations minimize the complexity and effort required to merge changes from different developers.\n  * **Improved Code Quality:** Automated testing ensures that code meets quality standards before it's merged.\n\n### 2. Continuous Deployment (CD)\n\n![Continuous Deployment](https://assets.roadmap.sh/guest/continuous-deployment1-xqyc2.png)\n\nContinuous Deployment (CD) takes CI a step further by automatically deploying code changes to production once they pass all the necessary tests.\n\n* **How It Works:** After the CI process successfully builds and tests the code, the CD pipeline automatically deploys the changes to the live environment without manual intervention.\n* **Benefits:**\n  * **Faster Time-to-Market:** With the automation in place, you significantly reduce the time it takes to deploy changes into production, thus keeping your product competitive.\n  * **Reduced Risk of Deployments:** Automated deployments minimize human errors, ensuring that deployments are consistent and reliable.\n  * **Continuous Feedback:** Rapid deployments allow for quicker feedback from users, enabling faster iterations and improvements.\n\n### 3. Infrastructure as Code (IaC)\n\n![Infrastructure as Code](https://assets.roadmap.sh/guest/infrastructure-as-code1-ly5zn.png)\n\nInfrastructure as Code (IaC) is the practice of managing and provisioning your IT infrastructure through machine-readable code rather than manual processes.\n\n* **How It Works:** Automation tools like Terraform, Ansible, or AWS CloudFormation allow you to define your infrastructure (servers, databases, networks, etc.) in code. This code can be stored in version control systems, reviewed, and reused across different environments.\n* **Benefits:**\n  * **Consistency Across Environments:** Ensures that development, testing, and production environments are identical, reducing the so-called \"it works on my machine\" syndrome.\n  * **Versioning your infrastructure:** Changes to infrastructure can be tracked, reviewed, and rolled back if necessary, just like application code.\n  * **Scalability:** Easily scale your infrastructure up or down by modifying the code, making it adaptable to changing needs.\n\n### 4. Automated Testing\n\n![Automated Testing](https://assets.roadmap.sh/guest/automated-test-execution-0uwu9.png)\n\nAutomated testing involves using software tools to run tests on your code automatically. This ensures that your application behaves as expected and maintains high quality as it evolves.\n\n* **How It Works:** Automated tests (such as unit tests, integration tests, and end-to-end tests) are written alongside your code. These tests are executed automatically during the CI/CD pipeline to verify that new changes don't introduce bugs or regressions.\n* **Benefits:**\n  * **Enhanced Code Quality:** Regular automated testing catches bugs early, ensuring that only reliable code reaches production.\n  * **Faster Feedback:** Developers receive immediate feedback on their code changes, allowing for quicker iterations and improvements.\n  * **Efficiency:** Automating repetitive testing tasks saves time and allows teams to focus on more complex testing scenarios and feature development.\n\n### 5. Monitoring and Logging\n\n![Monitoring and Logging](https://assets.roadmap.sh/guest/server-monitoring-logging-ye24z.png)\n\nMonitoring and logging are essential for maintaining the health and performance of your applications and infrastructure. They provide real-time insights and historical data that help you troubleshoot issues and optimize performance.\n\n* **How It Works:** Monitoring tools continuously track various metrics (like CPU usage, memory consumption, and response times) and logs from your applications and infrastructure. These tools can alert teams to potential issues and even trigger automated responses to certain conditions.\n* **Benefits:**\n  * **Proactive Issue Detection:** Real-time monitoring helps identify and address problems before they impact users.\n  * **Automated Responses:** Triggering automated actions (like scaling resources during traffic spikes or restarting services after a crash) ensures that your systems remain resilient and performant without manual intervention.\n\n### Benefits of DevOps Automation\n\nDevOps automation provides many benefits, including as already mentioned, the side effect of removing humans from almost the entire DevOps workflow, thus reducing the chances of human error and granting DevOps operators more time to focus on more interesting activities.\n\nHowever, there are more benefits than just reduced chance of errors. In fact, the following list covers some of the most relevant ones:\n\n* **Increased Speed and Efficiency:** Automated processes run faster and on time, every time, allowing for faster development and deployment cycles.\n* **Enhanced Collaboration Between Teams:** Streamlines workflows, making it easier for development and operations teams to work together. This is, in fact, one of the core [principles of the DevOps practice](https://roadmap.sh/devops/principles).\n* **Faster Time-to-Market:** Everything covered so far helps accelerate the delivery of features and updates, keeping your products competitive.\n\n## Best Practices for DevOps Automation\n\n![Best Practices for DevOps Automation](https://assets.roadmap.sh/guest/devops-best-practices-rizoz.png)\n\n### Start with Clear Objectives\n\nAutomation for the sake of automation makes no sense. Before diving into automation, it's essential that you define your goals.\n\nWhat are you looking to achieve? Whether it's reducing deployment times, improving code quality, or enhancing collaboration, having clear objectives will guide the rest of your automation strategies and ensure they align with your business goals.\n\n### Automate Repetitive and Time-Consuming Tasks\n\nIdentifying the repetitive and manual tasks (especially the ones that take a long time to complete) is a crucial next step to understanding what can and should be automated. In fact, these tasks should be the first set of candidates to be automated, as they are directly consuming the time of your teammates with activities that can obviously be done by a machine.\n\nBy automating these tasks, you are effectively freeing up your team to focus on more strategic and creative work, enhancing overall productivity.\n\n### Implement Continuous Integration and Deployment\n\nWhenever possible, code changes and the corresponding production deployment should be something that happens automatically with the least amount of human intervention possible.\n\nThis is because it’s such a critical task for any product, that it needs to be 100% reliable and efficient. In other words, it should always work, whether you do it once a week or 5 times on the same day, and it should always be performed as fast as possible.\n\nThis not only speeds up the development process but also ensures that any issues are detected and addressed promptly. CI tools usually offer the option of a rollback, in case something goes wrong. This is another key best practice, as errors will undoubtedly reach production, no matter how much we plan to avoid it, so it’s better to be prepared than to ignore the possibility and then have to manually perform rollbacks, or even worse, apply fixes directly in production.\n\n### Use Infrastructure as Code (IaC)\n\nManaging your infrastructure can be a daunting task for projects that have a complex architecture.\n\nWith IaC DevOps operators can manage the infra through code ensuring consistency across all environments.\n\nThanks to the “code” part of IaC, you can version control your infrastructure, making it easier to reproduce environments and roll back changes if needed.\n\n### Ensure Proper Monitoring and Logging\n\nImplement comprehensive monitoring solutions to keep an eye on your applications and infrastructure is a key DevOps automation practice.\n\nAfter all, if you plan to improve, you need to measure, right?\n\nIn the same train of thought, effective logging helps you gain valuable insights and troubleshoot issues in your platform, ensuring your systems run smoothly for as long as possible.\n\n### Foster a Culture of Collaboration and Continuous Improvement\n\nBreak with the idea that developers and operations should not work together side-by-side, and instead encourage open communication between both teams.\n\nPromote a culture of continuous learning and adaptation, where teams regularly review and improve their processes based on feedback and new insights.\n\n### Integrate Security into the Automation Process (DevSecOps)\n\nSecurity should be an integral part of your DevOps pipeline and adding automation tools into the mix should not affect that.\n\nMake sure to embed security practices within your DevOps automation processes and automate security testing and compliance checks to ensure that your applications are secure from the ground up.\n\n### Address and Eliminate Toil\n\nToil refers to repetitive, manual tasks that do not provide lasting value, for instance: performing manual deployments after each sprint.\n\nImagine your development team needs to deploy a new version of your web application every week. Each deployment involves several repetitive steps, like logging into the server, copying the files, configuring the server, restarting all services and checking if everything went right.\n\nWhile you might consider production deployments to be very valuable, the truth is that if you have to do it every week, then the **lasting** value is non-existent.\n\nTry to identify sources of toil in your workflows and continuously work to reduce or eliminate them through automation.\n\n## Choose your DevOps automation tools\n\nOnce you’ve incorporated these best practices into your DevOps activities, the next immediate action is to decide what your top [DevOps automation tools](https://roadmap.sh/devops/automation-tools) will be.\nThese tools should allow you to:\n\n* Comply with the best practices already covered.\n* Empower your team to accomplish their tasks without getting in their way.\n* Actually provide the automation level you require.\n\nRegardless of the automation tools you decide to go with, some of the recommended categories that you should tackle are:\n\n* **Continuous Integration/Continuous Deployment** (CI/CD): these will help you reduce your time-to-market and increase the confidence on every new deployment.\n* **Configuration Management tools**: incredibly useful when you have to manage large infrastructures.\n* **Infrastructure as Code** (IaC): they allow you to version your infrastructure and collaborate on it through simple text files, speeding up resource deployment & environment setups.\n* **Test automation tools**: they will help you ensure quality by automating the testing of many aspects of your application (i.e automatically running UI tests as part of your deployment process).\n\n## Conclusion\n\nDevOps automation is a powerful approach to streamline your software development and IT operations interactions.\n\nBy automating key portions of your software development process like CI/CD, infrastructure management, and monitoring, you can achieve better speed, consistency, and overall improvement in collaboration within your teams.\n\nImplementing best practices will ensure your automation efforts are successful and aligned with your business goals.\n\nIf you’re looking for more details on how to get started as a DevOps or you’d like to learn more about this practice, check out our [DevOps roadmap here](https://roadmap.sh/devops).\n";
				}
				async function compiledContent$12() {
					return await html$12();
				}
				function getHeadings$12() {
					return [{"depth":2,"slug":"what-is-devops-automation","text":"What is DevOps Automation?"},{"depth":2,"slug":"key-devops-processes-to-automate","text":"Key DevOps Processes to Automate"},{"depth":2,"slug":"components-of-devops-automation","text":"Components of DevOps Automation"},{"depth":3,"slug":"1-continuous-integration-ci","text":"1. Continuous Integration (CI)"},{"depth":3,"slug":"2-continuous-deployment-cd","text":"2. Continuous Deployment (CD)"},{"depth":3,"slug":"3-infrastructure-as-code-iac","text":"3. Infrastructure as Code (IaC)"},{"depth":3,"slug":"4-automated-testing","text":"4. Automated Testing"},{"depth":3,"slug":"5-monitoring-and-logging","text":"5. Monitoring and Logging"},{"depth":3,"slug":"benefits-of-devops-automation","text":"Benefits of DevOps Automation"},{"depth":2,"slug":"best-practices-for-devops-automation","text":"Best Practices for DevOps Automation"},{"depth":3,"slug":"start-with-clear-objectives","text":"Start with Clear Objectives"},{"depth":3,"slug":"automate-repetitive-and-time-consuming-tasks","text":"Automate Repetitive and Time-Consuming Tasks"},{"depth":3,"slug":"implement-continuous-integration-and-deployment","text":"Implement Continuous Integration and Deployment"},{"depth":3,"slug":"use-infrastructure-as-code-iac","text":"Use Infrastructure as Code (IaC)"},{"depth":3,"slug":"ensure-proper-monitoring-and-logging","text":"Ensure Proper Monitoring and Logging"},{"depth":3,"slug":"foster-a-culture-of-collaboration-and-continuous-improvement","text":"Foster a Culture of Collaboration and Continuous Improvement"},{"depth":3,"slug":"integrate-security-into-the-automation-process-devsecops","text":"Integrate Security into the Automation Process (DevSecOps)"},{"depth":3,"slug":"address-and-eliminate-toil","text":"Address and Eliminate Toil"},{"depth":2,"slug":"choose-your-devops-automation-tools","text":"Choose your DevOps automation tools"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$12 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$12;
					content.file = file$12;
					content.url = url$12;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$12())}`;
				});

const __vite_glob_0_32 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$12,
	compiledContent: compiledContent$12,
	default: Content$12,
	file: file$12,
	frontmatter: frontmatter$12,
	getHeadings: getHeadings$12,
	rawContent: rawContent$12,
	url: url$12
}, Symbol.toStringTag, { value: 'Module' }));

const html$11 = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-best-practices-4yhmb.jpg\" alt=\"DevOps Best Practices and methods you should know\"></p>\n<p>DevOps is a proven practice and set of standards that has helped small to large enterprises streamline their software development process and IT operations. It has helped break down silos and deliver more reliable and high-quality software. Despite the benefits it brings, its implementation can be difficult. This is because you need to know the process, the <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">DevOps tools</a> to use, and a shift in operational culture, which can be challenging.</p>\n<p>Although every organization approaches these challenges in slightly different ways, there are <strong>best practices</strong> that you can follow to achieve successful implementation.</p>\n<p>In this guide, you’ll learn key DevOps best practices to improve your workflow, and common <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> anti-patterns to avoid when adopting these practices.</p>\n<p><strong>TL;DR: 14 DevOps key best practices you should know are:</strong></p>\n<ol>\n<li>Embrace a culture of collaboration and communication.</li>\n<li>Continuously seek feedback.</li>\n<li>Adopt continuous integration.</li>\n<li>Practice continuous delivery.</li>\n<li>Embrace Infrastructure as Code (IaC).</li>\n<li>Adopt microservices architecture.</li>\n<li>Use version control for everything.</li>\n<li>Practice continuous monitoring and observability.</li>\n<li>Adopt configuration management.</li>\n<li>Practice DevSecOps.</li>\n<li>Choose the right DevOps tools.</li>\n<li>Balance quality and speed.</li>\n<li>Use feature flag to manage features.</li>\n<li>Adopt agile project management.</li>\n</ol>\n<h2 id=\"devops-key-best-practices\">DevOps key best practices</h2>\n<p>Here are 14 key best practices and methods for implementing DevOps:</p>\n<h3 id=\"1-embrace-a-culture-of-collaboration-and-communication\">1. Embrace a culture of collaboration and communication</h3>\n<p>Collaboration and communication are central to the success of DevOps lifecycle. You need to encourage your team to continuously take ownership of their tasks and communicate (verbal and written) effectively between the development teams, operations teams, quality assurance teams, and other related stakeholders.</p>\n<p>View mistakes and failures as learning opportunities rather than assigning blame. You and your team should hold postmortems to identify the root causes of incidents and develop strategies to prevent future occurrences.</p>\n<h3 id=\"2-continuously-seek-feedback\">2. Continuously seek feedback</h3>\n<p>Continuously engage your users, stakeholders, and team members to get feedback on their overall experience of the application. This feedback helps resolve issues, shape your application release cycle, and guarantee you’re building with users in mind. As noted in the latest <a href=\"https://cloud.google.com/resources/devops/state-of-devops\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">State of DevOps Report</a>, “<em>Teams that focus on the user</em> <em>experience</em> <em>have 40% higher organizational performance than t**hose</em> <em>that don’t</em>.”</p>\n<p>Internally, your team can also benefit from continuous feedback during code reviews. By involving stakeholders in analyzing code quality, identifying issues, and suggesting improvements, you can create a culture of constant improvement.</p>\n<h3 id=\"3-adopt-continuous-integration\">3. Adopt continuous integration</h3>\n<p>Continuous Integration (CI) is a software development practice in which developers regularly commit their code changes into a shared repository, which might happen multiple times a day. The goal of CI is to provide feedback quickly to developers so that they can identify and fix defects early in the development lifecycle.</p>\n<p>The CI process involves:</p>\n<ul>\n<li><strong>Automated builds</strong>: When you commit a code into a shared repository, it triggers an automatic build to verify that the code integrates well with the existing project.</li>\n<li><strong>Automated testing</strong>: After the build is successful, automated tests are run to validate that the changes committed don’t break the application.\n<img src=\"https://assets.roadmap.sh/guest/ci-process-07zce.png\" alt=\"CI Process\"></li>\n</ul>\n<p>To support your application in following the CI process and delivering the best value, you need to:</p>\n<ul>\n<li>Commit small and incremental changes to the shared repository often.</li>\n<li>Automate the build process so every commit results in a reliable and repeated build.</li>\n<li>Set up a test to run with every commit to catch any issues as soon as they are introduced.</li>\n<li>Fix broken builds immediately.</li>\n<li>Use a version control system like Git to manage deployment, branches, and track commits.</li>\n<li>Document how the CI process works and how to resolve common issues like broken builds. This will help your team work faster and onboard new members easily.</li>\n</ul>\n<h3 id=\"4-practice-continuous-delivery\">4. Practice continuous delivery</h3>\n<p>Continuous Delivery (CD) is a software engineering practice where code changes are automatically prepared for release to production. It extends the CI process by ensuring that the codebase that has been added, tested, and passed is ready for release into the staging or production environment.</p>\n<p>The goal of CD is to automate the release pipeline so that new features, bug fixes, and improvements can be deployed to production at any time without manual intervention.</p>\n<p>To implement CD effectively into your DevOps processes, you need to:</p>\n<ul>\n<li>Automate the entire deployment pipeline (from testing to deployment) to minimize manual error, reduce deployment time, and maintain consistency across environments.</li>\n<li>Use Git as a source of truth for development and infrastructure management.</li>\n<li>Track the health of your application by monitoring performance, errors, and logging.</li>\n<li>Set up your pipeline so it can revert to previous working deployments in case of critical error.</li>\n<li>Use feature flags to roll out features gradually into production.</li>\n<li>Integrate security measures into your pipeline to scan and check for vulnerabilities.</li>\n</ul>\n<h3 id=\"5-embrace-infrastructure-as-code-iac\">5. Embrace Infrastructure as Code (IaC)</h3>\n<p>Infrastructure as Code (IaC) is a DevOps practice that uses machine-readable definition files to manage and provision computing infrastructure rather than physical hardware configuration or direct interaction with configuration tools. It involves using code (JSON, XML, or domain-specific languages) to specify and configure providers, resources, and more.</p>\n<p>IaC aims to eliminate manual workflow in provisioning resources, making deployment faster and less prone to human errors. To implement IaC effectively into your DevOps processes, you need to:</p>\n<ul>\n<li>Use Git to collaborate, track changes over time, and easily roll back to previous changes over version if necessary.</li>\n<li>Break down your infrastructure code into reusable components. This makes it easy to manage and reuse across multiple projects.</li>\n<li>Write unit tests, integration tests, and other security-related tests to validate that IaC works as designed.</li>\n<li>Use environment variables to manage sensitive values like API ket, resource IDs, and more.</li>\n<li>Use continuous integration and continuous deployment (CI/CD) to integrate IaC into your pipeline to automatically provision or update infrastructure.</li>\n</ul>\n<p>The recently concluded <a href=\"https://cloud.google.com/resources/devops/state-of-devops\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">State of DevOps Report</a> also highlights the importance of IaC for its elasticity, on-demand resource provisioning, and flexibility. These advantages have contributed to a 30% higher organizational performance compared to those not utilizing IaC.</p>\n<h3 id=\"6-adopt-microservices-architecture\">6. Adopt microservices architecture</h3>\n<p>Microservice architecture involves breaking down your application into small, independent, and deployable services. Each service is responsible for a specific functionality and can be independently developed, tested, and deployed. This architecture promotes scalability, fault isolation, and rapid innovation, which are essential to the DevOps environment.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/microservices-architecture-wo59y.png\" alt=\"Microservices Architecture\"></p>\n<p>To implement microservice architecture effectively into your DevOps processes, you need to:</p>\n<ul>\n<li>Design your microservice to have retries, circuit breakers, and fallback mechanisms to handle failure gracefully.</li>\n<li>Build your microservice to manage its database or data source to avoid tight coupling.</li>\n<li>Use containerization and orchestration tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> to manage deployment.</li>\n<li>Implement CI/CD pipeline to enable reliable and consistent updates to individual services.</li>\n<li>Use message brokers like Kafka and RabbitMQ to communicate between services and reduce dependencies.</li>\n</ul>\n<blockquote>\n<p>In my opinion, a microservice architecture is only suitable for mature systems with multiple intertwined parts built for scale rather than a relatively small software that could be run better as a mon</p>\n</blockquote>\n<h3 id=\"7-use-version-control-for-everything\">7. Use version control for everything</h3>\n<p>Version control is a system that records changes to files over time. It lets you track, manage, and collaborate on code efficiently. To use Git effectively in your DevOps processes, you need to:</p>\n<ul>\n<li>Use effective branching strategies like feature branching and Git flow to manage the development process.</li>\n<li>Promote frequent commits with descriptive commit messages.</li>\n<li>Use pull requests (PRs) to facilitate code review and collaboration between the development and operations teams.</li>\n<li>Keep your repositories clean of generated files like binaries, logs, or dependencies.</li>\n<li>Use tag releases to mark important milestones, e.g., <code>v1.0.2</code>.</li>\n<li>Use descriptive branch names. This will help you and your team understand the purpose of each branch.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/version-control-6i5g0.png\" alt=\"Version control\"></p>\n<h3 id=\"8-practice-continuous-monitoring-and-observability\">8. Practice continuous monitoring and observability</h3>\n<p><strong>Monitoring</strong> involves collecting, analyzing, and visualizing data from your system in real-time to detect issues like outages, bottlenecks, or resource exhaustion. On the other hand, <strong>Observability</strong> is about understanding what is happening inside the system by analyzing data like logs, metrics, and traces. To take advantage of monitoring and observability in your DevOps processes, you need to:</p>\n<ul>\n<li>Define Service Level Agreements (SLAs), Service Level Objectives (SLOs), and other performance-related metrics to clarify performance and ensure proper monitoring coverage.</li>\n<li>Monitor key metrics like uptime, error rates, latency, and CPU usage.</li>\n<li>Use tools like Grafana and Kibana to create real-time visual dashboards that can give you insights on how your application is performing.</li>\n<li>Collect all your internal data (logs, metrics, and traces) in a centralized location for easy access and analysis.</li>\n</ul>\n<h3 id=\"9-adopt-configuration-management\">9. Adopt configuration management</h3>\n<p>Configuration management is the process of systematically handling changes to a system’s configuration to ensure consistency and integrity. It involves defining and maintaining settings, dependencies, and states of servers, network devices, applications, and databases. The goal is to make sure infrastructure is configured correctly, and changes are managed effectively to avoid errors and downtime.</p>\n<p>To take advantage of configuration management in your DevOps processes, you need to:</p>\n<ul>\n<li>Automate the entire configuration process, from setting up applications and services to deployment of servers.</li>\n<li>Use Git to manage and store your configurations centrally. This makes it easy to track changes, collaborate, and roll back if needed.</li>\n<li>Write modular configuration files that can be reused across different environments.</li>\n<li>Document all your configurations so that your team members can understand.</li>\n</ul>\n<h3 id=\"10-practice-devsecops\">10. Practice DevSecOps</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/devsecops-rafjn.png\" alt=\"DevSecOps\"></p>\n<p>DevSecOps stands for <strong>Development, Security, and Operations</strong>. It’s an extension of DevOps that promotes the integration of security practices into every phase of the software development lifecycle (SDLC). In the traditional development process, security is often handled by a separate team at the end of the process. In this case, when vulnerabilities are discovered, it slows down the deployment and increases the cost of fixing issues.</p>\n<p>To prevent such incidents in your DevOps processes, integrate security practices and tools into all stages of your SDLC to avoid downtime and fix vulnerabilities early.</p>\n<h3 id=\"11-choose-the-right-devops-tools\">11. Choose the right DevOps tools</h3>\n<p>Selecting the right DevOps tools can significantly impact the success of your DevOps processes. The ecosystem is constantly changing, and you’ll get varying opinions on tools to use; it’s important to carefully evaluate options. Consider your team’s strengths, the learning curve, and your organization’s goal before adopting any tool for your DevOps pipeline.</p>\n<p>Below are some tools you should consider when implementing DevOps processes:</p>\n<ul>\n<li><strong>CI/CD tools</strong>: Tools like Jenkins, GitLab CI/CD, CircleCI, Azure Pipeline, and GitHub Actions help automate the integration and deployment of code changes.</li>\n<li><strong>Infrastructure as Code (IaC) tools</strong>: Tools like Terraform, Ansible, Pulumi, Chef, AWS CloudFormation, and Vagrant help automate the provisioning and management of infrastructure.</li>\n<li><strong>Containerization and orchestration tools</strong>: Tools like Docker, Kubernetes, OpenShift, Docker Swarm, and Amazon ECS (Elastic Container Service) help manage and orchestrate containers at scale.</li>\n<li><strong>Monitoring and logging tools</strong>: Tools like Prometheus, ELK Stack (Elasticsearch, Logstash, and Kibana), Datadog, Splunk, and Grafana help track system performance, logging, and alerting.</li>\n<li><strong>Configuration management tools</strong>: Tools like Chef, Puppet, CFEngine, SaltStack, and Ansible help ensure system configurations remain consistent across environments.</li>\n<li><strong>Security and compliance tools</strong>: Tools like HashiCorp Vault, OWASP ZAP, Snyk, SonarQube, and Aqua Security help enforce security policies, perform scans, and conduct compliance checks.</li>\n<li><strong>Collaboration and communication tools</strong>: Tools like Slack, Microsoft Teams, Trello, Jira, and Confluence help facilitate communication and collaboration between teams.</li>\n</ul>\n<h3 id=\"12-balance-quality-and-speed\">12. Balance quality and speed</h3>\n<p>A key promise of DevOps is that it delivers software quickly. While it’s tempting to speed up development processes, this often leads to reduced quality and potential security vulnerabilities. The pressure is further heightened because a lot of metrics in DevOps are based on how fast your system is, making it even more tempting to prioritize fast delivery over quality.</p>\n<p>To avoid these pitfalls, strike a balance between quality and speed by taking the time to test the application before release. Below are some strategies to help maintain this balance:</p>\n<ul>\n<li>Implement continuous testing into your CI/CD pipeline to catch bugs early.</li>\n<li>Encourage a culture of quality that makes developers take full ownership of their code.</li>\n<li>Define quality checkpoints like code reviews, tests, and coding standards that must be passed before moving to production.</li>\n</ul>\n<h3 id=\"13-use-feature-flags-to-manage-features\">13. Use feature flags to manage features</h3>\n<p>Feature flags (also known as Feature Toggles) are powerful tools that let you enable or disable specific features in an application without deploying new code. They provide fine-grain control over the parts of an application that are visible and active at any time.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/feature-flags-7unnx.png\" alt=\"Feature flags\"></p>\n<p>You can use a feature flag in your DevOps processes to:</p>\n<ul>\n<li>Perform gradual feature rollout.</li>\n<li>Safely deploy features and rollback if needed.</li>\n<li>Perform A/B testing</li>\n</ul>\n<h3 id=\"14-adopt-agile-project-management\">14. Adopt agile project management</h3>\n<p>Agile software development methodologies like Scrum and Kanban are well-suited to the iterative nature of DevOps. Agile uses a continuous approach to develop software rather than the linear waterfall model.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/agile-project-management-1pjcq.png\" alt=\"Agile VS Waterfall\"></p>\n<p>By embracing agile project management, you manage your projects better by breaking them down into smaller and manageable chunks rather than dealing with them in large chunks that are prone to error.</p>\n<h2 id=\"devops-anti-patterns-to-avoid\">DevOps anti-patterns to avoid</h2>\n<p>While DevOps has become the go-to approach for delivering scalable and robust applications, it has also introduced certain anti-patterns that can prevent you from fully reaping its benefits. These anti-patterns can lead to inefficiencies, limit collaboration, and result in poor outcomes. Let’s look at some common anti-patterns you should avoid:</p>\n<p><strong>Automating everything without understanding</strong>\nBecause automation is at the center of DevOps, teams often fall into the trap of automating every process without understanding the underlying workflow or business logic. This can lead to incorrect implementation, inefficient processes, complexities, and sometimes bugs.</p>\n<p>Before you automate a process, make sure you understand the underlying workflow. Start with critical processes that provide the most value, and regularly review automated processes to confirm they are providing value.</p>\n<p><strong>DevOps as a one-time project</strong>\nWhen most teams build or extend a project, timelines are usually attached. They have start and end dates for product design, engineering, <strong>DevOps</strong>, QA, and more, which may cause them to view DevOps as a short-term project. This prevents teams from realizing the long-term benefits and leads to a lack of continuous improvement.</p>\n<p>You need to adopt DevOps as a continuous practice by regularly evaluating processes and workflow and encouraging your team to experiment.</p>\n<p><strong>Not having a proper monitoring and feedback loop</strong>\nFailing to implement adequate monitoring and feedback mechanisms to track application performance, reliability, and user experience makes it difficult for the DevOps team to detect issues in real-time. This can lead to longer recovery time when there’s an issue, and the team may miss opportunities to learn and improve the system.</p>\n<p>To address this, you need to implement end-to-end monitoring and observability tools to gain insight into the system’s health. Additionally, a clear feedback loop should be established so that responsible teams are notified promptly when issues are detected.</p>\n<p><strong>Siloed DevOps team</strong>\nA common practice in most organizations is to separate the DevOps Team from other teams and task them with all DevOps activities. This separation defeats the core principle of DevOps: cross-functional collaboration and shared ownership. It isolates the DevOps team from others, leading to communication gaps and a lack of ownership.</p>\n<p>To address this, promote a DevOps culture of shared responsibility where DevOps practices are adopted across all teams.</p>\n<p><strong>Over-reliance on tools</strong>\nAdopting the latest and trendiest DevOps tool doesn’t guarantee success. Sometimes, they even increase the problems if not used correctly. DevOps is about processes, people, and tools.</p>\n<p>To address this, follow the right processes: ensure effective team collaboration, improve workflows and align with the teams before choosing tools.</p>\n<p><strong>Too many feature flags</strong>\nWhile feature flags are powerful, too many can lead to technical debt, making the codebase messy, cluttered, and difficult to maintain.</p>\n<p>To address this, use feature flags as needed and regularly clean up flags that are no longer needed.</p>\n<p><strong>Overcomplicating the CI/CD pipeline</strong>\nWhen pipelines are overly complicated with multi-step CI/CD, stages, and checks, it leads to slow deployments. This can slow down the releases, become a bottleneck, and make troubleshooting difficult.</p>\n<p>You can address this by keeping the pipeline simple and focusing on key steps like build, test, and deploy. Then, add stages only when needed.</p>\n<p><strong>Not defining what success looks like</strong>\nFailing to define and track meaningful metrics can make it difficult to measure the success or failure of DevOps practices. Without clear metrics, the team may not know if they are improving, and the team leads may struggle to justify the investment in DevOps to management.</p>\n<p>You can address this by defining a key performance index (KPI) that aligns with your business goal, such as deployment frequency, change lead time, and mean time to recovery (MTTR).</p>\n<h2 id=\"key-takeaway\">Key takeaway</h2>\n<p>DevOps best practices are essential for improving your software development and operations processes. These practices help improve your workflows, enhance collaboration, manage resources better, and ensure the delivery of high-quality software.</p>\n<p>Additionally, you need to be aware of anti-patterns and pitfalls that can hinder the success of your DevOps implementation by avoiding common patterns like creating silos or overcomplicating your pipelines.</p>\n<p>Stay up-to-date with the latest developments in the DevOps ecosystem by following the <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a>.</p>";

				const frontmatter$11 = {"title":"14 DevOps Best Practices and Methods You Should Know","description":"Learn what the essential backend skills you should master to advance in your career.","authorId":"william","excludedBySlug":"/devops/best-practices","seo":{"title":"14 DevOps Best Practices and Methods You Should Know","description":"Learn DevOps best practices for building efficient workflows, from code integration to monitoring, and avoid common DevOps anti-patterns.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-best-practices-4yhmb.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$11 = "/workspace/src/data/guides/devops-best-practices.md";
				const url$11 = undefined;
				function rawContent$11() {
					return "   \n                                                             \n                                                                                                   \n                 \n                                        \n    \n                                                               \n                                                                                                                                                          \n                                                                               \n                            \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps Best Practices and methods you should know](https://assets.roadmap.sh/guest/devops-best-practices-4yhmb.jpg)\n\nDevOps is a proven practice and set of standards that has helped small to large enterprises streamline their software development process and IT operations. It has helped break down silos and deliver more reliable and high-quality software. Despite the benefits it brings, its implementation can be difficult. This is because you need to know the process, the [DevOps tools](https://roadmap.sh/devops/tools) to use, and a shift in operational culture, which can be challenging.\n\nAlthough every organization approaches these challenges in slightly different ways, there are **best practices** that you can follow to achieve successful implementation.\n\nIn this guide, you’ll learn key DevOps best practices to improve your workflow, and common [DevOps](https://roadmap.sh/devops) anti-patterns to avoid when adopting these practices.\n\n**TL;DR: 14 DevOps key best practices you should know are:**\n\n1. Embrace a culture of collaboration and communication.\n2. Continuously seek feedback.\n3. Adopt continuous integration.\n4. Practice continuous delivery.\n5. Embrace Infrastructure as Code (IaC).\n6. Adopt microservices architecture.\n7. Use version control for everything.\n8. Practice continuous monitoring and observability.\n9. Adopt configuration management.\n10. Practice DevSecOps.\n11. Choose the right DevOps tools.\n12. Balance quality and speed.\n13. Use feature flag to manage features.\n14. Adopt agile project management.\n\n## DevOps key best practices\n\nHere are 14 key best practices and methods for implementing DevOps:\n\n### 1. Embrace a culture of collaboration and communication\n\nCollaboration and communication are central to the success of DevOps lifecycle. You need to encourage your team to continuously take ownership of their tasks and communicate (verbal and written) effectively between the development teams, operations teams, quality assurance teams, and other related stakeholders.\n\nView mistakes and failures as learning opportunities rather than assigning blame. You and your team should hold postmortems to identify the root causes of incidents and develop strategies to prevent future occurrences.\n\n### 2. Continuously seek feedback\n\nContinuously engage your users, stakeholders, and team members to get feedback on their overall experience of the application. This feedback helps resolve issues, shape your application release cycle, and guarantee you’re building with users in mind. As noted in the latest [State of DevOps Report](https://cloud.google.com/resources/devops/state-of-devops), “*Teams that focus on the user* *experience* *have 40% higher organizational performance than t**hose* *that don’t*.”\n\nInternally, your team can also benefit from continuous feedback during code reviews. By involving stakeholders in analyzing code quality, identifying issues, and suggesting improvements, you can create a culture of constant improvement.\n\n### 3. Adopt continuous integration\n\nContinuous Integration (CI) is a software development practice in which developers regularly commit their code changes into a shared repository, which might happen multiple times a day. The goal of CI is to provide feedback quickly to developers so that they can identify and fix defects early in the development lifecycle.\n\nThe CI process involves:\n\n- **Automated builds**: When you commit a code into a shared repository, it triggers an automatic build to verify that the code integrates well with the existing project.\n- **Automated testing**: After the build is successful, automated tests are run to validate that the changes committed don’t break the application.\n  ![CI Process](https://assets.roadmap.sh/guest/ci-process-07zce.png)\n\nTo support your application in following the CI process and delivering the best value, you need to:\n\n- Commit small and incremental changes to the shared repository often.\n- Automate the build process so every commit results in a reliable and repeated build.\n- Set up a test to run with every commit to catch any issues as soon as they are introduced.\n- Fix broken builds immediately.\n- Use a version control system like Git to manage deployment, branches, and track commits.\n- Document how the CI process works and how to resolve common issues like broken builds. This will help your team work faster and onboard new members easily.\n\n### 4. Practice continuous delivery\n\nContinuous Delivery (CD) is a software engineering practice where code changes are automatically prepared for release to production. It extends the CI process by ensuring that the codebase that has been added, tested, and passed is ready for release into the staging or production environment.\n\nThe goal of CD is to automate the release pipeline so that new features, bug fixes, and improvements can be deployed to production at any time without manual intervention.\n\nTo implement CD effectively into your DevOps processes, you need to:\n\n- Automate the entire deployment pipeline (from testing to deployment) to minimize manual error, reduce deployment time, and maintain consistency across environments.\n- Use Git as a source of truth for development and infrastructure management.\n- Track the health of your application by monitoring performance, errors, and logging.\n- Set up your pipeline so it can revert to previous working deployments in case of critical error.\n- Use feature flags to roll out features gradually into production.\n- Integrate security measures into your pipeline to scan and check for vulnerabilities.\n\n### 5. Embrace Infrastructure as Code (IaC)\n\nInfrastructure as Code (IaC) is a DevOps practice that uses machine-readable definition files to manage and provision computing infrastructure rather than physical hardware configuration or direct interaction with configuration tools. It involves using code (JSON, XML, or domain-specific languages) to specify and configure providers, resources, and more.\n\nIaC aims to eliminate manual workflow in provisioning resources, making deployment faster and less prone to human errors. To implement IaC effectively into your DevOps processes, you need to:\n\n- Use Git to collaborate, track changes over time, and easily roll back to previous changes over version if necessary.\n- Break down your infrastructure code into reusable components. This makes it easy to manage and reuse across multiple projects.\n- Write unit tests, integration tests, and other security-related tests to validate that IaC works as designed.\n- Use environment variables to manage sensitive values like API ket, resource IDs, and more.\n- Use continuous integration and continuous deployment (CI/CD) to integrate IaC into your pipeline to automatically provision or update infrastructure.\n\nThe recently concluded [State of DevOps Report](https://cloud.google.com/resources/devops/state-of-devops) also highlights the importance of IaC for its elasticity, on-demand resource provisioning, and flexibility. These advantages have contributed to a 30% higher organizational performance compared to those not utilizing IaC.\n\n### 6. Adopt microservices architecture\n\nMicroservice architecture involves breaking down your application into small, independent, and deployable services. Each service is responsible for a specific functionality and can be independently developed, tested, and deployed. This architecture promotes scalability, fault isolation, and rapid innovation, which are essential to the DevOps environment.\n\n![Microservices Architecture](https://assets.roadmap.sh/guest/microservices-architecture-wo59y.png)\n\nTo implement microservice architecture effectively into your DevOps processes, you need to:\n\n- Design your microservice to have retries, circuit breakers, and fallback mechanisms to handle failure gracefully.\n- Build your microservice to manage its database or data source to avoid tight coupling.\n- Use containerization and orchestration tools like [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes) to manage deployment.\n- Implement CI/CD pipeline to enable reliable and consistent updates to individual services.\n- Use message brokers like Kafka and RabbitMQ to communicate between services and reduce dependencies.\n\n> In my opinion, a microservice architecture is only suitable for mature systems with multiple intertwined parts built for scale rather than a relatively small software that could be run better as a mon\n\n### 7. Use version control for everything\n\nVersion control is a system that records changes to files over time. It lets you track, manage, and collaborate on code efficiently. To use Git effectively in your DevOps processes, you need to:\n\n- Use effective branching strategies like feature branching and Git flow to manage the development process.\n- Promote frequent commits with descriptive commit messages.\n- Use pull requests (PRs) to facilitate code review and collaboration between the development and operations teams.\n- Keep your repositories clean of generated files like binaries, logs, or dependencies.\n- Use tag releases to mark important milestones, e.g., `v1.0.2`.\n- Use descriptive branch names. This will help you and your team understand the purpose of each branch.\n\n![Version control](https://assets.roadmap.sh/guest/version-control-6i5g0.png)\n\n### 8. Practice continuous monitoring and observability\n\n**Monitoring** involves collecting, analyzing, and visualizing data from your system in real-time to detect issues like outages, bottlenecks, or resource exhaustion. On the other hand, **Observability** is about understanding what is happening inside the system by analyzing data like logs, metrics, and traces. To take advantage of monitoring and observability in your DevOps processes, you need to:\n\n- Define Service Level Agreements (SLAs), Service Level Objectives (SLOs), and other performance-related metrics to clarify performance and ensure proper monitoring coverage.\n- Monitor key metrics like uptime, error rates, latency, and CPU usage.\n- Use tools like Grafana and Kibana to create real-time visual dashboards that can give you insights on how your application is performing.\n- Collect all your internal data (logs, metrics, and traces) in a centralized location for easy access and analysis.\n\n### 9. Adopt configuration management\n\nConfiguration management is the process of systematically handling changes to a system’s configuration to ensure consistency and integrity. It involves defining and maintaining settings, dependencies, and states of servers, network devices, applications, and databases. The goal is to make sure infrastructure is configured correctly, and changes are managed effectively to avoid errors and downtime.\n\nTo take advantage of configuration management in your DevOps processes, you need to:\n\n- Automate the entire configuration process, from setting up applications and services to deployment of servers.\n- Use Git to manage and store your configurations centrally. This makes it easy to track changes, collaborate, and roll back if needed.\n- Write modular configuration files that can be reused across different environments.\n- Document all your configurations so that your team members can understand.\n\n### 10. Practice DevSecOps\n\n![DevSecOps](https://assets.roadmap.sh/guest/devsecops-rafjn.png)\n\nDevSecOps stands for **Development, Security, and Operations**. It’s an extension of DevOps that promotes the integration of security practices into every phase of the software development lifecycle (SDLC). In the traditional development process, security is often handled by a separate team at the end of the process. In this case, when vulnerabilities are discovered, it slows down the deployment and increases the cost of fixing issues.\n\nTo prevent such incidents in your DevOps processes, integrate security practices and tools into all stages of your SDLC to avoid downtime and fix vulnerabilities early.\n\n### 11. Choose the right DevOps tools\n\nSelecting the right DevOps tools can significantly impact the success of your DevOps processes. The ecosystem is constantly changing, and you’ll get varying opinions on tools to use; it's important to carefully evaluate options. Consider your team’s strengths, the learning curve, and your organization’s goal before adopting any tool for your DevOps pipeline.\n\nBelow are some tools you should consider when implementing DevOps processes:\n\n- **CI/CD tools**: Tools like Jenkins, GitLab CI/CD, CircleCI, Azure Pipeline, and GitHub Actions help automate the integration and deployment of code changes.\n- **Infrastructure as Code (IaC) tools**: Tools like Terraform, Ansible, Pulumi, Chef, AWS CloudFormation, and Vagrant help automate the provisioning and management of infrastructure.\n- **Containerization and orchestration tools**: Tools like Docker, Kubernetes, OpenShift, Docker Swarm, and Amazon ECS (Elastic Container Service) help manage and orchestrate containers at scale.\n- **Monitoring and logging tools**: Tools like Prometheus, ELK Stack (Elasticsearch, Logstash, and Kibana), Datadog, Splunk, and Grafana help track system performance, logging, and alerting.\n- **Configuration management tools**: Tools like Chef, Puppet, CFEngine, SaltStack, and Ansible help ensure system configurations remain consistent across environments.\n- **Security and compliance tools**: Tools like HashiCorp Vault, OWASP ZAP, Snyk, SonarQube, and Aqua Security help enforce security policies, perform scans, and conduct compliance checks.\n- **Collaboration and communication tools**: Tools like Slack, Microsoft Teams, Trello, Jira, and Confluence help facilitate communication and collaboration between teams.\n\n### 12. Balance quality and speed\n\nA key promise of DevOps is that it delivers software quickly. While it's tempting to speed up development processes, this often leads to reduced quality and potential security vulnerabilities. The pressure is further heightened because a lot of metrics in DevOps are based on how fast your system is, making it even more tempting to prioritize fast delivery over quality.\n\nTo avoid these pitfalls, strike a balance between quality and speed by taking the time to test the application before release. Below are some strategies to help maintain this balance:\n\n- Implement continuous testing into your CI/CD pipeline to catch bugs early.\n- Encourage a culture of quality that makes developers take full ownership of their code.\n- Define quality checkpoints like code reviews, tests, and coding standards that must be passed before moving to production.\n\n### 13. Use feature flags to manage features\n\nFeature flags (also known as Feature Toggles) are powerful tools that let you enable or disable specific features in an application without deploying new code. They provide fine-grain control over the parts of an application that are visible and active at any time.\n\n![Feature flags](https://assets.roadmap.sh/guest/feature-flags-7unnx.png)\n\nYou can use a feature flag in your DevOps processes to:\n\n- Perform gradual feature rollout.\n- Safely deploy features and rollback if needed.\n- Perform A/B testing\n\n### 14. Adopt agile project management\n\nAgile software development methodologies like Scrum and Kanban are well-suited to the iterative nature of DevOps. Agile uses a continuous approach to develop software rather than the linear waterfall model.\n\n![Agile VS Waterfall](https://assets.roadmap.sh/guest/agile-project-management-1pjcq.png)\n\nBy embracing agile project management, you manage your projects better by breaking them down into smaller and manageable chunks rather than dealing with them in large chunks that are prone to error.\n\n## DevOps anti-patterns to avoid\n\nWhile DevOps has become the go-to approach for delivering scalable and robust applications, it has also introduced certain anti-patterns that can prevent you from fully reaping its benefits. These anti-patterns can lead to inefficiencies, limit collaboration, and result in poor outcomes. Let’s look at some common anti-patterns you should avoid:\n\n**Automating everything without understanding**\nBecause automation is at the center of DevOps, teams often fall into the trap of automating every process without understanding the underlying workflow or business logic. This can lead to incorrect implementation, inefficient processes, complexities, and sometimes bugs.\n\nBefore you automate a process, make sure you understand the underlying workflow. Start with critical processes that provide the most value, and regularly review automated processes to confirm they are providing value.\n\n**DevOps as a one-time project**\nWhen most teams build or extend a project, timelines are usually attached. They have start and end dates for product design, engineering, **DevOps**, QA, and more, which may cause them to view DevOps as a short-term project. This prevents teams from realizing the long-term benefits and leads to a lack of continuous improvement.\n\nYou need to adopt DevOps as a continuous practice by regularly evaluating processes and workflow and encouraging your team to experiment.\n\n**Not having a proper monitoring and feedback loop**\nFailing to implement adequate monitoring and feedback mechanisms to track application performance, reliability, and user experience makes it difficult for the DevOps team to detect issues in real-time. This can lead to longer recovery time when there’s an issue, and the team may miss opportunities to learn and improve the system.\n\nTo address this, you need to implement end-to-end monitoring and observability tools to gain insight into the system’s health. Additionally, a clear feedback loop should be established so that responsible teams are notified promptly when issues are detected.\n\n**Siloed DevOps team**\nA common practice in most organizations is to separate the DevOps Team from other teams and task them with all DevOps activities. This separation defeats the core principle of DevOps: cross-functional collaboration and shared ownership. It isolates the DevOps team from others, leading to communication gaps and a lack of ownership.\n\nTo address this, promote a DevOps culture of shared responsibility where DevOps practices are adopted across all teams.\n\n**Over-reliance on tools**\nAdopting the latest and trendiest DevOps tool doesn’t guarantee success. Sometimes, they even increase the problems if not used correctly. DevOps is about processes, people, and tools.\n\nTo address this, follow the right processes: ensure effective team collaboration, improve workflows and align with the teams before choosing tools.\n\n**Too many feature flags**\nWhile feature flags are powerful, too many can lead to technical debt, making the codebase messy, cluttered, and difficult to maintain.\n\nTo address this, use feature flags as needed and regularly clean up flags that are no longer needed.\n\n**Overcomplicating the CI/CD pipeline**\nWhen pipelines are overly complicated with multi-step CI/CD, stages, and checks, it leads to slow deployments. This can slow down the releases, become a bottleneck, and make troubleshooting difficult.\n\nYou can address this by keeping the pipeline simple and focusing on key steps like build, test, and deploy. Then, add stages only when needed.\n\n**Not defining what success looks like**\nFailing to define and track meaningful metrics can make it difficult to measure the success or failure of DevOps practices. Without clear metrics, the team may not know if they are improving, and the team leads may struggle to justify the investment in DevOps to management.\n\nYou can address this by defining a key performance index (KPI) that aligns with your business goal, such as deployment frequency, change lead time, and mean time to recovery (MTTR).\n\n## Key takeaway\n\nDevOps best practices are essential for improving your software development and operations processes. These practices help improve your workflows, enhance collaboration, manage resources better, and ensure the delivery of high-quality software.\n\nAdditionally, you need to be aware of anti-patterns and pitfalls that can hinder the success of your DevOps implementation by avoiding common patterns like creating silos or overcomplicating your pipelines.\n\nStay up-to-date with the latest developments in the DevOps ecosystem by following the [DevOps roadmap](https://roadmap.sh/devops).\n\n";
				}
				async function compiledContent$11() {
					return await html$11();
				}
				function getHeadings$11() {
					return [{"depth":2,"slug":"devops-key-best-practices","text":"DevOps key best practices"},{"depth":3,"slug":"1-embrace-a-culture-of-collaboration-and-communication","text":"1. Embrace a culture of collaboration and communication"},{"depth":3,"slug":"2-continuously-seek-feedback","text":"2. Continuously seek feedback"},{"depth":3,"slug":"3-adopt-continuous-integration","text":"3. Adopt continuous integration"},{"depth":3,"slug":"4-practice-continuous-delivery","text":"4. Practice continuous delivery"},{"depth":3,"slug":"5-embrace-infrastructure-as-code-iac","text":"5. Embrace Infrastructure as Code (IaC)"},{"depth":3,"slug":"6-adopt-microservices-architecture","text":"6. Adopt microservices architecture"},{"depth":3,"slug":"7-use-version-control-for-everything","text":"7. Use version control for everything"},{"depth":3,"slug":"8-practice-continuous-monitoring-and-observability","text":"8. Practice continuous monitoring and observability"},{"depth":3,"slug":"9-adopt-configuration-management","text":"9. Adopt configuration management"},{"depth":3,"slug":"10-practice-devsecops","text":"10. Practice DevSecOps"},{"depth":3,"slug":"11-choose-the-right-devops-tools","text":"11. Choose the right DevOps tools"},{"depth":3,"slug":"12-balance-quality-and-speed","text":"12. Balance quality and speed"},{"depth":3,"slug":"13-use-feature-flags-to-manage-features","text":"13. Use feature flags to manage features"},{"depth":3,"slug":"14-adopt-agile-project-management","text":"14. Adopt agile project management"},{"depth":2,"slug":"devops-anti-patterns-to-avoid","text":"DevOps anti-patterns to avoid"},{"depth":2,"slug":"key-takeaway","text":"Key takeaway"}];
				}

				const Content$11 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$11;
					content.file = file$11;
					content.url = url$11;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$11())}`;
				});

const __vite_glob_0_33 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$11,
	compiledContent: compiledContent$11,
	default: Content$11,
	file: file$11,
	frontmatter: frontmatter$11,
	getHeadings: getHeadings$11,
	rawContent: rawContent$11,
	url: url$11
}, Symbol.toStringTag, { value: 'Module' }));

const html$10 = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-career-path-2h4r7.jpg\" alt=\"Is it worth learning DevOps as a career path?\"></p>\n<p>Making career choices could be overwhelming for beginners and experienced software developers seeking to advance their skills. This could be due to several factors, such as the abundance of options, the numerous resources on the internet, the steep learning curves, and so on.</p>\n<p>However, before selecting a path, it is helpful to look at certain factors, such as your interests, strengths, and the future prospects of the career path, as these factors play a crucial role in determining your potential for success.</p>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineering</a> is one of the most <a href=\"https://uk.indeed.com/career-advice/career-development/software-engineering-jobs\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">in-demand and highest-paying roles</a> in the tech industry and, in recent times, has become the go-to choice for many people getting into tech and experienced tech professionals.</p>\n<p>As a DevOps professional, you’ll enjoy spectacular career growth filled with endless opportunities.</p>\n<p>The DevOps philosophy involves bringing developers and operation teams together to improve the software delivery process.</p>\n<p>This guide will detail DevOps and provide the necessary information to help you decide whether to pursue the Devops engineer career path and steps to ensure a DevOps career growth.</p>\n<h2 id=\"what-is-devops\">What is DevOps?</h2>\n<p>Derived from the combination of development (Dev) and operations (Ops), DevOps is a software development methodology that aims to improve collaboration between development and operations teams, increase the efficiency, security, and speed of software development and delivery.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-8vc2m.jpg\" alt=\"DevOps\"></p>\n<p>Within DevOps, you’ll play an important part in the entire software development lifecycle - from initial planning to implementation. This means you’ll be a team player with excellent communication skills.</p>\n<h2 id=\"is-devops-engineer-career-path-right-for-you\">Is DevOps engineer career path right for you?</h2>\n<p>DevOps is a field that’s here to stay. The DevOps market grew to an incredible $10.3 billion at the end of 2023 and it is growing. Hence, securing a DevOps role is your first step toward a long-lasting career.</p>\n<p>DevOps career paths are worth considering if you have experience in software development, networking, or operations. It involves automation, testing, monitoring, configuring, networking, and Infrastructure as Code (IaC) and requires a diverse skill set as discussed below. It is a bridge between development and operations teams.</p>\n<p>These are some factors to consider before choosing the DevOps engineer career path:</p>\n<ul>\n<li>Interest in automation</li>\n<li>Enjoy collaborating</li>\n<li>Interest in infrastructure management</li>\n<li>Love for problem-solving</li>\n<li>Willingness to continuously learn new skills and technology</li>\n</ul>\n<h3 id=\"interest-in-automation\">Interest in automation</h3>\n<p><a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">Automation</a> is an integral part of the DevOps career path. It involves writing scripts and code to automate repetitive tasks and enhance software delivery processes.  By automating repetitive tasks and workflows, DevOps teams can increase efficiency, reduce errors, and accelerate time to market for software releases.</p>\n<h3 id=\"enjoy-collaborating\">Enjoy collaborating</h3>\n<p>Collaboration is crucial in the DevOps career, as you will work with different people across several teams. The goal is to break down the silos across teams and ensure they all work together to achieve the same goal. Having great collaboration skills is crucial to being a DevOps engineer.</p>\n<h3 id=\"interest-in-infrastructure-management\">Interest in infrastructure management</h3>\n<p>Do you enjoy working on infrastructural rather than domain code? The plus side of infrastructural code is that it can be replicated across several infrastructures once it is set up, and you can transfer the knowledge to other organizations instead of domain code, where you would always need to learn the domain of the business you are writing code for.</p>\n<h3 id=\"love-for-problem-solving\">Love for problem-solving</h3>\n<p>Choosing this field requires that you enjoy solving problems and can devise solutions to complex problems.</p>\n<h3 id=\"willingness-to-continuously-learn-new-skills-and-technology\">Willingness to continuously learn new skills and technology</h3>\n<p>DevOps is an evolving field, and there is always something new. To be up to date, you have to be willing and open to continuous learning. This involves taking courses, reading articles, and getting updates on things happening in the DevOps field and tech.</p>\n<p>It is worth noting that working in DevOps involves working in high-pressure environments. You are constantly relied on to manage an organization’s IT and new and existing cloud systems, which can sometimes be overwhelming.</p>\n<p>Also, there is a steep learning curve. As a tech beginner, it could be daunting and challenging to get into DevOps and adapt the DevOps culture, but as you go along, it gets easier.</p>\n<h2 id=\"devops-in-2025\">DevOps in 2025</h2>\n<p>According to <a href=\"https://www.statista.com/statistics/1367003/in-demand-it-roles/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, DevOps software engineering positions are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average annual salary of <a href=\"https://www.indeed.com/career/development-operations-engineer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">DevOps engineer</a> in the USA is $124,392.</p>\n<p>DevOps has evolved over the last decade. Today, it is more than automating tasks and having engineers write scripts. It is now more about practices that can help to automate software delivery, improve business and the overall software development processes.</p>\n<p>Certain trends are impacting the DevOps market currently and will also play a role in the future of DevOps. Some of them include:</p>\n<ul>\n<li>Microservices</li>\n<li>Cloud technology</li>\n<li>Automation and CI/CD</li>\n<li>Artificial Intelligence and Machine Learning</li>\n</ul>\n<p>Let’s look at these trends and how they indirectly influence your decision.</p>\n<h3 id=\"microservices\">Microservices</h3>\n<p>This architecture enables the agile development and continuous delivery of software solutions. In a microservice architecture, applications are split into smaller parts known as microservices that focus on a single responsibility. Each part (microservice) is developed and deployed independently, and microservices communicate via events or API interfaces.</p>\n<p>It is a common trend, and many organizations are adopting this architecture because of its benefits, one of which is adapting to market changes and shipping out features faster rather than the delays of modular monoliths. A DevOps engineer is critical to helping in the adoption and success of microservices.</p>\n<h3 id=\"cloud-technology\">Cloud technology</h3>\n<p>Cloud-native applications have become popular recently. They involve developing and deploying software applications and their dependencies in a cloud environment.</p>\n<p>There are several cloud platforms, some of the most popular ones being <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Microsoft Azure, and Google Cloud Platform (GCP). One advantage of using these cloud providers is that you don’t have to manage the cloud infrastructure but instead focus on developing your applications. You also pay for only the resources you use.</p>\n<p>Containerization tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> have been made popular by cloud services and microservices. These <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">tools for DevOps engineers</a> are an important part of their toolkit.</p>\n<h3 id=\"automation-and-cicd\">Automation and CI/CD</h3>\n<p>Automation and continuous integration/continuous deployment are integral to DevOps. Organizations are widely adopting automation of their infrastructure and deployments because of its benefits including faster and more reliable application deployments.</p>\n<p>Also, with the adoption of GitOps, an operational framework that takes DevOps principles and best practices for application development and applies them to infrastructure automation, the deployment process is even more efficient. DevOps professionals are the major catalysts for this and will remain relevant.</p>\n<h3 id=\"artificial-intelligence-and-machine-learning\">Artificial intelligence and machine learning</h3>\n<p>AI and ML have become integrated into our daily lives and <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">automation tools</a> are used to automate processes and routine tasks, monitor system health, and predict potential system issues. These AI tools need to be designed, maintained, and enhanced.</p>\n<p>In the AI and ML field, it is the job of an MLOps engineer, but a DevOps engineer can upskill and switch roles to an MLOps engineer.</p>\n<p>There is a concern that AI will replace DevOps professionals. However, I believe AI will complement the DevOps process, improve the software development lifecycle, and make better DevOps engineers.</p>\n<h2 id=\"specializations-in-devops\">Specializations in DevOps</h2>\n<p>The DevOps career paths are rewarding and successful. The DevOps career also offers a lot of growth opportunities, and as you have seen in the previous section, it is in high demand.</p>\n<p>There are several DevOps career paths and devops career opportunities for both entry-level and experienced positions. Normally, working in DevOps starts with an entry-level position like a release manager or junior DevOps engineer.</p>\n<p>As a DevOps professional, you can decide to go for any of these following DevOps skills and specializations:</p>\n<ul>\n<li>Automation expert</li>\n<li>General DevOps engineer</li>\n<li>System engineer</li>\n<li>DevOps architect</li>\n<li>DevOps release manager</li>\n<li>DevSecOps engineer</li>\n<li>DevOps test engineer</li>\n</ul>\n<h3 id=\"automation-expert\">Automation expert</h3>\n<p>In the DevOps career path, you can work as an automation expert or engineer, depending on the organization. You can specialize in implementing automation solutions, continuous improvement, and software delivery. As automation plays a critical role, every DevOps engineer should be familiar with the automation process.</p>\n<p>Automation experts specialize in implementing continuous integration (CI) and continuous delivery (CD) within the software lifecycle to boost the efficiency of development and operations teams. Additionally, they design and integrate monitoring, dashboard, and incident management tools like <a href=\"https://grafana.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Grafana</a>, <a href=\"https://grafana.com/oss/loki/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Loki</a>, and <a href=\"https://datalust.co/seq\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Seq</a>.</p>\n<h3 id=\"general-devops-engineer\">General DevOps engineer</h3>\n<p>This is one of the key DevOps career path. As a DevOps engineer, you work closely with developers and act as a bridge between other team members. You are involved in all aspects of the software development life cycle. You are also a bridge between operations and development teams. DevOps engineers need to be proficient with top DevOps automation tools and have knowledge of cloud platforms like AWS and Google Cloud. Usually a newbie in DevOps starts in this path as a junior DevOps engineer.</p>\n<h3 id=\"systems-engineer\">Systems engineer</h3>\n<p>This is another DevOps career you can assume as you become a DevOps engineer. As a system engineer, you are responsible for designing, deploying, and maintaining an organization’s IT infrastructure, including the hardware, software, networking, and operating systems.</p>\n<h3 id=\"devops-architect\">DevOps architect</h3>\n<p>In this DevOps career path, a DevOps architect is responsible for designing and implementing the overall DevOps architecture and processes in an organization.</p>\n<p>A DevOps architect is responsible for building the foundation upon which the entire process rests. The DevOps architect role is a more senior role than a DevOps engineer.</p>\n<p>A DevOps architect is like the contractor of the DevOps world and ensures consistency of agile principles across the DevOps process and work closely with other senior DevOps engineers and professionals to ensure these principles are followed.</p>\n<h3 id=\"devops-release-manager\">DevOps release manager</h3>\n<p>This is a DevOps career path where you are responsible for managing and overseeing software releases throughout the DevOps process. A DevOps release manager ensures software products are released on time, with high quality and reliability.</p>\n<h3 id=\"devsecops-engineer\">DevSecOps engineer</h3>\n<p>DevSecOps stands for Development, Security and Operations. Such engineers design and implement secure architectures for software and infrastructure, manage vulnerabilities, and protect against security threats.</p>\n<p>DevSecOps engineers ensure that software applications and their supporting infrastructure are secure.</p>\n<h3 id=\"devops-test-engineer\">DevOps test engineer</h3>\n<p>A DevOps test engineer is responsible for implementing tests to ensure software products are high-quality, reliable, and scalable. They oversee all stages of the testing process, such as designing automated testing frameworks, identifying and resolving issues, and certifying compliance with industry standards.</p>\n<p>Other DevOps roles include:</p>\n<ul>\n<li>DevOps Cloud Engineer</li>\n<li>Lead DevOps Engineer</li>\n</ul>\n<h2 id=\"skills-required-in-devops\">Skills required in DevOps</h2>\n<p>DevOps engineers require both technical skills and soft skills, which may vary from organization to organization, as well as team structure, technologies, and tools. However, some common skills exist across the board.</p>\n<ul>\n<li>Knowledge of coding and scripting</li>\n<li>In-depth knowledge of container and container orchestration</li>\n<li>Knowledge of logging and configuration management</li>\n<li>Understanding of system administration</li>\n<li>In-depth knowledge of version control systems</li>\n<li>Knowledge of continuous integration and continuous deployment (CI/CD)</li>\n<li>Collaboration skills</li>\n</ul>\n<h3 id=\"knowledge-of-coding-and-scripting\">Knowledge of coding and scripting</h3>\n<p>To build a DevOps career, you should know at least one programming language and be proficient in scripting to further automate tasks and processes that would be tedious and slow. You should also be familiar with software development principles.</p>\n<h3 id=\"in-depth-knowledge-of-container-and-container-orchestration\">In-depth knowledge of container and container orchestration</h3>\n<p>With micro-services popularity, applications can be shipped in containers and deployed to the cloud. It is possible with the help of tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and container orchestration tools like <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>. A DevOps cloud engineer must have extensive knowledge of these tools and how to use them.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/docker-and-kubernetes-kzopj.jpg\" alt=\"Docker and kubernetes\"></p>\n<h3 id=\"knowledge-of-logging-and-configuration-management-tools\">Knowledge of logging and configuration management tools</h3>\n<p>Monitoring is one of the core DevOps processes. In the DevOps career path, you are expected to have a knowledge of monitoring and logging tools. A popular one used is <a href=\"https://grafana.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Grafana</a>. You should be comfortable working with configuration management tools, automation frameworks, and Linux environments.</p>\n<h3 id=\"understanding-of-system-administration\">Understanding of system administration</h3>\n<p>A basic understanding of provisioning and managing servers, security monitoring, and networks is required in the DevOps career path. You will monitor the servers for security vulnerabilities and apply patches when necessary.</p>\n<h3 id=\"in-depth-knowledge-of-version-control-systems-and-source-code-management\">In-depth knowledge of version control systems and source code management</h3>\n<p>Version control is one of the DevOps tools, and required technical skills that a DevOps engineer should have. One of the common Version Control Systems(VCS) out there is Git.</p>\n<h3 id=\"knowledge-of-continuous-integration-and-continuous-deployment-cicd\">Knowledge of continuous integration and continuous deployment (CI/CD)</h3>\n<p>A DevOps professional is required to have a deep understanding of CI/CD. CI/CD involves the design and implementation of software delivery pipelines. It enables faster software release cycles. Some key DevOps tools include <a href=\"https://www.jenkins.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Jenkins</a>, <a href=\"https://azure.microsoft.com/de-de/products/devops\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Azure DevOps</a>, <a href=\"https://circleci.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">CircleCI</a>, <a href=\"https://bitbucket.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">BitBucket Pipelines</a>, <a href=\"https://github.com/features/actions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub Actions</a>, etc.</p>\n<h3 id=\"communication-and-collaboration-skills\">Communication and Collaboration skills</h3>\n<p>As a DevOps professional, be prepared to work closely with cross-functional development teams. You are expected to have good communication and collaboration skills to be an effective team member. You should be able to clearly communicate your ideas to other developers, end-users and stakeholders.</p>\n<h2 id=\"how-can-i-start-my-devops-career\">How can I start my DevOps career?</h2>\n<p>The next question you might be asking is how do I start my career in <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a>.\nYou can begin your DevOps career by obtaining a bachelor’s degree in computer science degree from a college.</p>\n<p>You can also obtain DevOps certification from certified DevOps trainers. One of the popular DevOps certifications is the AWS Certified DevOps Engineer.</p>\n<p>roadmap.sh offers step-by-step guidance on <a href=\"https://roadmap.sh/devops/how-to-become-devops-engineer\" target=\"_blank\">how to become a DevOps engineer</a>, and by signing up, you will be able to:</p>\n<ul>\n<li>Keep track of your progress and also share it on your roadmap.sh profile.</li>\n<li>Collaborate on other official roadmaps.</li>\n<li>Draw your <a href=\"https://draw.roadmap.sh/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap</a>, either as an individual learner or for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">Dev</a> <a href=\"https://roadmap.sh/teams\" target=\"_blank\">team</a>.</li>\n<li>Generate new roadmaps with <a href=\"https://roadmap.sh/ai\" target=\"_blank\">AI</a>.</li>\n</ul>";

				const frontmatter$10 = {"title":"Is DevOps engineering a good career path in @currentYear@?","description":"Learn why a DevOps career path is a smart choice in 2025. Get insights into demand, growth, and earning potential in DevOps.","authorId":"ekene","excludedBySlug":"/devops/career-path","seo":{"title":"Is DevOps engineering a good career path in @currentYear@?","description":"Learn why a DevOps career path is a smart choice in 2025. Get insights into demand, growth, and earning potential in DevOps.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-engineer-career-path-2h4r7.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-08-20T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$10 = "/workspace/src/data/guides/devops-career-path.md";
				const url$10 = undefined;
				function rawContent$10() {
					return "   \n                                                                   \n                                                                                                                                           \n               \n                                     \n    \n                                                                     \n                                                                                                                                             \n                                                                                     \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Is it worth learning DevOps as a career path?](https://assets.roadmap.sh/guest/devops-engineer-career-path-2h4r7.jpg)\n\nMaking career choices could be overwhelming for beginners and experienced software developers seeking to advance their skills. This could be due to several factors, such as the abundance of options, the numerous resources on the internet, the steep learning curves, and so on.\n\nHowever, before selecting a path, it is helpful to look at certain factors, such as your interests, strengths, and the future prospects of the career path, as these factors play a crucial role in determining your potential for success.\n\n[DevOps engineering](https://roadmap.sh/devops) is one of the most [in-demand and highest-paying roles](https://uk.indeed.com/career-advice/career-development/software-engineering-jobs) in the tech industry and, in recent times, has become the go-to choice for many people getting into tech and experienced tech professionals.\n\nAs a DevOps professional, you'll enjoy spectacular career growth filled with endless opportunities.\n\nThe DevOps philosophy involves bringing developers and operation teams together to improve the software delivery process.\n\nThis guide will detail DevOps and provide the necessary information to help you decide whether to pursue the Devops engineer career path and steps to ensure a DevOps career growth.\n\n## What is DevOps?\n\nDerived from the combination of development (Dev) and operations (Ops), DevOps is a software development methodology that aims to improve collaboration between development and operations teams, increase the efficiency, security, and speed of software development and delivery.\n\n![DevOps](https://assets.roadmap.sh/guest/devops-8vc2m.jpg)\n\nWithin DevOps, you'll play an important part in the entire software development lifecycle - from initial planning to implementation. This means you'll be a team player with excellent communication skills.\n\n## Is DevOps engineer career path right for you?\n\nDevOps is a field that's here to stay. The DevOps market grew to an incredible $10.3 billion at the end of 2023 and it is growing. Hence, securing a DevOps role is your first step toward a long-lasting career.\n\nDevOps career paths are worth considering if you have experience in software development, networking, or operations. It involves automation, testing, monitoring, configuring, networking, and Infrastructure as Code (IaC) and requires a diverse skill set as discussed below. It is a bridge between development and operations teams.\n\nThese are some factors to consider before choosing the DevOps engineer career path:\n\n- Interest in automation\n- Enjoy collaborating\n- Interest in infrastructure management\n- Love for problem-solving\n- Willingness to continuously learn new skills and technology\n\n### Interest in automation\n\n[Automation](https://roadmap.sh/devops/automation) is an integral part of the DevOps career path. It involves writing scripts and code to automate repetitive tasks and enhance software delivery processes.  By automating repetitive tasks and workflows, DevOps teams can increase efficiency, reduce errors, and accelerate time to market for software releases.\n\n### Enjoy collaborating\n\nCollaboration is crucial in the DevOps career, as you will work with different people across several teams. The goal is to break down the silos across teams and ensure they all work together to achieve the same goal. Having great collaboration skills is crucial to being a DevOps engineer.\n\n### Interest in infrastructure management\n\nDo you enjoy working on infrastructural rather than domain code? The plus side of infrastructural code is that it can be replicated across several infrastructures once it is set up, and you can transfer the knowledge to other organizations instead of domain code, where you would always need to learn the domain of the business you are writing code for.\n\n### Love for problem-solving\n\nChoosing this field requires that you enjoy solving problems and can devise solutions to complex problems.\n\n### Willingness to continuously learn new skills and technology\n\nDevOps is an evolving field, and there is always something new. To be up to date, you have to be willing and open to continuous learning. This involves taking courses, reading articles, and getting updates on things happening in the DevOps field and tech.\n\nIt is worth noting that working in DevOps involves working in high-pressure environments. You are constantly relied on to manage an organization's IT and new and existing cloud systems, which can sometimes be overwhelming.\n\nAlso, there is a steep learning curve. As a tech beginner, it could be daunting and challenging to get into DevOps and adapt the DevOps culture, but as you go along, it gets easier.\n\n## DevOps in 2025\n\nAccording to [Statista](https://www.statista.com/statistics/1367003/in-demand-it-roles/), DevOps software engineering positions are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average annual salary of [DevOps engineer](https://www.indeed.com/career/development-operations-engineer/salaries?from=top_sb) in the USA is $124,392.\n\nDevOps has evolved over the last decade. Today, it is more than automating tasks and having engineers write scripts. It is now more about practices that can help to automate software delivery, improve business and the overall software development processes.\n\nCertain trends are impacting the DevOps market currently and will also play a role in the future of DevOps. Some of them include:\n\n- Microservices\n- Cloud technology\n- Automation and CI/CD\n- Artificial Intelligence and Machine Learning\n\nLet's look at these trends and how they indirectly influence your decision.\n\n### Microservices\n\nThis architecture enables the agile development and continuous delivery of software solutions. In a microservice architecture, applications are split into smaller parts known as microservices that focus on a single responsibility. Each part (microservice) is developed and deployed independently, and microservices communicate via events or API interfaces.\n\nIt is a common trend, and many organizations are adopting this architecture because of its benefits, one of which is adapting to market changes and shipping out features faster rather than the delays of modular monoliths. A DevOps engineer is critical to helping in the adoption and success of microservices.\n\n### Cloud technology\n\nCloud-native applications have become popular recently. They involve developing and deploying software applications and their dependencies in a cloud environment.\n\nThere are several cloud platforms, some of the most popular ones being [AWS](https://roadmap.sh/aws), Microsoft Azure, and Google Cloud Platform (GCP). One advantage of using these cloud providers is that you don't have to manage the cloud infrastructure but instead focus on developing your applications. You also pay for only the resources you use.\n\nContainerization tools like [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes) have been made popular by cloud services and microservices. These [tools for DevOps engineers](https://roadmap.sh/devops/tools) are an important part of their toolkit.\n\n### Automation and CI/CD\n\nAutomation and continuous integration/continuous deployment are integral to DevOps. Organizations are widely adopting automation of their infrastructure and deployments because of its benefits including faster and more reliable application deployments.\n\nAlso, with the adoption of GitOps, an operational framework that takes DevOps principles and best practices for application development and applies them to infrastructure automation, the deployment process is even more efficient. DevOps professionals are the major catalysts for this and will remain relevant.\n\n### Artificial intelligence and machine learning\n\nAI and ML have become integrated into our daily lives and [automation tools](https://roadmap.sh/devops/automation-tools) are used to automate processes and routine tasks, monitor system health, and predict potential system issues. These AI tools need to be designed, maintained, and enhanced.\n\nIn the AI and ML field, it is the job of an MLOps engineer, but a DevOps engineer can upskill and switch roles to an MLOps engineer.\n\nThere is a concern that AI will replace DevOps professionals. However, I believe AI will complement the DevOps process, improve the software development lifecycle, and make better DevOps engineers.\n\n## Specializations in DevOps\n\nThe DevOps career paths are rewarding and successful. The DevOps career also offers a lot of growth opportunities, and as you have seen in the previous section, it is in high demand.\n\nThere are several DevOps career paths and devops career opportunities for both entry-level and experienced positions. Normally, working in DevOps starts with an entry-level position like a release manager or junior DevOps engineer.\n\nAs a DevOps professional, you can decide to go for any of these following DevOps skills and specializations:\n\n- Automation expert\n- General DevOps engineer\n- System engineer\n- DevOps architect\n- DevOps release manager\n- DevSecOps engineer\n- DevOps test engineer\n\n### Automation expert\n\nIn the DevOps career path, you can work as an automation expert or engineer, depending on the organization. You can specialize in implementing automation solutions, continuous improvement, and software delivery. As automation plays a critical role, every DevOps engineer should be familiar with the automation process.\n\nAutomation experts specialize in implementing continuous integration (CI) and continuous delivery (CD) within the software lifecycle to boost the efficiency of development and operations teams. Additionally, they design and integrate monitoring, dashboard, and incident management tools like [Grafana](https://grafana.com/), [Loki](https://grafana.com/oss/loki/), and [Seq](https://datalust.co/seq).\n\n### General DevOps engineer\n\nThis is one of the key DevOps career path. As a DevOps engineer, you work closely with developers and act as a bridge between other team members. You are involved in all aspects of the software development life cycle. You are also a bridge between operations and development teams. DevOps engineers need to be proficient with top DevOps automation tools and have knowledge of cloud platforms like AWS and Google Cloud. Usually a newbie in DevOps starts in this path as a junior DevOps engineer.\n\n### Systems engineer\n\nThis is another DevOps career you can assume as you become a DevOps engineer. As a system engineer, you are responsible for designing, deploying, and maintaining an organization's IT infrastructure, including the hardware, software, networking, and operating systems.\n\n### DevOps architect\n\nIn this DevOps career path, a DevOps architect is responsible for designing and implementing the overall DevOps architecture and processes in an organization.\n\nA DevOps architect is responsible for building the foundation upon which the entire process rests. The DevOps architect role is a more senior role than a DevOps engineer.\n\nA DevOps architect is like the contractor of the DevOps world and ensures consistency of agile principles across the DevOps process and work closely with other senior DevOps engineers and professionals to ensure these principles are followed.\n\n### DevOps release manager\n\nThis is a DevOps career path where you are responsible for managing and overseeing software releases throughout the DevOps process. A DevOps release manager ensures software products are released on time, with high quality and reliability.\n\n### DevSecOps engineer\n\nDevSecOps stands for Development, Security and Operations. Such engineers design and implement secure architectures for software and infrastructure, manage vulnerabilities, and protect against security threats.\n\nDevSecOps engineers ensure that software applications and their supporting infrastructure are secure.\n\n### DevOps test engineer\n\nA DevOps test engineer is responsible for implementing tests to ensure software products are high-quality, reliable, and scalable. They oversee all stages of the testing process, such as designing automated testing frameworks, identifying and resolving issues, and certifying compliance with industry standards.\n\nOther DevOps roles include:\n\n- DevOps Cloud Engineer\n- Lead DevOps Engineer\n\n## Skills required in DevOps\n\nDevOps engineers require both technical skills and soft skills, which may vary from organization to organization, as well as team structure, technologies, and tools. However, some common skills exist across the board.\n\n- Knowledge of coding and scripting\n- In-depth knowledge of container and container orchestration\n- Knowledge of logging and configuration management\n- Understanding of system administration\n- In-depth knowledge of version control systems\n- Knowledge of continuous integration and continuous deployment (CI/CD)\n- Collaboration skills\n\n### Knowledge of coding and scripting\n\nTo build a DevOps career, you should know at least one programming language and be proficient in scripting to further automate tasks and processes that would be tedious and slow. You should also be familiar with software development principles.\n\n### In-depth knowledge of container and container orchestration\n\nWith micro-services popularity, applications can be shipped in containers and deployed to the cloud. It is possible with the help of tools like [Docker](https://roadmap.sh/docker) and container orchestration tools like [Kubernetes](https://roadmap.sh/kubernetes). A DevOps cloud engineer must have extensive knowledge of these tools and how to use them.\n\n![Docker and kubernetes](https://assets.roadmap.sh/guest/docker-and-kubernetes-kzopj.jpg)\n\n### Knowledge of logging and configuration management tools\n\nMonitoring is one of the core DevOps processes. In the DevOps career path, you are expected to have a knowledge of monitoring and logging tools. A popular one used is [Grafana](https://grafana.com/). You should be comfortable working with configuration management tools, automation frameworks, and Linux environments.\n\n### Understanding of system administration\n\nA basic understanding of provisioning and managing servers, security monitoring, and networks is required in the DevOps career path. You will monitor the servers for security vulnerabilities and apply patches when necessary.\n\n### In-depth knowledge of version control systems and source code management\n\nVersion control is one of the DevOps tools, and required technical skills that a DevOps engineer should have. One of the common Version Control Systems(VCS) out there is Git.\n\n### Knowledge of continuous integration and continuous deployment (CI/CD)\n\nA DevOps professional is required to have a deep understanding of CI/CD. CI/CD involves the design and implementation of software delivery pipelines. It enables faster software release cycles. Some key DevOps tools include [Jenkins](https://www.jenkins.io/), [Azure DevOps](https://azure.microsoft.com/de-de/products/devops), [CircleCI](https://circleci.com/), [BitBucket Pipelines](https://bitbucket.org/), [GitHub Actions](https://github.com/features/actions), etc.\n\n### Communication and Collaboration skills\n\nAs a DevOps professional, be prepared to work closely with cross-functional development teams. You are expected to have good communication and collaboration skills to be an effective team member. You should be able to clearly communicate your ideas to other developers, end-users and stakeholders.\n\n## How can I start my DevOps career?\n\nThe next question you might be asking is how do I start my career in [DevOps](https://roadmap.sh/devops).\nYou can begin your DevOps career by obtaining a bachelor's degree in computer science degree from a college.\n\nYou can also obtain DevOps certification from certified DevOps trainers. One of the popular DevOps certifications is the AWS Certified DevOps Engineer.\n\nroadmap.sh offers step-by-step guidance on [how to become a DevOps engineer](https://roadmap.sh/devops/how-to-become-devops-engineer), and by signing up, you will be able to:\n\n- Keep track of your progress and also share it on your roadmap.sh profile.\n- Collaborate on other official roadmaps.\n- Draw your [roadmap](https://draw.roadmap.sh/), either as an individual learner or for [Dev](https://roadmap.sh/teams) [team](https://roadmap.sh/teams).\n- Generate new roadmaps with [AI](https://roadmap.sh/ai).\n";
				}
				async function compiledContent$10() {
					return await html$10();
				}
				function getHeadings$10() {
					return [{"depth":2,"slug":"what-is-devops","text":"What is DevOps?"},{"depth":2,"slug":"is-devops-engineer-career-path-right-for-you","text":"Is DevOps engineer career path right for you?"},{"depth":3,"slug":"interest-in-automation","text":"Interest in automation"},{"depth":3,"slug":"enjoy-collaborating","text":"Enjoy collaborating"},{"depth":3,"slug":"interest-in-infrastructure-management","text":"Interest in infrastructure management"},{"depth":3,"slug":"love-for-problem-solving","text":"Love for problem-solving"},{"depth":3,"slug":"willingness-to-continuously-learn-new-skills-and-technology","text":"Willingness to continuously learn new skills and technology"},{"depth":2,"slug":"devops-in-2025","text":"DevOps in 2025"},{"depth":3,"slug":"microservices","text":"Microservices"},{"depth":3,"slug":"cloud-technology","text":"Cloud technology"},{"depth":3,"slug":"automation-and-cicd","text":"Automation and CI/CD"},{"depth":3,"slug":"artificial-intelligence-and-machine-learning","text":"Artificial intelligence and machine learning"},{"depth":2,"slug":"specializations-in-devops","text":"Specializations in DevOps"},{"depth":3,"slug":"automation-expert","text":"Automation expert"},{"depth":3,"slug":"general-devops-engineer","text":"General DevOps engineer"},{"depth":3,"slug":"systems-engineer","text":"Systems engineer"},{"depth":3,"slug":"devops-architect","text":"DevOps architect"},{"depth":3,"slug":"devops-release-manager","text":"DevOps release manager"},{"depth":3,"slug":"devsecops-engineer","text":"DevSecOps engineer"},{"depth":3,"slug":"devops-test-engineer","text":"DevOps test engineer"},{"depth":2,"slug":"skills-required-in-devops","text":"Skills required in DevOps"},{"depth":3,"slug":"knowledge-of-coding-and-scripting","text":"Knowledge of coding and scripting"},{"depth":3,"slug":"in-depth-knowledge-of-container-and-container-orchestration","text":"In-depth knowledge of container and container orchestration"},{"depth":3,"slug":"knowledge-of-logging-and-configuration-management-tools","text":"Knowledge of logging and configuration management tools"},{"depth":3,"slug":"understanding-of-system-administration","text":"Understanding of system administration"},{"depth":3,"slug":"in-depth-knowledge-of-version-control-systems-and-source-code-management","text":"In-depth knowledge of version control systems and source code management"},{"depth":3,"slug":"knowledge-of-continuous-integration-and-continuous-deployment-cicd","text":"Knowledge of continuous integration and continuous deployment (CI/CD)"},{"depth":3,"slug":"communication-and-collaboration-skills","text":"Communication and Collaboration skills"},{"depth":2,"slug":"how-can-i-start-my-devops-career","text":"How can I start my DevOps career?"}];
				}

				const Content$10 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$10;
					content.file = file$10;
					content.url = url$10;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$10())}`;
				});

const __vite_glob_0_34 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$10,
	compiledContent: compiledContent$10,
	default: Content$10,
	file: file$10,
	frontmatter: frontmatter$10,
	getHeadings: getHeadings$10,
	rawContent: rawContent$10,
	url: url$10
}, Symbol.toStringTag, { value: 'Module' }));

const html$$ = () => "<p><img src=\"https://assets.roadmap.sh/guest/what-is-devops-engineer-jort4.jpg\" alt=\"What is a DevOps engineer and what are their responsibilities?\"></p>\n<p>Are you a developer monitoring recent changes in the ecosystem, looking to change careers or pick up new skills in 2025? If your choice is <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a>, you might be wondering what it entails, what it will take to become one in 2025, and how it is affected by the recent changes in the tech ecosystem.</p>\n<p>In recent years, the technology ecosystem has experienced a constant shift in the way hiring managers reach out, companies hire, and the roles and responsibilities described in job postings. Particularly, 2023 proved to be a challenging year as layoffs in the technology sector grew significantly, with more than <a href=\"https://www.statista.com/statistics/199999/worldwide-tech-layoffs-covid-19/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">262,000 employees laid off across 1,180 firms</a>.</p>\n<p>Despite this change, DevOps, a field within the same ecosystem, has experienced continuous growth. In fact, the DevOps market size is expected to grow to <a href=\"https://www.marketsandmarkets.com/Market-Reports/devops-market-824.html#:~:text=The%20global%20DevOps%20market%20size,USD%2010.4%20billion%20in%202023.\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">25.5 billion USD by 2028</a>. This indicates that the roles and responsibilities of a DevOps engineer in the modern technology environment will evolve alongside this increasing demand.</p>\n<p>In this guide, we’ll discuss the roles and responsibilities of a DevOps engineer, the importance of DevOps in teams, common roles within a DevOps team, and best practices for DevOps teams. Finally, the guide will offer roadmaps for your DevOps journey.</p>\n<p>A DevOps engineer’s roles and responsibilities include:</p>\n<ul>\n<li>\n<p>Following best practices and utilizing Infrastructure as Code (IaC) tools to design, implement, and manage infrastructure.</p>\n</li>\n<li>\n<p>Implementing and managing Continuous Integration and Continuous Delivery (CI/CD) pipelines to automate software and code releases.</p>\n</li>\n<li>\n<p>Facilitating and promoting interpersonal skills between the development teams, operations teams, and other stakeholders to establish productivity and continuous improvement.</p>\n</li>\n<li>\n<p>Implementing monitoring, logging, alerts, and dashboards to track the performance and health of applications and infrastructure.</p>\n</li>\n<li>\n<p>Writing and maintaining scripts to automate tasks and DevOps processes.</p>\n</li>\n<li>\n<p>Providing support and troubleshooting issues related to applications, systems, and infrastructure.</p>\n</li>\n<li>\n<p>Efficiently manage and monitor cloud resources by implementing autoscaling and other cloud management techniques to maintain optimal performance.</p>\n</li>\n</ul>\n<p>Let’s look at the DevOps ecosystem in detail.</p>\n<h2 id=\"what-is-a-devops-engineer\">What is a DevOps engineer?</h2>\n<p>A DevOps engineer is a professional whose primary purpose is to work at the intersection of software development and IT operations. Their main goal is to continuously deliver high-quality software, improve collaboration between teams, and shorten the Software Development Life Cycle (SDLC).</p>\n<p>DevOps engineers are responsible for maintaining the culture and practices that bridge the gap between the software development process (Dev) and IT operations (Ops). They promote the use of tools and other automation mechanisms to shorten the software delivery processes while maintaining high quality.</p>\n<p>DevOps engineers use various tools to automate and enhance their workflow, such as:</p>\n<ul>\n<li>Docker</li>\n<li>Kubernetes</li>\n<li>Jenkins</li>\n<li>Version control systems</li>\n<li>Grafana</li>\n<li>Ansible</li>\n<li>Prometheus</li>\n</ul>\n<h3 id=\"docker\">Docker</h3>\n<p>Docker is a containerization platform that allows developers to package applications and their dependencies into a lightweight and portable container that can run consistently in any environment. Docker streamlines the development process by making it easy to manage and scale applications</p>\n<p><img src=\"https://assets.roadmap.sh/guest/docker-logo-cvtzr.jpg\" alt=\"Docker\"></p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker roadmap</a>.</p>\n<h3 id=\"kubernetes\">Kubernetes</h3>\n<p>Kubernetes is a container orchestration platform for automating, deploying, and scaling containerized applications. It offers numerous benefits, including cluster management, high availability, load balancing, and resource management.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/kubernetes-logo-zipbs.jpg\" alt=\"Kubernetes\"></p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes roadmap</a>.</p>\n<h3 id=\"jenkins\">Jenkins</h3>\n<p>Jenkins is an open-source automation tool for automating CI/CD processes. It gives developers the flexibility to build, test, and deploy applications. Jenkins’ ecosystem and seamless integration with various tools make it ideal for automating DevOps workflow.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/jenkins-logo-pqnqc.jpg\" alt=\"Jenkins\"></p>\n<h3 id=\"version-control-systems\">Version control systems</h3>\n<p>Version control systems allow developers to track, revise, manage branches, and merge codes seamlessly. Examples include Git, Mercurial, and Subversion, with popular platforms like GitHub and Bitbucket providing integration support.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/git-logo-hrzut.jpg\" alt=\"Version control systems\"></p>\n<h3 id=\"grafana\">Grafana</h3>\n<p>Grafana is an analytic and monitoring platform for visualizing metrics, logs, and other critical data. It helps DevOps engineers monitor the real-time health and performance of applications and systems.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/grafana-logo-zyx92.jpg\" alt=\"Grafana\"></p>\n<h3 id=\"ansible\">Ansible</h3>\n<p>Ansible is an automation tool for configuring application management, deployment, and other automation tasks. It uses a YAML syntax to define automation workflow, reducing the time required for repetitive tasks.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/ansible-logo-efs80.jpg\" alt=\"Ansible\"></p>\n<h3 id=\"prometheus\">Prometheus</h3>\n<p>Prometheus is a monitoring and alerting tool that collects metrics from applications and infrastructure. It stores these metrics in a time-series database, allowing for querying and visualization to detect potential issues.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/pometheus-logo-v4pp4.jpg\" alt=\"Prometheus\"></p>\n<h2 id=\"what-are-the-responsibilities-of-a-devops-engineer\">What are the responsibilities of a DevOps engineer?</h2>\n<p>DevOps engineers wear multiple hats to perform their day-to-day tasks. They possess technical skills in the software development lifecycle and operations skills for maintenance, and they are responsible for bridging the gap and fostering collaboration between development and other stakeholders.</p>\n<p>DevOps engineer responsibilities include:</p>\n<ul>\n<li>Infrastructure management</li>\n<li>Setting up and maintaining CI/CD pipelines</li>\n<li>Working closely with others and keeping communication flowing</li>\n<li>Keeping an eye on things by monitoring and logging</li>\n<li>Automating toil</li>\n<li>Handling deployments and managing cloud services</li>\n<li>Optimizing performance</li>\n<li>Software development and scripting</li>\n<li>Managing resources efficiently</li>\n<li>Supporting developers and troubleshooting issues</li>\n<li>Ensuring security across the infrastructure</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-description-tro4n.jpeg\" alt=\"DevOps engineer job description\"></p>\n<p>Now, let’s look at these points in detail.</p>\n<h3 id=\"infrastructure-management\">Infrastructure management</h3>\n<p>A key responsibility of a DevOps engineer is to ensure the design, implementation, and management of a robust and scalable infrastructure. They use Infrastructure as Code (IaC) tools like Terraform or Ansible to automate infrastructure provisioning and configuration management.</p>\n<h3 id=\"cicd-pipelines\">CI/CD pipelines</h3>\n<p>In the SDLC, new features, patches, and fixes are frequently deployed to meet customers’ needs. To facilitate this, a DevOps engineer must set up a CI/CD pipeline to automate the testing environment and software releases, ensuring seamless integration and a smooth deployment process.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cicd-y1h56.jpeg\" alt=\"ci/cd\"></p>\n<h3 id=\"collaboration-and-communication\">Collaboration and communication</h3>\n<p>DevOps engineer skills are essential for fostering an efficient and collaborative work environment. DevOps engineers champion clear communication (both oral and written) between project stakeholders. They believe in active communication and collaboration between the development team and other project stakeholders to ensure productivity, shared responsibilities, and continuous improvement.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/collaboration-f4lfb.jpeg\" alt=\"collaboration &#x26; communication\"></p>\n<h3 id=\"automation\">Automation</h3>\n<p>One of the essential DevOps principles is automating manual and repetitive tasks. A DevOps engineer uses DevOps automation tools like Puppet or SaltStack to improve efficiency and reduce human error during deployment processes, scaling, and other operational tasks.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/automation-kani0.jpeg\" alt=\"automation\"></p>\n<h3 id=\"deployment-and-cloud-management\">Deployment and cloud management</h3>\n<p>DevOps engineers use containers and orchestration platforms like Docker and Kubernetes to facilitate efficient deployment, scaling, and management, whether in on-premise environments or cloud services like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">Amazon Web Services (AWS),</a> Microsoft Azure, or Google Cloud Platform.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cloud-management-qbcb0.jpeg\" alt=\"Clouds deployment — AWS vs Azure vs GCP\"></p>\n<h3 id=\"performance-optimization\">Performance optimization</h3>\n<p>A key responsibility of a DevOps engineer is to set up mechanisms to constantly audit systems, analyze performance, and implement load and stress testing. This guarantees that applications can handle high demand and spikes in traffic.</p>\n<h3 id=\"software-development-and-scripting\">Software development and scripting</h3>\n<p>While the DevOps ecosystem offers both paid and open-source tools to help streamline responsibilities, there are times when custom-made tools or extensions of existing tools are required. A good understanding of software development processes and scripting languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, or <a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">JavaScript (Node.js)</a> helps a DevOps engineer build solutions for such specific business edge cases.</p>\n<h3 id=\"resource-management\">Resource management</h3>\n<p>In a DevOps engineer role, engineers ensure that the resources allocated to a system can perform effectively during both slow and peak periods. This involves implementing autoscaling, monitoring resource usage, considering future capacity needs, and utilizing other resource configuration management tools.</p>\n<h3 id=\"developer-support-and-troubleshooting\">Developer support and troubleshooting</h3>\n<p>An integral part of DevOps methodology is ensuring that development and operational teams are supported by troubleshooting issues related to applications, infrastructures, and other systems. Additionally, DevOps professionals create documentation, guides, and other helpful resources to enhance the knowledge base. This guarantees that both experienced team members and new joiners can leverage these resources for debugging, troubleshooting, or research purposes.</p>\n<h3 id=\"security\">Security</h3>\n<p>A growing part of the DevOps ecosystem is Development, Security, and Operations (DevSecOps). This practice involves automating security and best practices into every phase of the SDLC to ensure compliance with industry standards, effective resource identity and access management, and more. A good understanding of DevSecOps is an essential skill for experienced DevOps engineers.</p>\n<h2 id=\"what-is-the-importance-of-devops-in-an-organization\">What is the importance of DevOps in an organization?</h2>\n<p>DevOps is gaining massive adoption because organizations are shifting away from traditional software development and resource provisioning approaches that are slow, prone to human error, and siloed. They want to deliver fast, reliable, and scalable applications, which the traditional approach lacks.</p>\n<p>Some of the ways DevOps can benefit an organization include:</p>\n<ul>\n<li>Improving collaboration and shared responsibilities among project stakeholders.</li>\n<li>Enhancing software quality with automated testing and continuous feedback loops.</li>\n<li>Speeding up software delivery by promoting communication and collaboration between cross-functional teams.</li>\n<li>Supporting career development through a DevOps culture of experimentation and learning new DevOps skills.</li>\n<li>Providing a better customer experience because applications are thoroughly tested before going live.</li>\n<li>Reducing risk associated with software development and deployment using CI/CD principles.</li>\n<li>Encouraging knowledge sharing and flexibility to experiment, helping teams learn a wide range of skills and technologies.</li>\n</ul>\n<p>Organizations practicing or willing to adopt DevOps must be prepared for a cultural shift, continuous improvement, and investment in automation tools. Although it may be a lot at times, the benefits are worth the investment.</p>\n<h2 id=\"common-roles-within-the-devops-ecosystem\">Common roles within the DevOps ecosystem</h2>\n<p>The recent growth in the DevOps ecosystem has led to newer DevOps roles. While most jobs categorize these roles under the umbrella term “DevOps Engineer,” which may work for small organizations, it becomes an issue in medium to larger organizations with diverse project goals and other factors. While these roles share similarities and sometimes overlap in responsibilities, it is important to understand the different aspects they tackle. The diagram below shows the crucial roles in the DevOps lifecycle.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6-devops-roles-xc82k.jpeg\" alt=\"Roles in DevOps\"></p>\n<h3 id=\"site-reliability-engineers-sre\">Site Reliability engineers (SRE)</h3>\n<p>SRE focuses on system reliability, scalability, and performance. Their skills involve combining software engineering and systems administration.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Implements monitoring and alerting systems.</li>\n<li>Ensures the system is reliable, performant, and scalable.</li>\n<li>Analyze incidents to detect them and implement preventive measures.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Proficiency in using automation and infrastructure as code tools.</li>\n<li>Problem-solving and troubleshooting skills.</li>\n<li>Experience with alerting and monitoring tools like Prometheus and Grafana.</li>\n</ul>\n<h3 id=\"cloud-engineers\">Cloud engineers</h3>\n<p>Cloud engineers are responsible for designing and implementing cloud-native solutions. They also manage cloud technologies and infrastructure like AWS, Azure, or Google Cloud to guarantee efficient resource usage and cost-effectiveness.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Design and manage cloud infrastructure.</li>\n<li>Monitor and optimize cloud resources and associated costs.</li>\n<li>Ensure compliance and security of cloud resources.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Expertise in using popular cloud providers like AWS, Azure, and GCP.</li>\n<li>Proficiency in using automation tools like Terraform and CloudFormation.</li>\n<li>Knowledge of cloud security and compliance</li>\n</ul>\n<h3 id=\"automation-engineers\">Automation engineers</h3>\n<p>Automation engineers are responsible for identifying tasks that can be automated across development and operations. They develop scripts and DevOps tools to automate repetitive tasks and integrate them into CI/CD pipelines.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Review, design, and implement automation strategies across the software development lifecycle.</li>\n<li>Ensures consistency and reliability of automated processes.</li>\n<li>Stay up-to-date with the latest automation tools and technologies.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Proficiency in scripting and programming languages.</li>\n<li>Expertise in automation tools and frameworks like Jenkins and GitHub Action.</li>\n</ul>\n<h3 id=\"build-engineers\">Build engineers</h3>\n<p>Build engineers are responsible for managing build systems and tools, troubleshooting build failures, optimizing build performance, and integrating builds into the CI/CD pipelines.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Manage and maintain build systems and tools.</li>\n<li>Ensures builds are consistent and replicable across environments.</li>\n<li>Automate the build process.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Knowledge of CI/CD tools and version control systems.</li>\n<li>Proficiency in build tools.</li>\n<li>Strong problem-solving and debugging skills.</li>\n</ul>\n<h3 id=\"release-engineers\">Release engineers</h3>\n<p>Release engineers are responsible for planning, scheduling, and coordinating the software release process for testing, sandbox, or production environments.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Plan and manage the release of new software, software updates, and new features.</li>\n<li>Maintain release schedules and project release timelines.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Knowledge of CI/CD tools and version control systems.</li>\n<li>Project management and organization skills.</li>\n<li>Strong communication and coordination skills</li>\n</ul>\n<h3 id=\"security-engineers\">Security engineers</h3>\n<p>Security engineers are responsible for integrating security and best practices into the DevOps pipeline. Additionally, they collaborate with development and operations teams to conduct security assessments, vulnerability scans, and compliance checks.</p>\n<p><strong>Key Responsibilities</strong></p>\n<ul>\n<li>Implement and manage security tools and technologies.</li>\n<li>Integrate DevSecOps into the software development lifecycle.</li>\n<li>Document security best practices and ensure compliance with policies and regulations.</li>\n</ul>\n<p><strong>Required skills</strong></p>\n<ul>\n<li>Knowledge of security best practices and frameworks</li>\n<li>Familiarity with identity and access management systems</li>\n</ul>\n<h2 id=\"best-practices-for-devops-teams\">Best practices for DevOps teams</h2>\n<p>To achieve success as a team practicing or intending to adopt DevOps practices, you need a combination of the right tools, best practices, and a cultural shift. Here are some tips and best DevOps practices for teams:</p>\n<ul>\n<li>Encourage Continuous Integration (CI) and Continuous Deployment (CD) by having software developers commit code frequently, automating builds, and providing timely feedback between teams.</li>\n<li>Embrace IaC to maintain consistency across testing, production, and other environments.</li>\n<li>Implement logging, alerts, and monitoring across systems.</li>\n<li>Ensure unit tests, integration tests, and end-to-end tests to validate the quality of software.</li>\n<li>Promote soft skills, feedback loops, post-mortem audits, retrospectives, and a continuous learning culture.</li>\n<li>Set clear metrics and Key Performance Indicators (KPIs) to easily identify areas needing improvement.</li>\n<li>Ensure effective collaboration and shared responsibilities between development, operations, QAs, and other teams.</li>\n</ul>\n<p>In summary, DevOps is growing and will continue to expand, bringing about even more DevOps roles and responsibilities for engineers in the ecosystem. The roadmap.sh’s <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a> is a valuable resource that can help you stay updated on these changes. Additionally, you can track your learning path and connect with a vibrant community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up</a> on the roadmap.sh platform.</p>";

				const frontmatter$$ = {"title":"What is a DevOps Engineer? Responsibilities & Roles in @currentYear@","description":"Explore the responsibilities and roles of a DevOps Engineer in @currentYear@. Gain insights into the evolving field of DevOps and what it takes to succeed.","authorId":"ekene","excludedBySlug":"/devops/devops-engineer","seo":{"title":"What is a DevOps Engineer? Responsibilities & Roles in @currentYear@","description":"Explore the responsibilities and roles of a DevOps Engineer in @currentYear@. Gain insights into the evolving field of DevOps and what it takes to succeed.","ogImageUrl":"https://assets.roadmap.sh/guest/what-is-devops-engineer-jort4.jpg"},"isNew":false,"type":"textual","date":"2024-08-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$$ = "/workspace/src/data/guides/devops-engineer.md";
				const url$$ = undefined;
				function rawContent$$() {
					return "   \n                                                                             \n                                                                                                                                                                          \n               \n                                         \n    \n                                                                               \n                                                                                                                                                                            \n                                                                                 \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![What is a DevOps engineer and what are their responsibilities?](https://assets.roadmap.sh/guest/what-is-devops-engineer-jort4.jpg)\n\nAre you a developer monitoring recent changes in the ecosystem, looking to change careers or pick up new skills in 2025? If your choice is [DevOps](https://roadmap.sh/devops), you might be wondering what it entails, what it will take to become one in 2025, and how it is affected by the recent changes in the tech ecosystem.\n\nIn recent years, the technology ecosystem has experienced a constant shift in the way hiring managers reach out, companies hire, and the roles and responsibilities described in job postings. Particularly, 2023 proved to be a challenging year as layoffs in the technology sector grew significantly, with more than [262,000 employees laid off across 1,180 firms](https://www.statista.com/statistics/199999/worldwide-tech-layoffs-covid-19/).\n\nDespite this change, DevOps, a field within the same ecosystem, has experienced continuous growth. In fact, the DevOps market size is expected to grow to [25.5 billion USD by 2028](https://www.marketsandmarkets.com/Market-Reports/devops-market-824.html#:~:text=The%20global%20DevOps%20market%20size,USD%2010.4%20billion%20in%202023.). This indicates that the roles and responsibilities of a DevOps engineer in the modern technology environment will evolve alongside this increasing demand.\n\nIn this guide, we'll discuss the roles and responsibilities of a DevOps engineer, the importance of DevOps in teams, common roles within a DevOps team, and best practices for DevOps teams. Finally, the guide will offer roadmaps for your DevOps journey.\n\nA DevOps engineer's roles and responsibilities include:\n\n- Following best practices and utilizing Infrastructure as Code (IaC) tools to design, implement, and manage infrastructure.\n\n- Implementing and managing Continuous Integration and Continuous Delivery (CI/CD) pipelines to automate software and code releases.\n\n- Facilitating and promoting interpersonal skills between the development teams, operations teams, and other stakeholders to establish productivity and continuous improvement.\n\n- Implementing monitoring, logging, alerts, and dashboards to track the performance and health of applications and infrastructure.\n\n- Writing and maintaining scripts to automate tasks and DevOps processes.\n\n- Providing support and troubleshooting issues related to applications, systems, and infrastructure.\n\n- Efficiently manage and monitor cloud resources by implementing autoscaling and other cloud management techniques to maintain optimal performance.\n\nLet's look at the DevOps ecosystem in detail.\n\n## What is a DevOps engineer?\n\nA DevOps engineer is a professional whose primary purpose is to work at the intersection of software development and IT operations. Their main goal is to continuously deliver high-quality software, improve collaboration between teams, and shorten the Software Development Life Cycle (SDLC).\n\nDevOps engineers are responsible for maintaining the culture and practices that bridge the gap between the software development process (Dev) and IT operations (Ops). They promote the use of tools and other automation mechanisms to shorten the software delivery processes while maintaining high quality.\n\nDevOps engineers use various tools to automate and enhance their workflow, such as:\n\n- Docker\n- Kubernetes\n- Jenkins\n- Version control systems\n- Grafana\n- Ansible\n- Prometheus\n\n### Docker\n\nDocker is a containerization platform that allows developers to package applications and their dependencies into a lightweight and portable container that can run consistently in any environment. Docker streamlines the development process by making it easy to manage and scale applications\n\n![Docker](https://assets.roadmap.sh/guest/docker-logo-cvtzr.jpg)\n\nYou can learn more details by exploring the [Docker roadmap](https://roadmap.sh/docker).\n\n### Kubernetes\n\nKubernetes is a container orchestration platform for automating, deploying, and scaling containerized applications. It offers numerous benefits, including cluster management, high availability, load balancing, and resource management.\n\n![Kubernetes](https://assets.roadmap.sh/guest/kubernetes-logo-zipbs.jpg)\n\nYou can learn more details by exploring the [Kubernetes roadmap](https://roadmap.sh/kubernetes).\n\n### Jenkins\n\nJenkins is an open-source automation tool for automating CI/CD processes. It gives developers the flexibility to build, test, and deploy applications. Jenkins' ecosystem and seamless integration with various tools make it ideal for automating DevOps workflow.\n\n![Jenkins](https://assets.roadmap.sh/guest/jenkins-logo-pqnqc.jpg)\n\n### Version control systems\n\nVersion control systems allow developers to track, revise, manage branches, and merge codes seamlessly. Examples include Git, Mercurial, and Subversion, with popular platforms like GitHub and Bitbucket providing integration support.\n\n![Version control systems](https://assets.roadmap.sh/guest/git-logo-hrzut.jpg)\n\n### Grafana\n\nGrafana is an analytic and monitoring platform for visualizing metrics, logs, and other critical data. It helps DevOps engineers monitor the real-time health and performance of applications and systems.\n\n![Grafana](https://assets.roadmap.sh/guest/grafana-logo-zyx92.jpg)\n\n### Ansible\n\nAnsible is an automation tool for configuring application management, deployment, and other automation tasks. It uses a YAML syntax to define automation workflow, reducing the time required for repetitive tasks.\n\n![Ansible](https://assets.roadmap.sh/guest/ansible-logo-efs80.jpg)\n\n### Prometheus\n\nPrometheus is a monitoring and alerting tool that collects metrics from applications and infrastructure. It stores these metrics in a time-series database, allowing for querying and visualization to detect potential issues.\n\n![Prometheus](https://assets.roadmap.sh/guest/pometheus-logo-v4pp4.jpg)\n\n## What are the responsibilities of a DevOps engineer?\n\nDevOps engineers wear multiple hats to perform their day-to-day tasks. They possess technical skills in the software development lifecycle and operations skills for maintenance, and they are responsible for bridging the gap and fostering collaboration between development and other stakeholders.\n\nDevOps engineer responsibilities include:\n\n- Infrastructure management\n- Setting up and maintaining CI/CD pipelines\n- Working closely with others and keeping communication flowing\n- Keeping an eye on things by monitoring and logging\n- Automating toil\n- Handling deployments and managing cloud services\n- Optimizing performance\n- Software development and scripting\n- Managing resources efficiently\n- Supporting developers and troubleshooting issues\n- Ensuring security across the infrastructure\n\n![DevOps engineer job description](https://assets.roadmap.sh/guest/devops-engineer-description-tro4n.jpeg)\n\nNow, let's look at these points in detail.\n\n### Infrastructure management\n\nA key responsibility of a DevOps engineer is to ensure the design, implementation, and management of a robust and scalable infrastructure. They use Infrastructure as Code (IaC) tools like Terraform or Ansible to automate infrastructure provisioning and configuration management.\n\n### CI/CD pipelines\n\nIn the SDLC, new features, patches, and fixes are frequently deployed to meet customers' needs. To facilitate this, a DevOps engineer must set up a CI/CD pipeline to automate the testing environment and software releases, ensuring seamless integration and a smooth deployment process.\n\n![ci/cd](https://assets.roadmap.sh/guest/cicd-y1h56.jpeg)\n\n### Collaboration and communication\n\nDevOps engineer skills are essential for fostering an efficient and collaborative work environment. DevOps engineers champion clear communication (both oral and written) between project stakeholders. They believe in active communication and collaboration between the development team and other project stakeholders to ensure productivity, shared responsibilities, and continuous improvement.\n\n![collaboration & communication](https://assets.roadmap.sh/guest/collaboration-f4lfb.jpeg)\n\n### Automation\n\nOne of the essential DevOps principles is automating manual and repetitive tasks. A DevOps engineer uses DevOps automation tools like Puppet or SaltStack to improve efficiency and reduce human error during deployment processes, scaling, and other operational tasks.\n\n![automation](https://assets.roadmap.sh/guest/automation-kani0.jpeg)\n\n### Deployment and cloud management\n\nDevOps engineers use containers and orchestration platforms like Docker and Kubernetes to facilitate efficient deployment, scaling, and management, whether in on-premise environments or cloud services like [Amazon Web Services (AWS),](https://roadmap.sh/aws) Microsoft Azure, or Google Cloud Platform.\n\n![Clouds deployment — AWS vs Azure vs GCP](https://assets.roadmap.sh/guest/cloud-management-qbcb0.jpeg)\n\n### Performance optimization\n\nA key responsibility of a DevOps engineer is to set up mechanisms to constantly audit systems, analyze performance, and implement load and stress testing. This guarantees that applications can handle high demand and spikes in traffic.\n\n### Software development and scripting\n\nWhile the DevOps ecosystem offers both paid and open-source tools to help streamline responsibilities, there are times when custom-made tools or extensions of existing tools are required. A good understanding of software development processes and scripting languages like [Python](https://roadmap.sh/python), [Go](https://roadmap.sh/golang), or [JavaScript (Node.js)](https://roadmap.sh/nodejs) helps a DevOps engineer build solutions for such specific business edge cases.\n\n### Resource management\n\nIn a DevOps engineer role, engineers ensure that the resources allocated to a system can perform effectively during both slow and peak periods. This involves implementing autoscaling, monitoring resource usage, considering future capacity needs, and utilizing other resource configuration management tools.\n\n### Developer support and troubleshooting\n\nAn integral part of DevOps methodology is ensuring that development and operational teams are supported by troubleshooting issues related to applications, infrastructures, and other systems. Additionally, DevOps professionals create documentation, guides, and other helpful resources to enhance the knowledge base. This guarantees that both experienced team members and new joiners can leverage these resources for debugging, troubleshooting, or research purposes.\n\n### Security\n\nA growing part of the DevOps ecosystem is Development, Security, and Operations (DevSecOps). This practice involves automating security and best practices into every phase of the SDLC to ensure compliance with industry standards, effective resource identity and access management, and more. A good understanding of DevSecOps is an essential skill for experienced DevOps engineers.\n\n## What is the importance of DevOps in an organization?\n\nDevOps is gaining massive adoption because organizations are shifting away from traditional software development and resource provisioning approaches that are slow, prone to human error, and siloed. They want to deliver fast, reliable, and scalable applications, which the traditional approach lacks.\n\nSome of the ways DevOps can benefit an organization include:\n\n- Improving collaboration and shared responsibilities among project stakeholders.\n- Enhancing software quality with automated testing and continuous feedback loops.\n- Speeding up software delivery by promoting communication and collaboration between cross-functional teams.\n- Supporting career development through a DevOps culture of experimentation and learning new DevOps skills.\n- Providing a better customer experience because applications are thoroughly tested before going live.\n- Reducing risk associated with software development and deployment using CI/CD principles.\n- Encouraging knowledge sharing and flexibility to experiment, helping teams learn a wide range of skills and technologies.\n\nOrganizations practicing or willing to adopt DevOps must be prepared for a cultural shift, continuous improvement, and investment in automation tools. Although it may be a lot at times, the benefits are worth the investment.\n\n## Common roles within the DevOps ecosystem\n\nThe recent growth in the DevOps ecosystem has led to newer DevOps roles. While most jobs categorize these roles under the umbrella term \"DevOps Engineer,\" which may work for small organizations, it becomes an issue in medium to larger organizations with diverse project goals and other factors. While these roles share similarities and sometimes overlap in responsibilities, it is important to understand the different aspects they tackle. The diagram below shows the crucial roles in the DevOps lifecycle.\n\n![Roles in DevOps](https://assets.roadmap.sh/guest/6-devops-roles-xc82k.jpeg)\n\n### Site Reliability engineers (SRE)\n\nSRE focuses on system reliability, scalability, and performance. Their skills involve combining software engineering and systems administration.\n\n**Key Responsibilities**\n\n- Implements monitoring and alerting systems.\n- Ensures the system is reliable, performant, and scalable.\n- Analyze incidents to detect them and implement preventive measures.\n\n**Required skills**\n\n- Proficiency in using automation and infrastructure as code tools.\n- Problem-solving and troubleshooting skills.\n- Experience with alerting and monitoring tools like Prometheus and Grafana.\n\n### Cloud engineers\n\nCloud engineers are responsible for designing and implementing cloud-native solutions. They also manage cloud technologies and infrastructure like AWS, Azure, or Google Cloud to guarantee efficient resource usage and cost-effectiveness.\n\n**Key Responsibilities**\n\n- Design and manage cloud infrastructure.\n- Monitor and optimize cloud resources and associated costs.\n- Ensure compliance and security of cloud resources.\n\n**Required skills**\n\n- Expertise in using popular cloud providers like AWS, Azure, and GCP.\n- Proficiency in using automation tools like Terraform and CloudFormation.\n- Knowledge of cloud security and compliance\n\n### Automation engineers\n\nAutomation engineers are responsible for identifying tasks that can be automated across development and operations. They develop scripts and DevOps tools to automate repetitive tasks and integrate them into CI/CD pipelines.\n\n**Key Responsibilities**\n\n- Review, design, and implement automation strategies across the software development lifecycle.\n- Ensures consistency and reliability of automated processes.\n- Stay up-to-date with the latest automation tools and technologies.\n\n**Required skills**\n\n- Proficiency in scripting and programming languages.\n- Expertise in automation tools and frameworks like Jenkins and GitHub Action.\n\n### Build engineers\n\nBuild engineers are responsible for managing build systems and tools, troubleshooting build failures, optimizing build performance, and integrating builds into the CI/CD pipelines.\n\n**Key Responsibilities**\n\n- Manage and maintain build systems and tools.\n- Ensures builds are consistent and replicable across environments.\n- Automate the build process.\n\n**Required skills**\n\n- Knowledge of CI/CD tools and version control systems.\n- Proficiency in build tools.\n- Strong problem-solving and debugging skills.\n\n### Release engineers\n\nRelease engineers are responsible for planning, scheduling, and coordinating the software release process for testing, sandbox, or production environments.\n\n**Key Responsibilities**\n\n- Plan and manage the release of new software, software updates, and new features.\n- Maintain release schedules and project release timelines.\n\n**Required skills**\n\n- Knowledge of CI/CD tools and version control systems.\n- Project management and organization skills.\n- Strong communication and coordination skills\n\n### Security engineers \n\nSecurity engineers are responsible for integrating security and best practices into the DevOps pipeline. Additionally, they collaborate with development and operations teams to conduct security assessments, vulnerability scans, and compliance checks.\n\n**Key Responsibilities**\n\n- Implement and manage security tools and technologies.\n- Integrate DevSecOps into the software development lifecycle.\n- Document security best practices and ensure compliance with policies and regulations.\n\n**Required skills**\n\n- Knowledge of security best practices and frameworks\n- Familiarity with identity and access management systems\n\n## Best practices for DevOps teams\n\nTo achieve success as a team practicing or intending to adopt DevOps practices, you need a combination of the right tools, best practices, and a cultural shift. Here are some tips and best DevOps practices for teams:\n\n- Encourage Continuous Integration (CI) and Continuous Deployment (CD) by having software developers commit code frequently, automating builds, and providing timely feedback between teams.\n- Embrace IaC to maintain consistency across testing, production, and other environments.\n- Implement logging, alerts, and monitoring across systems.\n- Ensure unit tests, integration tests, and end-to-end tests to validate the quality of software.\n- Promote soft skills, feedback loops, post-mortem audits, retrospectives, and a continuous learning culture.\n- Set clear metrics and Key Performance Indicators (KPIs) to easily identify areas needing improvement.\n- Ensure effective collaboration and shared responsibilities between development, operations, QAs, and other teams.\n\nIn summary, DevOps is growing and will continue to expand, bringing about even more DevOps roles and responsibilities for engineers in the ecosystem. The roadmap.sh’s [DevOps roadmap](https://roadmap.sh/devops) is a valuable resource that can help you stay updated on these changes. Additionally, you can track your learning path and connect with a vibrant community by [signing up](https://roadmap.sh/signup) on the roadmap.sh platform.\n";
				}
				async function compiledContent$$() {
					return await html$$();
				}
				function getHeadings$$() {
					return [{"depth":2,"slug":"what-is-a-devops-engineer","text":"What is a DevOps engineer?"},{"depth":3,"slug":"docker","text":"Docker"},{"depth":3,"slug":"kubernetes","text":"Kubernetes"},{"depth":3,"slug":"jenkins","text":"Jenkins"},{"depth":3,"slug":"version-control-systems","text":"Version control systems"},{"depth":3,"slug":"grafana","text":"Grafana"},{"depth":3,"slug":"ansible","text":"Ansible"},{"depth":3,"slug":"prometheus","text":"Prometheus"},{"depth":2,"slug":"what-are-the-responsibilities-of-a-devops-engineer","text":"What are the responsibilities of a DevOps engineer?"},{"depth":3,"slug":"infrastructure-management","text":"Infrastructure management"},{"depth":3,"slug":"cicd-pipelines","text":"CI/CD pipelines"},{"depth":3,"slug":"collaboration-and-communication","text":"Collaboration and communication"},{"depth":3,"slug":"automation","text":"Automation"},{"depth":3,"slug":"deployment-and-cloud-management","text":"Deployment and cloud management"},{"depth":3,"slug":"performance-optimization","text":"Performance optimization"},{"depth":3,"slug":"software-development-and-scripting","text":"Software development and scripting"},{"depth":3,"slug":"resource-management","text":"Resource management"},{"depth":3,"slug":"developer-support-and-troubleshooting","text":"Developer support and troubleshooting"},{"depth":3,"slug":"security","text":"Security"},{"depth":2,"slug":"what-is-the-importance-of-devops-in-an-organization","text":"What is the importance of DevOps in an organization?"},{"depth":2,"slug":"common-roles-within-the-devops-ecosystem","text":"Common roles within the DevOps ecosystem"},{"depth":3,"slug":"site-reliability-engineers-sre","text":"Site Reliability engineers (SRE)"},{"depth":3,"slug":"cloud-engineers","text":"Cloud engineers"},{"depth":3,"slug":"automation-engineers","text":"Automation engineers"},{"depth":3,"slug":"build-engineers","text":"Build engineers"},{"depth":3,"slug":"release-engineers","text":"Release engineers"},{"depth":3,"slug":"security-engineers","text":"Security engineers"},{"depth":2,"slug":"best-practices-for-devops-teams","text":"Best practices for DevOps teams"}];
				}

				const Content$$ = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$$;
					content.file = file$$;
					content.url = url$$;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$$())}`;
				});

const __vite_glob_0_35 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$$,
	compiledContent: compiledContent$$,
	default: Content$$,
	file: file$$,
	frontmatter: frontmatter$$,
	getHeadings: getHeadings$$,
	rawContent: rawContent$$,
	url: url$$
}, Symbol.toStringTag, { value: 'Module' }));

const html$_ = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-job-description-0xjml.jpg\" alt=\"DevOps engineer job description template\"></p>\n<p>As businesses adopt agile practices to stay competitive, the demand for skilled DevOps professionals is on the rise. Hiring top talent starts with understanding their role and crafting a clear, compelling job description.</p>\n<p>To help you create the ideal profile, this guide draws insights from top job boards like Indeed, LinkedIn, and Glassdoor. It covers the key responsibilities, essential skills, and qualifications of a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineer</a>. Use this template as your go-to resource for attracting the best candidates in the field.</p>\n<h2 id=\"devops-engineer-job-description-template\">DevOps engineer job description template</h2>\n<p>A DevOps engineer ensures seamless collaboration between software development and IT operations to improve software delivery speed and system reliability. Here is a DevOps engineer job description template that highlights the essential skills and qualifications that hiring managers look for in potential candidates.</p>\n<p><strong>Job Title:</strong> DevOps Engineer</p>\n<p><strong>Company:</strong> [Add your company name]</p>\n<p><strong>Location:</strong> [Specify your location]</p>\n<p><strong>Job Type:</strong> Full-time or part-time</p>\n<p><strong>About Us:</strong> [Provide company name and a quick summary of their achievements, history, and goals]</p>\n<p><strong>Job description</strong></p>\n<p><strong>[Company Name]</strong> is looking for an experienced DevOps engineer with strong technical expertise in CI/CD pipelines, infrastructure automation, and cloud platforms, along with excellent collaboration and communication skills. The candidate should have hands-on experience with configuration management tools, a solid understanding of DevOps practices, and a working knowledge of internal backend systems. The ideal candidate will have the ability to coordinate and bridge gaps between the software developer and the operation team, ensuring a smooth workflow.</p>\n<p><strong>Responsibilities</strong></p>\n<p>DevOps engineer’s responsibilities include:</p>\n<ul>\n<li>Designing and maintaining continuous integration/continuous deployment pipelines to automate code testing and deployment</li>\n<li>Tracking software performance, fixing errors, troubleshooting systems, implementing preventive measures for smooth workflows, and building automated processes</li>\n<li>Optimizing cloud resources and implementing cost-effective solutions</li>\n<li>Implementing and managing infrastructure using code rather than manual processes. Uses Terraform or CloudFormation for Infrastructure as Code (IaC) management</li>\n<li>Collaborating between teams helps in resolving issues quickly and deploying new features smoothly</li>\n<li>Monitoring and creating new processes based on performance analysis</li>\n<li>Better management of the software development process and implementation of configuration management tools</li>\n<li>Automating repetitive tasks to improve team efficiency</li>\n<li>Implementing security best practices, including automated compliance checks and secure code deployment</li>\n</ul>\n<p><strong>Requirements</strong></p>\n<p>The candidate must fulfill the following requirements for the DevOps engineering job profile:</p>\n<ul>\n<li>Hands-on experience with CI/CD tools</li>\n<li>Good experience in infrastructure as code tools</li>\n<li>Familiarity with monitoring and logging tools</li>\n<li>Proficiency in Docker for packaging applications and Kubernetes for managing containers</li>\n<li>Strong problem-solving and troubleshooting skills</li>\n<li>Excellent communication and collaboration skills to ensure proper teamwork</li>\n<li>Proficiency in scripting languages like Python, PowerShell, etc.</li>\n<li>A Bachelor’s degree in Computer Science, Engineering, or a related discipline, or equivalent industry experience</li>\n</ul>\n<p>For an entry-level DevOps engineer role, recruiters might look for:</p>\n<ul>\n<li>Basic knowledge of DevOps tools, i.e., Git, Jenkins, and Docker</li>\n<li>Familiarity with at least one programming language, such as Python or Go</li>\n<li>Understanding of basic networking concepts</li>\n<li>Willingness to embrace continuous learning and adoption of new tools</li>\n</ul>\n<p><strong>Nice to have</strong></p>\n<ul>\n<li>Certification in cloud platforms like AWS certified DevOps engineer</li>\n<li>Good knowledge of agile methodologies and practices</li>\n</ul>\n<p><strong>What we offer</strong></p>\n<p>Highlight what your company offers, such as competitive salary, health benefits, professional development opportunities, flexible work arrangements, or other perks.</p>\n<p><strong>How to apply</strong></p>\n<p>If you are interested in the DevOps engineer job profile, send your resume and cover letter to your selected company [insert email address] or apply through [insert application portal link].</p>\n<h2 id=\"key-devops-engineer-skills-essential-for-job-profile\">Key DevOps engineer skills essential for job profile</h2>\n<p>When recruiting a DevOps engineer, prioritize candidates with strong technical expertise, adaptability, and collaboration skills. DevOps requires bridging development and operations, so focus on individuals who excel in both technical problem-solving and teamwork.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/key-devops-engineer-skills-essential-for-job-profile-qhr33.png\" alt=\"Key DevOps engineer skills\"></p>\n<p>Let’s explore the essential skills that make a strong DevOps engineer:</p>\n<h3 id=\"technical-skills\">Technical skills</h3>\n<p>A DevOps job description must showcase a strong technical background and knowledge of critical concepts. Future engineers must know how to maintain tools, perform root cause analysis, develop project management capabilities, etc. A DevOps engineer must possess the following technical skills:</p>\n<ul>\n<li><strong>Proficiency with CI/CD tools:</strong> Familiarity with CI/CD tools, such as Jenkins, GitLab CI/CD, or Bamboo, to automate build and deployment processes</li>\n<li><strong>Coding and scripting skills:</strong> Knowledge of programming languages like Python, Ruby, or Java, and scripting languages like Bash</li>\n<li><strong>Cloud platform expertise:</strong> Experience with AWS or Google Cloud platform for managing scalable infrastructure</li>\n<li><strong>Containerization and orchestration:</strong> Understanding of Docker and Kubernetes to deploy and manage containerized applications</li>\n<li><strong>Version control systems:</strong> Expertise in Git for code repository management and facilitating team collaboration</li>\n</ul>\n<h3 id=\"cross-functional-skills\">Cross-functional skills</h3>\n<p>Cross-functional skills are essential for DevOps engineers to enable seamless collaboration across teams and departments. These skills help bridge the gap between technical and non-technical stakeholders for successful project outcomes, such as:</p>\n<ul>\n<li><strong>Problem-solving:</strong> DevOps engineers must have the ability to quickly identify and resolve system bottlenecks or failures</li>\n<li><strong>Communication:</strong> Strong communication skills to explain technical issues and collaborate effectively with multiple teams</li>\n<li><strong>Collaboration:</strong> DevOps engineers must have a team-oriented mindset to bridge gaps between development, operations, and business stakeholders</li>\n</ul>\n<p>Equipped with an understanding of the essential skills, the next step is evaluating candidates’ familiarity with popular DevOps tools. Here’s a quick guide to the tools recruiters should expect to see in job descriptions and interviews.</p>\n<h2 id=\"common-devops-tools-and-technologies\">Common DevOps tools and technologies</h2>\n<p>Candidates with experience in the following tools are often preferred, as they are essential for automating workflows and ensuring system reliability. Let’s explore some of the most popular DevOps tools that are commonly included in job descriptions.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/common-devops-tools-and-technologies-dwrxx.png\" alt=\"Common DevOps tools and technologies\"></p>\n<h3 id=\"jenkins\">Jenkins</h3>\n<p>Jenkins is a popular open-source automation server used for continuous integration and continuous delivery (CI/CD). It streamlines software testing and deployment, reducing manual effort and accelerating development cycles. Jenkins offers several features, including:</p>\n<ul>\n<li><strong>Extensive plugin library:</strong> Supports tools like Docker, Kubernetes, and Git for seamless integration</li>\n<li><strong>Real-time feedback:</strong> Alerts teams to failed builds, enabling early issue resolution</li>\n<li><strong>Customizable pipelines:</strong> Offers flexibility through domain-specific language (DSL) or GUI-based pipelines</li>\n</ul>\n<h3 id=\"docker\">Docker</h3>\n<p>Docker is a containerization platform that packages applications and their dependencies into lightweight containers. These containers work seamlessly across different phases, from software development to production. Some of the key features of Docker are:</p>\n<ul>\n<li><strong>Isolated environment:</strong> Maintains reliable application performance across different underlying systems</li>\n<li><strong>Faster deployment:</strong> Enables quicker application deployment compared to traditional virtual machines</li>\n<li><strong>Support for microservices architecture:</strong> Facilitates modular development, making it easier to build, deploy, and scale microservices-based applications</li>\n</ul>\n<p>Discover additional use cases and strategies for <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> in modern application development.</p>\n<h3 id=\"kubernetes\">Kubernetes</h3>\n<p>Kubernetes is an open-source orchestration platform for automating the deployment, scaling, and management of containerized applications. It works smoothly with Docker and other container runtimes to guarantee application reliability and scalability. Some standout features make Kubernetes a powerful choice, including:</p>\n<ul>\n<li><strong>Automated scaling:</strong> Dynamically allocates resources to accommodate fluctuating workloads</li>\n<li><strong>Self-healing capabilities:</strong> Automatically restarts failed containers or replaces unresponsive nodes to maintain application health</li>\n<li><strong>Service discovery and load balancing:</strong> Efficiently distributes traffic across services, improving resource utilization and application performance</li>\n</ul>\n<p>Learn how <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> supports advanced DevOps workflows and container orchestration.</p>\n<h3 id=\"terraform\">Terraform</h3>\n<p>Terraform by HashiCorp is a tool for defining and provisioning infrastructure using declarative configuration files. This approach enables teams to automate the setup and management of cloud resources, maintaining consistency and reducing errors. Key features of Terraform include:</p>\n<ul>\n<li><strong>Multi-cloud support:</strong> Supports multiple cloud providers, including AWS, Google Cloud, etc.</li>\n<li><strong>Version control:</strong> Tracks infrastructure changes, enabling safe rollbacks and thorough audits</li>\n<li><strong>Reusable modules:</strong> Simplifies infrastructure management with reusable and shareable code</li>\n</ul>\n<p>Explore how <a href=\"https://roadmap.sh/terraform\" target=\"_blank\">Terraform</a> empowers teams to manage modern infrastructure efficiently.</p>\n<h3 id=\"git\">Git</h3>\n<p>Git is a distributed version control system that allows developers to track code changes, collaborate on projects, and maintain a complete history of all modifications. Some of the key features of Git are:</p>\n<ul>\n<li><strong>Branching and merging:</strong> Enables developers to work on different tasks simultaneously</li>\n<li><strong>Support for distributed workflows:</strong> Enables offline work and seamless collaboration, providing flexibility for teams</li>\n<li><strong>Platform integration:</strong> Integrates with platforms like GitHub, GitLab, and Bitbucket to streamline project management</li>\n</ul>\n<h3 id=\"prometheus-and-grafana\">Prometheus and Grafana</h3>\n<p>Prometheus and Grafana are often used together to monitor and visualize application performance.</p>\n<ul>\n<li><strong>Prometheus:</strong> A powerful open-source monitoring system designed for metrics collection and alerting. Features a robust query language (PromQL) for analyzing time-series data</li>\n<li><strong>Grafana:</strong> A visualization tool that creates interactive dashboards using data from Prometheus and other sources. Enables teams to monitor key metrics in real time</li>\n</ul>\n<p>Prometheus collects and stores metrics, while Grafana visualizes these metrics in customizable dashboards. This combination empowers teams to:</p>\n<ul>\n<li>Track application performance in real time</li>\n<li>Diagnose and resolve system issues efficiently</li>\n<li>Set up alerts to ensure minimal downtime and maintain service reliability</li>\n</ul>\n<p>Equipped with knowledge about essential tools, it’s time to explore career growth opportunities and roles within your organization that align with a DevOps engineer’s expertise.</p>\n<h2 id=\"growth-opportunities-and-the-importance-of-continuous-learning\">Growth opportunities and the importance of continuous learning</h2>\n<p>By continuously building skills and staying ahead of industry trends, DevOps engineers can advance their careers and take on more strategic roles within an organization.</p>\n<p>For hiring managers, understanding how these roles contribute to business outcomes is key to aligning talent acquisition strategies with organizational goals. By fostering career growth, organizations not only enhance employee satisfaction but also build a workforce capable of driving innovation and operational efficiency.</p>\n<p>A candidate can choose from the different career options available in the future, such as:</p>\n<h3 id=\"devops-architect\">DevOps architect</h3>\n<p>A <a href=\"https://roadmap.sh/devops/devops-engineer\" target=\"_blank\">DevOps architect</a> is responsible for designing enterprise-level DevOps frameworks and strategies. This role involves creating scalable frameworks, integrating tools and processes, and aligning DevOps practices with business objectives.</p>\n<p>This role requires a deep understanding of cloud technologies, automation tools, and CI/CD pipelines to ensure seamless software delivery. DevOps architects also focus on enhancing collaboration among cross-functional teams and aligning technical initiatives with organizational goals. Their expertise helps businesses achieve faster deployments, improved quality, and greater operational efficiency.</p>\n<h3 id=\"site-reliability-engineer-sre\">Site reliability engineer (SRE)</h3>\n<p>Site reliability engineers focus on maintaining system reliability and performance by leveraging automation and proactive monitoring. They develop robust recovery plans and address potential bottlenecks before they impact users.</p>\n<p>SREs minimize downtime and enhance user experience, ensuring high availability of critical systems and boosting customer satisfaction. Their expertise directly reduces operational risks and strengthens business continuity.</p>\n<h3 id=\"cloud-engineer\">Cloud engineer</h3>\n<p>Cloud engineers specialize in managing cloud infrastructure and optimizing cloud-based solutions. They oversee multi-cloud or hybrid cloud environments while implementing security measures to protect resources.</p>\n<p>Cloud engineers are well-versed in cloud providers like AWS or Google Cloud and work on automating resource provisioning, monitoring, and scaling to accommodate evolving business needs. They also play a crucial role in implementing cloud security measures and ensuring compliance with industry standards, enabling organizations to leverage the full potential of cloud technologies.</p>\n<h3 id=\"consultant-or-advisor\">Consultant or advisor</h3>\n<p>Consultants or advisors help organizations adopt DevOps best practices, select the right tools, and train teams to foster continuous improvement.</p>\n<p>They play a critical role in driving organizational transformation by aligning DevOps initiatives with business objectives and empowering software engineering and operation teams with the skills and strategies needed to achieve long-term success in a competitive landscape.</p>\n<p>IT dynamics are constantly changing, and staying relevant in the field of DevOps requires a commitment to continuous learning. Organizations that invest in the growth of their DevOps teams reap significant rewards:</p>\n<ul>\n<li><strong>Retention of top talent:</strong> Employees are more likely to stay with companies that support their professional growth. Offering opportunities for skill development, DevOps training, certifications, and career advancement fosters loyalty and reduces turnover</li>\n<li><strong>Enhanced operational efficiency:</strong> A well-trained DevOps team can implement cutting-edge tools and agile principles, improving workflow efficiency and reducing downtime. This directly translates to better product delivery and customer experience</li>\n<li><strong>Attracting skilled candidates:</strong> Highlighting growth opportunities in job descriptions makes the organization more appealing to skilled candidates. Professionals in this field actively seek DevOps engineer roles where they can grow and contribute better</li>\n<li><strong>Fostering innovation:</strong> This practice helps employees to experiment with new technologies and methodologies, driving innovation. Organizations encouraging this culture remain competitive and adaptive in a rapidly changing market</li>\n</ul>\n<h2 id=\"what-next\">What next?</h2>\n<p>To take the next step:</p>\n<ul>\n<li>Use the above <strong>DevOps engineer job description template</strong> to simplify your hiring process</li>\n<li>Explore our <a href=\"https://roadmap.sh/devops\" target=\"_blank\"><strong>DevOps roadmap</strong></a> for deeper insights into career paths and the skills that matter most</li>\n<li>Join the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> to stay informed about the latest updates and meaningful discussions</li>\n</ul>";

				const frontmatter$_ = {"title":"DevOps Engineer Job Description [@currentYear@ Template]","description":"Create the perfect DevOps Engineer job description with our @currentYear@ template, tailored to attract top talent in today's tech landscape.","authorId":"william","excludedBySlug":"/devops/job-description","seo":{"title":"DevOps Engineer Job Description [@currentYear@ Template]","description":"Create the perfect DevOps Engineer job description with our @currentYear@ template, tailored to attract top talent in today's tech landscape.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-engineer-job-description-0xjml.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2025-01-17","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$_ = "/workspace/src/data/guides/devops-job-description.md";
				const url$_ = undefined;
				function rawContent$_() {
					return "   \n                                                                 \n                                                                                                                                                             \n                 \n                                         \n    \n                                                                   \n                                                                                                                                                               \n                                                                                         \n                            \n                         \n            \n               \n                  \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps engineer job description template](https://assets.roadmap.sh/guest/devops-engineer-job-description-0xjml.jpg)\n\nAs businesses adopt agile practices to stay competitive, the demand for skilled DevOps professionals is on the rise. Hiring top talent starts with understanding their role and crafting a clear, compelling job description.\n\nTo help you create the ideal profile, this guide draws insights from top job boards like Indeed, LinkedIn, and Glassdoor. It covers the key responsibilities, essential skills, and qualifications of a [DevOps engineer](https://roadmap.sh/devops). Use this template as your go-to resource for attracting the best candidates in the field.\n\n## DevOps engineer job description template\n\nA DevOps engineer ensures seamless collaboration between software development and IT operations to improve software delivery speed and system reliability. Here is a DevOps engineer job description template that highlights the essential skills and qualifications that hiring managers look for in potential candidates.\n\n**Job Title:** DevOps Engineer\n\n**Company:** [Add your company name]\n\n**Location:** [Specify your location]\n\n**Job Type:** Full-time or part-time\n\n**About Us:** [Provide company name and a quick summary of their achievements, history, and goals]\n\n**Job description**\n\n**[Company Name]** is looking for an experienced DevOps engineer with strong technical expertise in CI/CD pipelines, infrastructure automation, and cloud platforms, along with excellent collaboration and communication skills. The candidate should have hands-on experience with configuration management tools, a solid understanding of DevOps practices, and a working knowledge of internal backend systems. The ideal candidate will have the ability to coordinate and bridge gaps between the software developer and the operation team, ensuring a smooth workflow.\n\n**Responsibilities**\n\nDevOps engineer's responsibilities include:\n\n- Designing and maintaining continuous integration/continuous deployment pipelines to automate code testing and deployment\n- Tracking software performance, fixing errors, troubleshooting systems, implementing preventive measures for smooth workflows, and building automated processes\n- Optimizing cloud resources and implementing cost-effective solutions\n- Implementing and managing infrastructure using code rather than manual processes. Uses Terraform or CloudFormation for Infrastructure as Code (IaC) management\n- Collaborating between teams helps in resolving issues quickly and deploying new features smoothly\n- Monitoring and creating new processes based on performance analysis\n- Better management of the software development process and implementation of configuration management tools\n- Automating repetitive tasks to improve team efficiency\n- Implementing security best practices, including automated compliance checks and secure code deployment\n\n**Requirements**\n\nThe candidate must fulfill the following requirements for the DevOps engineering job profile:\n\n- Hands-on experience with CI/CD tools\n- Good experience in infrastructure as code tools\n- Familiarity with monitoring and logging tools\n- Proficiency in Docker for packaging applications and Kubernetes for managing containers\n- Strong problem-solving and troubleshooting skills\n- Excellent communication and collaboration skills to ensure proper teamwork\n- Proficiency in scripting languages like Python, PowerShell, etc.\n- A Bachelor's degree in Computer Science, Engineering, or a related discipline, or equivalent industry experience\n\nFor an entry-level DevOps engineer role, recruiters might look for:\n\n- Basic knowledge of DevOps tools, i.e., Git, Jenkins, and Docker\n- Familiarity with at least one programming language, such as Python or Go\n- Understanding of basic networking concepts\n- Willingness to embrace continuous learning and adoption of new tools\n\n**Nice to have**\n\n- Certification in cloud platforms like AWS certified DevOps engineer\n- Good knowledge of agile methodologies and practices\n\n**What we offer**\n\nHighlight what your company offers, such as competitive salary, health benefits, professional development opportunities, flexible work arrangements, or other perks.\n\n**How to apply**\n\nIf you are interested in the DevOps engineer job profile, send your resume and cover letter to your selected company [insert email address] or apply through [insert application portal link].\n\n## Key DevOps engineer skills essential for job profile\n\nWhen recruiting a DevOps engineer, prioritize candidates with strong technical expertise, adaptability, and collaboration skills. DevOps requires bridging development and operations, so focus on individuals who excel in both technical problem-solving and teamwork.\n\n![Key DevOps engineer skills](https://assets.roadmap.sh/guest/key-devops-engineer-skills-essential-for-job-profile-qhr33.png)\n\nLet's explore the essential skills that make a strong DevOps engineer:\n\n### Technical skills\n\nA DevOps job description must showcase a strong technical background and knowledge of critical concepts. Future engineers must know how to maintain tools, perform root cause analysis, develop project management capabilities, etc. A DevOps engineer must possess the following technical skills:\n\n- **Proficiency with CI/CD tools:** Familiarity with CI/CD tools, such as Jenkins, GitLab CI/CD, or Bamboo, to automate build and deployment processes\n- **Coding and scripting skills:** Knowledge of programming languages like Python, Ruby, or Java, and scripting languages like Bash\n- **Cloud platform expertise:** Experience with AWS or Google Cloud platform for managing scalable infrastructure\n- **Containerization and orchestration:** Understanding of Docker and Kubernetes to deploy and manage containerized applications\n- **Version control systems:** Expertise in Git for code repository management and facilitating team collaboration\n\n### Cross-functional skills\n\nCross-functional skills are essential for DevOps engineers to enable seamless collaboration across teams and departments. These skills help bridge the gap between technical and non-technical stakeholders for successful project outcomes, such as:\n\n- **Problem-solving:** DevOps engineers must have the ability to quickly identify and resolve system bottlenecks or failures\n- **Communication:** Strong communication skills to explain technical issues and collaborate effectively with multiple teams\n- **Collaboration:** DevOps engineers must have a team-oriented mindset to bridge gaps between development, operations, and business stakeholders\n\nEquipped with an understanding of the essential skills, the next step is evaluating candidates' familiarity with popular DevOps tools. Here's a quick guide to the tools recruiters should expect to see in job descriptions and interviews.\n\n## Common DevOps tools and technologies\n\nCandidates with experience in the following tools are often preferred, as they are essential for automating workflows and ensuring system reliability. Let's explore some of the most popular DevOps tools that are commonly included in job descriptions.\n\n![Common DevOps tools and technologies](https://assets.roadmap.sh/guest/common-devops-tools-and-technologies-dwrxx.png)\n\n### Jenkins\n\nJenkins is a popular open-source automation server used for continuous integration and continuous delivery (CI/CD). It streamlines software testing and deployment, reducing manual effort and accelerating development cycles. Jenkins offers several features, including:\n\n- **Extensive plugin library:** Supports tools like Docker, Kubernetes, and Git for seamless integration\n- **Real-time feedback:** Alerts teams to failed builds, enabling early issue resolution\n- **Customizable pipelines:** Offers flexibility through domain-specific language (DSL) or GUI-based pipelines\n\n### Docker\n\nDocker is a containerization platform that packages applications and their dependencies into lightweight containers. These containers work seamlessly across different phases, from software development to production. Some of the key features of Docker are:\n\n- **Isolated environment:** Maintains reliable application performance across different underlying systems\n- **Faster deployment:** Enables quicker application deployment compared to traditional virtual machines\n- **Support for microservices architecture:** Facilitates modular development, making it easier to build, deploy, and scale microservices-based applications\n\nDiscover additional use cases and strategies for [Docker](https://roadmap.sh/docker) in modern application development.\n\n### Kubernetes\n\nKubernetes is an open-source orchestration platform for automating the deployment, scaling, and management of containerized applications. It works smoothly with Docker and other container runtimes to guarantee application reliability and scalability. Some standout features make Kubernetes a powerful choice, including:\n\n- **Automated scaling:** Dynamically allocates resources to accommodate fluctuating workloads\n- **Self-healing capabilities:** Automatically restarts failed containers or replaces unresponsive nodes to maintain application health\n- **Service discovery and load balancing:** Efficiently distributes traffic across services, improving resource utilization and application performance\n\nLearn how [Kubernetes](https://roadmap.sh/kubernetes) supports advanced DevOps workflows and container orchestration.\n\n### Terraform\n\nTerraform by HashiCorp is a tool for defining and provisioning infrastructure using declarative configuration files. This approach enables teams to automate the setup and management of cloud resources, maintaining consistency and reducing errors. Key features of Terraform include:\n\n- **Multi-cloud support:** Supports multiple cloud providers, including AWS, Google Cloud, etc.\n- **Version control:** Tracks infrastructure changes, enabling safe rollbacks and thorough audits\n- **Reusable modules:** Simplifies infrastructure management with reusable and shareable code\n\nExplore how [Terraform](https://roadmap.sh/terraform) empowers teams to manage modern infrastructure efficiently.\n\n### Git\n\nGit is a distributed version control system that allows developers to track code changes, collaborate on projects, and maintain a complete history of all modifications. Some of the key features of Git are:\n\n- **Branching and merging:** Enables developers to work on different tasks simultaneously\n- **Support for distributed workflows:** Enables offline work and seamless collaboration, providing flexibility for teams\n- **Platform integration:** Integrates with platforms like GitHub, GitLab, and Bitbucket to streamline project management\n\n### Prometheus and Grafana\n\nPrometheus and Grafana are often used together to monitor and visualize application performance.\n\n- **Prometheus:** A powerful open-source monitoring system designed for metrics collection and alerting. Features a robust query language (PromQL) for analyzing time-series data\n- **Grafana:** A visualization tool that creates interactive dashboards using data from Prometheus and other sources. Enables teams to monitor key metrics in real time\n\nPrometheus collects and stores metrics, while Grafana visualizes these metrics in customizable dashboards. This combination empowers teams to:\n\n- Track application performance in real time\n- Diagnose and resolve system issues efficiently\n- Set up alerts to ensure minimal downtime and maintain service reliability\n\nEquipped with knowledge about essential tools, it's time to explore career growth opportunities and roles within your organization that align with a DevOps engineer's expertise.\n\n## Growth opportunities and the importance of continuous learning\n\nBy continuously building skills and staying ahead of industry trends, DevOps engineers can advance their careers and take on more strategic roles within an organization. \n\nFor hiring managers, understanding how these roles contribute to business outcomes is key to aligning talent acquisition strategies with organizational goals. By fostering career growth, organizations not only enhance employee satisfaction but also build a workforce capable of driving innovation and operational efficiency.\n\nA candidate can choose from the different career options available in the future, such as:\n\n### DevOps architect\n\nA [DevOps architect](https://roadmap.sh/devops/devops-engineer) is responsible for designing enterprise-level DevOps frameworks and strategies. This role involves creating scalable frameworks, integrating tools and processes, and aligning DevOps practices with business objectives.\n\nThis role requires a deep understanding of cloud technologies, automation tools, and CI/CD pipelines to ensure seamless software delivery. DevOps architects also focus on enhancing collaboration among cross-functional teams and aligning technical initiatives with organizational goals. Their expertise helps businesses achieve faster deployments, improved quality, and greater operational efficiency.\n\n### Site reliability engineer (SRE)\n\nSite reliability engineers focus on maintaining system reliability and performance by leveraging automation and proactive monitoring. They develop robust recovery plans and address potential bottlenecks before they impact users.\n\nSREs minimize downtime and enhance user experience, ensuring high availability of critical systems and boosting customer satisfaction. Their expertise directly reduces operational risks and strengthens business continuity.\n\n### Cloud engineer\n\nCloud engineers specialize in managing cloud infrastructure and optimizing cloud-based solutions. They oversee multi-cloud or hybrid cloud environments while implementing security measures to protect resources.\n\nCloud engineers are well-versed in cloud providers like AWS or Google Cloud and work on automating resource provisioning, monitoring, and scaling to accommodate evolving business needs. They also play a crucial role in implementing cloud security measures and ensuring compliance with industry standards, enabling organizations to leverage the full potential of cloud technologies.\n\n### Consultant or advisor\n\nConsultants or advisors help organizations adopt DevOps best practices, select the right tools, and train teams to foster continuous improvement.\n\nThey play a critical role in driving organizational transformation by aligning DevOps initiatives with business objectives and empowering software engineering and operation teams with the skills and strategies needed to achieve long-term success in a competitive landscape.\n\nIT dynamics are constantly changing, and staying relevant in the field of DevOps requires a commitment to continuous learning. Organizations that invest in the growth of their DevOps teams reap significant rewards:\n\n- **Retention of top talent:** Employees are more likely to stay with companies that support their professional growth. Offering opportunities for skill development, DevOps training, certifications, and career advancement fosters loyalty and reduces turnover\n- **Enhanced operational efficiency:** A well-trained DevOps team can implement cutting-edge tools and agile principles, improving workflow efficiency and reducing downtime. This directly translates to better product delivery and customer experience\n- **Attracting skilled candidates:** Highlighting growth opportunities in job descriptions makes the organization more appealing to skilled candidates. Professionals in this field actively seek DevOps engineer roles where they can grow and contribute better\n- **Fostering innovation:** This practice helps employees to experiment with new technologies and methodologies, driving innovation. Organizations encouraging this culture remain competitive and adaptive in a rapidly changing market\n\n## What next?\n\nTo take the next step:\n\n- Use the above **DevOps engineer job description template** to simplify your hiring process\n- Explore our [**DevOps roadmap**](https://roadmap.sh/devops) for deeper insights into career paths and the skills that matter most\n- Join the [Discord community](https://roadmap.sh/discord) to stay informed about the latest updates and meaningful discussions";
				}
				async function compiledContent$_() {
					return await html$_();
				}
				function getHeadings$_() {
					return [{"depth":2,"slug":"devops-engineer-job-description-template","text":"DevOps engineer job description template"},{"depth":2,"slug":"key-devops-engineer-skills-essential-for-job-profile","text":"Key DevOps engineer skills essential for job profile"},{"depth":3,"slug":"technical-skills","text":"Technical skills"},{"depth":3,"slug":"cross-functional-skills","text":"Cross-functional skills"},{"depth":2,"slug":"common-devops-tools-and-technologies","text":"Common DevOps tools and technologies"},{"depth":3,"slug":"jenkins","text":"Jenkins"},{"depth":3,"slug":"docker","text":"Docker"},{"depth":3,"slug":"kubernetes","text":"Kubernetes"},{"depth":3,"slug":"terraform","text":"Terraform"},{"depth":3,"slug":"git","text":"Git"},{"depth":3,"slug":"prometheus-and-grafana","text":"Prometheus and Grafana"},{"depth":2,"slug":"growth-opportunities-and-the-importance-of-continuous-learning","text":"Growth opportunities and the importance of continuous learning"},{"depth":3,"slug":"devops-architect","text":"DevOps architect"},{"depth":3,"slug":"site-reliability-engineer-sre","text":"Site reliability engineer (SRE)"},{"depth":3,"slug":"cloud-engineer","text":"Cloud engineer"},{"depth":3,"slug":"consultant-or-advisor","text":"Consultant or advisor"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$_ = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$_;
					content.file = file$_;
					content.url = url$_;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$_())}`;
				});

const __vite_glob_0_36 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$_,
	compiledContent: compiledContent$_,
	default: Content$_,
	file: file$_,
	frontmatter: frontmatter$_,
	getHeadings: getHeadings$_,
	rawContent: rawContent$_,
	url: url$_
}, Symbol.toStringTag, { value: 'Module' }));

const html$Z = () => "<p><img src=\"https://assets.roadmap.sh/guest/key-phases-of-devops-lifecycle-788fa.jpg\" alt=\"Learn the key phases of the DevOps lifecycle.\"></p>\n<p>Whether you’re an experienced DevOps engineer or trying to expand your expertise, you’ll likely adopt (or are already using) parts of the <strong>7 key phases of the DevOps lifecycle</strong> as a core <strong>process</strong> for developing, testing, and deploying software projects.</p>\n<p>But what are these phases, and do they really need to be followed in a specific order to truly matter?</p>\n<p>As a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineer</a>, your primary role is to help the development and operations teams operate better. You’ll do this by collaborating closely with software engineers, quality assurance teams, and other stakeholders to set up <strong>processes</strong>, implement <strong><a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">tools</a></strong>, and create standards to achieve the overall goal of the project.</p>\n<p>In this guide, you’ll learn about these phases, how they’re implemented, and the sequence in which they are applied in software development.</p>\n<p><strong>TL;DR:</strong> 7 key phases of the DevOps lifecycle are:</p>\n<ul>\n<li>Continuous development</li>\n<li>Continuous integration (CI)</li>\n<li>Continuous testing</li>\n<li>Continuous deployment (CD)</li>\n<li>Continuous monitoring</li>\n<li>Continuous feedback</li>\n<li>Continuous operations</li>\n</ul>\n<p>Let’s look at the DevOps lifecycle in detail.</p>\n<h2 id=\"what-is-the-devops-lifecycle\">What is the DevOps lifecycle?</h2>\n<p>DevOps lifecycle is a set of stages that software development (Dev) and IT operations (Ops) teams use to deliver software applications in an efficient and reliable manner. It is a continuous and iterative process that facilitates integration and collaboration between these teams.</p>\n<p>In traditional software development, developers don’t just build and deploy applications. They must also accommodate changes, fix bugs, consider feature requests, and handle various administrative tasks. The same approach to continuous improvement applies in DevOps, which has led to industries adopting DevOps to factor in the lifecycle processes into their operations.</p>\n<p>The primary goal of the DevOps lifecycle is to streamline your development and delivery process and ensure applications are reliable and efficiently deployed.</p>\n<p>It follows a range of continuous development, integration, testing, monitoring, and feedback gathering, with each section using sets of best practices and tools to ensure the overall project goal.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/7-key-phases-of-the-devops-lifecycle-4zoj6.png\" alt=\"DevOps Lifecycle\"></p>\n<h2 id=\"7-key-phases-of-the-devops-lifecycle\">7 key phases of the DevOps lifecycle</h2>\n<p>The 7 key phases of the DevOps lifecycle, also known as the 7 C’s of DevOps, are sets of interconnected stages that work together in a continuous loop to help you develop, test, and deploy applications quickly. Below are the key phases of the DevOps lifecycle:</p>\n<h3 id=\"1-continuous-development\">1. Continuous development</h3>\n<p>This phase is about planning and coding the software application. Developers plan the software and break the entire development process into smaller cycles that add value to the overall software development goal.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-development-xbxj3.png\" alt=\"Continuous Development\"></p>\n<p>By following this process, DevOps teams can easily map out the <strong>software development lifecycle (SLDC)</strong> to other stakeholders regarding expectations, responsibilities, and timelines. Additionally, because the development teams, testers, and other stakeholders build software piece-by-piece, the development process is fast, large-scale risk is minimal, and the process can easily adapt to changing requirements and business needs.</p>\n<p><strong>Tools used for continuous development</strong></p>\n<ol>\n<li>\n<p><strong>Planning:</strong> DevOps teams use project management tools like Jira, Linear, and ClickUp to help teams plan, track, and release software.</p>\n</li>\n<li>\n<p><strong>Coding</strong>: DevOps teams can use version control systems like Git, editors like Visual Studio Code, and pair programming tools like Tuple to effectively collaborate with other development teams when building software.</p>\n</li>\n</ol>\n<h3 id=\"2-continuous-integration-ci\">2. Continuous integration (CI)</h3>\n<p>After writing the code and storing it in a shared repository, DevOps teams can set up a CI pipeline on the repository so that when developers commit changes to the source code, they can do the following:</p>\n<ul>\n<li>Detect changes to existing code and initiate actions like unit testing, integration testing, and the build process.</li>\n<li>Perform code quality analysis.</li>\n<li>Generate deployment artifacts.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-integration-b4lef.png\" alt=\"Continuous Integration\"></p>\n<p>This is particularly important because the development team will continue to push updates into the source code to build new features, fix bugs, perform code improvement, and refactoring.</p>\n<p><strong>Tools used</strong></p>\n<p>Jenkins, CircleCI, Travis CI, and GitHub Actions are some <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">automation tools</a> DevOps teams use to build, test, and deploy code changes.</p>\n<h3 id=\"3-continuous-testing\">3. Continuous testing</h3>\n<p>Continuous testing involves automating tests on the developed code to ensure that changes are validated at each step of the development cycle, catch defects, and provide feedback without the need for human intervention.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-testing-d90gb.png\" alt=\"Continuous testing\"></p>\n<p>If an error or bug occurs, the code is returned to the previous phase (integration) for correction and possible fixes. Automated testing improves the overall workflow by saving time and resources.</p>\n<p><strong>Tools used</strong></p>\n<p>Selenium, JUnit, TestNG, and Cucumber are some automation testing tools that DevOps teams use to automate testing at scale.</p>\n<h3 id=\"4-continuous-deployment-cd\">4. Continuous deployment (CD)</h3>\n<p>This is the phase when the codes that have passed all tests are automatically deployed to the staging or production environment. Continuous deployment’s overall goals are:</p>\n<ul>\n<li>Reduce the time between development and deployment.</li>\n<li>Facilitate the deployment of finished code to production servers.</li>\n<li>Ensure consistency across development, testing, staging, and production environments.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-deployment-bprfv.png\" alt=\"Continuous Deployment\"></p>\n<p><strong>Tools used</strong></p>\n<ol>\n<li>\n<p><strong>Configuration tools</strong>: The DevOps team uses configuration management tools like Ansible, Puppet, Chef, and SaltStack to automate the provisioning, configuration, management, and continuous delivery of IT infrastructure. These tools help the DevOps team increase efficiency, maintain consistency across environments, and reduce errors.</p>\n</li>\n<li>\n<p><strong>Containerization and orchestration tools</strong>: The DevOps team uses tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, Vagrant, and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> to build and test applications. These tools help applications respond to demand (scaling up and scaling down) and maintain consistency across environments.</p>\n</li>\n</ol>\n<h3 id=\"5-continuous-monitoring\">5. Continuous monitoring</h3>\n<p>This is the phase where you keep an eye on the deployed application to monitor performance, security, and other helpful data. It involves the collection of metrics and other application usage-related data to detect issues such as system errors, server downtime, application errors, and security vulnerabilities. Additionally, it involves collaboration with the operation teams to monitor bugs and identify improper system behavior.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-monitoring-cydj0.png\" alt=\"Continuous Monitoring\"></p>\n<p>Continuous monitoring improves the productivity and reliability of the system while reducing IT support costs. Any issues detected during this phase can be promptly reported and addressed in the continuous development phase, creating a more efficient feedback loop.</p>\n<p><strong>Tools used</strong></p>\n<p>Prometheus, Grafana, ELK Stack (Elasticsearch, Logstash, Kibana), and Datadog are some tools DevOps teams use to continuously monitor the application and infrastructure to identify and resolve issues.</p>\n<h3 id=\"6-continuous-feedback\">6. Continuous feedback</h3>\n<p>Continuous feedback is about gathering information from users and stakeholders to understand how the software performs in real-life scenarios. The feedback is then continuously analyzed and used to make informed decisions and improve the overall development process.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-feedback-eg1tr.png\" alt=\"Feedback\"></p>\n<p><strong>Tools used</strong></p>\n<p>DevOps teams use tools like Datadog and LogRocket to gather and gain insights into how users interact with their products.</p>\n<h3 id=\"7-continuous-operations\">7. Continuous operations</h3>\n<p>In the traditional software development process, developers might need to pull down the server when they want to update and maintain applications. This approach disrupts the development process, potentially increases organizational costs, and can lead to user service interruptions.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/continuous-operations-h2yrj.png\" alt=\"Continuous operations\"></p>\n<p>Continuous operations address these challenges, among others. It ensures the software remains available and operational with minimal downtime. This phase involves tasks such as:</p>\n<ul>\n<li>Performing zero-downtime deployments.</li>\n<li>Automating backups and recovery.</li>\n<li>Using infrastructure management to provision and scale resources.</li>\n<li>Distributing traffic across multiple servers to maintain performance during updates or high-traffic periods.</li>\n<li>Implementing strategies like database replication and rolling updates to maintain data availability.</li>\n</ul>\n<p><strong>Tools used</strong></p>\n<p>Puppet, Terraform, and Chef are some tools DevOps teams use to automate resource provisioning and ensure system reliability.</p>\n<p>The DevOps lifecycle is a continuous process that involves development, integration, testing, deployment, monitoring, feedback, and operations. Beyond the improvement it brings, you’ll also notice that organizations are extending DevOps and further advancing its capability.</p>\n<p>Let’s explore some of these extensions and how they’re changing the development process.</p>\n<h2 id=\"key-devops-extensions-to-watch-in-2025\">Key DevOps extensions to watch in 2025</h2>\n<p>Below are some extensions that build on the core principles of DevOps, like <a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">automation</a>, collaboration, and continuous improvement:</p>\n<ul>\n<li>DevSecOps</li>\n<li>GitOps</li>\n<li>DataOps</li>\n<li>FinOps</li>\n<li>MLOps</li>\n<li>AIOps</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-extensions-8fy7t.png\" alt=\"DevOps extension\"></p>\n<h3 id=\"devsecops\">DevSecOps</h3>\n<p>DevSecOps stands for <strong>Development</strong>, <strong>Security</strong>, and <strong>Operations</strong>. It’s an extension of DevOps that continuously integrates security practices into every phase of the software development lifecycle rather than treating them as an afterthought.</p>\n<p>With the increase in cybersecurity threats and regulatory requirements, it has become more important to use DevSecOps to embed security into the pipeline so that organizations can deliver secure software faster.</p>\n<p>DevSecOps uses tools like HashiCorp Vault, Snyk, OWASP ZAP, and Aqua Security to:</p>\n<ul>\n<li>Automate security testing.</li>\n<li>Perform continuous compliance.</li>\n<li>Enforce secure coding practices</li>\n<li>Perform vulnerability assessment.</li>\n</ul>\n<h3 id=\"gitops\">GitOps</h3>\n<p>GitOps stands for <strong>Git Operations</strong>. It’s an extension of DevOps that uses Git as a source of truth for managing infrastructure and application development. This means the DevOps teams can make changes to infrastructure through Git pull requests, which are then automatically applied via the CI/CD pipelines.</p>\n<p>By adopting GitOps, organizations can improve the reliability of their systems, enforce standards for the team, and accelerate software delivery.</p>\n<p>GitOps involves using tools like Jenkins X, Flux, and ArgoCD to automate the delivery and deployment of applications.</p>\n<h3 id=\"dataops\">DataOps</h3>\n<p>DataOps stands for <strong>Data Operations</strong>. It’s an extension of DevOps methodology designed to improve data pipeline communication, integration, and automation across the data and IT operations teams. DataOps aims to ensure that the data pipeline is fast, scalable, and reliable.</p>\n<p>DataOps uses tools like Apache NiFi, data build tool (dbt), and Prefect to:</p>\n<ul>\n<li>Perform data versioning.</li>\n<li>Automate data testing.</li>\n<li>Automate the delivery of data pipelines.</li>\n</ul>\n<h3 id=\"finops\">FinOps</h3>\n<p>FinOps stands for <strong>Financial Operations</strong>. It’s an extension of DevOps that enables organizations that use cloud services to efficiently manage their cloud costs and financial operations. The goal of FinOps is to optimize cloud-related costs by encouraging close collaboration between finance, operations, and engineering teams.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/1tvyy8hg-f4fd8.png\" alt=\"finOps\"></p>\n<p>FinOps also uses a lifecycle approach to optimize organization costs. It involves:</p>\n<ol>\n<li><strong>Inform</strong>: This phase involves gaining visibility into cloud spending by tracking cloud costs, setting budgets, and leveraging discounts or other freebies offered by cloud providers. Basically, it provides the team insights into where the money is being spent.</li>\n<li><strong>Optimize</strong>: This phase is all about optimizing cloud costs. It involves sizing resources, identifying areas of inefficiency, and other cost-improvement tasks that will help make cost-effective decisions without compromising performance.</li>\n<li><strong>Operate:</strong> This phase is about monitoring cloud spending, enforcing policies, and making needed adjustments to ensure the budget is not exceeded.</li>\n</ol>\n<p>FinOps leverage tools like Azure Cost Management, AWS Cost Explorer, Cloudability, and CloudHealth to achieve the organization’s cloud-related financial goals.</p>\n<h3 id=\"mlops\">MLOps</h3>\n<p>MLOps stands for <strong>Machine Learning Operations</strong>. It’s an extension of DevOps workflow that streamlines and automates the deployment, monitoring, and management of ML models in a production environment. It promotes collaboration between the data science and IT operations teams so that models can be versioned, continuously delivered, and retrained when needed.</p>\n<p>Tools used include TensorFlow Extended (TFX), Kubeflow, KitOps, and MLflow.</p>\n<h3 id=\"aiops\">AIOps</h3>\n<p>AIOps stands for <strong>Artificial Intelligence for IT Operations</strong>. It’s an extension of DevOps that promotes using artificial intelligence, machine learning, and data analytics to automate and improve IT operations processes. When AIOps is integrated into DevOps processes, the organization benefits from enhanced efficiency, faster issue resolution, and proactive system monitoring.</p>\n<p>Tools used include IBM Watson AIOps and Dynatrace.</p>\n<p>The extension of DevOps workflow is a response to modern software challenges, driven by the ongoing shift in the DevOps ecosystem and the need for specialized practices across different software engineering fields.</p>\n<h2 id=\"essential-devops-lifecycle-best-practices\">Essential DevOps lifecycle best practices</h2>\n<p>An essential part of DevOps culture is the lifecycle phases. While the lifecycle phases streamline the operational process and help you build reliable software, there are still some gotchas that you need to consider when integrating this process into your SDLC. Below are some best practices you should consider:</p>\n<ol>\n<li>\n<p><strong>Promote collaboration</strong>: As a DevOps engineer, you need to encourage cross-functional collaboration and shared responsibilities among direct teams and other stakeholders. This will help you and your team avoid the traditional siloed approach, break communication barriers, and promote DevOps culture.</p>\n</li>\n<li>\n<p><strong>Show empathy and support</strong>: Implementing DevOps lifecycle into your development process may take time and require some adjustment for you and your team members. You need to support the team with resources and any helpful training material to help facilitate the process. Most importantly, allow time for everyone to adapt to the new process.</p>\n</li>\n<li>\n<p><strong>Set metrics or milestones</strong>: As the popular saying goes, <strong>“You can’t manage what you can’t measure</strong>**.****”** You must set clear objectives and define performance metrics at the beginning or during the adoption of a new process. This will help you and your team know what success looks like.</p>\n</li>\n<li>\n<p><strong>Invest in tools</strong>: At the heart of DevOps are the toolchains that automate toils and enable easy collaboration between development and operations teams. You should invest in DevOps tools that your team needs to automate their DevOps workflow. Below are some DevOps tools that can help you automate processes:</p>\n<ul>\n<li><strong>CI/CD tools</strong>: Tools like Jenkins, GitLab CI/CD, CircleCI, Azure Pipeline, and GitHub Actions help automate the integration and deployment of code changes.</li>\n<li><strong>Infrastructure as Code (IaC) tools</strong>: Tools like Terraform, Ansible, Pulumi, Chef, AWS CloudFormation, and Vagrant help automate the provisioning and management of infrastructure.</li>\n<li><strong>Containerization and orchestration tools</strong>: Tools like Docker, Kubernetes, OpenShift, Docker Swarm, and Amazon ECS (Elastic Container Service) help manage and orchestrate containers at scale.</li>\n<li><strong>Monitoring and logging tools</strong>: Tools like Prometheus, ELK Stack (Elasticsearch, Logstash, and Kibana), Datadog, Splunk, and Grafana help track system performance, logging, and alerting.</li>\n<li><strong>Configuration management tools</strong>: Tools like Chef, Puppet, CFEngine, SaltStack, and Ansible help ensure that system configurations remain consistent across environments.</li>\n<li><strong>Security and compliance tools</strong>: Tools like HashiCorp Vault, OWASP ZAP, Snyk, SonarQube, and Aqua Security help enforce security policies, scanning, and compliance checks.</li>\n<li><strong>Collaboration and communication tools</strong>: Tools like Slack, Microsoft Teams, Trello, Jira, and Confluence help facilitate communication and collaboration between teams.</li>\n</ul>\n</li>\n<li>\n<p><strong>Continuous improvement</strong>: Encourage your teams to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.</p>\n</li>\n</ol>\n<h2 id=\"key-takeaways\">Key takeaways</h2>\n<p>At the core of the DevOps lifecycle is continuity. By following these key phases in an iterative pattern, you’ll be able to take advantage of the lifecycle process to build applications that are maintainable, scalable, and reliable.</p>\n<p>Use the <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a> to stay up to date with the latest developments and extensions in the DevOps ecosystem. Additionally, you can create a <a href=\"https://roadmap.sh/teams\" target=\"_blank\">custom roadmap</a> for your team to plan, track, and document the team’s skills and growth.</p>";

				const frontmatter$Z = {"title":"What Are the 7 Key Phases of the DevOps Lifecycle?","description":"Master the DevOps lifecycle by exploring its 7 phases, designed to enhance collaboration, streamline processes, and deliver software with agility.","authorId":"william","excludedBySlug":"/devops/lifecycle","seo":{"title":"What Are the 7 Key Phases of the DevOps Lifecycle?","description":"Master the DevOps lifecycle by exploring its 7 phases, designed to enhance collaboration, streamline processes, and deliver software with agility.","ogImageUrl":"https://assets.roadmap.sh/guest/key-phases-of-devops-lifecycle-788fa.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$Z = "/workspace/src/data/guides/devops-lifecycle.md";
				const url$Z = undefined;
				function rawContent$Z() {
					return "   \n                                                           \n                                                                                                                                                                 \n                 \n                                   \n    \n                                                             \n                                                                                                                                                                   \n                                                                                        \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Learn the key phases of the DevOps lifecycle.](https://assets.roadmap.sh/guest/key-phases-of-devops-lifecycle-788fa.jpg)\n\nWhether you’re an experienced DevOps engineer or trying to expand your expertise, you’ll likely adopt (or are already using) parts of the **7 key phases of the DevOps lifecycle** as a core **process** for developing, testing, and deploying software projects.\n\nBut what are these phases, and do they really need to be followed in a specific order to truly matter?\n\nAs a [DevOps engineer](https://roadmap.sh/devops), your primary role is to help the development and operations teams operate better. You’ll do this by collaborating closely with software engineers, quality assurance teams, and other stakeholders to set up **processes**, implement **[tools](https://roadmap.sh/devops/tools)**, and create standards to achieve the overall goal of the project.\n\nIn this guide, you’ll learn about these phases, how they're implemented, and the sequence in which they are applied in software development.\n\n**TL;DR:** 7 key phases of the DevOps lifecycle are:\n\n- Continuous development\n- Continuous integration (CI)\n- Continuous testing\n- Continuous deployment (CD)\n- Continuous monitoring\n- Continuous feedback\n- Continuous operations\n\nLet’s look at the DevOps lifecycle in detail.\n\n## What is the DevOps lifecycle?\n\nDevOps lifecycle is a set of stages that software development (Dev) and IT operations (Ops) teams use to deliver software applications in an efficient and reliable manner. It is a continuous and iterative process that facilitates integration and collaboration between these teams.\n\nIn traditional software development, developers don’t just build and deploy applications. They must also accommodate changes, fix bugs, consider feature requests, and handle various administrative tasks. The same approach to continuous improvement applies in DevOps, which has led to industries adopting DevOps to factor in the lifecycle processes into their operations.\n\nThe primary goal of the DevOps lifecycle is to streamline your development and delivery process and ensure applications are reliable and efficiently deployed.\n\nIt follows a range of continuous development, integration, testing, monitoring, and feedback gathering, with each section using sets of best practices and tools to ensure the overall project goal.\n\n![DevOps Lifecycle](https://assets.roadmap.sh/guest/7-key-phases-of-the-devops-lifecycle-4zoj6.png)\n\n## 7 key phases of the DevOps lifecycle\n\nThe 7 key phases of the DevOps lifecycle, also known as the 7 C’s of DevOps, are sets of interconnected stages that work together in a continuous loop to help you develop, test, and deploy applications quickly. Below are the key phases of the DevOps lifecycle:\n\n### 1. Continuous development\n\nThis phase is about planning and coding the software application. Developers plan the software and break the entire development process into smaller cycles that add value to the overall software development goal.\n\n![Continuous Development](https://assets.roadmap.sh/guest/continuous-development-xbxj3.png)\n\nBy following this process, DevOps teams can easily map out the **software development lifecycle (SLDC)** to other stakeholders regarding expectations, responsibilities, and timelines. Additionally, because the development teams, testers, and other stakeholders build software piece-by-piece, the development process is fast, large-scale risk is minimal, and the process can easily adapt to changing requirements and business needs.\n\n**Tools used for continuous development**\n\n1. **Planning:** DevOps teams use project management tools like Jira, Linear, and ClickUp to help teams plan, track, and release software.\n\n2. **Coding**: DevOps teams can use version control systems like Git, editors like Visual Studio Code, and pair programming tools like Tuple to effectively collaborate with other development teams when building software.\n\n### 2. Continuous integration (CI)\n\nAfter writing the code and storing it in a shared repository, DevOps teams can set up a CI pipeline on the repository so that when developers commit changes to the source code, they can do the following:\n\n- Detect changes to existing code and initiate actions like unit testing, integration testing, and the build process.\n- Perform code quality analysis.\n- Generate deployment artifacts.\n\n![Continuous Integration](https://assets.roadmap.sh/guest/continuous-integration-b4lef.png)\n\nThis is particularly important because the development team will continue to push updates into the source code to build new features, fix bugs, perform code improvement, and refactoring.\n\n**Tools used**\n\nJenkins, CircleCI, Travis CI, and GitHub Actions are some [automation tools](https://roadmap.sh/devops/automation-tools) DevOps teams use to build, test, and deploy code changes.\n\n### 3. Continuous testing\n\nContinuous testing involves automating tests on the developed code to ensure that changes are validated at each step of the development cycle, catch defects, and provide feedback without the need for human intervention.\n\n![Continuous testing](https://assets.roadmap.sh/guest/continuous-testing-d90gb.png)\n\nIf an error or bug occurs, the code is returned to the previous phase (integration) for correction and possible fixes. Automated testing improves the overall workflow by saving time and resources.\n\n**Tools used**\n\nSelenium, JUnit, TestNG, and Cucumber are some automation testing tools that DevOps teams use to automate testing at scale.\n\n### 4. Continuous deployment (CD)\n\nThis is the phase when the codes that have passed all tests are automatically deployed to the staging or production environment. Continuous deployment's overall goals are:\n\n- Reduce the time between development and deployment.\n- Facilitate the deployment of finished code to production servers.\n- Ensure consistency across development, testing, staging, and production environments.\n\n![Continuous Deployment](https://assets.roadmap.sh/guest/continuous-deployment-bprfv.png)\n\n**Tools used**\n\n1. **Configuration tools**: The DevOps team uses configuration management tools like Ansible, Puppet, Chef, and SaltStack to automate the provisioning, configuration, management, and continuous delivery of IT infrastructure. These tools help the DevOps team increase efficiency, maintain consistency across environments, and reduce errors.\n\n2. **Containerization and orchestration tools**: The DevOps team uses tools like [Docker](https://roadmap.sh/docker), Vagrant, and [Kubernetes](https://roadmap.sh/kubernetes) to build and test applications. These tools help applications respond to demand (scaling up and scaling down) and maintain consistency across environments.\n\n### 5. Continuous monitoring\n\nThis is the phase where you keep an eye on the deployed application to monitor performance, security, and other helpful data. It involves the collection of metrics and other application usage-related data to detect issues such as system errors, server downtime, application errors, and security vulnerabilities. Additionally, it involves collaboration with the operation teams to monitor bugs and identify improper system behavior.\n\n![Continuous Monitoring](https://assets.roadmap.sh/guest/continuous-monitoring-cydj0.png)\n\nContinuous monitoring improves the productivity and reliability of the system while reducing IT support costs. Any issues detected during this phase can be promptly reported and addressed in the continuous development phase, creating a more efficient feedback loop.\n\n**Tools used**\n\nPrometheus, Grafana, ELK Stack (Elasticsearch, Logstash, Kibana), and Datadog are some tools DevOps teams use to continuously monitor the application and infrastructure to identify and resolve issues.\n\n### 6. Continuous feedback\n\nContinuous feedback is about gathering information from users and stakeholders to understand how the software performs in real-life scenarios. The feedback is then continuously analyzed and used to make informed decisions and improve the overall development process.\n\n![Feedback](https://assets.roadmap.sh/guest/continuous-feedback-eg1tr.png)\n\n**Tools used**\n\nDevOps teams use tools like Datadog and LogRocket to gather and gain insights into how users interact with their products.\n\n### 7. Continuous operations\n\nIn the traditional software development process, developers might need to pull down the server when they want to update and maintain applications. This approach disrupts the development process, potentially increases organizational costs, and can lead to user service interruptions.\n\n![Continuous operations](https://assets.roadmap.sh/guest/continuous-operations-h2yrj.png)\n\nContinuous operations address these challenges, among others. It ensures the software remains available and operational with minimal downtime. This phase involves tasks such as:\n\n- Performing zero-downtime deployments.\n- Automating backups and recovery.\n- Using infrastructure management to provision and scale resources.\n- Distributing traffic across multiple servers to maintain performance during updates or high-traffic periods.\n- Implementing strategies like database replication and rolling updates to maintain data availability.\n\n**Tools used**\n\nPuppet, Terraform, and Chef are some tools DevOps teams use to automate resource provisioning and ensure system reliability.\n\nThe DevOps lifecycle is a continuous process that involves development, integration, testing, deployment, monitoring, feedback, and operations. Beyond the improvement it brings, you’ll also notice that organizations are extending DevOps and further advancing its capability.\n\nLet’s explore some of these extensions and how they’re changing the development process.\n\n## Key DevOps extensions to watch in 2025\n\nBelow are some extensions that build on the core principles of DevOps, like [automation](https://roadmap.sh/devops/automation), collaboration, and continuous improvement:\n\n- DevSecOps\n- GitOps\n- DataOps\n- FinOps\n- MLOps\n- AIOps\n\n![DevOps extension](https://assets.roadmap.sh/guest/devops-extensions-8fy7t.png)\n\n### DevSecOps\n\nDevSecOps stands for **Development**, **Security**, and **Operations**. It’s an extension of DevOps that continuously integrates security practices into every phase of the software development lifecycle rather than treating them as an afterthought.\n\nWith the increase in cybersecurity threats and regulatory requirements, it has become more important to use DevSecOps to embed security into the pipeline so that organizations can deliver secure software faster.\n\nDevSecOps uses tools like HashiCorp Vault, Snyk, OWASP ZAP, and Aqua Security to:\n\n- Automate security testing.\n- Perform continuous compliance.\n- Enforce secure coding practices\n- Perform vulnerability assessment.\n\n### GitOps\n\nGitOps stands for **Git Operations**. It’s an extension of DevOps that uses Git as a source of truth for managing infrastructure and application development. This means the DevOps teams can make changes to infrastructure through Git pull requests, which are then automatically applied via the CI/CD pipelines.\n\nBy adopting GitOps, organizations can improve the reliability of their systems, enforce standards for the team, and accelerate software delivery.\n\nGitOps involves using tools like Jenkins X, Flux, and ArgoCD to automate the delivery and deployment of applications.\n\n### DataOps\n\nDataOps stands for **Data Operations**. It’s an extension of DevOps methodology designed to improve data pipeline communication, integration, and automation across the data and IT operations teams. DataOps aims to ensure that the data pipeline is fast, scalable, and reliable.\n\nDataOps uses tools like Apache NiFi, data build tool (dbt), and Prefect to:\n\n- Perform data versioning.\n- Automate data testing.\n- Automate the delivery of data pipelines.\n\n### FinOps\n\nFinOps stands for **Financial Operations**. It’s an extension of DevOps that enables organizations that use cloud services to efficiently manage their cloud costs and financial operations. The goal of FinOps is to optimize cloud-related costs by encouraging close collaboration between finance, operations, and engineering teams.\n\n![finOps](https://assets.roadmap.sh/guest/1tvyy8hg-f4fd8.png)\n\nFinOps also uses a lifecycle approach to optimize organization costs. It involves:\n\n1. **Inform**: This phase involves gaining visibility into cloud spending by tracking cloud costs, setting budgets, and leveraging discounts or other freebies offered by cloud providers. Basically, it provides the team insights into where the money is being spent.\n2. **Optimize**: This phase is all about optimizing cloud costs. It involves sizing resources, identifying areas of inefficiency, and other cost-improvement tasks that will help make cost-effective decisions without compromising performance.\n3. **Operate:** This phase is about monitoring cloud spending, enforcing policies, and making needed adjustments to ensure the budget is not exceeded.\n\nFinOps leverage tools like Azure Cost Management, AWS Cost Explorer, Cloudability, and CloudHealth to achieve the organization's cloud-related financial goals.\n\n### MLOps\n\nMLOps stands for **Machine Learning Operations**. It’s an extension of DevOps workflow that streamlines and automates the deployment, monitoring, and management of ML models in a production environment. It promotes collaboration between the data science and IT operations teams so that models can be versioned, continuously delivered, and retrained when needed.\n\nTools used include TensorFlow Extended (TFX), Kubeflow, KitOps, and MLflow.\n\n### AIOps\n\nAIOps stands for **Artificial Intelligence for IT Operations**. It’s an extension of DevOps that promotes using artificial intelligence, machine learning, and data analytics to automate and improve IT operations processes. When AIOps is integrated into DevOps processes, the organization benefits from enhanced efficiency, faster issue resolution, and proactive system monitoring.\n\nTools used include IBM Watson AIOps and Dynatrace.\n\nThe extension of DevOps workflow is a response to modern software challenges, driven by the ongoing shift in the DevOps ecosystem and the need for specialized practices across different software engineering fields.\n\n## Essential DevOps lifecycle best practices\n\nAn essential part of DevOps culture is the lifecycle phases. While the lifecycle phases streamline the operational process and help you build reliable software, there are still some gotchas that you need to consider when integrating this process into your SDLC. Below are some best practices you should consider:\n\n1. **Promote collaboration**: As a DevOps engineer, you need to encourage cross-functional collaboration and shared responsibilities among direct teams and other stakeholders. This will help you and your team avoid the traditional siloed approach, break communication barriers, and promote DevOps culture.\n\n2. **Show empathy and support**: Implementing DevOps lifecycle into your development process may take time and require some adjustment for you and your team members. You need to support the team with resources and any helpful training material to help facilitate the process. Most importantly, allow time for everyone to adapt to the new process.\n\n3. **Set metrics or milestones**: As the popular saying goes, **“You can’t manage what you can’t measure****.****”** You must set clear objectives and define performance metrics at the beginning or during the adoption of a new process. This will help you and your team know what success looks like.\n\n4. **Invest in tools**: At the heart of DevOps are the toolchains that automate toils and enable easy collaboration between development and operations teams. You should invest in DevOps tools that your team needs to automate their DevOps workflow. Below are some DevOps tools that can help you automate processes:\n    - **CI/CD tools**: Tools like Jenkins, GitLab CI/CD, CircleCI, Azure Pipeline, and GitHub Actions help automate the integration and deployment of code changes.\n    - **Infrastructure as Code (IaC) tools**: Tools like Terraform, Ansible, Pulumi, Chef, AWS CloudFormation, and Vagrant help automate the provisioning and management of infrastructure.\n    - **Containerization and orchestration tools**: Tools like Docker, Kubernetes, OpenShift, Docker Swarm, and Amazon ECS (Elastic Container Service) help manage and orchestrate containers at scale.\n    - **Monitoring and logging tools**: Tools like Prometheus, ELK Stack (Elasticsearch, Logstash, and Kibana), Datadog, Splunk, and Grafana help track system performance, logging, and alerting.\n    - **Configuration management tools**: Tools like Chef, Puppet, CFEngine, SaltStack, and Ansible help ensure that system configurations remain consistent across environments.\n    - **Security and compliance tools**: Tools like HashiCorp Vault, OWASP ZAP, Snyk, SonarQube, and Aqua Security help enforce security policies, scanning, and compliance checks.\n    - **Collaboration and communication tools**: Tools like Slack, Microsoft Teams, Trello, Jira, and Confluence help facilitate communication and collaboration between teams.\n\n5. **Continuous improvement**: Encourage your teams to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.\n\n## Key takeaways\n\nAt the core of the DevOps lifecycle is continuity. By following these key phases in an iterative pattern, you’ll be able to take advantage of the lifecycle process to build applications that are maintainable, scalable, and reliable.\n\nUse the [DevOps roadmap](https://roadmap.sh/devops) to stay up to date with the latest developments and extensions in the DevOps ecosystem. Additionally, you can create a [custom roadmap](https://roadmap.sh/teams) for your team to plan, track, and document the team's skills and growth.\n";
				}
				async function compiledContent$Z() {
					return await html$Z();
				}
				function getHeadings$Z() {
					return [{"depth":2,"slug":"what-is-the-devops-lifecycle","text":"What is the DevOps lifecycle?"},{"depth":2,"slug":"7-key-phases-of-the-devops-lifecycle","text":"7 key phases of the DevOps lifecycle"},{"depth":3,"slug":"1-continuous-development","text":"1. Continuous development"},{"depth":3,"slug":"2-continuous-integration-ci","text":"2. Continuous integration (CI)"},{"depth":3,"slug":"3-continuous-testing","text":"3. Continuous testing"},{"depth":3,"slug":"4-continuous-deployment-cd","text":"4. Continuous deployment (CD)"},{"depth":3,"slug":"5-continuous-monitoring","text":"5. Continuous monitoring"},{"depth":3,"slug":"6-continuous-feedback","text":"6. Continuous feedback"},{"depth":3,"slug":"7-continuous-operations","text":"7. Continuous operations"},{"depth":2,"slug":"key-devops-extensions-to-watch-in-2025","text":"Key DevOps extensions to watch in 2025"},{"depth":3,"slug":"devsecops","text":"DevSecOps"},{"depth":3,"slug":"gitops","text":"GitOps"},{"depth":3,"slug":"dataops","text":"DataOps"},{"depth":3,"slug":"finops","text":"FinOps"},{"depth":3,"slug":"mlops","text":"MLOps"},{"depth":3,"slug":"aiops","text":"AIOps"},{"depth":2,"slug":"essential-devops-lifecycle-best-practices","text":"Essential DevOps lifecycle best practices"},{"depth":2,"slug":"key-takeaways","text":"Key takeaways"}];
				}

				const Content$Z = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$Z;
					content.file = file$Z;
					content.url = url$Z;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$Z())}`;
				});

const __vite_glob_0_37 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$Z,
	compiledContent: compiledContent$Z,
	default: Content$Z,
	file: file$Z,
	frontmatter: frontmatter$Z,
	getHeadings: getHeadings$Z,
	rawContent: rawContent$Z,
	url: url$Z
}, Symbol.toStringTag, { value: 'Module' }));

const html$Y = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-principles-pfswx.jpg\" alt=\"DevOps principles to master\"></p>\n<p>If you truly want to understand what makes DevOps so effective, it’s essential to know and master its core principles.</p>\n<p>DevOps is more than just a collaboration between development and operations teams; it’s built on fundamental principles that simplify software delivery.</p>\n<p>In this guide, I’m going to dive deep into the core principles and practices that make the DevOps practice “tick.”\tIf you’re a DevOps engineer or you want to become one, these are the DevOps principles you should master.</p>\n<p>I’ll explain the following principles in detail:</p>\n<ol>\n<li>Understanding the culture you want to join</li>\n<li>CI/CD</li>\n<li>Knowing how to use infrastructure as code tools.</li>\n<li>Understanding containerization.</li>\n<li>Monitoring &#x26; observability.</li>\n<li>Security</li>\n<li>Reducing the toil and technical debt.</li>\n<li>Adopting GitOps.</li>\n<li>Understanding that you’ll be learning &#x26; improving constantly.</li>\n<li>Understanding basic programming concepts.</li>\n<li>Embracing automation.</li>\n</ol>\n<h2 id=\"1-understanding-devops-culture\">1. Understanding DevOps Culture</h2>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> culture is the foundation for all DevOps principles. At its core, it’s about fostering a collaborative environment where development and operations teams work together seamlessly. In traditional software development, developers focus on writing code while the operations team is tasked with deploying and maintaining it. This division often leads to misunderstandings and delays.</p>\n<p>Instead of operating in silos, these teams, when they follow the DevOps culture, end up sharing a common goal: delivering high-quality software efficiently. This cultural shift reduces the “us versus them” mentality that many organizations suffer, fostering cooperation instead of blame.</p>\n<p>DevOps culture encourages development and operations to collaborate throughout the software development lifecycle (SDLC). By aligning their goals and encouraging open communication, both teams can work together to improve the process of development, ultimately resulting in faster and more reliable software delivery.</p>\n<p>Key components of this culture include shared responsibility, transparency, and a commitment to continuous improvement.</p>\n<h2 id=\"2-continuous-integration-and-continuous-deployment-cicd\">2. Continuous Integration and Continuous Deployment (CI/CD)</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-l2fak.png\" alt=\"Continuous Integration and Continuous Deployment\"></p>\n<p>Continuous Integration (CI) and Continuous Deployment (CD) are central to DevOps principles. CI is the practice of frequently integrating code changes into a shared repository, ensuring that new code is <a href=\"https://roadmap.sh/devops/test-automation\" target=\"_blank\">automatically tested</a> and validated. This practice helps catch bugs early, reducing the risk of introducing issues into the main codebase. CI allows devs and ops teams to work more efficiently, improving the overall quality of the software.</p>\n<p>Continuous Deployment, on the other hand, takes things a step further by automatically deploying code changes to production once they pass the CI tests. This ensures that new features and bug fixes are delivered to users as quickly as possible. Together, CI and CD form a pipeline that streamlines the software development lifecycle, from code commit to production deployment in seconds (or in some cases, minutes).</p>\n<p>Implementing CI/CD involves using various tools and practices. Jenkins, GitLab CI, CircleCI, and Travis CI are popular options for setting up CI pipelines, while tools like Spinnaker and Argo CD help with CD.</p>\n<h2 id=\"3-infrastructure-as-code-iac\">3. Infrastructure as Code (IaC)</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/infrastructure-as-code-w965a.png\" alt=\"Infrastructure as Code\"></p>\n<p>Infrastructure as Code (IaC) is a game-changer in the DevOps world. Traditionally, provisioning infrastructure involved manual setup and configuration, which was time-consuming and, of course, prone to human error. IaC changes the game by treating infrastructure the same way we treat application code: as a set of scripts or configurations that can be version-controlled, tested, and automated.</p>\n<p>Through IaC, DevOps teams can ensure consistency and repeatability across different environments. It eliminates the “works on my machine” problem by providing a standardized environment for software to run on, whether it’s on a developer’s local machine, in a staging environment, or in production.</p>\n<p>Over the years, IaC tools have evolved quite a lot. At the start of it all, players like Chef and Puppet introduced the concept of configuration management, allowing you to define the desired state of your systems. Ansible took that one step further with its agentless architecture, making it easier to manage infrastructure at scale. Terraform took IaC to the next level by providing a tool-agnostic way to provision resources across multiple cloud providers, making it a favorite among DevOps engineers.</p>\n<h2 id=\"4-containerization\">4. Containerization</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/containers-docker-g491z.png\" alt=\"Containerization\"></p>\n<p>Containerization is a core practice and one of the main devops principles to constantly apply. Containers provide a lightweight, portable way to package software along with its dependencies, ensuring that it runs consistently across different environments. Containers share the host system’s kernel, making them more efficient and faster to start up than virtual machines.</p>\n<p>These “containers” have been playing a key role in solving one of the age-old problems in software development: environment inconsistencies. By encapsulating an application and its dependencies into a container, you can ensure that it runs the same way on a developer’s laptop as it does in production. This consistency simplifies the development process and reduces the risk of environment-related problems.</p>\n<p>In this space, Docker is the most popular tool for creating and managing containers (although not the only one), offering a simple way to build, package, and distribute containerized applications. Kubernetes takes containerization to the next level by providing a platform for orchestrating containers at scale. With Kubernetes, you can automate the deployment, scaling, and management of containerized applications, making it easier to manage complex, multi-container applications.</p>\n<p>While there is no excuse to not use DevOps at this stage in any software project, some of the biggest benefits of using containers in the DevOps lifecycle are: consistency, scalability, and portability.</p>\n<p>In other words, they make it easier to move applications between different environments. They also enable more efficient use of resources, as multiple containers can run on the same host without the overhead of a full virtual machine.</p>\n<h2 id=\"5-monitoring-and-observability\">5. Monitoring and Observability</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/monitoring-servers-14k80.png\" alt=\"Monitoring and Observability\"></p>\n<p>Monitoring and observability are essential components of the DevOps practice and key principles for any DevOps team. While monitoring focuses on tracking the health and performance of your systems, observability goes a step further by providing insights into the internal state of your applications based on the data they produce. Together, they enable DevOps teams to detect and troubleshoot issues quickly, ensuring that applications run smoothly.</p>\n<p>Continuous monitoring involves constantly tracking key metrics such as CPU usage, memory consumption, response times, and error rates. Tools like Prometheus, Grafana, and the ELK Stack (Elastic, Logstash, Kibana) are popular choices for collecting and visualizing this data. All public cloud providers also have their own solutions, in some cases even based on the open-source versions mentioned before.</p>\n<p>Whatever the tool of your choice is, they all provide real-time insights into the performance of your applications and infrastructure, helping you identify potential issues before they impact users.</p>\n<p>Now the practice of observability extends beyond monitoring by providing a deeper understanding of how your systems are behaving. It involves collecting and analyzing logs, metrics and traces to gain insights into the root cause of issues. OpenTelemetry, for instance, is an emerging standard for collecting telemetry data, offering a unified way to instrument, collect, and export data for analysis. This standardization makes it easier to integrate observability into your DevOps practices, regardless of the tools you’re using.</p>\n<h2 id=\"6-security-in-devops\">6. Security in DevOps</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/secured-servers-amsed.png\" alt=\"Security in DevOps\"></p>\n<p>Security is a critical aspect of the DevOps lifecycle, and it’s something that needs to be integrated from the very beginning of any project expected to see the light of production at one point.</p>\n<p>DevSecOps is the practice of embedding security into the DevOps pipeline, ensuring that security measures are applied consistently throughout the software development lifecycle (reviewing code for vulnerabilities, checking IaC scripts, etc). Through this practice, DevOps helps catch vulnerabilities early and greatly reduce the risk of security breaches in production.</p>\n<p>Sadly, in many companies and teams that follow more traditional practices, security tends to be an afterthought, gaining importance only after the code is written and deployed. This approach can lead to costly and time-consuming fixes. DevSecOps, on the other hand, integrates security into every stage of the development and operations process, from code development to deployment. In the end, this helps security teams to automate security testing, identify vulnerabilities early, and enforce security policies consistently. All without having to read a single line of code themselves.</p>\n<p>In this space, tools like Snyk, Aqua Security, and HashiCorp Vault are king and they can help you integrate security into your DevOps workflows.</p>\n<h2 id=\"7-reducing-toil-and-technical-debt\">7. Reducing Toil and Technical Debt</h2>\n<p>Toil and technical debt are two of the biggest productivity killers in software development. Toil refers to the repetitive, manual tasks that don’t add direct value to the product, while technical debt is the accumulation of shortcuts and workarounds that make the codebase harder to maintain over time. Both can slow down your development workflow and make it more challenging to deliver new features.</p>\n<p>And because of that, one of the big and important DevOps principles is to aim to reduce both. Yes, DevOps teams can also help reduce technical debt.</p>\n<p>Reducing toil involves automating repetitive tasks to free up time for more valuable work. Tools like Ansible, Chef, and Puppet can help automate infrastructure management, while CI/CD pipelines can automate the build, test, and deployment processes. In the end, less manual work translates to reducing the chances of errors and giving team members the chance to focus on more interesting and strategic tasks.</p>\n<p>Technical debt, on the other hand, requires a proactive approach to address. It’s about finding the right balance between delivering new features and maintaining the quality of the codebase. Regularly refactoring code, improving documentation, and addressing known issues can help keep technical debt in check. Of course, this also needs to be balanced with their ability to deliver new features and move the product forward.</p>\n<h2 id=\"8-gitops-the-future-of-deployment\">8. GitOps: The Future of Deployment</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/git-ops-tmggz.png\" alt=\"GitOps\"></p>\n<p>GitOps is a new practice that takes the principles of Git and applies them to operations. It’s about using Git as the single source of truth for your infrastructure and application configurations. By storing everything in Git, you can use version control to manage changes, track history, and facilitate collaboration among development and operations teams.</p>\n<p>You essentially version your entire infrastructure with the same tools you version your code.</p>\n<p>In other words, all changes to the infrastructure and applications are made through pull requests to the Git repository. Once a change is merged, an automated process applies the change to the target environment. This approach provides a consistent, auditable, and repeatable way to manage deployments, making it easier to maintain the desired state of your systems.</p>\n<p>Through GitOps, teams can manage deployments and gain the following benefits: improved visibility, version control, and traceability.</p>\n<p>This methodology aligns well with the DevOps principles of automation, consistency, and collaboration, making it easier to manage complex deployments at scale.</p>\n<p>Key tools for implementing GitOps include Argo CD and Flux. These tools help you automate the deployment process by monitoring the Git repository for changes and applying them to the cluster.</p>\n<h2 id=\"9-continuous-learning-and-improvement\">9. Continuous Learning and Improvement</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/learn-improve-4fzcr.png\" alt=\"Continuous Learning and Improvement\"></p>\n<p>In general the world of tech is constantly evolving and changing and continuous learning and improvement are essential practices for staying ahead and relevant.</p>\n<p>That said, in the DevOps landscape change is also a constant, with new tools, practices, and technologies emerging all the time. If you think about it, before 2006 we didn’t even have containers.</p>\n<p>So to keep up, DevOps engineers and teams need to be committed to learning and improving continuously.</p>\n<p>Encouraging a culture of continuous learning within your team can help keep everyone up-to-date with the latest DevOps trends and tools. This can include participating in conferences, attending workshops, and enrolling in online courses. Reading books like “The Phoenix Project,” “The Unicorn Project,” and “The DevOps Handbook” can provide valuable insights and inspiration.</p>\n<p>If you’re not into books, then websites like <a href=\"http://12factor.net\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">12factor.net</a>, <a href=\"http://OpenGitOps.dev\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OpenGitOps.dev</a>, and <a href=\"http://CNCF.io\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">CNCF.io</a> are also great resources for staying current with industry <a href=\"https://roadmap.sh/devops/best-practices\" target=\"_blank\">best practices</a>.</p>\n<p>Continuous improvement goes hand-in-hand with continuous learning. It’s about regularly reviewing and refining your processes, identifying areas for improvement after failing and experimenting with new approaches. This iterative approach helps you optimize the development process, improve collaboration between devs and operations, and deliver better software.</p>\n<h2 id=\"10-understanding-programming-concepts\">10. Understanding Programming Concepts</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/code-sample-fjblw.png\" alt=\"Understanding Programming Concepts\"></p>\n<p>While not every DevOps engineer needs to be a full-fledged developer, having a solid understanding of programming concepts is key to success in the professional world.</p>\n<p>A good grasp of programming helps bridge the gap between development and operations, making it easier to collaborate and understand each other’s needs. Which, if you think about it, is literally the core principle of the DevOps practice.</p>\n<p>Understanding programming translates to being able to write scripts in languages like Bash, Python, or PowerShell to automate tasks, manage infrastructure, and interact with APIs. This can range from simple tasks like automating server setup to more complex operations like orchestrating CI/CD pipelines.</p>\n<p>Understanding programming concepts also enables you to better manage the software development lifecycle. It helps you understand how code changes affect system performance, security, and stability. This insight allows you to make more informed decisions when designing and implementing infrastructure and deployment processes.</p>\n<h2 id=\"11-automation-in-devops\">11. Automation in DevOps</h2>\n<p><a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">Automation</a> is at the heart of DevOps principles. It’s about automating repetitive and manual tasks to accelerate processes, reduce errors, and free up time for more strategic work. We partially covered this concept before as part of the toil reduction principle.</p>\n<p>However, it’s important to explain that automation not only involves code builds and tests, it also includes infrastructure provisioning and application deployment. In other words,  automation plays a key role in every stage of the DevOps lifecycle.</p>\n<p>The whole point of automation is to accelerate processes. It enables faster, more consistent, and more reliable software delivery. By automating tasks like code integration, testing, and deployment, you can reduce the time it takes to get new features into production and minimize the risk of human error.</p>\n<p>There are many areas in the DevOps lifecycle where automation can be applied, in fact, the challenge would be to find areas where it wouldn’t make sense to apply it. These include CI/CD pipelines, infrastructure provisioning, configuration management, monitoring, and security testing. In this area, some of the most popular <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">DevOps tools</a> are Jenkins, Ansible, Terraform, and Selenium. They all provide the building blocks for automating these tasks, allowing you to create a seamless and efficient development workflow that everyone enjoys.</p>\n<p>If you’re looking to start implementing automation in your DevOps workflow, consider starting small and gradually expanding automation efforts, using version control for automation scripts (Git is a great option), and continuously monitoring and refining automated processes.</p>\n<p>It’s important to find a balance between automation and human intervention, ensuring that automation enhances the development workflow without introducing unnecessary complexity.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>And there you have it—the core principles and practices of DevOps in a nutshell. By mastering them, you’ll be well on your way to becoming a great <a href=\"https://roadmap.sh/devops/devops-engineer\" target=\"_blank\">DevOps engineer</a>.</p>\n<p>Whether you’re just starting out or looking to level up your DevOps game, there’s always something new to learn and explore. So keep experimenting, keep learning, and most importantly, keep having fun!</p>\n<p>After all, DevOps isn’t just about making systems run smoothly—it’s about building a culture that encourages innovation, collaboration, and growth. As you dive deeper into the DevOps practice, you’ll not only become more skilled but also contribute to creating better software and more agile teams.</p>";

				const frontmatter$Y = {"title":"11 Core DevOps Principles to Master","description":"Elevate your game by understanding this set of key DevOps principles and practices. Gain pro insights for a more efficient, collaborative workflow!","authorId":"fernando","excludedBySlug":"/devops/principles","seo":{"title":"11 Core DevOps Principles and to Master: Pro Advice","description":"Elevate your game by understanding this set of key DevOps principles and practices. Gain pro insights for a more efficient, collaborative workflow!","ogImageUrl":"https://assets.roadmap.sh/guest/devops-engineer-skills-tlace.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-09-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$Y = "/workspace/src/data/guides/devops-principles.md";
				const url$Y = undefined;
				function rawContent$Y() {
					return "   \n                                            \n                                                                                                                                                                  \n                  \n                                    \n    \n                                                              \n                                                                                                                                                                    \n                                                                                \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps principles to master](https://assets.roadmap.sh/guest/devops-principles-pfswx.jpg)\n\nIf you truly want to understand what makes DevOps so effective, it’s essential to know and master its core principles.\n\nDevOps is more than just a collaboration between development and operations teams; it's built on fundamental principles that simplify software delivery.\n\nIn this guide, I’m going to dive deep into the core principles and practices that make the DevOps practice “tick.”\tIf you’re a DevOps engineer or you want to become one, these are the DevOps principles you should master.\n\nI’ll explain the following principles in detail:\n\n1. Understanding the culture you want to join\n2. CI/CD\n3. Knowing how to use infrastructure as code tools.\n4. Understanding containerization.\n5. Monitoring & observability.\n6. Security\n7. Reducing the toil and technical debt.\n8. Adopting GitOps.\n9. Understanding that you’ll be learning & improving constantly.\n10. Understanding basic programming concepts.\n11. Embracing automation.\n\n## 1\\. Understanding DevOps Culture\n\n[DevOps](https://roadmap.sh/devops) culture is the foundation for all DevOps principles. At its core, it's about fostering a collaborative environment where development and operations teams work together seamlessly. In traditional software development, developers focus on writing code while the operations team is tasked with deploying and maintaining it. This division often leads to misunderstandings and delays.\n\nInstead of operating in silos, these teams, when they follow the DevOps culture, end up sharing a common goal: delivering high-quality software efficiently. This cultural shift reduces the \"us versus them\" mentality that many organizations suffer, fostering cooperation instead of blame.\n\nDevOps culture encourages development and operations to collaborate throughout the software development lifecycle (SDLC). By aligning their goals and encouraging open communication, both teams can work together to improve the process of development, ultimately resulting in faster and more reliable software delivery.\n\nKey components of this culture include shared responsibility, transparency, and a commitment to continuous improvement.\n\n## 2\\. Continuous Integration and Continuous Deployment (CI/CD)\n\n![Continuous Integration and Continuous Deployment](https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-l2fak.png)\n\nContinuous Integration (CI) and Continuous Deployment (CD) are central to DevOps principles. CI is the practice of frequently integrating code changes into a shared repository, ensuring that new code is [automatically tested](https://roadmap.sh/devops/test-automation) and validated. This practice helps catch bugs early, reducing the risk of introducing issues into the main codebase. CI allows devs and ops teams to work more efficiently, improving the overall quality of the software.\n\nContinuous Deployment, on the other hand, takes things a step further by automatically deploying code changes to production once they pass the CI tests. This ensures that new features and bug fixes are delivered to users as quickly as possible. Together, CI and CD form a pipeline that streamlines the software development lifecycle, from code commit to production deployment in seconds (or in some cases, minutes).\n\nImplementing CI/CD involves using various tools and practices. Jenkins, GitLab CI, CircleCI, and Travis CI are popular options for setting up CI pipelines, while tools like Spinnaker and Argo CD help with CD.\n\n## 3\\. Infrastructure as Code (IaC)\n\n![Infrastructure as Code](https://assets.roadmap.sh/guest/infrastructure-as-code-w965a.png)\n\nInfrastructure as Code (IaC) is a game-changer in the DevOps world. Traditionally, provisioning infrastructure involved manual setup and configuration, which was time-consuming and, of course, prone to human error. IaC changes the game by treating infrastructure the same way we treat application code: as a set of scripts or configurations that can be version-controlled, tested, and automated.\n\nThrough IaC, DevOps teams can ensure consistency and repeatability across different environments. It eliminates the \"works on my machine\" problem by providing a standardized environment for software to run on, whether it's on a developer's local machine, in a staging environment, or in production.\n\nOver the years, IaC tools have evolved quite a lot. At the start of it all, players like Chef and Puppet introduced the concept of configuration management, allowing you to define the desired state of your systems. Ansible took that one step further with its agentless architecture, making it easier to manage infrastructure at scale. Terraform took IaC to the next level by providing a tool-agnostic way to provision resources across multiple cloud providers, making it a favorite among DevOps engineers.\n\n## 4\\. Containerization\n\n![Containerization](https://assets.roadmap.sh/guest/containers-docker-g491z.png)\n\nContainerization is a core practice and one of the main devops principles to constantly apply. Containers provide a lightweight, portable way to package software along with its dependencies, ensuring that it runs consistently across different environments. Containers share the host system's kernel, making them more efficient and faster to start up than virtual machines.\n\nThese “containers” have been playing a key role in solving one of the age-old problems in software development: environment inconsistencies. By encapsulating an application and its dependencies into a container, you can ensure that it runs the same way on a developer's laptop as it does in production. This consistency simplifies the development process and reduces the risk of environment-related problems.\n\nIn this space, Docker is the most popular tool for creating and managing containers (although not the only one), offering a simple way to build, package, and distribute containerized applications. Kubernetes takes containerization to the next level by providing a platform for orchestrating containers at scale. With Kubernetes, you can automate the deployment, scaling, and management of containerized applications, making it easier to manage complex, multi-container applications.\n\nWhile there is no excuse to not use DevOps at this stage in any software project, some of the biggest benefits of using containers in the DevOps lifecycle are: consistency, scalability, and portability.\n\nIn other words, they make it easier to move applications between different environments. They also enable more efficient use of resources, as multiple containers can run on the same host without the overhead of a full virtual machine.\n\n## 5\\. Monitoring and Observability\n\n![Monitoring and Observability](https://assets.roadmap.sh/guest/monitoring-servers-14k80.png)\n\nMonitoring and observability are essential components of the DevOps practice and key principles for any DevOps team. While monitoring focuses on tracking the health and performance of your systems, observability goes a step further by providing insights into the internal state of your applications based on the data they produce. Together, they enable DevOps teams to detect and troubleshoot issues quickly, ensuring that applications run smoothly.\n\nContinuous monitoring involves constantly tracking key metrics such as CPU usage, memory consumption, response times, and error rates. Tools like Prometheus, Grafana, and the ELK Stack (Elastic, Logstash, Kibana) are popular choices for collecting and visualizing this data. All public cloud providers also have their own solutions, in some cases even based on the open-source versions mentioned before.\n\nWhatever the tool of your choice is, they all provide real-time insights into the performance of your applications and infrastructure, helping you identify potential issues before they impact users.\n\nNow the practice of observability extends beyond monitoring by providing a deeper understanding of how your systems are behaving. It involves collecting and analyzing logs, metrics and traces to gain insights into the root cause of issues. OpenTelemetry, for instance, is an emerging standard for collecting telemetry data, offering a unified way to instrument, collect, and export data for analysis. This standardization makes it easier to integrate observability into your DevOps practices, regardless of the tools you're using.\n\n## 6\\. Security in DevOps\n\n![Security in DevOps](https://assets.roadmap.sh/guest/secured-servers-amsed.png)\n\nSecurity is a critical aspect of the DevOps lifecycle, and it's something that needs to be integrated from the very beginning of any project expected to see the light of production at one point.\n\nDevSecOps is the practice of embedding security into the DevOps pipeline, ensuring that security measures are applied consistently throughout the software development lifecycle (reviewing code for vulnerabilities, checking IaC scripts, etc). Through this practice, DevOps helps catch vulnerabilities early and greatly reduce the risk of security breaches in production.\n\nSadly, in many companies and teams that follow more traditional practices, security tends to be an afterthought, gaining importance only after the code is written and deployed. This approach can lead to costly and time-consuming fixes. DevSecOps, on the other hand, integrates security into every stage of the development and operations process, from code development to deployment. In the end, this helps security teams to automate security testing, identify vulnerabilities early, and enforce security policies consistently. All without having to read a single line of code themselves.\n\nIn this space, tools like Snyk, Aqua Security, and HashiCorp Vault are king and they can help you integrate security into your DevOps workflows.\n\n## 7\\. Reducing Toil and Technical Debt\n\nToil and technical debt are two of the biggest productivity killers in software development. Toil refers to the repetitive, manual tasks that don't add direct value to the product, while technical debt is the accumulation of shortcuts and workarounds that make the codebase harder to maintain over time. Both can slow down your development workflow and make it more challenging to deliver new features.\n\nAnd because of that, one of the big and important DevOps principles is to aim to reduce both. Yes, DevOps teams can also help reduce technical debt.\n\nReducing toil involves automating repetitive tasks to free up time for more valuable work. Tools like Ansible, Chef, and Puppet can help automate infrastructure management, while CI/CD pipelines can automate the build, test, and deployment processes. In the end, less manual work translates to reducing the chances of errors and giving team members the chance to focus on more interesting and strategic tasks.\n\nTechnical debt, on the other hand, requires a proactive approach to address. It's about finding the right balance between delivering new features and maintaining the quality of the codebase. Regularly refactoring code, improving documentation, and addressing known issues can help keep technical debt in check. Of course, this also needs to be balanced with their ability to deliver new features and move the product forward.\n\n## 8\\. GitOps: The Future of Deployment\n\n![GitOps](https://assets.roadmap.sh/guest/git-ops-tmggz.png)\n\nGitOps is a new practice that takes the principles of Git and applies them to operations. It's about using Git as the single source of truth for your infrastructure and application configurations. By storing everything in Git, you can use version control to manage changes, track history, and facilitate collaboration among development and operations teams.\n\nYou essentially version your entire infrastructure with the same tools you version your code.\n\nIn other words, all changes to the infrastructure and applications are made through pull requests to the Git repository. Once a change is merged, an automated process applies the change to the target environment. This approach provides a consistent, auditable, and repeatable way to manage deployments, making it easier to maintain the desired state of your systems.\n\nThrough GitOps, teams can manage deployments and gain the following benefits: improved visibility, version control, and traceability.\n\nThis methodology aligns well with the DevOps principles of automation, consistency, and collaboration, making it easier to manage complex deployments at scale.\n\nKey tools for implementing GitOps include Argo CD and Flux. These tools help you automate the deployment process by monitoring the Git repository for changes and applying them to the cluster.\n\n## 9\\. Continuous Learning and Improvement\n\n![Continuous Learning and Improvement](https://assets.roadmap.sh/guest/learn-improve-4fzcr.png)\n\nIn general the world of tech is constantly evolving and changing and continuous learning and improvement are essential practices for staying ahead and relevant.\n\nThat said, in the DevOps landscape change is also a constant, with new tools, practices, and technologies emerging all the time. If you think about it, before 2006 we didn’t even have containers.\n\nSo to keep up, DevOps engineers and teams need to be committed to learning and improving continuously.\n\nEncouraging a culture of continuous learning within your team can help keep everyone up-to-date with the latest DevOps trends and tools. This can include participating in conferences, attending workshops, and enrolling in online courses. Reading books like \"The Phoenix Project,\" \"The Unicorn Project,\" and \"The DevOps Handbook\" can provide valuable insights and inspiration.\n\nIf you’re not into books, then websites like [12factor.net](http://12factor.net), [OpenGitOps.dev](http://OpenGitOps.dev), and [CNCF.io](http://CNCF.io) are also great resources for staying current with industry [best practices](https://roadmap.sh/devops/best-practices).\n\nContinuous improvement goes hand-in-hand with continuous learning. It's about regularly reviewing and refining your processes, identifying areas for improvement after failing and experimenting with new approaches. This iterative approach helps you optimize the development process, improve collaboration between devs and operations, and deliver better software.\n\n## 10\\. Understanding Programming Concepts\n\n![Understanding Programming Concepts](https://assets.roadmap.sh/guest/code-sample-fjblw.png)\n\nWhile not every DevOps engineer needs to be a full-fledged developer, having a solid understanding of programming concepts is key to success in the professional world.\n\nA good grasp of programming helps bridge the gap between development and operations, making it easier to collaborate and understand each other's needs. Which, if you think about it, is literally the core principle of the DevOps practice.\n\nUnderstanding programming translates to being able to write scripts in languages like Bash, Python, or PowerShell to automate tasks, manage infrastructure, and interact with APIs. This can range from simple tasks like automating server setup to more complex operations like orchestrating CI/CD pipelines.\n\nUnderstanding programming concepts also enables you to better manage the software development lifecycle. It helps you understand how code changes affect system performance, security, and stability. This insight allows you to make more informed decisions when designing and implementing infrastructure and deployment processes.\n\n## 11\\. Automation in DevOps\n\n[Automation](https://roadmap.sh/devops/automation) is at the heart of DevOps principles. It's about automating repetitive and manual tasks to accelerate processes, reduce errors, and free up time for more strategic work. We partially covered this concept before as part of the toil reduction principle.\n\nHowever, it’s important to explain that automation not only involves code builds and tests, it also includes infrastructure provisioning and application deployment. In other words,  automation plays a key role in every stage of the DevOps lifecycle.\n\nThe whole point of automation is to accelerate processes. It enables faster, more consistent, and more reliable software delivery. By automating tasks like code integration, testing, and deployment, you can reduce the time it takes to get new features into production and minimize the risk of human error.\n\nThere are many areas in the DevOps lifecycle where automation can be applied, in fact, the challenge would be to find areas where it wouldn’t make sense to apply it. These include CI/CD pipelines, infrastructure provisioning, configuration management, monitoring, and security testing. In this area, some of the most popular [DevOps tools](https://roadmap.sh/devops/tools) are Jenkins, Ansible, Terraform, and Selenium. They all provide the building blocks for automating these tasks, allowing you to create a seamless and efficient development workflow that everyone enjoys.\n\nIf you’re looking to start implementing automation in your DevOps workflow, consider starting small and gradually expanding automation efforts, using version control for automation scripts (Git is a great option), and continuously monitoring and refining automated processes.\n\nIt's important to find a balance between automation and human intervention, ensuring that automation enhances the development workflow without introducing unnecessary complexity.\n\n## Conclusion\n\nAnd there you have it—the core principles and practices of DevOps in a nutshell. By mastering them, you'll be well on your way to becoming a great [DevOps engineer](https://roadmap.sh/devops/devops-engineer).\n\nWhether you're just starting out or looking to level up your DevOps game, there's always something new to learn and explore. So keep experimenting, keep learning, and most importantly, keep having fun\\!\n\nAfter all, DevOps isn't just about making systems run smoothly—it's about building a culture that encourages innovation, collaboration, and growth. As you dive deeper into the DevOps practice, you'll not only become more skilled but also contribute to creating better software and more agile teams.\n";
				}
				async function compiledContent$Y() {
					return await html$Y();
				}
				function getHeadings$Y() {
					return [{"depth":2,"slug":"1-understanding-devops-culture","text":"1. Understanding DevOps Culture"},{"depth":2,"slug":"2-continuous-integration-and-continuous-deployment-cicd","text":"2. Continuous Integration and Continuous Deployment (CI/CD)"},{"depth":2,"slug":"3-infrastructure-as-code-iac","text":"3. Infrastructure as Code (IaC)"},{"depth":2,"slug":"4-containerization","text":"4. Containerization"},{"depth":2,"slug":"5-monitoring-and-observability","text":"5. Monitoring and Observability"},{"depth":2,"slug":"6-security-in-devops","text":"6. Security in DevOps"},{"depth":2,"slug":"7-reducing-toil-and-technical-debt","text":"7. Reducing Toil and Technical Debt"},{"depth":2,"slug":"8-gitops-the-future-of-deployment","text":"8. GitOps: The Future of Deployment"},{"depth":2,"slug":"9-continuous-learning-and-improvement","text":"9. Continuous Learning and Improvement"},{"depth":2,"slug":"10-understanding-programming-concepts","text":"10. Understanding Programming Concepts"},{"depth":2,"slug":"11-automation-in-devops","text":"11. Automation in DevOps"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$Y = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$Y;
					content.file = file$Y;
					content.url = url$Y;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$Y())}`;
				});

const __vite_glob_0_38 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$Y,
	compiledContent: compiledContent$Y,
	default: Content$Y,
	file: file$Y,
	frontmatter: frontmatter$Y,
	getHeadings: getHeadings$Y,
	rawContent: rawContent$Y,
	url: url$Y
}, Symbol.toStringTag, { value: 'Module' }));

const html$X = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-shift-left-testing-16zah.jpg\" alt=\"Why shift-left testing is recommended in DevOps\"></p>\n<p>Why is there so much debate about testing methodologies if DevOps is about streamlining software delivery? Why do we still encounter approaches like shift-left, shift-right, and even shift-down testing? Shouldn’t there be one universally accepted strategy?</p>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> emphasizes rapid development cycles, continuous integration, and delivery, but your projects or teams may have different needs, goals, or challenges. Factors like the <strong>type of application, infrastructure, team size, legacy systems</strong>, and <strong>release schedules</strong> can lead you to choose different testing strategies.</p>\n<p>Despite these varying needs and challenges, DevOps recommends shift-left testing principles because it addresses the core problem of catching issues early. By integrating tests early, issues are resolved quickly before they become more costly and complex to fix.</p>\n<p>In this guide, you’ll learn what Shift-Left testing is, its benefits, things to consider, and best practices when implementing it.</p>\n<h2 id=\"what-is-shift-left-testing\">What is Shift-Left testing?</h2>\n<p>Shift-Left testing is a <a href=\"https://roadmap.sh/devops/principles\" target=\"_blank\">principle in DevOps</a> that involves incorporating quality assurance and other testing activities <strong>earlier</strong> in the software development lifecycle (SDLC).</p>\n<p>Over the years, testing has been somewhat considered an afterthought of the development process. The traditional approach waits for the development cycle to end or at least waits until 50% of the development process is done before testing the application. This approach can be slow, costly, and does not maximize resources because bugs found during the tests can’t be easily fixed during the development cycle.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/shift-left-testing-devops-3cr7m.png\" alt=\"Shift-Left testing\"></p>\n<p>The main idea is to move testing to the <strong>left side</strong> of the development process so that it can happen earlier and more often during the design and development phase.</p>\n<p>Shift-Left testing aligns with the DevOps principle of continuous integration and continuous delivery (CI/CD) because <a href=\"https://roadmap.sh/devops/test-automation\" target=\"_blank\">automated tests</a> can be written alongside the code and executed as part of the development pipeline. This approach ensures that issues are caught early, developers receive immediate feedback, and overall software quality is improved.</p>\n<p>To implement Shift-Left testing, organizations often rely on a variety of automated testing tools. While the choice of tools may vary based on team preference and specific projects, below are some popular tools for performing Shift-Left testing:</p>\n<ul>\n<li>Jenkins</li>\n<li>Selenium</li>\n<li>Cucumber</li>\n<li>SonarCube</li>\n<li>JMeter</li>\n</ul>\n<h2 id=\"benefits-of-shift-left-testing-in-devops\">Benefits of Shift-Left testing in DevOps</h2>\n<p>Let’s explore some of the reasons why Shift-Left is important in your DevOps processes:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/shift-left-testing-devops-benefits-celh5.png\" alt=\"Benefits of Shift-Left\"></p>\n<ol>\n<li><strong>Reduced cost</strong>: A goal of every organization is to reduce its <em>operating expenses</em> and maximize profit. When Shift-Left testing is factored into your development process, bugs are identified and fixed early, which is far less expensive than when you address them after deployment. This approach saves you both time and resources as reworks are minimal.</li>\n<li><strong>Faster feedback and early detection</strong>: Shift-Left testing provides faster feedback on the quality of your code because you’re testing early in the development process. This means you and your team can catch bugs and detect issues before they escalate. Additionally, it reduces the likelihood of finding and fixing defects later in development or in production.</li>\n<li><strong>Improved quality</strong>:  The overall experience of your application becomes more reliable and stable because you’ll likely find and fix bugs earlier before they impact your users’ experience.</li>\n<li><strong>Faster time to market:</strong> Because defects are reduced and the development process is optimized, you can iterate faster and continuously release software.</li>\n<li><strong>Improved collaboration and continuous learning:</strong> Shift-Left testing follows the DevOps principle of collaboration between developers, testers, and other stakeholders. This means the team has a sense of responsibility and ownership, and they’ll learn more from one another.</li>\n</ol>\n<p>Shift-Left testing advocates for testing earlier, moving the focus to the <strong>left side</strong> of the development process. You might wonder if this means testing ends after the design and development stages or if there’s something like <strong>right-side</strong> testing as you prepare to go live.</p>\n<p>Well, you guessed right, there’s indeed Shift-Right testing. Let’s explore that next.</p>\n<h2 id=\"what-is-shift-right-testing\">What is Shift-Right testing?</h2>\n<p>Shift-Right testing is a principle in DevOps that involves incorporating quality assurance and other testing activities <strong>later</strong> in the software development lifecycle (SDLC). This is usually done when software has been released or is being used in production.</p>\n<p>Unlike Shift-Left testing, which occurs at the beginning of the development process, Shift-Right testing occurs after the application has been deployed into production. It involves:</p>\n<ul>\n<li>Closely monitoring the application’s performance in the production environment to identify bugs and issues.</li>\n<li>Gradually releasing new features to selected users to test their impact first before doing a full rollout.</li>\n<li>Collecting feedback from users to understand the overall users’ experience and identify areas of continuous improvement.</li>\n<li>Conducting A/B testing to compare different versions of the software or features to determine users’ behavior and outcomes.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/shift-right-testing-v86zs.png\" alt=\"Shift-Right testing\"></p>\n<p>The main idea is to move system testing to the <strong>right side</strong> of the development process, ensure that the application performs well in real-world scenarios, and catch issues that may not be apparent during Shift-Left testing.</p>\n<p>While Shift-Right testing comes with its own benefits when dealing with production-specific issues, it can be risky. The approach of fixing bugs in production can lead to downtime, cause a negative user experience, and damage your organization’s reputation.</p>\n<h2 id=\"challenges-in-adopting-shift-left-testing\">Challenges in adopting Shift-Left testing</h2>\n<p>It’s important to understand that Shift-Left testing is not a “magic wand” that solves all your testing problems. It also comes with its own challenges. Below are some challenges you might encounter when adopting it:</p>\n<ol>\n<li><strong>Required skills</strong>: Developers, testers, and other stakeholders may need to acquire new skills like test <a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">automation</a>, continuous integration, and more. Training can be challenging for teams with limited resources.</li>\n<li><strong>Cultural shift</strong>: Adopting continuous testing on the left side of the development process requires a cultural change for all the stakeholders. Developers may need to take on additional testing responsibilities, while testers may need to acquire new skills. This can lead to resistance, adding to their workload and responsibilities.</li>\n<li><strong>Cost implication</strong>: The implementation process requires new toolsets and automation frameworks, which can be time-consuming and costly to set up. Additionally, teams must overcome the learning curve associated with these tools.</li>\n<li><strong>Integration complexity</strong>: Integrating testing in the early stage of SDLC can be complex, particularly in legacy and large systems. This is because it requires that all team members are aligned and willing to adjust their roles and responsibilities to accommodate the new testing approach.</li>\n<li><strong>Risk management</strong>: Testing early means teams must develop strategies to mitigate the risks associated with early testing and find a balance between early testing and potential risks.</li>\n</ol>\n<h2 id=\"overcoming-challenges-and-implementing-shift-left-testing\">Overcoming challenges and implementing shift-left testing</h2>\n<p>Adopting Shift-Left testing in your development process comes with several challenges, particularly related to resources and cultural resistance, which may overshadow the advantages it offers. To successfully implement Shift-Left testing, consider the following strategies:</p>\n<ul>\n<li><strong>Promote a testing-first mindset</strong> and encourage cross-functional collaboration between your teams with an emphasis on shared ownership of the product.</li>\n<li><strong>Invest in training and skill development</strong> focused on test automation, CI/CD, and other <a href=\"https://roadmap.sh/devops/best-practices\" target=\"_blank\">best practices in DevOps</a>.</li>\n<li><strong>Choose <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">DevOps tools</a> that align with your organization’s needs</strong> and integrate seamlessly within your budget.</li>\n<li><strong>Start small</strong> with a feature or pilot project, then gradually scale across the entire product chain. This approach will give your team the flexibility and the time to learn and refine strategies.</li>\n<li><strong>Regularly conduct risk assessments</strong> to identify areas for improvement and implement corresponding mitigation strategies.</li>\n</ul>\n<h2 id=\"best-practices-for-implementing-shift-left-testing-principles\">Best practices for implementing Shift-Left testing principles</h2>\n<p>Below are some best practices to consider:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/shift-left-testing-devops-principles-0yrp4.png\" alt=\"Shift-Left best practices\"></p>\n<ol>\n<li><strong>Adopt early test plans</strong>: Create a plan that clearly outlines the testing goals and scope of the project. Also, ensure that testing is integrated into the early stages of your SDLC.</li>\n<li><strong>Test automation</strong>: Use test <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">automation tools</a> to automate unit tests, integration tests, functional tests, and other necessary test cases. Additionally, regularly update and maintain test scripts to keep them relevant and accurate when running CI/CD pipeline.</li>\n<li><strong>Collaboration and communication</strong>: Use project management tools like Jira and Linear, along with traditional methods such as meetings, check-ins, and stand-ups, to facilitate communication and collaboration between developers, testers, and other stakeholders.</li>\n<li><strong>Continuous learning</strong>: Encourage your team to keep up-to-date with the latest testing techniques and tools, participate in industry events to learn from experts, and share knowledge and best practices within the team.</li>\n</ol>\n<h2 id=\"shift-left-testing-in-the-real-world\">Shift-Left testing in the real world</h2>\n<p>To gain a better understanding of how teams are using Shift-Left testing to build better applications, let’s explore two real-world examples: Microsoft and Uber.</p>\n<h3 id=\"microsoft\">Microsoft</h3>\n<p>Over two and a half years, a Microsoft team successfully replaced 27,000 legacy tests with modern DevOps unit tests and a shift-left process. This approach allowed them to enhance software quality and performance goals.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/pr-rolling-ci-pipeline-jv1rp.png\" alt=\"Microsoft, 2022. Pull request and rolling CI pipeline in action. https://learn.microsoft.com/en-us/devops/develop/shift-left-make-testing-fast-reliable#getting-faster\"></p>\n<p>Additionally, the Azure DevOps platform integrates various Shift-Left testing practices, which the team leverages to deliver reliable cloud services and tools to its customers. At the core of Shift-Left testing in Microsoft are:</p>\n<ul>\n<li>Writing tests at the lowest possible level.</li>\n<li>Writing functional tests that can run anywhere.</li>\n<li>Treating test code as product code.</li>\n</ul>\n<h3 id=\"uber\">Uber</h3>\n<p>Uber’s adoption of the Shift-Left testing principle of putting the test at the forefront of its software development process has helped it minimize risk and ensure the reliability and safety of its ride-sharing platform.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/shift-left-testing-devops-uber-0xk2a.png\" alt=\"Uber, 2024. Separation of testing data. https://www.uber.com/en-GB/blog/shifting-e2e-testing-left/\"></p>\n<p>One major change Uber made was to ensure they could test without deploying to production. This process requires launching a backend integration testing strategy <strong>(BITS)</strong> that enables on-demand continuous deployment and routing to test sandboxes. At the core of BITS are:</p>\n<ul>\n<li>Isolating data between production and test environment.</li>\n<li>Using <a href=\"https://cadenceworkflow.io/?uclick_id=b36cfaa6-c7d0-4da0-a756-64e7e4c3466e\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Cadence</a>, an open-source workflow engine, to define workflow state, retries, and timers for resource teardown.</li>\n</ul>\n<h2 id=\"key-takeaways\">Key takeaways</h2>\n<p>As businesses evolve, they will bring new challenges and use cases that need to be solved. This means as a DevOps engineer, you need to factor in tests early into the development process to maintain a balance between product quality and speed. Additionally, you need to stay up to date with the latest DevOps trends and toolchains that will help you build reliable applications.</p>\n<p>Use the <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a> to stay up to date with the latest developments and extensions in the DevOps ecosystem.</p>";

				const frontmatter$X = {"title":"Why Does DevOps Recommend Shift-Left Testing Principles?","description":"Understand why DevOps emphasizes shift-left testing to boost early bug detection, reduce costs, and improve release cycles.","authorId":"william","excludedBySlug":"/devops/shift-left-testing","seo":{"title":"Why Does DevOps Recommend Shift-Left Testing Principles?","description":"Understand why DevOps emphasizes shift-left testing to boost early bug detection, reduce costs, and improve release cycles.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-shift-left-testing-16zah.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$X = "/workspace/src/data/guides/devops-shift-left-testing.md";
				const url$X = undefined;
				function rawContent$X() {
					return "   \n                                                                 \n                                                                                                                                          \n                 \n                                            \n    \n                                                                   \n                                                                                                                                            \n                                                                                   \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Why shift-left testing is recommended in DevOps](https://assets.roadmap.sh/guest/devops-shift-left-testing-16zah.jpg)\n\nWhy is there so much debate about testing methodologies if DevOps is about streamlining software delivery? Why do we still encounter approaches like shift-left, shift-right, and even shift-down testing? Shouldn’t there be one universally accepted strategy?\n\n[DevOps](https://roadmap.sh/devops) emphasizes rapid development cycles, continuous integration, and delivery, but your projects or teams may have different needs, goals, or challenges. Factors like the **type of application, infrastructure, team size, legacy systems**, and **release schedules** can lead you to choose different testing strategies.\n\nDespite these varying needs and challenges, DevOps recommends shift-left testing principles because it addresses the core problem of catching issues early. By integrating tests early, issues are resolved quickly before they become more costly and complex to fix.\n\nIn this guide, you’ll learn what Shift-Left testing is, its benefits, things to consider, and best practices when implementing it.\n\n## What is Shift-Left testing?\n\nShift-Left testing is a [principle in DevOps](https://roadmap.sh/devops/principles) that involves incorporating quality assurance and other testing activities **earlier** in the software development lifecycle (SDLC).\n\nOver the years, testing has been somewhat considered an afterthought of the development process. The traditional approach waits for the development cycle to end or at least waits until 50% of the development process is done before testing the application. This approach can be slow, costly, and does not maximize resources because bugs found during the tests can’t be easily fixed during the development cycle.\n\n![Shift-Left testing](https://assets.roadmap.sh/guest/shift-left-testing-devops-3cr7m.png)\n\nThe main idea is to move testing to the **left side** of the development process so that it can happen earlier and more often during the design and development phase.\n\nShift-Left testing aligns with the DevOps principle of continuous integration and continuous delivery (CI/CD) because [automated tests](https://roadmap.sh/devops/test-automation) can be written alongside the code and executed as part of the development pipeline. This approach ensures that issues are caught early, developers receive immediate feedback, and overall software quality is improved.\n\nTo implement Shift-Left testing, organizations often rely on a variety of automated testing tools. While the choice of tools may vary based on team preference and specific projects, below are some popular tools for performing Shift-Left testing:\n\n- Jenkins\n- Selenium\n- Cucumber\n- SonarCube\n- JMeter\n\n## Benefits of Shift-Left testing in DevOps\n\nLet’s explore some of the reasons why Shift-Left is important in your DevOps processes:\n\n![Benefits of Shift-Left](https://assets.roadmap.sh/guest/shift-left-testing-devops-benefits-celh5.png)\n\n1. **Reduced cost**: A goal of every organization is to reduce its *operating expenses* and maximize profit. When Shift-Left testing is factored into your development process, bugs are identified and fixed early, which is far less expensive than when you address them after deployment. This approach saves you both time and resources as reworks are minimal.\n2. **Faster feedback and early detection**: Shift-Left testing provides faster feedback on the quality of your code because you’re testing early in the development process. This means you and your team can catch bugs and detect issues before they escalate. Additionally, it reduces the likelihood of finding and fixing defects later in development or in production.\n3. **Improved quality**:  The overall experience of your application becomes more reliable and stable because you'll likely find and fix bugs earlier before they impact your users' experience.\n4. **Faster time to market:** Because defects are reduced and the development process is optimized, you can iterate faster and continuously release software.\n5. **Improved collaboration and continuous learning:** Shift-Left testing follows the DevOps principle of collaboration between developers, testers, and other stakeholders. This means the team has a sense of responsibility and ownership, and they’ll learn more from one another.\n\nShift-Left testing advocates for testing earlier, moving the focus to the **left side** of the development process. You might wonder if this means testing ends after the design and development stages or if there's something like **right-side** testing as you prepare to go live.\n\nWell, you guessed right, there's indeed Shift-Right testing. Let’s explore that next.\n\n## What is Shift-Right testing?\n\nShift-Right testing is a principle in DevOps that involves incorporating quality assurance and other testing activities **later** in the software development lifecycle (SDLC). This is usually done when software has been released or is being used in production.\n\nUnlike Shift-Left testing, which occurs at the beginning of the development process, Shift-Right testing occurs after the application has been deployed into production. It involves:\n\n- Closely monitoring the application’s performance in the production environment to identify bugs and issues.\n- Gradually releasing new features to selected users to test their impact first before doing a full rollout.\n- Collecting feedback from users to understand the overall users’ experience and identify areas of continuous improvement.\n- Conducting A/B testing to compare different versions of the software or features to determine users’ behavior and outcomes.\n\n![Shift-Right testing](https://assets.roadmap.sh/guest/shift-right-testing-v86zs.png)\n\nThe main idea is to move system testing to the **right side** of the development process, ensure that the application performs well in real-world scenarios, and catch issues that may not be apparent during Shift-Left testing.\n\nWhile Shift-Right testing comes with its own benefits when dealing with production-specific issues, it can be risky. The approach of fixing bugs in production can lead to downtime, cause a negative user experience, and damage your organization’s reputation.\n\n## Challenges in adopting Shift-Left testing\n\nIt’s important to understand that Shift-Left testing is not a “magic wand” that solves all your testing problems. It also comes with its own challenges. Below are some challenges you might encounter when adopting it:\n\n1. **Required skills**: Developers, testers, and other stakeholders may need to acquire new skills like test [automation](https://roadmap.sh/devops/automation), continuous integration, and more. Training can be challenging for teams with limited resources.\n2. **Cultural shift**: Adopting continuous testing on the left side of the development process requires a cultural change for all the stakeholders. Developers may need to take on additional testing responsibilities, while testers may need to acquire new skills. This can lead to resistance, adding to their workload and responsibilities.\n3. **Cost implication**: The implementation process requires new toolsets and automation frameworks, which can be time-consuming and costly to set up. Additionally, teams must overcome the learning curve associated with these tools.\n4. **Integration complexity**: Integrating testing in the early stage of SDLC can be complex, particularly in legacy and large systems. This is because it requires that all team members are aligned and willing to adjust their roles and responsibilities to accommodate the new testing approach.\n5. **Risk management**: Testing early means teams must develop strategies to mitigate the risks associated with early testing and find a balance between early testing and potential risks.\n\n## Overcoming challenges and implementing shift-left testing\n\nAdopting Shift-Left testing in your development process comes with several challenges, particularly related to resources and cultural resistance, which may overshadow the advantages it offers. To successfully implement Shift-Left testing, consider the following strategies:\n\n- **Promote a testing-first mindset** and encourage cross-functional collaboration between your teams with an emphasis on shared ownership of the product.\n- **Invest in training and skill development** focused on test automation, CI/CD, and other [best practices in DevOps](https://roadmap.sh/devops/best-practices).\n- **Choose [DevOps tools](https://roadmap.sh/devops/tools) that align with your organization’s needs** and integrate seamlessly within your budget.\n- **Start small** with a feature or pilot project, then gradually scale across the entire product chain. This approach will give your team the flexibility and the time to learn and refine strategies.\n- **Regularly conduct risk assessments** to identify areas for improvement and implement corresponding mitigation strategies.\n\n## Best practices for implementing Shift-Left testing principles\n\nBelow are some best practices to consider:\n\n![Shift-Left best practices](https://assets.roadmap.sh/guest/shift-left-testing-devops-principles-0yrp4.png)\n\n1. **Adopt early test plans**: Create a plan that clearly outlines the testing goals and scope of the project. Also, ensure that testing is integrated into the early stages of your SDLC.\n2. **Test automation**: Use test [automation tools](https://roadmap.sh/devops/automation-tools) to automate unit tests, integration tests, functional tests, and other necessary test cases. Additionally, regularly update and maintain test scripts to keep them relevant and accurate when running CI/CD pipeline.\n3. **Collaboration and communication**: Use project management tools like Jira and Linear, along with traditional methods such as meetings, check-ins, and stand-ups, to facilitate communication and collaboration between developers, testers, and other stakeholders.\n4. **Continuous learning**: Encourage your team to keep up-to-date with the latest testing techniques and tools, participate in industry events to learn from experts, and share knowledge and best practices within the team.\n\n## Shift-Left testing in the real world\n\nTo gain a better understanding of how teams are using Shift-Left testing to build better applications, let’s explore two real-world examples: Microsoft and Uber.\n\n### Microsoft\n\nOver two and a half years, a Microsoft team successfully replaced 27,000 legacy tests with modern DevOps unit tests and a shift-left process. This approach allowed them to enhance software quality and performance goals.\n\n![Microsoft, 2022. Pull request and rolling CI pipeline in action. https://learn.microsoft.com/en-us/devops/develop/shift-left-make-testing-fast-reliable#getting-faster](https://assets.roadmap.sh/guest/pr-rolling-ci-pipeline-jv1rp.png)\n\nAdditionally, the Azure DevOps platform integrates various Shift-Left testing practices, which the team leverages to deliver reliable cloud services and tools to its customers. At the core of Shift-Left testing in Microsoft are:\n\n- Writing tests at the lowest possible level.\n- Writing functional tests that can run anywhere.\n- Treating test code as product code.\n\n### Uber\n\nUber’s adoption of the Shift-Left testing principle of putting the test at the forefront of its software development process has helped it minimize risk and ensure the reliability and safety of its ride-sharing platform.\n\n![Uber, 2024. Separation of testing data. https://www.uber.com/en-GB/blog/shifting-e2e-testing-left/](https://assets.roadmap.sh/guest/shift-left-testing-devops-uber-0xk2a.png)\n\nOne major change Uber made was to ensure they could test without deploying to production. This process requires launching a backend integration testing strategy **(BITS)** that enables on-demand continuous deployment and routing to test sandboxes. At the core of BITS are:\n\n- Isolating data between production and test environment.\n- Using [Cadence](https://cadenceworkflow.io/?uclick_id=b36cfaa6-c7d0-4da0-a756-64e7e4c3466e), an open-source workflow engine, to define workflow state, retries, and timers for resource teardown.\n\n## Key takeaways\n\nAs businesses evolve, they will bring new challenges and use cases that need to be solved. This means as a DevOps engineer, you need to factor in tests early into the development process to maintain a balance between product quality and speed. Additionally, you need to stay up to date with the latest DevOps trends and toolchains that will help you build reliable applications.\n\nUse the [DevOps roadmap](https://roadmap.sh/devops) to stay up to date with the latest developments and extensions in the DevOps ecosystem.\n";
				}
				async function compiledContent$X() {
					return await html$X();
				}
				function getHeadings$X() {
					return [{"depth":2,"slug":"what-is-shift-left-testing","text":"What is Shift-Left testing?"},{"depth":2,"slug":"benefits-of-shift-left-testing-in-devops","text":"Benefits of Shift-Left testing in DevOps"},{"depth":2,"slug":"what-is-shift-right-testing","text":"What is Shift-Right testing?"},{"depth":2,"slug":"challenges-in-adopting-shift-left-testing","text":"Challenges in adopting Shift-Left testing"},{"depth":2,"slug":"overcoming-challenges-and-implementing-shift-left-testing","text":"Overcoming challenges and implementing shift-left testing"},{"depth":2,"slug":"best-practices-for-implementing-shift-left-testing-principles","text":"Best practices for implementing Shift-Left testing principles"},{"depth":2,"slug":"shift-left-testing-in-the-real-world","text":"Shift-Left testing in the real world"},{"depth":3,"slug":"microsoft","text":"Microsoft"},{"depth":3,"slug":"uber","text":"Uber"},{"depth":2,"slug":"key-takeaways","text":"Key takeaways"}];
				}

				const Content$X = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$X;
					content.file = file$X;
					content.url = url$X;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$X())}`;
				});

const __vite_glob_0_39 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$X,
	compiledContent: compiledContent$X,
	default: Content$X,
	file: file$X,
	frontmatter: frontmatter$X,
	getHeadings: getHeadings$X,
	rawContent: rawContent$X,
	url: url$X
}, Symbol.toStringTag, { value: 'Module' }));

const html$W = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-skills-tlace.jpg\" alt=\"Our top 10 DevOps engineer skills\"></p>\n<p>The role of the DevOps engineer is not always very well defined; some companies see it as the old-school sysadmin whose sole purpose is to take care of the platform’s infrastructure. Others see it as the person in charge of the Terraform configuration files. In the end, properly understanding what DevOps is and what you should expect from this role is critical to properly taking advantage of it and adding the value it’s meant to be adding to your company.</p>\n<p>While you can work on becoming a DevOps engineer from scratch (there is actually a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a> for that), usually, a <a href=\"https://roadmap.sh/devops/devops-engineer\" target=\"_blank\">DevOps engineer</a> is someone who has spent enough years either as a developer or in an operations role and wants to start helping solve the problems they’ve experienced throughout their entire career. This person sits between both sides and has intimate knowledge of one of them and a great deal of knowledge about the other side.</p>\n<p>With that said, understanding everything there is to know to become a DevOps engineer who excels at their job is not trivial, and that’s why in this article, we’re going to cover the top 10 DevOps skills to help you level up your <a href=\"https://roadmap.sh/devops/career-path\" target=\"_blank\">career in DevOps</a>.</p>\n<p>The top 10 DevOps engineer skills to master are:</p>\n<ol>\n<li>Understanding Linux and some scripting languages.</li>\n<li>Knowing how to set up your CI/CD pipelines.</li>\n<li>Embracing containerization and orchestration.</li>\n<li>Learning about Infrastructure as Code.</li>\n<li>Understanding cloud computing.</li>\n<li>Knowing how to monitor your infrastructure and manage your logs.</li>\n<li>Having a good grasp of security practices and tools.</li>\n<li>Know how to set up your networking and what that entails for your infrastructure.</li>\n<li>Knowing about version control.</li>\n<li>And finally, understanding configuration management.</li>\n</ol>\n<p>Now, let’s get started.</p>\n<h2 id=\"1-proficiency-in-linux-and-scripting\">1. Proficiency in Linux and Scripting</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/bash-code-in-terminal-zj6j1.png\" alt=\"Bash code in terminal\"></p>\n<p>Linux is one of the most common operating systems in the world of software development because of its incredible support, performance, and flexibility, which makes mastering it one of the main DevOps skills to work on.</p>\n<p>Granted, the word “master” is loaded and there are many aspects of the OS that you don’t really need to worry about these days (with all the containers and IaC tools around), however without pushing yourself too hard and becoming a full-blown developer, investing part of your time into learning one or more scripting languages is definitely a good call.</p>\n<p>As a DevOps engineer, you will be scripting and automating tasks, so pick a couple of popular scripting languages and make sure you understand them enough to get the job done. For example, picking Bash is a safe bet, as Bash is the native scripting language in most Linux distros. On top of that, you can pick something like Python or Ruby; both are great options. With an English-like syntax that’s very easy to read and understand and a set of very powerful <a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">DevOps automation</a> libraries and tools available, you should be more than fine. For example, if you’re picking Python, you’ll be able to work on Ansible playbooks or custom modules, and if you go with Ruby, you can write Chef cookbooks.</p>\n<p>In the end, it’s either about your own preference or the company’s standards if there are any, just pick one and figure out the tools at your disposal.</p>\n<h2 id=\"2-understanding-of-continuous-integration-and-continuous-deployment-cicd\">2. Understanding of Continuous Integration and Continuous Deployment (CI/CD)</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-l2fak.png\" alt=\"continuous development vs continuous integration\"></p>\n<p>Continuous Integration and Continuous Deployment (CI/CD) form the backbone of a successful DevOps methodology. As a DevOps engineer, mastering CI/CD is non-negotiable.</p>\n<h3 id=\"understanding-cicd\">Understanding CI/CD</h3>\n<p>At its core, Continuous Integration (CI) is about automatically integrating code changes from multiple contributors into a shared repository as many times a day as needed (which can be one, zero, or hundreds; the number should be irrelevant).</p>\n<p>The idea is to catch and fix integration bugs early and often, which is crucial for maintaining the health of your project.</p>\n<p>On the other hand, Continuous Deployment (CD) takes this a step further by automatically deploying the integrated code to production environments once it passes all necessary tests. Together, both practices minimize manual intervention, reducing errors and allowing for rapid and reliable delivery of software.</p>\n<h3 id=\"key-tools-for-cicd\">Key Tools for CI/CD</h3>\n<p>To effectively implement CI/CD pipelines, you’ll need to be proficient with the tools that make it possible. There are tons of them out there; some of the most common (and arguably, best ones) are:</p>\n<ul>\n<li><strong>Jenkins</strong>: An open-source automation server, Jenkins is highly customizable and supports a huge number of integration plugins.</li>\n<li><strong>GitLab CI</strong>: Part of the larger GitLab platform, GitLab CI is tightly integrated with GitLab’s version control and issue-tracking features.</li>\n<li><strong>CircleCI</strong>: Known for its speed and simplicity, CircleCI is perfect for environments that prioritize cloud-native solutions. It provides a user-friendly interface and integrates well with popular tools like Docker, AWS, and Kubernetes.</li>\n<li><strong>GitHub Actions</strong>: GitHub Actions is a powerful CI/CD tool integrated directly into GitHub, allowing developers to automate, test, and deploy their code right from their repositories. It supports custom workflows, integration with <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">other DevOps tools</a>, and provides flexibility to run complex automation tasks across multiple environments.</li>\n</ul>\n<h3 id=\"best-practices-for-setting-up-and-managing-cicd-pipelines\">Best Practices for Setting Up and Managing CI/CD Pipelines</h3>\n<p>Setting up and managing CI/CD pipelines isn’t just about getting the tools to work; it’s about ensuring that they work well (whatever “well” means for your specific context).</p>\n<p>Here are some best practices to follow:</p>\n<ol>\n<li><strong>Start Small and Iterate</strong>: Don’t try to automate everything at once. Start with the most critical parts of your workflow, then gradually expand the pipeline.</li>\n<li><strong>Ensure Fast Feedback</strong>: The faster your CI/CD pipeline can provide feedback, the quicker your team can address issues.</li>\n<li><strong>Maintain a Stable Master Branch</strong>: Always keep your master branch in a deployable state. Implement branch protection rules and require code reviews and automated tests to pass before any changes are merged.</li>\n<li><strong>Automate Everything Possible</strong>: From testing to deployment, automate as many steps in your pipeline as possible.</li>\n<li><strong>Monitor and Optimize</strong>: Continuously monitor your CI/CD pipelines for performance bottlenecks, failures, and inefficiencies. Use this data to refine your process.</li>\n<li><strong>Security Considerations</strong>: Integrate security checks into your CI/CD pipelines to catch vulnerabilities early. Tools like static code analysis, dependency checking, and container scanning can help ensure that your code is secure before it reaches production.</li>\n</ol>\n<h2 id=\"3-containerization-and-orchestration\">3. Containerization and Orchestration</h2>\n<p>These technologies are at the heart of modern DevOps practices, enabling scalability, portability, and efficiency.</p>\n<h3 id=\"basics-of-containerization\">Basics of Containerization</h3>\n<p>Containerization is a method of packaging applications and their dependencies into isolated units called containers. Unlike traditional virtual machines, which require a full operating system, containers share the host OS’s kernel while running isolated user spaces.</p>\n<p>This makes containers not only lightweight but also faster to start, and more resource-efficient.</p>\n<p>There are many benefits to this technology, as you can probably glean by now, but the primary benefits include:</p>\n<ul>\n<li><strong>Portability</strong>: Containers encapsulate everything an application needs to run, making it easy to move them across different environments. As long as there is a way to run containers in an OS, then your code can run on it.</li>\n<li><strong>Scalability</strong>: Containers can be easily scaled up or down based on demand. This flexibility is crucial when you need to handle dynamic workloads.</li>\n<li><strong>Consistency</strong>: By using containers, you can ensure that your applications run the same way across different environments, reducing the infamous “it works on my machine” problem.</li>\n<li><strong>Isolation</strong>: With container applications, don’t use resources outside of the ones defined for them. This means each application is isolated from others running on the same host server, avoiding interference.</li>\n</ul>\n<h3 id=\"key-containerization-tools\">Key Containerization Tools</h3>\n<p>When it comes to containerization tools, Docker is the most popular and widely adopted alternative. However, other tools like Podman are also gaining traction, especially in environments that prioritize security and compatibility with Kubernetes.</p>\n<p>Both tools offer robust features for managing containers, but the choice between them often comes down to specific use cases, security requirements, and integration with other tools in your DevOps toolkit.</p>\n<h3 id=\"orchestration-tools\">Orchestration Tools</h3>\n<p>While containerization simplifies application deployment, managing containers at scale requires something else: orchestration.</p>\n<p>Orchestration tools like Kubernetes and Docker Swarm automate the deployment, scaling, and management of containerized applications, ensuring that they run efficiently and reliably across distributed environments.</p>\n<ul>\n<li><strong>Kubernetes</strong>: Kubernetes is the de facto standard for container orchestration. Kubernetes provides a comprehensive platform for automating the deployment, scaling, and operation of containerized applications by managing clusters of containers.</li>\n<li><strong>Docker Swarm</strong>: Docker Swarm is Docker’s native clustering and orchestration tool. It’s simpler to set up and use compared to Kubernetes, making it a good choice for smaller teams or less complex projects.</li>\n</ul>\n<h2 id=\"4-infrastructure-as-code-iac\">4. Infrastructure as Code (IaC)</h2>\n<p>Infrastructure as Code (IaC) has become a foundational practice for DevOps teams. IaC allows you to manage and provision your infrastructure through code, offering a level of automation and consistency that manual processes simply can’t match.</p>\n<h3 id=\"importance-of-iac-in-modern-devops-practices\">Importance of IaC in Modern DevOps Practices</h3>\n<p>IaC is crucial in modern DevOps because it brings consistency, scalability, and speed to infrastructure.</p>\n<p>IaC allows teams to define their infrastructure in code, which can be versioned, reviewed, and tested just like application code. If you think about it, IaC is the perfect example of what DevOps means: the merger of both worlds to achieve something that is greater than the sum of its parts.</p>\n<p>Nowadays, IaC is not just a “best practice” but rather, an indispensable part of a DevOps engineer’s workflow, and here is why:</p>\n<ul>\n<li><strong>Consistency Across Environments</strong>: As we’ve already mentioned, with IaC, you can ensure that your environments are all configured exactly the same way.</li>\n<li><strong>Scalability</strong>: Whether you need to add more servers, databases, or other resources, you can do it quickly and reliably by updating your code and reapplying it.</li>\n<li><strong>Version Control and Collaboration</strong>: By storing your infrastructure configurations in a version control system like Git, you enable better collaboration and control.</li>\n<li><strong>Automation and Efficiency</strong>: Once your infrastructure is defined in code, you can automate the provisioning, updating, and teardown of resources, allowing your team to focus on higher-value tasks.</li>\n</ul>\n<h3 id=\"key-iac-tools-terraform-ansible-chef-puppet\">Key IaC Tools: Terraform, Ansible, Chef, Puppet</h3>\n<p>Several tools have become go-to solutions for IaC, each offering unique strengths.</p>\n<p>Here are some of the most popular ones; however, feel free to pick others if they fit better in your particular use case/context:</p>\n<ul>\n<li><strong>Terraform</strong>: Terraform is one of the most widely used IaC tools. It’s cloud-agnostic, meaning you can use it to manage infrastructure across different cloud providers like AWS, Azure, and Google Cloud.</li>\n<li><strong>Ansible</strong>: While Ansible’s main focus is automating configuration tasks across multiple servers, it is capable of also working as an IaC tool by providing support for infrastructure provisioning, application deployment, and orchestration.</li>\n<li><strong>Chef</strong>: Chef is another strong player in the configuration management space. It uses a Ruby-based language to create “recipes” that automate the deployment and management of infrastructure.</li>\n<li><strong>Puppet</strong>: Puppet offers a solid solution for configuration management, using its own declarative language to define the state of your infrastructure.</li>\n</ul>\n<h3 id=\"best-practices-for-writing-and-managing-infrastructure-code\">Best Practices for Writing and Managing Infrastructure Code</h3>\n<p>Like with any coding project, writing clean and easy-to-read code will help a great deal in making the project itself a success. That’s no different in the case of IaC, the words “clean code” need to be engraved in every DevOp’s mind.</p>\n<p>And this is what “clean” means in this context:</p>\n<ol>\n<li><strong>Modularize Your Code</strong>: Break down your infrastructure code into smaller, reusable modules. This approach is especially useful for larger projects where the infrastructure files grow in number; this way you can reuse sections and simplify maintenance.</li>\n<li><strong>Use Version Control</strong>: Store all your infrastructure code in a version control system like Git. This practice enables you to track changes, collaborate with others, and roll back if something goes wrong.</li>\n<li><strong>Test Your Infrastructure Code</strong>: Just like application code, infrastructure code should be tested. Tools like Terraform provide validation for configurations, and frameworks like Inspec or Testinfra can verify that your infrastructure is working as expected after deployment.</li>\n<li><strong>Follow the Principle of Least Privilege</strong>: When defining infrastructure, ensure that each component has only the permissions it needs to perform its function. This practice reduces security risks by limiting the potential impact of a breach or misconfiguration.</li>\n<li><strong>Keep Secrets Secure</strong>: Avoid the rooky mistake of hardcoding sensitive information, such as API keys or passwords, directly into your infrastructure code. Use tools like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to manage secrets securely.</li>\n<li><strong>Document Your Code</strong>: Just like application code, your infrastructure code should also be commented on and explained, not for you now, but for you next week or someone else next month. The easier it is to understand the code, the faster they’ll be able to work with it.</li>\n<li><strong>Integrate IaC into CI/CD Pipelines</strong>: Automate as much as possible in the IaC workflow. That includes the validation, testing, and deployment of your infrastructure code by integrating it into your continuous integration and continuous deployment (CI/CD) pipelines. This ensures that your environments are always up-to-date and consistent with your codebase, reducing the risk of drift.</li>\n</ol>\n<h2 id=\"5-cloud-computing-expertise\">5. Cloud Computing Expertise</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/cloud-providers-wb1f5.png\" alt=\"cloud providers\"></p>\n<p>In the DevOps ecosystem, cloud computing is more than just a trend companies are starting to follow—it’s a fundamental element that defines modern software development and deployment practices.</p>\n<p>And because of that, it’s one of the main DevOps skills you’ll want to develop.</p>\n<h3 id=\"importance-of-cloud-platforms-in-devops\">Importance of Cloud Platforms in DevOps</h3>\n<p>Cloud platforms have revolutionized the way software is developed, deployed, and managed. The cloud allows organizations to leverage vast computing resources on demand, scale their operations effortlessly, and reduce infrastructure costs.</p>\n<p>Specifically for DevOps teams, cloud platforms offer several key benefits:</p>\n<ul>\n<li><strong>Scalability</strong>: One of the most significant advantages of cloud computing is its ability to scale resources up or down based on demand. This elasticity is crucial for handling varying workloads, ensuring that applications remain responsive and, most importantly (as some would argue), cost-effective.</li>\n<li><strong>Speed and Agility</strong>: Provisioning of resources can be done with just a few clicks, allowing DevOps teams to spin up development, testing, and production environments in minutes. This speed accelerates the software development lifecycle, enabling faster releases and more frequent updates.</li>\n<li><strong>Global Reach</strong>: Cloud providers operate data centers around the world, making it easier for organizations to deploy applications closer to their users, reducing latency and improving performance.</li>\n<li><strong>Cost Efficiency</strong>: This is a recurring topic when discussing cloud platforms, as they help reduce the need for large upfront capital investments in hardware. Instead, organizations can pay for the resources they use, optimizing costs and reducing waste.</li>\n<li><strong>Automation</strong>: Cloud environments are highly automatable, allowing DevOps teams to automate infrastructure provisioning, scaling, and management.</li>\n</ul>\n<h3 id=\"key-cloud-providers-aws-azure-google-cloud-platform-gcp\">Key Cloud Providers: AWS, Azure, Google Cloud Platform (GCP)</h3>\n<p>When it comes to cloud providers, three providers dominate the market: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP). While they’re not the only ones, and in some regions of the world, they’re not even the top providers. In general, they own most of the cloud market.</p>\n<p>Each of them offers a vast array of services and tools that cater to different needs, making them the go-to choices for DevOps professionals.</p>\n<ul>\n<li><strong>Amazon Web Services (AWS)</strong>: AWS is the largest and most mature of the three, offering an extensive range of services, including computing power (EC2), storage (S3), databases (RDS), and more. AWS is known for its large number of features, including advanced networking, security, and analytics tools. For DevOps engineers, AWS provides powerful services like AWS Lambda (serverless computing), AWS CodePipeline (CI/CD), and CloudFormation (IaC), which are essential for building and managing cloud-native applications.</li>\n<li><strong>Microsoft Azure</strong>: Azure is a close competitor to AWS, particularly strong in enterprise environments where Microsoft technologies like Windows Server, SQL Server, and .NET are prevalent. Azure offers a very rich list of cloud services, including, like the other two, virtual machines, AI, and machine learning tools. Azure also offers DevOps-specific services like Azure DevOps, which integrates CI/CD, version control, and agile planning into a single platform. Azure’s hybrid cloud capabilities also make it a popular choice for organizations that need to integrate on-premises infrastructure with cloud resources.</li>\n<li><strong>Google Cloud Platform (GCP)</strong>: GCP, while newer to the cloud market compared to AWS and Azure, has quickly gained a reputation for its data analytics, machine learning, and container orchestration services. Google’s Kubernetes Engine (GKE), for instance, is quite liked by the DevOps community for managing containerized applications at scale. GCP is also known for its strong support of open-source technologies, making it a favorite among developers who prioritize flexibility and innovation.</li>\n</ul>\n<h3 id=\"understanding-cloud-native-tools-services-and-architectural-patterns\">Understanding Cloud-Native Tools, Services, and Architectural Patterns</h3>\n<p>Another key technical skill for DevOps engineers is to understand not only cloud-native tools and services but also the architectural patterns that define modern application development.</p>\n<p>These patterns define how applications are structured and interact with cloud infrastructure, directly affecting areas such as scalability, resilience, and maintainability.</p>\n<ul>\n<li><strong>Microservices Architecture</strong>: In a microservices architecture, applications are composed of small, independent services that communicate over APIs. Key tools to understand by DevOps engineers include <strong>API gateways</strong> (like AWS API Gateway), <strong>service meshes</strong> (such as Istio), and <strong>message queues</strong> (like Amazon SQS or Google Pub/Sub).</li>\n<li><strong>Service-Oriented Architecture (SOA)</strong>: SOA is a broader (and older) architectural style where services are designed to provide specific business functionalities and can communicate with each other over a network. Tools like <strong>Enterprise Service Buses (ESBs)</strong> and <strong>message brokers</strong> (such as RabbitMQ) are often used to facilitate SOA architectures.</li>\n<li><strong>Serverless Architecture</strong>: Serverless computing allows developers to build and deploy applications without managing the underlying infrastructure. In a serverless architecture, code is executed in response to events, such as HTTP requests or changes in data, using services like <strong>AWS Lambda</strong>, <strong>Azure Functions</strong>, or <strong>Google Cloud Functions</strong>.</li>\n<li><strong>Event-Driven Architecture</strong>: In an event-driven architecture, applications respond to events in real-time, often using tools like <strong>event streams</strong> (e.g., Apache Kafka) and <strong>message queues</strong>.</li>\n</ul>\n<h2 id=\"6-monitoring-and-logging\">6. Monitoring and Logging</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/monitoring-logging-servers-ztf1a.png\" alt=\"monitoring logging servers\"></p>\n<p>Monitoring and logging are vital components of a robust DevOps strategy. They provide visibility into the health and performance of your systems, allowing you to detect issues early, troubleshoot, and ensure the reliability of your applications.</p>\n<h3 id=\"importance-of-monitoring-and-logging-for-maintaining-system-health\">Importance of Monitoring and Logging for Maintaining System Health</h3>\n<p>No matter what type of application you’re running, maintaining the health and performance of your systems is crucial if your business depends on it.</p>\n<p>Monitoring and logging has turned into one of the most relevant DevOps skills out there.</p>\n<p>Through monitoring you can track the performance of your infrastructure and applications in real-time, alerting you to any potential problems such as resource bottlenecks, slowdowns, or outages.</p>\n<p>Logging, on the other hand, captures detailed records of system events and user interactions, providing invaluable information for diagnosing problems and understanding system behavior.</p>\n<p>The reasons why you want to have effective monitoring and logging, are:</p>\n<ul>\n<li><strong>Proactive Issue Detection</strong>: By continuously monitoring system metrics, you can detect issues before they escalate into critical problems, reducing downtime and improving overall system reliability.</li>\n<li><strong>Troubleshooting and Root Cause Analysis</strong>: Logs provide detailed information about system events, making it easier to pinpoint the root cause of issues. This speeds up the resolution process and minimizes the impact on users.</li>\n<li><strong>Performance Optimization</strong>: Monitoring allows you to track key performance indicators (KPIs) and identify areas where your systems can be optimized, leading to better resource utilization and cost savings.</li>\n<li><strong>Compliance and Auditing</strong>: Logging is essential for maintaining compliance with regulatory requirements. Logs can be used to audit system access, track changes, and ensure that your systems meet security and operational standards.</li>\n</ul>\n<h3 id=\"key-tools-for-monitoring-prometheus-grafana-nagios\">Key Tools for Monitoring: Prometheus, Grafana, Nagios</h3>\n<p>Several tools have become essential for monitoring systems in DevOps environments. Each offers unique features tailored to different needs, from real-time metrics collection to visual dashboards and alerting.</p>\n<ul>\n<li><strong>Prometheus</strong>: Prometheus is an open-source monitoring tool designed for reliability and scalability. It collects real-time metrics from your systems and applications, stores them in a time-series database, and supports powerful query languages for analysis.</li>\n<li><strong>Grafana</strong>: Grafana is a popular open-source platform for visualizing monitoring data. It integrates with Prometheus and other data sources, allowing you to create interactive, customizable dashboards that provide insights into system performance at a glance.</li>\n<li><strong>Nagios</strong>: Nagios is one of the oldest and most widely used monitoring tools. It provides comprehensive monitoring of network services, host resources, and infrastructure components.</li>\n</ul>\n<h3 id=\"logging-tools-elk-stack-elasticsearch-logstash-kibana-splunk\">Logging Tools: ELK Stack (Elasticsearch, Logstash, Kibana), Splunk</h3>\n<p>Effective logging requires tools that can collect, store, and analyze large volumes of log data efficiently, given how much information modern systems can generate.</p>\n<p>The following tools are among the most widely used in the industry:</p>\n<ul>\n<li><strong>ELK Stack</strong>: The ELK Stack is a powerful open-source solution for managing logs. It consists of <strong>Elastic</strong> for storing and searching logs, <strong>Logstash</strong> to act as a data processing/ingestion pipeline, and <strong>Kibana</strong> for data visualization.</li>\n<li><strong>Splunk</strong>: Splunk is a commercial tool that offers advanced log management and analysis capabilities. It can ingest data from a wide variety of sources, index it in real time, and provide powerful search and reporting features.</li>\n</ul>\n<h3 id=\"best-practices-for-setting-up-effective-monitoring-and-logging-systems\">Best Practices for Setting Up Effective Monitoring and Logging Systems</h3>\n<p>While both practices are crucial for a successful DevOps strategy, if you ignore best practices the results you’ll get will be subpar, at best.</p>\n<p>Instead, try to follow these (or some of them) guidelines to ensure you get the most out of your monitoring and logging efforts.</p>\n<ol>\n<li><strong>Define Clear Objectives</strong>: Before setting up your monitoring and logging systems, define what you want to achieve. Identify the key metrics and logs that are most critical to your operations, such as CPU usage, memory consumption, application response times, and error rates.</li>\n<li><strong>Implement Comprehensive Monitoring</strong>: Monitor all layers of your infrastructure, from hardware and networks to applications and services. Use a combination of tools to ensure that no aspect of your system goes unmonitored. If you ignore one area, you’ll end up having blindspots when debugging and trying to troubleshoot problems.</li>\n<li><strong>Centralize Log Management</strong>: Centralizing your logs in a single platform like the ELK Stack or Splunk allows for easier management, search, and analysis. This centralization is particularly important in distributed systems where logs are generated across multiple servers and services.</li>\n<li><strong>Set Up Alerts and Notifications</strong>: Monitoring without alerting is like watching a movie without any sound; if you constantly pay attention to the picture, you might figure out what’s happening on a general level, but you’ll miss the details. And with monitoring, it’s the same thing: set up alerts and notifications so when a threshold is exceeded (say, the number of error responses in the last 10 minutes), you’ll know, even if it’s in the middle of the night.</li>\n<li><strong>Ensure Scalability</strong>: As your infrastructure grows, your monitoring and logging systems need to scale accordingly. Choose tools that can handle increasing volumes of data without compromising performance. In other words, don’t turn your logging/monitoring setup into a bottleneck for your platform.</li>\n<li><strong>Regularly Review and Tune</strong>: Continuously review and adjust your monitoring and logging configurations. As your systems evolve, your monitoring and logging needs may change, requiring you to add new metrics, refine alert thresholds, or optimize data retention policies.</li>\n<li><strong>Secure Your Monitoring and Logging Infrastructure</strong>: Protect your monitoring and logging data from unauthorized access. Ensure that logs containing sensitive information are encrypted and access to monitoring dashboards is restricted based on roles.</li>\n</ol>\n<h2 id=\"7-security-practices-and-tools-devsecops\">7. Security Practices and Tools (DevSecOps)</h2>\n<p>As DevOps has transformed software development by integrating development and operations teams together into a seamless process, security can no longer be treated as an afterthought. The rise of DevSecOps emphasizes the need for DevOps engineers to develop their security skills.</p>\n<h3 id=\"integrating-security-into-the-devops-pipeline\">Integrating Security into the DevOps Pipeline</h3>\n<p>DevSecOps shifts the classical paradigm (having security reviews happen at the end of the development lifecycle) by integrating security into every phase of the DevOps pipeline—from code development to deployment and beyond. That, in turn, involves the following:</p>\n<ul>\n<li><strong>Shift-Left Security</strong>: This principle involves moving security practices earlier in the SDLC, such as during the coding and design phases.</li>\n<li><strong>Continuous Security</strong>: Security checks should be continuous and automated throughout the pipeline. This ensures that each code change, build, and deployment is evaluated for security risks.</li>\n<li><strong>Collaboration and Culture</strong>: DevSecOps is as much about culture as it is about tools. Developers, operations, and security teams must collaborate closely, sharing responsibility for security.</li>\n</ul>\n<h3 id=\"key-security-practices\">Key Security Practices</h3>\n<p>To effectively integrate security into the DevOps pipeline, certain practices are essential:</p>\n<ul>\n<li><strong>Automated Security Testing</strong>: Automation is key to scaling security practices within a rapidly growing DevOps environment. Automated security testing involves integrating security checks into your CI/CD pipelines. This can include static application security testing (SAST) to analyze source code for security flaws, dynamic application security testing (DAST) to evaluate running applications, and interactive application security testing (IAST) that combines both approaches.</li>\n<li><strong>Vulnerability Scanning</strong>: Regular vulnerability scanning is crucial for identifying and mitigating risks across your infrastructure and applications. Scanning tools can detect known vulnerabilities in code, dependencies, container images, and cloud configurations.</li>\n<li><strong>Security as Code</strong>: Just as Infrastructure as Code (IaC) treats infrastructure configuration as code, Security as Code applies the same principles to security configurations. This involves automating the provisioning and management of security controls, policies, and compliance checks.</li>\n</ul>\n<h3 id=\"tools-for-devsecops\">Tools for DevSecOps</h3>\n<p>Several tools have emerged to support the integration of security into the DevOps practice. These tools help automate security tasks, identify vulnerabilities, and enforce security policies, making it easier for teams to adopt DevSecOps practices.</p>\n<p>Some examples are:</p>\n<ul>\n<li><strong>Aqua Security</strong>: Aqua Security specializes in securing cloud-native applications, particularly those that run in containers. Aqua provides a comprehensive platform for securing the entire container lifecycle, from development to runtime.</li>\n<li><strong>Snyk</strong>: Snyk is a developer-friendly security platform that helps identify and fix vulnerabilities in open-source libraries, container images, and infrastructure as code. Snyk integrates with CI/CD pipelines, providing automated security testing and real-time feedback.</li>\n<li><strong>Trivy</strong>: Trivy is an open-source vulnerability scanner that is particularly well-suited for container environments. It scans container images, file systems, and Git repositories for known vulnerabilities, misconfigurations, and secrets.</li>\n</ul>\n<h2 id=\"8-networking-and-system-administration\">8. Networking and System Administration</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/list-of-linux-processes-rnqzo.png\" alt=\"list of linux processes\"></p>\n<p>Networking and system administration are foundational DevOps skills. These disciplines ensure that the infrastructure supporting your applications is robust, secure, and efficient.</p>\n<h3 id=\"which-networking-concepts-are-most-relevant-to-devops\">Which networking concepts are most relevant to DevOps?</h3>\n<p>Networking is the backbone of any IT infrastructure, connecting systems, applications, and users. A solid understanding of networking concepts is crucial for DevOps engineers to design, deploy, and manage systems effectively.</p>\n<p>Some of the most important concepts include:</p>\n<ul>\n<li><strong>TCP/IP Networking</strong>: TCP/IP (Transmission Control Protocol/Internet Protocol) is the fundamental protocol suite for the Internet and most private networks. Understanding how TCP/IP works is essential.</li>\n<li><strong>Network Topologies</strong>: Network topology refers to the arrangement of different elements (links, nodes, etc.) in a computer network. Common topologies include star, mesh, and hybrid configurations.</li>\n<li><strong>Load Balancing</strong>: Load balancing is the process of distributing network or application traffic across multiple servers to ensure no single server becomes overwhelmed. DevOps engineers need to understand different load balancing algorithms (round-robin, least connections, IP hash) and how to implement load balancers (like NGINX, HAProxy, or cloud-native solutions).</li>\n<li><strong>Firewalls and Security Groups</strong>: Firewalls are essential for controlling incoming and outgoing network traffic based on predetermined security rules. In cloud environments, security groups serve a similar function by acting as virtual firewalls for instances.</li>\n<li><strong>DNS (Domain Name System)</strong>: DNS is the system that translates human-readable domain names (like <a href=\"http://www.example.com\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">www.example.com</a>) into IP addresses that computers use to identify each other on the network.</li>\n<li><strong>VPNs and Secure Communication</strong>: Virtual Private Networks (VPNs) allow secure communication over public networks by encrypting data between remote devices and the network.</li>\n</ul>\n<h3 id=\"system-administration-tasks-and-best-practices\">System Administration Tasks and Best Practices</h3>\n<p>System administration involves the management of computer systems, including servers, networks, and applications. DevOps engineers often take on system administration tasks to ensure that infrastructure is stable, secure, and performing optimally.</p>\n<p>Some of these tasks include:</p>\n<ul>\n<li><strong>User and Permission Management</strong>: Managing user accounts, groups, and permissions is fundamental to system security.</li>\n<li><strong>Server Configuration and Management</strong>: Configuring servers to meet the needs of applications and ensuring they run efficiently is a core task.</li>\n<li><strong>System Monitoring and Maintenance</strong>: As we’ve already mentioned,  regular monitoring of system performance metrics is essential for proactive maintenance.</li>\n<li><strong>Backup and Recovery</strong>: Regular backups of data and configurations are crucial for disaster recovery.</li>\n<li><strong>Patch Management</strong>: Keeping systems up to date with the latest security patches and software updates is critical for maintaining your infrastructure secure.</li>\n<li><strong>Security Hardening</strong>: Security hardening involves reducing the attack surface of a system by configuring systems securely, removing unnecessary services, and applying best practices.</li>\n<li><strong>Script Automation</strong>: Developing your automation skills is key, as you’ll be automating routine tasks with scripts every day. Common scripting languages include Bash for Linux and PowerShell for Windows.</li>\n</ul>\n<h3 id=\"best-practices-for-networking-and-system-administration\">Best Practices for Networking and System Administration</h3>\n<ol>\n<li><strong>Automate Repetitive Tasks</strong>: Use automation tools and scripts to handle routine tasks such as backups, patch management, and monitoring setup.</li>\n<li><strong>Implement Redundancy and Failover</strong>: Design your network and systems with redundancy and failover mechanisms. This includes setting up redundant network paths, using load balancers, and configuring failover for critical services to minimize downtime.</li>\n<li><strong>Enforce Strong Security Practices</strong>: Regularly audit user access, apply patches promptly, and follow security best practices for hardening systems.</li>\n<li><strong>Regularly Review and Update Documentation</strong>: Keep detailed documentation of your network configurations, system setups, and processes.</li>\n<li><strong>Monitor Proactively</strong>: Set up comprehensive monitoring for all critical systems and networks. Alerts should be used to catch issues early, and logs should be reviewed regularly to spot potential security or performance issues.</li>\n<li><strong>Test Disaster Recovery Plans</strong>: Regularly test your backup and disaster recovery procedures to ensure they work as expected.</li>\n</ol>\n<h2 id=\"9-familiarity-with-version-control-systems\">9. Familiarity with Version Control Systems</h2>\n<p>Version control systems (VCS) are at the center of modern software development, enabling teams to collaborate, track changes, and manage their codebase.</p>\n<p>In a DevOps environment, where continuous integration and continuous deployment (CI/CD) are central practices, mastering version control is not just beneficial—it’s essential.</p>\n<h3 id=\"importance-of-version-control-in-devops-workflows\">Importance of Version Control in DevOps Workflows</h3>\n<p>Version control is crucial in DevOps for several reasons:</p>\n<ul>\n<li><strong>Collaboration</strong>: Version control systems allow multiple developers to work on the same codebase simultaneously without overwriting each other’s changes.</li>\n<li><strong>Change Tracking</strong>: Every change to the codebase is tracked, with a history of who made the change, when, and why.</li>\n<li><strong>Branching and Merging</strong>: Version control systems enable the creation of branches, allowing developers to work on new features, bug fixes, or experiments in isolation.</li>\n<li><strong>Continuous Integration/Continuous Deployment (CI/CD)</strong>: Version control is crucial to CI/CD pipelines, where code changes are automatically tested, integrated, and deployed.</li>\n<li><strong>Disaster Recovery</strong>: In case of errors or issues, version control allows you to revert to previous stable versions of the codebase, minimizing downtime and disruption.</li>\n</ul>\n<h3 id=\"mastering-git-key-commands-workflows-and-best-practices\">Mastering Git: Key Commands, Workflows, and Best Practices</h3>\n<p>Git is the most widely used version control system in the DevOps world, known for its flexibility, performance, and breadth of features. Having a deep understanding of Git is crucial for any DevOps engineer, as it is the foundation upon which most CI/CD workflows are built.</p>\n<p>The key commands you should try to master first are <code>init</code>, <code>clone</code>, <code>commit</code>, <code>pull</code>/<code>push</code>, <code>branch</code>, <code>checkout</code>, <code>merge</code>, and one that is definitely useful in your context: <code>log</code>.</p>\n<h4 id=\"git-workflows\">Git Workflows</h4>\n<p>Git can be used as the driving force for your development workflow. However, there are many ways to use it. Some of the most common ones are:</p>\n<ul>\n<li><strong>Feature Branch Workflow</strong>: Developers create a new branch for each feature or bug fix. Once complete, the branch is merged back into the main branch, often through a pull request, where code reviews and automated tests are conducted.</li>\n<li><strong>Gitflow Workflow</strong>: A more structured workflow that uses feature branches, a develop branch for integration, and a master branch for production-ready code. It also includes hotfix branches for urgent bug fixes in production.</li>\n<li><strong>Forking Workflow</strong>: Common in open-source projects, this workflow involves forking a repository, making changes in the fork, and then submitting a pull request to the original repository for review and integration.</li>\n</ul>\n<h4 id=\"best-practices-when-using-git\">Best practices when using Git</h4>\n<ul>\n<li><strong>Commit Often, Commit Early</strong>: Make small, frequent commits with clear, descriptive messages. This practice makes it easier to track changes and revert specific parts of the codebase if needed.</li>\n<li><strong>Use Meaningful Branch Names</strong>: Name branches based on the work they are doing, such as <code>feature/user-authentication</code> or <code>bugfix/login-issue</code>.</li>\n<li><strong>Perform Code Reviews</strong>: Use pull requests and code reviews as part of the merge process.</li>\n<li><strong>Keep a Clean Commit History</strong>: Use tools like <code>git rebase</code> to clean up your commit history before merging branches. A clean commit history makes it easier to understand the evolution of the project and debug issues.</li>\n<li><strong>Resolve Conflicts Early</strong>: When working on shared branches, regularly pull changes from the remote repository to minimize and resolve merge conflicts as early as possible.</li>\n</ul>\n<h3 id=\"tools-for-managing-version-control-github-gitlab-bitbucket\">Tools for Managing Version Control: GitHub, GitLab, Bitbucket</h3>\n<p>While Git itself is a command-line tool, various platforms provide user-friendly interfaces and additional features to manage Git repositories effectively.</p>\n<ul>\n<li><strong>GitHub</strong>: GitHub is the most popular platform for hosting Git repositories. It offers many collaboration features and on top of them, GitHub Actions integrates CI/CD directly into the platform, automating workflows from development to deployment.</li>\n<li><strong>GitLab</strong>: GitLab is a complete DevOps platform that includes Git repository management, CI/CD, issue tracking, and more. GitLab can be hosted on-premises, which is a significant advantage for organizations with strict data security requirements.</li>\n<li><strong>Bitbucket</strong>: Bitbucket, developed by Atlassian, integrates tightly with other Atlassian tools like Jira and Confluence. It supports Git and Mercurial and offers features like pull requests, code reviews, and CI/CD pipelines through Bitbucket Pipelines.</li>\n</ul>\n<p>As usual, the right set of DevOps tools will drastically depend on your specific context and needs.</p>\n<h2 id=\"10-knowledge-of-configuration-management\">10. Knowledge of Configuration Management</h2>\n<p>Configuration management is a critical component of DevOps, enabling teams to automate the setup and maintenance of systems and applications across different environments.</p>\n<h3 id=\"the-role-of-configuration-management-in-devops\">The Role of Configuration Management in DevOps</h3>\n<p>This practice involves maintaining the consistency of a system’s performance and functionality by ensuring that its configurations are properly set up and managed.</p>\n<p>In DevOps, where continuous integration and continuous deployment (CI/CD) are key practices, understanding how to manage your configurations ensures that environments are consistently configured, regardless of where they are deployed.</p>\n<p>Configure once and deploy endless times; that’s the DevOps way.</p>\n<p>The main reasons why this is such an important practice in DevOps are:</p>\n<ul>\n<li><strong>Automation tools</strong>: These tools automate the process of setting up and maintaining infrastructure, reducing manual effort and minimizing the risk of human error.</li>\n<li><strong>Consistency Across Environments</strong>: By defining configurations as code, conf. management ensures that all environments are configured identically.</li>\n<li><strong>Scalability</strong>: As systems scale, manually managing configurations becomes impractical. Configuration management allows you to scale infrastructure and applications, ensuring that new instances are configured correctly from the start.</li>\n<li><strong>Compliance and Auditing</strong>: These tools provide a clear and auditable record of system configurations. This is essential for compliance with industry standards and regulations.</li>\n<li><strong>Disaster Recovery</strong>: In the event of a system failure, configuration management tools can quickly restore systems to their desired state, reducing downtime and minimizing the impact on business operations.</li>\n</ul>\n<h3 id=\"devops-configuration-management-tools-to-master\">DevOps Configuration Management Tools to Master</h3>\n<p>Several tools have become staples in this landscape, each offering unique features and strengths. For example:</p>\n<ul>\n<li><strong>Ansible</strong>: Ansible, developed by Red Hat, is an open-source tool known for its simplicity and ease of use. It uses YAML for configuration files, known as playbooks, which are easy to read and write. Ansible is ideal for automating tasks like software installation, service management, and configuration updates across multiple servers.</li>\n<li><strong>Puppet</strong>: Puppet is a powerful tool that uses a declarative language to define system configurations. Puppet’s strength lies in its scalability and ability to manage large, complex environments.</li>\n<li><strong>Chef</strong>: Chef is another popular tool that uses a Ruby-based DSL (Domain-Specific Language) to write recipes and cookbooks, which define how systems should be configured and managed.</li>\n</ul>\n<h3 id=\"best-practices-for-managing-configurations-across-environments\">Best Practices for Managing Configurations Across Environments</h3>\n<p>Effective configuration management requires you to follow best practices that ensure consistency, reliability, and security across all environments.</p>\n<ol>\n<li><strong>Use Configuration as Code (CaC)</strong>: Treat configurations as code by storing them in version control systems like Git.</li>\n<li><strong>Modularize Configurations</strong>: Break down configurations into reusable modules or roles. This approach allows you to apply the same configuration logic across different environments.</li>\n<li><strong>Test Configurations in Multiple Environments</strong>: Before deploying configurations to production, test them thoroughly in staging or testing environments.</li>\n<li><strong>Implement Idempotency</strong>: Ensure that your processes are idempotent, meaning that applying the same configuration multiple times does not change the system after the first application.</li>\n<li><strong>Centralization</strong>: Use a centralized tool to maintain a single source of truth for all configurations.</li>\n<li><strong>Encrypt Sensitive Data</strong>: When managing configurations that include sensitive data (e.g., passwords, API keys), use encryption and secure storage solutions like HashiCorp Vault.</li>\n<li><strong>Document Configurations and Changes</strong>: Maintain detailed documentation for your configurations and any changes made to them.</li>\n<li><strong>Monitor and Audit Configurations</strong>: Continuously monitor configurations to detect and prevent drift (when configurations deviate from the desired state).</li>\n</ol>\n<h2 id=\"bonus-collaboration-and-communication-skills\">Bonus: Collaboration and Communication Skills</h2>\n<p>While technical skills are critical to becoming a successful DevOps engineer, the importance of soft skills—particularly collaboration and communication—cannot be ignored.</p>\n<p>In a DevOps environment, where cross-functional teams work closely together to deliver software, effective communication, and collaboration are essential for success.</p>\n<h3 id=\"importance-of-soft-skills-in-a-devops-environment\">Importance of Soft Skills in a DevOps Environment</h3>\n<p>DevOps is not just about tools and processes; it’s also about people and how they work together.</p>\n<p>Key reasons why soft skills are crucial in a DevOps environment:</p>\n<ul>\n<li><strong>Cross-Functional Collaboration</strong>: DevOps brings together diverse teams with different expertise—developers, operations, QA, security, and more.</li>\n<li><strong>Problem Solving and Conflict Resolution</strong>: In software development in general, issues and conflicts are inevitable. Strong communication skills help teams navigate these challenges, finding quick resolutions and keeping the focus on delivering value to the customer.</li>\n<li><strong>Agility and Adaptability</strong>: DevOps teams often need to adapt to changing requirements and priorities. Effective communication ensures that these changes are understood and implemented without issues.</li>\n</ul>\n<h3 id=\"tools-for-effective-collaboration-slack-microsoft-teams-jira\">Tools for Effective Collaboration: Slack, Microsoft Teams, Jira</h3>\n<p>Several tools are essential for facilitating communication and collaboration in a DevOps environment.</p>\n<p>Is there an absolute best one? The answer to that question is “no.”, the best option depends on your needs and preferences, so study the list and figure out yourself which software (or combination of) helps your specific teams.</p>\n<ul>\n<li><strong>Slack</strong>: Slack is a popular communication platform designed for team collaboration. It offers integration with other DevOps tools like GitHub, Jenkins, and Jira.</li>\n<li><strong>Microsoft Teams</strong>: Microsoft Teams is another powerful collaboration tool, especially popular in organizations using the Microsoft ecosystem.</li>\n<li><strong>Jira</strong>: Jira, developed by Atlassian, is a robust project management tool that helps teams track work, manage backlogs, and plan sprints. It’s particularly useful in Agile and DevOps environments where transparency and continuous improvement are key.</li>\n</ul>\n<h3 id=\"best-practices-for-fostering-a-collaborative-culture\">Best Practices for Fostering a Collaborative Culture</h3>\n<p>Building a collaborative culture in a DevOps environment requires effort and ongoing commitment.</p>\n<p>Here are some general guidelines you can follow to help achieve that collaborative environment:</p>\n<ol>\n<li><strong>Promote Open Communication</strong>: Encourage team members to communicate openly about their work, challenges, and ideas.</li>\n<li><strong>Regular Stand-Ups and Check-Ins</strong>: Implement daily stand-ups or regular check-ins to ensure that everyone is on the same page. Whether they’re in person, during a video call, or asynchronous, these check-ins help find blockers and solve them fast.</li>\n<li><strong>Use Collaborative Documentation</strong>: Maintain shared documentation using tools like Confluence or Google Docs.</li>\n<li><strong>Encourage Cross-Functional Training</strong>: Facilitate training sessions or workshops where team members from different disciplines can learn about each other’s work.</li>\n<li><strong>Foster a Blameless Culture</strong>: In a DevOps environment, mistakes and failures should be viewed as learning opportunities rather than reasons to assign blame. Encourage a blameless culture where issues are discussed openly, and the focus is on understanding the root cause.</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In the world of DevOps, mastering a diverse set of skills is not an option but rather an absolute must. From understanding the details of cloud computing and infrastructure as code to implementing monitoring and security practices, each skill plays a crucial role in fulfilling the main goal of any DevOps practice: enabling fast, reliable, and secure software delivery.</p>\n<p>For those looking to deepen their understanding or get started on their DevOps journey, here are some valuable resources:</p>\n<ul>\n<li><a href=\"https://roadmap.sh/devops\" target=\"_blank\"><strong>Expanded DevOps Roadmap</strong></a>: A comprehensive guide that details the full range of DevOps skills, tools, and technologies you need to master as a DevOps engineer.</li>\n<li><a href=\"https://roadmap.sh/devops?r=devops-beginner\" target=\"_blank\"><strong>Simplified DevOps Roadmap</strong></a>: A more streamlined version that highlights the core components of a DevOps career, making it easier for beginners to navigate the field.</li>\n<li><a href=\"https://roadmap.sh/questions/devops\" target=\"_blank\"><strong>DevOps interview questions</strong></a>: Test your knowledge of DevOps by answering popular interview questions, and challenge yourself to level up and ace your next job interview.</li>\n</ul>\n<p>Success in DevOps is about cultivating a well-rounded skill set that combines technical expertise with strong collaboration, communication, and problem-solving abilities.</p>\n<p>As the industry continues to evolve, so too will the tools, practices, and challenges that DevOps engineers face. By committing to continuous learning and staying adaptable, you can ensure that you remain at the forefront of this dynamic field, driving innovation and delivering value in your organization.</p>";

				const frontmatter$W = {"title":"10+ In-Demand DevOps Engineer Skills to Master","description":"Find out exactly what it takes to be a successful DevOps engineer with my recommendations for essential DevOps skills","authorId":"fernando","excludedBySlug":"/devops/skills","seo":{"title":"10+ In-Demand DevOps Engineer Skills to Master","description":"Find out exactly what it takes to be a successful DevOps engineer with my recommendations for essential DevOps skills","ogImageUrl":"https://assets.roadmap.sh/guest/devops-engineer-skills-tlace.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-09-12T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$W = "/workspace/src/data/guides/devops-skills.md";
				const url$W = undefined;
				function rawContent$W() {
					return "   \n                                                       \n                                                                                                                                    \n                  \n                                \n    \n                                                         \n                                                                                                                                      \n                                                                                \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Our top 10 DevOps engineer skills](https://assets.roadmap.sh/guest/devops-engineer-skills-tlace.jpg)\n\nThe role of the DevOps engineer is not always very well defined; some companies see it as the old-school sysadmin whose sole purpose is to take care of the platform's infrastructure. Others see it as the person in charge of the Terraform configuration files. In the end, properly understanding what DevOps is and what you should expect from this role is critical to properly taking advantage of it and adding the value it’s meant to be adding to your company.\n\nWhile you can work on becoming a DevOps engineer from scratch (there is actually a [DevOps roadmap](https://roadmap.sh/devops) for that), usually, a [DevOps engineer](https://roadmap.sh/devops/devops-engineer) is someone who has spent enough years either as a developer or in an operations role and wants to start helping solve the problems they’ve experienced throughout their entire career. This person sits between both sides and has intimate knowledge of one of them and a great deal of knowledge about the other side.\n\nWith that said, understanding everything there is to know to become a DevOps engineer who excels at their job is not trivial, and that’s why in this article, we’re going to cover the top 10 DevOps skills to help you level up your [career in DevOps](https://roadmap.sh/devops/career-path).\n\nThe top 10 DevOps engineer skills to master are:\n\n1. Understanding Linux and some scripting languages.\n2. Knowing how to set up your CI/CD pipelines.\n3. Embracing containerization and orchestration.\n4. Learning about Infrastructure as Code.\n5. Understanding cloud computing.\n6. Knowing how to monitor your infrastructure and manage your logs.\n7. Having a good grasp of security practices and tools.\n8. Know how to set up your networking and what that entails for your infrastructure.\n9. Knowing about version control.\n10. And finally, understanding configuration management.\n\nNow, let’s get started.\n\n## 1\\. Proficiency in Linux and Scripting\n\n![Bash code in terminal](https://assets.roadmap.sh/guest/bash-code-in-terminal-zj6j1.png)\n\nLinux is one of the most common operating systems in the world of software development because of its incredible support, performance, and flexibility, which makes mastering it one of the main DevOps skills to work on.\n\nGranted, the word “master” is loaded and there are many aspects of the OS that you don’t really need to worry about these days (with all the containers and IaC tools around), however without pushing yourself too hard and becoming a full-blown developer, investing part of your time into learning one or more scripting languages is definitely a good call.\n\nAs a DevOps engineer, you will be scripting and automating tasks, so pick a couple of popular scripting languages and make sure you understand them enough to get the job done. For example, picking Bash is a safe bet, as Bash is the native scripting language in most Linux distros. On top of that, you can pick something like Python or Ruby; both are great options. With an English-like syntax that’s very easy to read and understand and a set of very powerful [DevOps automation](https://roadmap.sh/devops/automation) libraries and tools available, you should be more than fine. For example, if you’re picking Python, you’ll be able to work on Ansible playbooks or custom modules, and if you go with Ruby, you can write Chef cookbooks.\n\nIn the end, it’s either about your own preference or the company’s standards if there are any, just pick one and figure out the tools at your disposal.\n\n## 2\\. Understanding of Continuous Integration and Continuous Deployment (CI/CD)\n\n![continuous development vs continuous integration](https://assets.roadmap.sh/guest/continous-development-vs-continuous-integration-l2fak.png)\n\nContinuous Integration and Continuous Deployment (CI/CD) form the backbone of a successful DevOps methodology. As a DevOps engineer, mastering CI/CD is non-negotiable.\n\n### Understanding CI/CD\n\nAt its core, Continuous Integration (CI) is about automatically integrating code changes from multiple contributors into a shared repository as many times a day as needed (which can be one, zero, or hundreds; the number should be irrelevant).\n\nThe idea is to catch and fix integration bugs early and often, which is crucial for maintaining the health of your project.\n\nOn the other hand, Continuous Deployment (CD) takes this a step further by automatically deploying the integrated code to production environments once it passes all necessary tests. Together, both practices minimize manual intervention, reducing errors and allowing for rapid and reliable delivery of software.\n\n### Key Tools for CI/CD\n\nTo effectively implement CI/CD pipelines, you'll need to be proficient with the tools that make it possible. There are tons of them out there; some of the most common (and arguably, best ones) are:\n\n* **Jenkins**: An open-source automation server, Jenkins is highly customizable and supports a huge number of integration plugins.\n* **GitLab CI**: Part of the larger GitLab platform, GitLab CI is tightly integrated with GitLab's version control and issue-tracking features.\n* **CircleCI**: Known for its speed and simplicity, CircleCI is perfect for environments that prioritize cloud-native solutions. It provides a user-friendly interface and integrates well with popular tools like Docker, AWS, and Kubernetes.\n* **GitHub Actions**: GitHub Actions is a powerful CI/CD tool integrated directly into GitHub, allowing developers to automate, test, and deploy their code right from their repositories. It supports custom workflows, integration with [other DevOps tools](https://roadmap.sh/devops/tools), and provides flexibility to run complex automation tasks across multiple environments.\n\n### Best Practices for Setting Up and Managing CI/CD Pipelines\n\nSetting up and managing CI/CD pipelines isn’t just about getting the tools to work; it’s about ensuring that they work well (whatever “well” means for your specific context).\n\nHere are some best practices to follow:\n\n1. **Start Small and Iterate**: Don’t try to automate everything at once. Start with the most critical parts of your workflow, then gradually expand the pipeline.\n2. **Ensure Fast Feedback**: The faster your CI/CD pipeline can provide feedback, the quicker your team can address issues.\n3. **Maintain a Stable Master Branch**: Always keep your master branch in a deployable state. Implement branch protection rules and require code reviews and automated tests to pass before any changes are merged.\n4. **Automate Everything Possible**: From testing to deployment, automate as many steps in your pipeline as possible.\n5. **Monitor and Optimize**: Continuously monitor your CI/CD pipelines for performance bottlenecks, failures, and inefficiencies. Use this data to refine your process.\n6. **Security Considerations**: Integrate security checks into your CI/CD pipelines to catch vulnerabilities early. Tools like static code analysis, dependency checking, and container scanning can help ensure that your code is secure before it reaches production.\n\n## 3\\. Containerization and Orchestration\n\nThese technologies are at the heart of modern DevOps practices, enabling scalability, portability, and efficiency.\n\n### Basics of Containerization\n\nContainerization is a method of packaging applications and their dependencies into isolated units called containers. Unlike traditional virtual machines, which require a full operating system, containers share the host OS’s kernel while running isolated user spaces.\n\nThis makes containers not only lightweight but also faster to start, and more resource-efficient.\n\nThere are many benefits to this technology, as you can probably glean by now, but the primary benefits include:\n\n* **Portability**: Containers encapsulate everything an application needs to run, making it easy to move them across different environments. As long as there is a way to run containers in an OS, then your code can run on it.\n* **Scalability**: Containers can be easily scaled up or down based on demand. This flexibility is crucial when you need to handle dynamic workloads.\n* **Consistency**: By using containers, you can ensure that your applications run the same way across different environments, reducing the infamous \"it works on my machine\" problem.\n* **Isolation**: With container applications, don’t use resources outside of the ones defined for them. This means each application is isolated from others running on the same host server, avoiding interference.\n\n### Key Containerization Tools\n\nWhen it comes to containerization tools, Docker is the most popular and widely adopted alternative. However, other tools like Podman are also gaining traction, especially in environments that prioritize security and compatibility with Kubernetes.\n\nBoth tools offer robust features for managing containers, but the choice between them often comes down to specific use cases, security requirements, and integration with other tools in your DevOps toolkit.\n\n### Orchestration Tools\n\nWhile containerization simplifies application deployment, managing containers at scale requires something else: orchestration.\n\nOrchestration tools like Kubernetes and Docker Swarm automate the deployment, scaling, and management of containerized applications, ensuring that they run efficiently and reliably across distributed environments.\n\n* **Kubernetes**: Kubernetes is the de facto standard for container orchestration. Kubernetes provides a comprehensive platform for automating the deployment, scaling, and operation of containerized applications by managing clusters of containers.\n* **Docker Swarm**: Docker Swarm is Docker’s native clustering and orchestration tool. It’s simpler to set up and use compared to Kubernetes, making it a good choice for smaller teams or less complex projects.\n\n## 4\\. Infrastructure as Code (IaC)\n\nInfrastructure as Code (IaC) has become a foundational practice for DevOps teams. IaC allows you to manage and provision your infrastructure through code, offering a level of automation and consistency that manual processes simply can’t match.\n\n### Importance of IaC in Modern DevOps Practices\n\nIaC is crucial in modern DevOps because it brings consistency, scalability, and speed to infrastructure.\n\nIaC allows teams to define their infrastructure in code, which can be versioned, reviewed, and tested just like application code. If you think about it, IaC is the perfect example of what DevOps means: the merger of both worlds to achieve something that is greater than the sum of its parts.\n\nNowadays, IaC is not just a “best practice” but rather, an indispensable part of a DevOps engineer’s workflow, and here is why:\n\n* **Consistency Across Environments**: As we’ve already mentioned, with IaC, you can ensure that your environments are all configured exactly the same way.\n* **Scalability**: Whether you need to add more servers, databases, or other resources, you can do it quickly and reliably by updating your code and reapplying it.\n* **Version Control and Collaboration**: By storing your infrastructure configurations in a version control system like Git, you enable better collaboration and control.\n* **Automation and Efficiency**: Once your infrastructure is defined in code, you can automate the provisioning, updating, and teardown of resources, allowing your team to focus on higher-value tasks.\n\n### Key IaC Tools: Terraform, Ansible, Chef, Puppet\n\nSeveral tools have become go-to solutions for IaC, each offering unique strengths.\n\nHere are some of the most popular ones; however, feel free to pick others if they fit better in your particular use case/context:\n\n* **Terraform**: Terraform is one of the most widely used IaC tools. It’s cloud-agnostic, meaning you can use it to manage infrastructure across different cloud providers like AWS, Azure, and Google Cloud.\n* **Ansible**: While Ansible’s main focus is automating configuration tasks across multiple servers, it is capable of also working as an IaC tool by providing support for infrastructure provisioning, application deployment, and orchestration.\n* **Chef**: Chef is another strong player in the configuration management space. It uses a Ruby-based language to create \"recipes\" that automate the deployment and management of infrastructure.\n* **Puppet**: Puppet offers a solid solution for configuration management, using its own declarative language to define the state of your infrastructure.\n\n### Best Practices for Writing and Managing Infrastructure Code\n\nLike with any coding project, writing clean and easy-to-read code will help a great deal in making the project itself a success. That’s no different in the case of IaC, the words “clean code” need to be engraved in every DevOp’s mind.\n\nAnd this is what “clean” means in this context:\n\n1. **Modularize Your Code**: Break down your infrastructure code into smaller, reusable modules. This approach is especially useful for larger projects where the infrastructure files grow in number; this way you can reuse sections and simplify maintenance.\n2. **Use Version Control**: Store all your infrastructure code in a version control system like Git. This practice enables you to track changes, collaborate with others, and roll back if something goes wrong.\n3. **Test Your Infrastructure Code**: Just like application code, infrastructure code should be tested. Tools like Terraform provide validation for configurations, and frameworks like Inspec or Testinfra can verify that your infrastructure is working as expected after deployment.\n4. **Follow the Principle of Least Privilege**: When defining infrastructure, ensure that each component has only the permissions it needs to perform its function. This practice reduces security risks by limiting the potential impact of a breach or misconfiguration.\n5. **Keep Secrets Secure**: Avoid the rooky mistake of hardcoding sensitive information, such as API keys or passwords, directly into your infrastructure code. Use tools like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to manage secrets securely.\n6. **Document Your Code**: Just like application code, your infrastructure code should also be commented on and explained, not for you now, but for you next week or someone else next month. The easier it is to understand the code, the faster they’ll be able to work with it.\n7. **Integrate IaC into CI/CD Pipelines**: Automate as much as possible in the IaC workflow. That includes the validation, testing, and deployment of your infrastructure code by integrating it into your continuous integration and continuous deployment (CI/CD) pipelines. This ensures that your environments are always up-to-date and consistent with your codebase, reducing the risk of drift.\n\n## 5\\. Cloud Computing Expertise\n\n![cloud providers](https://assets.roadmap.sh/guest/cloud-providers-wb1f5.png)\n\nIn the DevOps ecosystem, cloud computing is more than just a trend companies are starting to follow—it's a fundamental element that defines modern software development and deployment practices.\n\nAnd because of that, it’s one of the main DevOps skills you’ll want to develop.\n\n### Importance of Cloud Platforms in DevOps\n\nCloud platforms have revolutionized the way software is developed, deployed, and managed. The cloud allows organizations to leverage vast computing resources on demand, scale their operations effortlessly, and reduce infrastructure costs.\n\nSpecifically for DevOps teams, cloud platforms offer several key benefits:\n\n* **Scalability**: One of the most significant advantages of cloud computing is its ability to scale resources up or down based on demand. This elasticity is crucial for handling varying workloads, ensuring that applications remain responsive and, most importantly (as some would argue), cost-effective.\n* **Speed and Agility**: Provisioning of resources can be done with just a few clicks, allowing DevOps teams to spin up development, testing, and production environments in minutes. This speed accelerates the software development lifecycle, enabling faster releases and more frequent updates.\n* **Global Reach**: Cloud providers operate data centers around the world, making it easier for organizations to deploy applications closer to their users, reducing latency and improving performance.\n* **Cost Efficiency**: This is a recurring topic when discussing cloud platforms, as they help reduce the need for large upfront capital investments in hardware. Instead, organizations can pay for the resources they use, optimizing costs and reducing waste.\n* **Automation**: Cloud environments are highly automatable, allowing DevOps teams to automate infrastructure provisioning, scaling, and management.\n\n### Key Cloud Providers: AWS, Azure, Google Cloud Platform (GCP)\n\nWhen it comes to cloud providers, three providers dominate the market: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP). While they’re not the only ones, and in some regions of the world, they’re not even the top providers. In general, they own most of the cloud market.\n\nEach of them offers a vast array of services and tools that cater to different needs, making them the go-to choices for DevOps professionals.\n\n* **Amazon Web Services (AWS)**: AWS is the largest and most mature of the three, offering an extensive range of services, including computing power (EC2), storage (S3), databases (RDS), and more. AWS is known for its large number of features, including advanced networking, security, and analytics tools. For DevOps engineers, AWS provides powerful services like AWS Lambda (serverless computing), AWS CodePipeline (CI/CD), and CloudFormation (IaC), which are essential for building and managing cloud-native applications.\n* **Microsoft Azure**: Azure is a close competitor to AWS, particularly strong in enterprise environments where Microsoft technologies like Windows Server, SQL Server, and .NET are prevalent. Azure offers a very rich list of cloud services, including, like the other two, virtual machines, AI, and machine learning tools. Azure also offers DevOps-specific services like Azure DevOps, which integrates CI/CD, version control, and agile planning into a single platform. Azure's hybrid cloud capabilities also make it a popular choice for organizations that need to integrate on-premises infrastructure with cloud resources.\n* **Google Cloud Platform (GCP)**: GCP, while newer to the cloud market compared to AWS and Azure, has quickly gained a reputation for its data analytics, machine learning, and container orchestration services. Google’s Kubernetes Engine (GKE), for instance, is quite liked by the DevOps community for managing containerized applications at scale. GCP is also known for its strong support of open-source technologies, making it a favorite among developers who prioritize flexibility and innovation.\n\n### Understanding Cloud-Native Tools, Services, and Architectural Patterns\n\nAnother key technical skill for DevOps engineers is to understand not only cloud-native tools and services but also the architectural patterns that define modern application development.\n\nThese patterns define how applications are structured and interact with cloud infrastructure, directly affecting areas such as scalability, resilience, and maintainability.\n\n* **Microservices Architecture**: In a microservices architecture, applications are composed of small, independent services that communicate over APIs. Key tools to understand by DevOps engineers include **API gateways** (like AWS API Gateway), **service meshes** (such as Istio), and **message queues** (like Amazon SQS or Google Pub/Sub).\n* **Service-Oriented Architecture (SOA)**: SOA is a broader (and older) architectural style where services are designed to provide specific business functionalities and can communicate with each other over a network. Tools like **Enterprise Service Buses (ESBs)** and **message brokers** (such as RabbitMQ) are often used to facilitate SOA architectures.\n* **Serverless Architecture**: Serverless computing allows developers to build and deploy applications without managing the underlying infrastructure. In a serverless architecture, code is executed in response to events, such as HTTP requests or changes in data, using services like **AWS Lambda**, **Azure Functions**, or **Google Cloud Functions**.\n* **Event-Driven Architecture**: In an event-driven architecture, applications respond to events in real-time, often using tools like **event streams** (e.g., Apache Kafka) and **message queues**.\n\n## 6\\. Monitoring and Logging\n\n![monitoring logging servers](https://assets.roadmap.sh/guest/monitoring-logging-servers-ztf1a.png)\n\nMonitoring and logging are vital components of a robust DevOps strategy. They provide visibility into the health and performance of your systems, allowing you to detect issues early, troubleshoot, and ensure the reliability of your applications.\n\n### Importance of Monitoring and Logging for Maintaining System Health\n\nNo matter what type of application you’re running, maintaining the health and performance of your systems is crucial if your business depends on it.\n\nMonitoring and logging has turned into one of the most relevant DevOps skills out there.\n\nThrough monitoring you can track the performance of your infrastructure and applications in real-time, alerting you to any potential problems such as resource bottlenecks, slowdowns, or outages.\n\nLogging, on the other hand, captures detailed records of system events and user interactions, providing invaluable information for diagnosing problems and understanding system behavior.\n\nThe reasons why you want to have effective monitoring and logging, are:\n\n* **Proactive Issue Detection**: By continuously monitoring system metrics, you can detect issues before they escalate into critical problems, reducing downtime and improving overall system reliability.\n* **Troubleshooting and Root Cause Analysis**: Logs provide detailed information about system events, making it easier to pinpoint the root cause of issues. This speeds up the resolution process and minimizes the impact on users.\n* **Performance Optimization**: Monitoring allows you to track key performance indicators (KPIs) and identify areas where your systems can be optimized, leading to better resource utilization and cost savings.\n* **Compliance and Auditing**: Logging is essential for maintaining compliance with regulatory requirements. Logs can be used to audit system access, track changes, and ensure that your systems meet security and operational standards.\n\n### Key Tools for Monitoring: Prometheus, Grafana, Nagios\n\nSeveral tools have become essential for monitoring systems in DevOps environments. Each offers unique features tailored to different needs, from real-time metrics collection to visual dashboards and alerting.\n\n* **Prometheus**: Prometheus is an open-source monitoring tool designed for reliability and scalability. It collects real-time metrics from your systems and applications, stores them in a time-series database, and supports powerful query languages for analysis.\n* **Grafana**: Grafana is a popular open-source platform for visualizing monitoring data. It integrates with Prometheus and other data sources, allowing you to create interactive, customizable dashboards that provide insights into system performance at a glance.\n* **Nagios**: Nagios is one of the oldest and most widely used monitoring tools. It provides comprehensive monitoring of network services, host resources, and infrastructure components.\n\n### Logging Tools: ELK Stack (Elasticsearch, Logstash, Kibana), Splunk\n\nEffective logging requires tools that can collect, store, and analyze large volumes of log data efficiently, given how much information modern systems can generate.\n\nThe following tools are among the most widely used in the industry:\n\n* **ELK Stack**: The ELK Stack is a powerful open-source solution for managing logs. It consists of **Elastic** for storing and searching logs, **Logstash** to act as a data processing/ingestion pipeline, and **Kibana** for data visualization.\n* **Splunk**: Splunk is a commercial tool that offers advanced log management and analysis capabilities. It can ingest data from a wide variety of sources, index it in real time, and provide powerful search and reporting features.\n\n### Best Practices for Setting Up Effective Monitoring and Logging Systems\n\nWhile both practices are crucial for a successful DevOps strategy, if you ignore best practices the results you’ll get will be subpar, at best.\n\nInstead, try to follow these (or some of them) guidelines to ensure you get the most out of your monitoring and logging efforts.\n\n1. **Define Clear Objectives**: Before setting up your monitoring and logging systems, define what you want to achieve. Identify the key metrics and logs that are most critical to your operations, such as CPU usage, memory consumption, application response times, and error rates.\n2. **Implement Comprehensive Monitoring**: Monitor all layers of your infrastructure, from hardware and networks to applications and services. Use a combination of tools to ensure that no aspect of your system goes unmonitored. If you ignore one area, you’ll end up having blindspots when debugging and trying to troubleshoot problems.\n3. **Centralize Log Management**: Centralizing your logs in a single platform like the ELK Stack or Splunk allows for easier management, search, and analysis. This centralization is particularly important in distributed systems where logs are generated across multiple servers and services.\n4. **Set Up Alerts and Notifications**: Monitoring without alerting is like watching a movie without any sound; if you constantly pay attention to the picture, you might figure out what’s happening on a general level, but you’ll miss the details. And with monitoring, it’s the same thing: set up alerts and notifications so when a threshold is exceeded (say, the number of error responses in the last 10 minutes), you’ll know, even if it’s in the middle of the night.\n5. **Ensure Scalability**: As your infrastructure grows, your monitoring and logging systems need to scale accordingly. Choose tools that can handle increasing volumes of data without compromising performance. In other words, don’t turn your logging/monitoring setup into a bottleneck for your platform.\n6. **Regularly Review and Tune**: Continuously review and adjust your monitoring and logging configurations. As your systems evolve, your monitoring and logging needs may change, requiring you to add new metrics, refine alert thresholds, or optimize data retention policies.\n7. **Secure Your Monitoring and Logging Infrastructure**: Protect your monitoring and logging data from unauthorized access. Ensure that logs containing sensitive information are encrypted and access to monitoring dashboards is restricted based on roles.\n\n## 7\\. Security Practices and Tools (DevSecOps)\n\nAs DevOps has transformed software development by integrating development and operations teams together into a seamless process, security can no longer be treated as an afterthought. The rise of DevSecOps emphasizes the need for DevOps engineers to develop their security skills.\n\n### Integrating Security into the DevOps Pipeline\n\nDevSecOps shifts the classical paradigm (having security reviews happen at the end of the development lifecycle) by integrating security into every phase of the DevOps pipeline—from code development to deployment and beyond. That, in turn, involves the following:\n\n* **Shift-Left Security**: This principle involves moving security practices earlier in the SDLC, such as during the coding and design phases.\n* **Continuous Security**: Security checks should be continuous and automated throughout the pipeline. This ensures that each code change, build, and deployment is evaluated for security risks.\n* **Collaboration and Culture**: DevSecOps is as much about culture as it is about tools. Developers, operations, and security teams must collaborate closely, sharing responsibility for security.\n\n### Key Security Practices\n\nTo effectively integrate security into the DevOps pipeline, certain practices are essential:\n\n* **Automated Security Testing**: Automation is key to scaling security practices within a rapidly growing DevOps environment. Automated security testing involves integrating security checks into your CI/CD pipelines. This can include static application security testing (SAST) to analyze source code for security flaws, dynamic application security testing (DAST) to evaluate running applications, and interactive application security testing (IAST) that combines both approaches.\n* **Vulnerability Scanning**: Regular vulnerability scanning is crucial for identifying and mitigating risks across your infrastructure and applications. Scanning tools can detect known vulnerabilities in code, dependencies, container images, and cloud configurations.\n* **Security as Code**: Just as Infrastructure as Code (IaC) treats infrastructure configuration as code, Security as Code applies the same principles to security configurations. This involves automating the provisioning and management of security controls, policies, and compliance checks.\n\n### Tools for DevSecOps\n\nSeveral tools have emerged to support the integration of security into the DevOps practice. These tools help automate security tasks, identify vulnerabilities, and enforce security policies, making it easier for teams to adopt DevSecOps practices.\n\nSome examples are:\n\n* **Aqua Security**: Aqua Security specializes in securing cloud-native applications, particularly those that run in containers. Aqua provides a comprehensive platform for securing the entire container lifecycle, from development to runtime.\n* **Snyk**: Snyk is a developer-friendly security platform that helps identify and fix vulnerabilities in open-source libraries, container images, and infrastructure as code. Snyk integrates with CI/CD pipelines, providing automated security testing and real-time feedback.\n* **Trivy**: Trivy is an open-source vulnerability scanner that is particularly well-suited for container environments. It scans container images, file systems, and Git repositories for known vulnerabilities, misconfigurations, and secrets.\n\n## 8\\. Networking and System Administration\n\n![list of linux processes](https://assets.roadmap.sh/guest/list-of-linux-processes-rnqzo.png)\n\nNetworking and system administration are foundational DevOps skills. These disciplines ensure that the infrastructure supporting your applications is robust, secure, and efficient.\n\n### Which networking concepts are most relevant to DevOps?\n\nNetworking is the backbone of any IT infrastructure, connecting systems, applications, and users. A solid understanding of networking concepts is crucial for DevOps engineers to design, deploy, and manage systems effectively.\n\nSome of the most important concepts include:\n\n* **TCP/IP Networking**: TCP/IP (Transmission Control Protocol/Internet Protocol) is the fundamental protocol suite for the Internet and most private networks. Understanding how TCP/IP works is essential.\n* **Network Topologies**: Network topology refers to the arrangement of different elements (links, nodes, etc.) in a computer network. Common topologies include star, mesh, and hybrid configurations.\n* **Load Balancing**: Load balancing is the process of distributing network or application traffic across multiple servers to ensure no single server becomes overwhelmed. DevOps engineers need to understand different load balancing algorithms (round-robin, least connections, IP hash) and how to implement load balancers (like NGINX, HAProxy, or cloud-native solutions).\n* **Firewalls and Security Groups**: Firewalls are essential for controlling incoming and outgoing network traffic based on predetermined security rules. In cloud environments, security groups serve a similar function by acting as virtual firewalls for instances.\n* **DNS (Domain Name System)**: DNS is the system that translates human-readable domain names (like [www.example.com](http://www.example.com)) into IP addresses that computers use to identify each other on the network.\n* **VPNs and Secure Communication**: Virtual Private Networks (VPNs) allow secure communication over public networks by encrypting data between remote devices and the network.\n\n### System Administration Tasks and Best Practices\n\nSystem administration involves the management of computer systems, including servers, networks, and applications. DevOps engineers often take on system administration tasks to ensure that infrastructure is stable, secure, and performing optimally.\n\nSome of these tasks include:\n\n* **User and Permission Management**: Managing user accounts, groups, and permissions is fundamental to system security.\n* **Server Configuration and Management**: Configuring servers to meet the needs of applications and ensuring they run efficiently is a core task.\n* **System Monitoring and Maintenance**: As we’ve already mentioned,  regular monitoring of system performance metrics is essential for proactive maintenance.\n* **Backup and Recovery**: Regular backups of data and configurations are crucial for disaster recovery.\n* **Patch Management**: Keeping systems up to date with the latest security patches and software updates is critical for maintaining your infrastructure secure.\n* **Security Hardening**: Security hardening involves reducing the attack surface of a system by configuring systems securely, removing unnecessary services, and applying best practices.\n* **Script Automation**: Developing your automation skills is key, as you’ll be automating routine tasks with scripts every day. Common scripting languages include Bash for Linux and PowerShell for Windows.\n\n### Best Practices for Networking and System Administration\n\n1. **Automate Repetitive Tasks**: Use automation tools and scripts to handle routine tasks such as backups, patch management, and monitoring setup.\n2. **Implement Redundancy and Failover**: Design your network and systems with redundancy and failover mechanisms. This includes setting up redundant network paths, using load balancers, and configuring failover for critical services to minimize downtime.\n3. **Enforce Strong Security Practices**: Regularly audit user access, apply patches promptly, and follow security best practices for hardening systems.\n4. **Regularly Review and Update Documentation**: Keep detailed documentation of your network configurations, system setups, and processes.\n5. **Monitor Proactively**: Set up comprehensive monitoring for all critical systems and networks. Alerts should be used to catch issues early, and logs should be reviewed regularly to spot potential security or performance issues.\n6. **Test Disaster Recovery Plans**: Regularly test your backup and disaster recovery procedures to ensure they work as expected.\n\n## 9\\. Familiarity with Version Control Systems\n\nVersion control systems (VCS) are at the center of modern software development, enabling teams to collaborate, track changes, and manage their codebase.\n\nIn a DevOps environment, where continuous integration and continuous deployment (CI/CD) are central practices, mastering version control is not just beneficial—it's essential.\n\n### Importance of Version Control in DevOps Workflows\n\nVersion control is crucial in DevOps for several reasons:\n\n* **Collaboration**: Version control systems allow multiple developers to work on the same codebase simultaneously without overwriting each other's changes.\n* **Change Tracking**: Every change to the codebase is tracked, with a history of who made the change, when, and why.\n* **Branching and Merging**: Version control systems enable the creation of branches, allowing developers to work on new features, bug fixes, or experiments in isolation.\n* **Continuous Integration/Continuous Deployment (CI/CD)**: Version control is crucial to CI/CD pipelines, where code changes are automatically tested, integrated, and deployed.\n* **Disaster Recovery**: In case of errors or issues, version control allows you to revert to previous stable versions of the codebase, minimizing downtime and disruption.\n\n### Mastering Git: Key Commands, Workflows, and Best Practices\n\nGit is the most widely used version control system in the DevOps world, known for its flexibility, performance, and breadth of features. Having a deep understanding of Git is crucial for any DevOps engineer, as it is the foundation upon which most CI/CD workflows are built.\n\nThe key commands you should try to master first are `init`, `clone`, `commit`, `pull`/`push`, `branch`, `checkout`, `merge`, and one that is definitely useful in your context: `log`.\n\n#### Git Workflows\n\nGit can be used as the driving force for your development workflow. However, there are many ways to use it. Some of the most common ones are:\n\n* **Feature Branch Workflow**: Developers create a new branch for each feature or bug fix. Once complete, the branch is merged back into the main branch, often through a pull request, where code reviews and automated tests are conducted.\n* **Gitflow Workflow**: A more structured workflow that uses feature branches, a develop branch for integration, and a master branch for production-ready code. It also includes hotfix branches for urgent bug fixes in production.\n* **Forking Workflow**: Common in open-source projects, this workflow involves forking a repository, making changes in the fork, and then submitting a pull request to the original repository for review and integration.\n\n#### Best practices when using Git\n\n* **Commit Often, Commit Early**: Make small, frequent commits with clear, descriptive messages. This practice makes it easier to track changes and revert specific parts of the codebase if needed.\n* **Use Meaningful Branch Names**: Name branches based on the work they are doing, such as `feature/user-authentication` or `bugfix/login-issue`.\n* **Perform Code Reviews**: Use pull requests and code reviews as part of the merge process.\n* **Keep a Clean Commit History**: Use tools like `git rebase` to clean up your commit history before merging branches. A clean commit history makes it easier to understand the evolution of the project and debug issues.\n* **Resolve Conflicts Early**: When working on shared branches, regularly pull changes from the remote repository to minimize and resolve merge conflicts as early as possible.\n\n### Tools for Managing Version Control: GitHub, GitLab, Bitbucket\n\nWhile Git itself is a command-line tool, various platforms provide user-friendly interfaces and additional features to manage Git repositories effectively.\n\n* **GitHub**: GitHub is the most popular platform for hosting Git repositories. It offers many collaboration features and on top of them, GitHub Actions integrates CI/CD directly into the platform, automating workflows from development to deployment.\n* **GitLab**: GitLab is a complete DevOps platform that includes Git repository management, CI/CD, issue tracking, and more. GitLab can be hosted on-premises, which is a significant advantage for organizations with strict data security requirements.\n* **Bitbucket**: Bitbucket, developed by Atlassian, integrates tightly with other Atlassian tools like Jira and Confluence. It supports Git and Mercurial and offers features like pull requests, code reviews, and CI/CD pipelines through Bitbucket Pipelines.\n\nAs usual, the right set of DevOps tools will drastically depend on your specific context and needs.\n\n## 10\\. Knowledge of Configuration Management\n\nConfiguration management is a critical component of DevOps, enabling teams to automate the setup and maintenance of systems and applications across different environments.\n\n### The Role of Configuration Management in DevOps\n\nThis practice involves maintaining the consistency of a system's performance and functionality by ensuring that its configurations are properly set up and managed.\n\nIn DevOps, where continuous integration and continuous deployment (CI/CD) are key practices, understanding how to manage your configurations ensures that environments are consistently configured, regardless of where they are deployed.\n\nConfigure once and deploy endless times; that’s the DevOps way.\n\nThe main reasons why this is such an important practice in DevOps are:\n\n* **Automation tools**: These tools automate the process of setting up and maintaining infrastructure, reducing manual effort and minimizing the risk of human error.\n* **Consistency Across Environments**: By defining configurations as code, conf. management ensures that all environments are configured identically.\n* **Scalability**: As systems scale, manually managing configurations becomes impractical. Configuration management allows you to scale infrastructure and applications, ensuring that new instances are configured correctly from the start.\n* **Compliance and Auditing**: These tools provide a clear and auditable record of system configurations. This is essential for compliance with industry standards and regulations.\n* **Disaster Recovery**: In the event of a system failure, configuration management tools can quickly restore systems to their desired state, reducing downtime and minimizing the impact on business operations.\n\n### DevOps Configuration Management Tools to Master\n\nSeveral tools have become staples in this landscape, each offering unique features and strengths. For example:\n\n* **Ansible**: Ansible, developed by Red Hat, is an open-source tool known for its simplicity and ease of use. It uses YAML for configuration files, known as playbooks, which are easy to read and write. Ansible is ideal for automating tasks like software installation, service management, and configuration updates across multiple servers.\n* **Puppet**: Puppet is a powerful tool that uses a declarative language to define system configurations. Puppet’s strength lies in its scalability and ability to manage large, complex environments.\n* **Chef**: Chef is another popular tool that uses a Ruby-based DSL (Domain-Specific Language) to write recipes and cookbooks, which define how systems should be configured and managed.\n\n### Best Practices for Managing Configurations Across Environments\n\nEffective configuration management requires you to follow best practices that ensure consistency, reliability, and security across all environments.\n\n1. **Use Configuration as Code (CaC)**: Treat configurations as code by storing them in version control systems like Git.\n2. **Modularize Configurations**: Break down configurations into reusable modules or roles. This approach allows you to apply the same configuration logic across different environments.\n3. **Test Configurations in Multiple Environments**: Before deploying configurations to production, test them thoroughly in staging or testing environments.\n4. **Implement Idempotency**: Ensure that your processes are idempotent, meaning that applying the same configuration multiple times does not change the system after the first application.\n5. **Centralization**: Use a centralized tool to maintain a single source of truth for all configurations.\n6. **Encrypt Sensitive Data**: When managing configurations that include sensitive data (e.g., passwords, API keys), use encryption and secure storage solutions like HashiCorp Vault.\n7. **Document Configurations and Changes**: Maintain detailed documentation for your configurations and any changes made to them.\n8. **Monitor and Audit Configurations**: Continuously monitor configurations to detect and prevent drift (when configurations deviate from the desired state).\n\n## Bonus: Collaboration and Communication Skills\n\nWhile technical skills are critical to becoming a successful DevOps engineer, the importance of soft skills—particularly collaboration and communication—cannot be ignored.\n\nIn a DevOps environment, where cross-functional teams work closely together to deliver software, effective communication, and collaboration are essential for success.\n\n### Importance of Soft Skills in a DevOps Environment\n\nDevOps is not just about tools and processes; it's also about people and how they work together.\n\nKey reasons why soft skills are crucial in a DevOps environment:\n\n* **Cross-Functional Collaboration**: DevOps brings together diverse teams with different expertise—developers, operations, QA, security, and more.\n* **Problem Solving and Conflict Resolution**: In software development in general, issues and conflicts are inevitable. Strong communication skills help teams navigate these challenges, finding quick resolutions and keeping the focus on delivering value to the customer.\n* **Agility and Adaptability**: DevOps teams often need to adapt to changing requirements and priorities. Effective communication ensures that these changes are understood and implemented without issues.\n\n### Tools for Effective Collaboration: Slack, Microsoft Teams, Jira\n\nSeveral tools are essential for facilitating communication and collaboration in a DevOps environment.\n\nIs there an absolute best one? The answer to that question is “no.”, the best option depends on your needs and preferences, so study the list and figure out yourself which software (or combination of) helps your specific teams.\n\n* **Slack**: Slack is a popular communication platform designed for team collaboration. It offers integration with other DevOps tools like GitHub, Jenkins, and Jira.\n* **Microsoft Teams**: Microsoft Teams is another powerful collaboration tool, especially popular in organizations using the Microsoft ecosystem.\n* **Jira**: Jira, developed by Atlassian, is a robust project management tool that helps teams track work, manage backlogs, and plan sprints. It’s particularly useful in Agile and DevOps environments where transparency and continuous improvement are key.\n\n### Best Practices for Fostering a Collaborative Culture\n\nBuilding a collaborative culture in a DevOps environment requires effort and ongoing commitment.\n\nHere are some general guidelines you can follow to help achieve that collaborative environment:\n\n1. **Promote Open Communication**: Encourage team members to communicate openly about their work, challenges, and ideas.\n2. **Regular Stand-Ups and Check-Ins**: Implement daily stand-ups or regular check-ins to ensure that everyone is on the same page. Whether they’re in person, during a video call, or asynchronous, these check-ins help find blockers and solve them fast.\n3. **Use Collaborative Documentation**: Maintain shared documentation using tools like Confluence or Google Docs.\n4. **Encourage Cross-Functional Training**: Facilitate training sessions or workshops where team members from different disciplines can learn about each other's work.\n5. **Foster a Blameless Culture**: In a DevOps environment, mistakes and failures should be viewed as learning opportunities rather than reasons to assign blame. Encourage a blameless culture where issues are discussed openly, and the focus is on understanding the root cause.\n\n## Conclusion\n\nIn the world of DevOps, mastering a diverse set of skills is not an option but rather an absolute must. From understanding the details of cloud computing and infrastructure as code to implementing monitoring and security practices, each skill plays a crucial role in fulfilling the main goal of any DevOps practice: enabling fast, reliable, and secure software delivery.\n\nFor those looking to deepen their understanding or get started on their DevOps journey, here are some valuable resources:\n\n* [**Expanded DevOps Roadmap**](https://roadmap.sh/devops): A comprehensive guide that details the full range of DevOps skills, tools, and technologies you need to master as a DevOps engineer.\n* [**Simplified DevOps Roadmap**](https://roadmap.sh/devops?r=devops-beginner): A more streamlined version that highlights the core components of a DevOps career, making it easier for beginners to navigate the field.\n* [**DevOps interview questions**](https://roadmap.sh/questions/devops): Test your knowledge of DevOps by answering popular interview questions, and challenge yourself to level up and ace your next job interview.\n\nSuccess in DevOps is about cultivating a well-rounded skill set that combines technical expertise with strong collaboration, communication, and problem-solving abilities.\n\nAs the industry continues to evolve, so too will the tools, practices, and challenges that DevOps engineers face. By committing to continuous learning and staying adaptable, you can ensure that you remain at the forefront of this dynamic field, driving innovation and delivering value in your organization.\n";
				}
				async function compiledContent$W() {
					return await html$W();
				}
				function getHeadings$W() {
					return [{"depth":2,"slug":"1-proficiency-in-linux-and-scripting","text":"1. Proficiency in Linux and Scripting"},{"depth":2,"slug":"2-understanding-of-continuous-integration-and-continuous-deployment-cicd","text":"2. Understanding of Continuous Integration and Continuous Deployment (CI/CD)"},{"depth":3,"slug":"understanding-cicd","text":"Understanding CI/CD"},{"depth":3,"slug":"key-tools-for-cicd","text":"Key Tools for CI/CD"},{"depth":3,"slug":"best-practices-for-setting-up-and-managing-cicd-pipelines","text":"Best Practices for Setting Up and Managing CI/CD Pipelines"},{"depth":2,"slug":"3-containerization-and-orchestration","text":"3. Containerization and Orchestration"},{"depth":3,"slug":"basics-of-containerization","text":"Basics of Containerization"},{"depth":3,"slug":"key-containerization-tools","text":"Key Containerization Tools"},{"depth":3,"slug":"orchestration-tools","text":"Orchestration Tools"},{"depth":2,"slug":"4-infrastructure-as-code-iac","text":"4. Infrastructure as Code (IaC)"},{"depth":3,"slug":"importance-of-iac-in-modern-devops-practices","text":"Importance of IaC in Modern DevOps Practices"},{"depth":3,"slug":"key-iac-tools-terraform-ansible-chef-puppet","text":"Key IaC Tools: Terraform, Ansible, Chef, Puppet"},{"depth":3,"slug":"best-practices-for-writing-and-managing-infrastructure-code","text":"Best Practices for Writing and Managing Infrastructure Code"},{"depth":2,"slug":"5-cloud-computing-expertise","text":"5. Cloud Computing Expertise"},{"depth":3,"slug":"importance-of-cloud-platforms-in-devops","text":"Importance of Cloud Platforms in DevOps"},{"depth":3,"slug":"key-cloud-providers-aws-azure-google-cloud-platform-gcp","text":"Key Cloud Providers: AWS, Azure, Google Cloud Platform (GCP)"},{"depth":3,"slug":"understanding-cloud-native-tools-services-and-architectural-patterns","text":"Understanding Cloud-Native Tools, Services, and Architectural Patterns"},{"depth":2,"slug":"6-monitoring-and-logging","text":"6. Monitoring and Logging"},{"depth":3,"slug":"importance-of-monitoring-and-logging-for-maintaining-system-health","text":"Importance of Monitoring and Logging for Maintaining System Health"},{"depth":3,"slug":"key-tools-for-monitoring-prometheus-grafana-nagios","text":"Key Tools for Monitoring: Prometheus, Grafana, Nagios"},{"depth":3,"slug":"logging-tools-elk-stack-elasticsearch-logstash-kibana-splunk","text":"Logging Tools: ELK Stack (Elasticsearch, Logstash, Kibana), Splunk"},{"depth":3,"slug":"best-practices-for-setting-up-effective-monitoring-and-logging-systems","text":"Best Practices for Setting Up Effective Monitoring and Logging Systems"},{"depth":2,"slug":"7-security-practices-and-tools-devsecops","text":"7. Security Practices and Tools (DevSecOps)"},{"depth":3,"slug":"integrating-security-into-the-devops-pipeline","text":"Integrating Security into the DevOps Pipeline"},{"depth":3,"slug":"key-security-practices","text":"Key Security Practices"},{"depth":3,"slug":"tools-for-devsecops","text":"Tools for DevSecOps"},{"depth":2,"slug":"8-networking-and-system-administration","text":"8. Networking and System Administration"},{"depth":3,"slug":"which-networking-concepts-are-most-relevant-to-devops","text":"Which networking concepts are most relevant to DevOps?"},{"depth":3,"slug":"system-administration-tasks-and-best-practices","text":"System Administration Tasks and Best Practices"},{"depth":3,"slug":"best-practices-for-networking-and-system-administration","text":"Best Practices for Networking and System Administration"},{"depth":2,"slug":"9-familiarity-with-version-control-systems","text":"9. Familiarity with Version Control Systems"},{"depth":3,"slug":"importance-of-version-control-in-devops-workflows","text":"Importance of Version Control in DevOps Workflows"},{"depth":3,"slug":"mastering-git-key-commands-workflows-and-best-practices","text":"Mastering Git: Key Commands, Workflows, and Best Practices"},{"depth":4,"slug":"git-workflows","text":"Git Workflows"},{"depth":4,"slug":"best-practices-when-using-git","text":"Best practices when using Git"},{"depth":3,"slug":"tools-for-managing-version-control-github-gitlab-bitbucket","text":"Tools for Managing Version Control: GitHub, GitLab, Bitbucket"},{"depth":2,"slug":"10-knowledge-of-configuration-management","text":"10. Knowledge of Configuration Management"},{"depth":3,"slug":"the-role-of-configuration-management-in-devops","text":"The Role of Configuration Management in DevOps"},{"depth":3,"slug":"devops-configuration-management-tools-to-master","text":"DevOps Configuration Management Tools to Master"},{"depth":3,"slug":"best-practices-for-managing-configurations-across-environments","text":"Best Practices for Managing Configurations Across Environments"},{"depth":2,"slug":"bonus-collaboration-and-communication-skills","text":"Bonus: Collaboration and Communication Skills"},{"depth":3,"slug":"importance-of-soft-skills-in-a-devops-environment","text":"Importance of Soft Skills in a DevOps Environment"},{"depth":3,"slug":"tools-for-effective-collaboration-slack-microsoft-teams-jira","text":"Tools for Effective Collaboration: Slack, Microsoft Teams, Jira"},{"depth":3,"slug":"best-practices-for-fostering-a-collaborative-culture","text":"Best Practices for Fostering a Collaborative Culture"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$W = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$W;
					content.file = file$W;
					content.url = url$W;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$W())}`;
				});

const __vite_glob_0_40 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$W,
	compiledContent: compiledContent$W,
	default: Content$W,
	file: file$W,
	frontmatter: frontmatter$W,
	getHeadings: getHeadings$W,
	rawContent: rawContent$W,
	url: url$W
}, Symbol.toStringTag, { value: 'Module' }));

const html$V = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-test-automation-nvpbi.jpg\" alt=\"What is DevOps test automation?\"></p>\n<p>Long gone are the days when putting a new feature into production meant 3 months of planning, coordination, and careful delivery. The industry has evolved into a new, faster, and more agile way of working.</p>\n<p>Instead of waiting for months before pushing something into production, companies are now able to do it multiple times a day, any day (even Fridays!).</p>\n<p>All of that is thanks to DevOps test automation, or in other words, thanks to the ability to include tests into the DevOps pipeline. That allows teams to confidently promote to production code that is tested and validated by a machine.</p>\n<p>How does that all work? Let’s dive in and I’ll explain it all.</p>\n<h2 id=\"what-is-devops-test-automation\">What is DevOps Test Automation?</h2>\n<p>DevOps test automation refers to the integration of automated testing into the DevOps pipeline to ensure that every piece of code is properly tested throughout the development lifecycle. It plays a vital role in achieving the speed and reliability that DevOps promises, helping teams deliver high-quality software faster.</p>\n<p>Test automation removes the human factor from the process (at least from most of it) and eliminates the bottlenecks caused by manual testing by running tests more frequently, consistently, and at scale.</p>\n<h3 id=\"manual-testing-vs-automated-testing\">Manual Testing vs. Automated Testing</h3>\n<p>Manual testing involves testers executing test cases step-by-step and verifying the results. It is valuable for tasks requiring human intuition, such as exploratory testing or evaluating user interfaces. However, these manual tests tend to be slow, labor-intensive, and inconsistent (we’re all human after all).</p>\n<p>Automated testing, on the other hand, uses scripts and tools to run tests automatically. This type of testing actually includes multiple different types of tests with unit tests being one of the most common ones (although there are alternatives, such as integration tests, e2e tests, etc). This approach offers several benefits:</p>\n<ul>\n<li><strong>Speed</strong>: Automated tests execute much faster than manual ones, after all, as long as the system can handle the input, your test will work.</li>\n<li><strong>Reliability</strong>: Automated tests provide consistent results, eliminating human error.</li>\n<li><strong>Scalability</strong>: Large test suites can be run efficiently, even across complex scenarios.</li>\n<li><strong>Reusability</strong>: Test scripts can be reused across multiple projects and cycles.</li>\n</ul>\n<p>All of this has the potential to directly translate into faster feedback loops, higher test coverage, and more reliable software releases.</p>\n<h3 id=\"key-components-of-devops-test-automation\">Key Components of DevOps Test Automation</h3>\n<ol>\n<li><strong>Continuous Integration (CI):</strong> Continuous Integration is a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> practice where developers frequently merge their code changes into a shared repository. With each integration, an automated build and test process is triggered. The goals of CI include:\n<ul>\n<li>Catching issues early by testing incremental code changes.</li>\n<li>Ensuring that new changes don’t break the existing codebase.</li>\n<li>Reducing integration problems by addressing conflicts early and often.</li>\n</ul>\n</li>\n<li><strong>Continuous Delivery (CD):</strong> Continuous Delivery ensures that the codebase is always in a deployable state. It extends CI by automating the deployment process to staging or production environments. The key principles of CD include:\n<ul>\n<li><strong>Automated Deployment Pipelines</strong>: Using tools like Azure DevOps, AWS CodePipeline, or CircleCI (to name a few)  to deploy code with minimal manual intervention.</li>\n<li><strong>Environment Consistency</strong>: Ensuring that deployments work reliably across staging, testing, and production environments.</li>\n<li><strong>Fast and Reliable Releases</strong>: Enabling teams to ship new features and fixes to customers quickly and confidently.</li>\n</ul>\n</li>\n<li><strong>Continuous Testing:</strong> Continuous Testing integrates automated testing throughout the development lifecycle, from development to deployment. It is designed to provide immediate feedback on the quality and risks of a release, ensuring that issues are detected and resolved early.<br>\nKey aspects of Continuous Testing include:\n<ul>\n<li><strong>Test Coverage</strong>: Automated tests cover unit, integration, API, performance, and end-to-end scenarios to ensure the entire application is tested.</li>\n<li><strong>Early Risk Detection</strong>: Running tests early in the pipeline to identify potential business risks associated with the release.</li>\n<li><strong>Rapid Feedback</strong>: Providing developers with actionable insights within minutes of a code change.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"why-devops-test-automation-matters\">Why DevOps Test Automation Matters</h3>\n<p>By combining CI, CD, and Continuous Testing into a cohesive DevOps strategy, organizations can accelerate delivery while maintaining high software quality. Test automation reduces the manual effort required for testing, provides faster feedback, and ensures that every code change is reliable and ready for production.</p>\n<h2 id=\"challenges-in-devops-test-automation\">Challenges in DevOps Test Automation</h2>\n<p>While DevOps test automation brings significant benefits, implementing and maintaining it comes with its own set of challenges. These problems usually come from cultural, technical, and operational complexities.</p>\n<p>Here’s a closer look at some common challenges and how they impact DevOps teams:</p>\n<h3 id=\"cultural-and-organizational-barriers\">Cultural and Organizational Barriers</h3>\n<p>One of the biggest obstacles to successful DevOps test automation is resistance to change within the organization. DevOps relies on collaboration between development, testing, and operations teams, but traditional silos can make this difficult.</p>\n<p>For example, development and operations teams may have conflicting goals, such as speed versus stability. There might be a lack of shared ownership for testing that can lead to gaps in responsibility, effectively not having anyone owning the practice.</p>\n<p>And finally, teams may resist adopting new tools or affecting the existing (and working) development lifecycle due to unfamiliarity or fear of disrupting established workflows.</p>\n<h4 id=\"strategies-to-overcome\">Strategies to Overcome</h4>\n<p>Consider fostering a collaborative culture by promoting shared goals and open communication. Make sure to provide training and resources to help teams adapt to new tools and methodologies, this will lower the entry barrier and show how new tools and practices actually can improve existing processes.</p>\n<p>In the end, encourage leadership to advocate for DevOps practices, emphasizing their long-term value to the organization.</p>\n<h3 id=\"tool-integration-and-maintenance\">Tool Integration and Maintenance</h3>\n<p>DevOps pipelines often rely on a diverse set of tools for version control, CI/CD, test automation, and deployment. Integrating these tools into a cohesive workflow can be difficult, especially when dealing with legacy systems or custom applications.</p>\n<p>If you’re not careful during the tool selection process, or if you just don’t have control over it, you might end up in a situation where these tools may not seamlessly integrate with each other, leading to broken pipelines or data silos.</p>\n<p>On the other hand, even if they do work well together, maintaining automated test scripts can be time-consuming, especially as applications evolve.</p>\n<p>And finally, frequent updates to tools or frameworks can potentially introduce compatibility issues.</p>\n<h4 id=\"strategies-to-overcome-1\">Strategies to Overcome</h4>\n<p>If you have the ability to pick or change existing solutions, make sure to use platforms like Jenkins, Azure DevOps, or GitLab that support a wide range of integrations.</p>\n<p>Try to adopt modular test automation frameworks to simplify script maintenance. Remember to handle this code like you would the code of any large software project.</p>\n<p>And while you’re at it, if you want to avoid the build-up of technical debt in your toolchain, try to regularly review and update toolchains to ensure compatibility.</p>\n<h3 id=\"scalability-and-performance-issues\">Scalability and Performance Issues</h3>\n<p>As applications grow in complexity and user bases expand, test automation frameworks must scale to handle increased workloads. However, ensuring scalability while maintaining performance is not a trivial task.</p>\n<p>These frameworks will struggle to handle large test suites or datasets, causing either tests to run slow, or even crash for reasons completely unrelated to the code they’re testing. If you’re not careful, performance bottlenecks can occur when running tests on shared resources potentially affecting the main system through your tests.</p>\n<h4 id=\"strategies-to-overcome-2\">Strategies to Overcome</h4>\n<p>At this stage, you have to be smart about how you implement testing. Consider using parallel test execution to reduce overall test runtime.</p>\n<p>Use cloud-based testing platforms like Sauce Labs or BrowserStack to scale testing infrastructure dynamically and much faster for a fraction of the price you’d have to pay if you were to do it yourself.</p>\n<p>Finally, optimize test suites by removing redundant or outdated tests and prioritizing high-impact cases. In other words, consider that some types of tests might be better off applied to only a portion of your app (key features) instead of testing the entire system.</p>\n<h3 id=\"choosing-the-right-test-automation-tool\">Choosing the Right Test Automation Tool</h3>\n<p>Test automation tools form the backbone of successful automation testing strategies. The right tools can simplify workflows, improve test coverage, and ensure seamless integration with your CI/CD pipeline.</p>\n<p>Now the question is: how do you pick the right automation tool for you?</p>\n<h4 id=\"key-considerations-when-choosing-tools\">Key considerations when choosing tools</h4>\n<p>Not every tool is going to be good for you, either because of technical incompatibilities, skill issues from your team, or just budget constraints. So make sure to apply the following 5 principles when deciding on the best automation tools for your project:</p>\n<ol>\n<li><strong>Compatibility with Your Tech Stack</strong>: Ensure the tool supports the programming languages, frameworks, and platforms your team uses. For example, if you develop web applications in JavaScript, tools like Cypress or Playwright may be a good fit.</li>\n<li><strong>Integration with CI/CD Pipelines</strong>: Tools should integrate smoothly with CI/CD platforms like Jenkins, GitLab, Azure DevOps, or CircleCI to enable automated testing as part of your pipeline.</li>\n<li><strong>Ease of Use and Learning Curve</strong>: Select tools that align with your team’s expertise or offer a low learning curve. Open-source tools with robust documentation and community support can accelerate adoption.</li>\n<li><strong>Scalability and Performance</strong>: Tools must handle increasing complexity and volume as your test suites and applications grow.</li>\n<li><strong>Cost and Licensing</strong>: Assess the budget and licensing model. Many open-source tools offer powerful capabilities without added costs, but commercial tools may provide enhanced features or enterprise support.</li>\n</ol>\n<h4 id=\"popular-options\">Popular Options</h4>\n<p>While the following is not an exhaustive list, it’s a great starting point if you’re looking for the right tools and you can’t decide where to start.</p>\n<ol>\n<li><strong>Web Application Testing</strong>:\n<ul>\n<li><strong>Selenium</strong>: A widely-used open-source tool for browser automation. It supports multiple programming languages and browsers.</li>\n<li><strong>Cypress</strong>: Known for its fast execution and user-friendly interface, Cypress is ideal for modern web applications.</li>\n<li><strong>Playwright</strong>: Developed by Microsoft, Playwright excels at end-to-end testing across multiple browsers and platforms.</li>\n</ul>\n</li>\n<li><strong>API Testing</strong>:\n<ul>\n<li><strong>Postman</strong>: Offers a simple interface for creating and executing API tests, with support for automation.</li>\n<li><strong>RestAssured</strong>: A Java-based tool for testing RESTful web services, integrated easily into Java projects.</li>\n<li><strong>SoapUI</strong>: Useful for testing both REST and SOAP APIs, with enterprise-level capabilities.</li>\n</ul>\n</li>\n<li><strong>Mobile Testing</strong>:\n<ul>\n<li><strong>Appium</strong>: Open-source and versatile, Appium supports testing for native, hybrid, and mobile web apps across iOS and Android.</li>\n<li><strong>XCUITest/Espresso</strong>: Native tools for iOS and Android testing, offering deep integration with the respective ecosystems.</li>\n</ul>\n</li>\n<li><strong>Performance Testing</strong>:\n<ul>\n<li><strong>JMeter</strong>: Open-source and widely used for load and performance testing of applications, particularly web and API testing.</li>\n<li><strong>Gatling</strong>: A tool focused on high-performance and scalability testing, ideal for developers.</li>\n</ul>\n</li>\n<li><strong>Test Management and Reporting</strong>:\n<ul>\n<li><strong>TestRail</strong>: A comprehensive tool for test case management, tracking, and reporting.</li>\n<li><strong>Allure Report</strong>: An open-source reporting tool that integrates with test automation frameworks to provide detailed insights.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"best-practices-for-effective-devops-test-automation\">Best Practices for Effective DevOps Test Automation</h2>\n<p>Successfully implementing DevOps test automation requires addressing challenges with proactive strategies and best practices. These practices help teams build a strong foundation for collaboration, skill development, and process improvement. Let’s take a closer look at the key actions organizations can take:</p>\n<h3 id=\"foster-a-collaborative-culture\">Foster a collaborative culture</h3>\n<p>DevOps thrives on the seamless collaboration between development, testing, and operations teams. In fact, it depends on it. A lack of alignment can slow down progress and reduce the effectiveness of test automation.</p>\n<p>We can encourage that collaboration by promoting cross-functional teams (as opposed to vertical teams working in isolation from each other with their own individual priorities) where responsibilities are shared, and everyone is invested in testing and quality.</p>\n<p>Fostering that sense of belonging to a greater group by holding regular meetings or retrospectives to discuss challenges, share insights, and align goals.</p>\n<p>Finally, using collaborative tools like Jira, Slack, or Confluence to ensure transparent communication and knowledge sharing.</p>\n<h3 id=\"invest-in-training-and-skill-development\">Invest in Training and Skill Development</h3>\n<p>Test automation tools and frameworks often require specialized knowledge, and a lack of expertise can hinder adoption. Ensuring team members have the necessary skills is critical for long-term success. The good news is that skills can be trained and developed over time. So let’s take a look at some ideas to grow them.</p>\n<p>The most obvious one is to conduct workshops and training sessions on test automation tools like Selenium, Cypress, or Appium. That way you update your teams about the latest trends in the industry while at the same time, providing them with practical knowledge they can then, turn around, and apply to their own projects.</p>\n<p>Certifications are also a fantastic way to skill up from the “official” sources. Who better to teach your team how to use a product than those who can certify you on it? So make sure to encourage team members to obtain certifications in DevOps practices and tools.</p>\n<p>Finally, you can also provide access to online learning platforms such as Coursera, Pluralsight, or Udemy for self-paced learning.</p>\n<p>Investing in skill development empowers teams to use automation tools effectively, leading to higher productivity and better results.</p>\n<h3 id=\"select-appropriate-tools-and-frameworks\">Select Appropriate Tools and Frameworks</h3>\n<p>The success of test automation depends heavily on choosing the right tools and frameworks. Tools that align with your technology stack and organizational needs will simplify implementation and reduce maintenance overhead.</p>\n<p>So make sure to assess the compatibility of tools with your existing technology stack (e.g., programming languages, CI/CD systems). Prioritize tools with strong community support and regular updates, such as Jenkins, Selenium, or TestNG.</p>\n<p>Opt for tools that offer integrations with your DevOps pipeline to streamline workflows, the more out-of-the-box integrations you can get, the better.</p>\n<h3 id=\"monitor-and-optimize-test-automation-processes\">Monitor and Optimize Test Automation Processes</h3>\n<p>Contrary to popular belief, implementing test automation is not a one-time task. Continuous monitoring and improvement are necessary to ensure that your processes remain efficient and effective as your application and pipeline evolve. In other words, stay on top of your testing process, pick up on problems as soon as they show up on your radar and implement some of the following best practices.</p>\n<p>First things first, make sure to use metrics like test coverage, execution time, and defect detection rates to evaluate effectiveness. Compare those values release after release to understand the evolution of your project’s organization.</p>\n<p>If monitoring is what you’re looking for, then consider implementing dashboards for real-time visibility into test automation performance.</p>\n<p>Regularly review test cases to eliminate redundant or outdated ones, focusing on high-priority scenarios.</p>\n<p>And of course, try to gather feedback from developers and testers to identify pain points and opportunities for improvement.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>DevOps test automation is a cornerstone of modern software development, enabling organizations to accelerate software delivery without compromising quality. By integrating automated testing into the development lifecycle, teams can identify and resolve issues early.</p>\n<p>To fully realize its benefits, organizations must address challenges such as cultural barriers, tool integration, and scalability. By fostering collaboration, investing in training, choosing the right tools and keeping a close eye on your processes, you’ll start seeing how those KPIs start moving over time, showing a clear improvement over your current operations speed.</p>";

				const frontmatter$V = {"title":"DevOps Test Automation: How to accelerate software delivery","description":"Want to deliver software faster? Dive into the power of DevOps test automation and transform your testing pipeline with proven techniques.","authorId":"fernando","excludedBySlug":"/devops/test-automation","seo":{"title":"DevOps Test Automation: How to accelerate software delivery","description":"Want to deliver software faster? Dive into the power of DevOps test automation and transform your testing pipeline with proven techniques.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-test-automation-nvpbi.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2025-01-16T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$V = "/workspace/src/data/guides/devops-test-automation.md";
				const url$V = undefined;
				function rawContent$V() {
					return "   \n                                                                    \n                                                                                                                                                         \n                  \n                                         \n    \n                                                                      \n                                                                                                                                                           \n                                                                                \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![What is DevOps test automation?](https://assets.roadmap.sh/guest/devops-test-automation-nvpbi.jpg)\n\nLong gone are the days when putting a new feature into production meant 3 months of planning, coordination, and careful delivery. The industry has evolved into a new, faster, and more agile way of working.\n\nInstead of waiting for months before pushing something into production, companies are now able to do it multiple times a day, any day (even Fridays!).\n\nAll of that is thanks to DevOps test automation, or in other words, thanks to the ability to include tests into the DevOps pipeline. That allows teams to confidently promote to production code that is tested and validated by a machine.\n\nHow does that all work? Let’s dive in and I’ll explain it all.\n\n## What is DevOps Test Automation?\n\nDevOps test automation refers to the integration of automated testing into the DevOps pipeline to ensure that every piece of code is properly tested throughout the development lifecycle. It plays a vital role in achieving the speed and reliability that DevOps promises, helping teams deliver high-quality software faster. \n\nTest automation removes the human factor from the process (at least from most of it) and eliminates the bottlenecks caused by manual testing by running tests more frequently, consistently, and at scale.\n\n### Manual Testing vs. Automated Testing\n\nManual testing involves testers executing test cases step-by-step and verifying the results. It is valuable for tasks requiring human intuition, such as exploratory testing or evaluating user interfaces. However, these manual tests tend to be slow, labor-intensive, and inconsistent (we’re all human after all).\n\nAutomated testing, on the other hand, uses scripts and tools to run tests automatically. This type of testing actually includes multiple different types of tests with unit tests being one of the most common ones (although there are alternatives, such as integration tests, e2e tests, etc). This approach offers several benefits:\n\n* **Speed**: Automated tests execute much faster than manual ones, after all, as long as the system can handle the input, your test will work.  \n* **Reliability**: Automated tests provide consistent results, eliminating human error.  \n* **Scalability**: Large test suites can be run efficiently, even across complex scenarios.  \n* **Reusability**: Test scripts can be reused across multiple projects and cycles.\n\nAll of this has the potential to directly translate into faster feedback loops, higher test coverage, and more reliable software releases.\n\n### Key Components of DevOps Test Automation\n\n1. **Continuous Integration (CI):** Continuous Integration is a [DevOps](https://roadmap.sh/devops) practice where developers frequently merge their code changes into a shared repository. With each integration, an automated build and test process is triggered. The goals of CI include:  \n   * Catching issues early by testing incremental code changes.  \n   * Ensuring that new changes don’t break the existing codebase.  \n   * Reducing integration problems by addressing conflicts early and often.  \n2. **Continuous Delivery (CD):** Continuous Delivery ensures that the codebase is always in a deployable state. It extends CI by automating the deployment process to staging or production environments. The key principles of CD include:  \n   * **Automated Deployment Pipelines**: Using tools like Azure DevOps, AWS CodePipeline, or CircleCI (to name a few)  to deploy code with minimal manual intervention.  \n   * **Environment Consistency**: Ensuring that deployments work reliably across staging, testing, and production environments.  \n   * **Fast and Reliable Releases**: Enabling teams to ship new features and fixes to customers quickly and confidently.  \n3. **Continuous Testing:** Continuous Testing integrates automated testing throughout the development lifecycle, from development to deployment. It is designed to provide immediate feedback on the quality and risks of a release, ensuring that issues are detected and resolved early.  \n   Key aspects of Continuous Testing include:  \n   * **Test Coverage**: Automated tests cover unit, integration, API, performance, and end-to-end scenarios to ensure the entire application is tested.  \n   * **Early Risk Detection**: Running tests early in the pipeline to identify potential business risks associated with the release.  \n   * **Rapid Feedback**: Providing developers with actionable insights within minutes of a code change.\n\n### Why DevOps Test Automation Matters\n\nBy combining CI, CD, and Continuous Testing into a cohesive DevOps strategy, organizations can accelerate delivery while maintaining high software quality. Test automation reduces the manual effort required for testing, provides faster feedback, and ensures that every code change is reliable and ready for production.\n\n## Challenges in DevOps Test Automation\n\nWhile DevOps test automation brings significant benefits, implementing and maintaining it comes with its own set of challenges. These problems usually come from cultural, technical, and operational complexities. \n\nHere’s a closer look at some common challenges and how they impact DevOps teams:\n\n### Cultural and Organizational Barriers\n\nOne of the biggest obstacles to successful DevOps test automation is resistance to change within the organization. DevOps relies on collaboration between development, testing, and operations teams, but traditional silos can make this difficult.\n\nFor example, development and operations teams may have conflicting goals, such as speed versus stability. There might be a lack of shared ownership for testing that can lead to gaps in responsibility, effectively not having anyone owning the practice. \n\nAnd finally, teams may resist adopting new tools or affecting the existing (and working) development lifecycle due to unfamiliarity or fear of disrupting established workflows.\n\n#### Strategies to Overcome\n\nConsider fostering a collaborative culture by promoting shared goals and open communication. Make sure to provide training and resources to help teams adapt to new tools and methodologies, this will lower the entry barrier and show how new tools and practices actually can improve existing processes.\n\nIn the end, encourage leadership to advocate for DevOps practices, emphasizing their long-term value to the organization. \n\n### Tool Integration and Maintenance\n\nDevOps pipelines often rely on a diverse set of tools for version control, CI/CD, test automation, and deployment. Integrating these tools into a cohesive workflow can be difficult, especially when dealing with legacy systems or custom applications.\n\nIf you’re not careful during the tool selection process, or if you just don’t have control over it, you might end up in a situation where these tools may not seamlessly integrate with each other, leading to broken pipelines or data silos.\n\nOn the other hand, even if they do work well together, maintaining automated test scripts can be time-consuming, especially as applications evolve.\n\nAnd finally, frequent updates to tools or frameworks can potentially introduce compatibility issues.\n\n#### Strategies to Overcome\n\nIf you have the ability to pick or change existing solutions, make sure to use platforms like Jenkins, Azure DevOps, or GitLab that support a wide range of integrations.\n\nTry to adopt modular test automation frameworks to simplify script maintenance. Remember to handle this code like you would the code of any large software project. \n\nAnd while you’re at it, if you want to avoid the build-up of technical debt in your toolchain, try to regularly review and update toolchains to ensure compatibility.\n\n### Scalability and Performance Issues\n\nAs applications grow in complexity and user bases expand, test automation frameworks must scale to handle increased workloads. However, ensuring scalability while maintaining performance is not a trivial task.\n\nThese frameworks will struggle to handle large test suites or datasets, causing either tests to run slow, or even crash for reasons completely unrelated to the code they’re testing. If you’re not careful, performance bottlenecks can occur when running tests on shared resources potentially affecting the main system through your tests.\n\n#### Strategies to Overcome\n\nAt this stage, you have to be smart about how you implement testing. Consider using parallel test execution to reduce overall test runtime.\n\nUse cloud-based testing platforms like Sauce Labs or BrowserStack to scale testing infrastructure dynamically and much faster for a fraction of the price you’d have to pay if you were to do it yourself.\n\nFinally, optimize test suites by removing redundant or outdated tests and prioritizing high-impact cases. In other words, consider that some types of tests might be better off applied to only a portion of your app (key features) instead of testing the entire system.\n\n### Choosing the Right Test Automation Tool\n\nTest automation tools form the backbone of successful automation testing strategies. The right tools can simplify workflows, improve test coverage, and ensure seamless integration with your CI/CD pipeline. \n\nNow the question is: how do you pick the right automation tool for you? \n\n#### Key considerations when choosing tools\n\nNot every tool is going to be good for you, either because of technical incompatibilities, skill issues from your team, or just budget constraints. So make sure to apply the following 5 principles when deciding on the best automation tools for your project:\n\n1. **Compatibility with Your Tech Stack**: Ensure the tool supports the programming languages, frameworks, and platforms your team uses. For example, if you develop web applications in JavaScript, tools like Cypress or Playwright may be a good fit.  \n2. **Integration with CI/CD Pipelines**: Tools should integrate smoothly with CI/CD platforms like Jenkins, GitLab, Azure DevOps, or CircleCI to enable automated testing as part of your pipeline.  \n3. **Ease of Use and Learning Curve**: Select tools that align with your team’s expertise or offer a low learning curve. Open-source tools with robust documentation and community support can accelerate adoption.  \n4. **Scalability and Performance**: Tools must handle increasing complexity and volume as your test suites and applications grow.  \n5. **Cost and Licensing**: Assess the budget and licensing model. Many open-source tools offer powerful capabilities without added costs, but commercial tools may provide enhanced features or enterprise support.\n\n#### Popular Options\n\nWhile the following is not an exhaustive list, it’s a great starting point if you’re looking for the right tools and you can’t decide where to start.\n\n1. **Web Application Testing**:  \n   * **Selenium**: A widely-used open-source tool for browser automation. It supports multiple programming languages and browsers.  \n   * **Cypress**: Known for its fast execution and user-friendly interface, Cypress is ideal for modern web applications.  \n   * **Playwright**: Developed by Microsoft, Playwright excels at end-to-end testing across multiple browsers and platforms.  \n2. **API Testing**:  \n   * **Postman**: Offers a simple interface for creating and executing API tests, with support for automation.  \n   * **RestAssured**: A Java-based tool for testing RESTful web services, integrated easily into Java projects.  \n   * **SoapUI**: Useful for testing both REST and SOAP APIs, with enterprise-level capabilities.  \n3. **Mobile Testing**:  \n   * **Appium**: Open-source and versatile, Appium supports testing for native, hybrid, and mobile web apps across iOS and Android.  \n   * **XCUITest/Espresso**: Native tools for iOS and Android testing, offering deep integration with the respective ecosystems.  \n4. **Performance Testing**:  \n   * **JMeter**: Open-source and widely used for load and performance testing of applications, particularly web and API testing.  \n   * **Gatling**: A tool focused on high-performance and scalability testing, ideal for developers.  \n5. **Test Management and Reporting**:  \n   * **TestRail**: A comprehensive tool for test case management, tracking, and reporting.  \n   * **Allure Report**: An open-source reporting tool that integrates with test automation frameworks to provide detailed insights.\n\n## Best Practices for Effective DevOps Test Automation\n\nSuccessfully implementing DevOps test automation requires addressing challenges with proactive strategies and best practices. These practices help teams build a strong foundation for collaboration, skill development, and process improvement. Let’s take a closer look at the key actions organizations can take:\n\n### Foster a collaborative culture\n\nDevOps thrives on the seamless collaboration between development, testing, and operations teams. In fact, it depends on it. A lack of alignment can slow down progress and reduce the effectiveness of test automation.\n\nWe can encourage that collaboration by promoting cross-functional teams (as opposed to vertical teams working in isolation from each other with their own individual priorities) where responsibilities are shared, and everyone is invested in testing and quality.\n\nFostering that sense of belonging to a greater group by holding regular meetings or retrospectives to discuss challenges, share insights, and align goals.\n\nFinally, using collaborative tools like Jira, Slack, or Confluence to ensure transparent communication and knowledge sharing.\n\n### Invest in Training and Skill Development\n\nTest automation tools and frameworks often require specialized knowledge, and a lack of expertise can hinder adoption. Ensuring team members have the necessary skills is critical for long-term success. The good news is that skills can be trained and developed over time. So let’s take a look at some ideas to grow them.\n\nThe most obvious one is to conduct workshops and training sessions on test automation tools like Selenium, Cypress, or Appium. That way you update your teams about the latest trends in the industry while at the same time, providing them with practical knowledge they can then, turn around, and apply to their own projects.\n\nCertifications are also a fantastic way to skill up from the “official” sources. Who better to teach your team how to use a product than those who can certify you on it? So make sure to encourage team members to obtain certifications in DevOps practices and tools.\n\nFinally, you can also provide access to online learning platforms such as Coursera, Pluralsight, or Udemy for self-paced learning.\n\nInvesting in skill development empowers teams to use automation tools effectively, leading to higher productivity and better results.\n\n### Select Appropriate Tools and Frameworks\n\nThe success of test automation depends heavily on choosing the right tools and frameworks. Tools that align with your technology stack and organizational needs will simplify implementation and reduce maintenance overhead.\n\nSo make sure to assess the compatibility of tools with your existing technology stack (e.g., programming languages, CI/CD systems). Prioritize tools with strong community support and regular updates, such as Jenkins, Selenium, or TestNG.\n\nOpt for tools that offer integrations with your DevOps pipeline to streamline workflows, the more out-of-the-box integrations you can get, the better.\n\n### Monitor and Optimize Test Automation Processes\n\nContrary to popular belief, implementing test automation is not a one-time task. Continuous monitoring and improvement are necessary to ensure that your processes remain efficient and effective as your application and pipeline evolve. In other words, stay on top of your testing process, pick up on problems as soon as they show up on your radar and implement some of the following best practices.\n\nFirst things first, make sure to use metrics like test coverage, execution time, and defect detection rates to evaluate effectiveness. Compare those values release after release to understand the evolution of your project’s organization.\n\nIf monitoring is what you’re looking for, then consider implementing dashboards for real-time visibility into test automation performance.\n\nRegularly review test cases to eliminate redundant or outdated ones, focusing on high-priority scenarios.\n\nAnd of course, try to gather feedback from developers and testers to identify pain points and opportunities for improvement.\n\n## Conclusion\n\nDevOps test automation is a cornerstone of modern software development, enabling organizations to accelerate software delivery without compromising quality. By integrating automated testing into the development lifecycle, teams can identify and resolve issues early.\n\nTo fully realize its benefits, organizations must address challenges such as cultural barriers, tool integration, and scalability. By fostering collaboration, investing in training, choosing the right tools and keeping a close eye on your processes, you’ll start seeing how those KPIs start moving over time, showing a clear improvement over your current operations speed.\n\n";
				}
				async function compiledContent$V() {
					return await html$V();
				}
				function getHeadings$V() {
					return [{"depth":2,"slug":"what-is-devops-test-automation","text":"What is DevOps Test Automation?"},{"depth":3,"slug":"manual-testing-vs-automated-testing","text":"Manual Testing vs. Automated Testing"},{"depth":3,"slug":"key-components-of-devops-test-automation","text":"Key Components of DevOps Test Automation"},{"depth":3,"slug":"why-devops-test-automation-matters","text":"Why DevOps Test Automation Matters"},{"depth":2,"slug":"challenges-in-devops-test-automation","text":"Challenges in DevOps Test Automation"},{"depth":3,"slug":"cultural-and-organizational-barriers","text":"Cultural and Organizational Barriers"},{"depth":4,"slug":"strategies-to-overcome","text":"Strategies to Overcome"},{"depth":3,"slug":"tool-integration-and-maintenance","text":"Tool Integration and Maintenance"},{"depth":4,"slug":"strategies-to-overcome-1","text":"Strategies to Overcome"},{"depth":3,"slug":"scalability-and-performance-issues","text":"Scalability and Performance Issues"},{"depth":4,"slug":"strategies-to-overcome-2","text":"Strategies to Overcome"},{"depth":3,"slug":"choosing-the-right-test-automation-tool","text":"Choosing the Right Test Automation Tool"},{"depth":4,"slug":"key-considerations-when-choosing-tools","text":"Key considerations when choosing tools"},{"depth":4,"slug":"popular-options","text":"Popular Options"},{"depth":2,"slug":"best-practices-for-effective-devops-test-automation","text":"Best Practices for Effective DevOps Test Automation"},{"depth":3,"slug":"foster-a-collaborative-culture","text":"Foster a collaborative culture"},{"depth":3,"slug":"invest-in-training-and-skill-development","text":"Invest in Training and Skill Development"},{"depth":3,"slug":"select-appropriate-tools-and-frameworks","text":"Select Appropriate Tools and Frameworks"},{"depth":3,"slug":"monitor-and-optimize-test-automation-processes","text":"Monitor and Optimize Test Automation Processes"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$V = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$V;
					content.file = file$V;
					content.url = url$V;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$V())}`;
				});

const __vite_glob_0_41 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$V,
	compiledContent: compiledContent$V,
	default: Content$V,
	file: file$V,
	frontmatter: frontmatter$V,
	getHeadings: getHeadings$V,
	rawContent: rawContent$V,
	url: url$V
}, Symbol.toStringTag, { value: 'Module' }));

const html$U = () => "<p><img src=\"https://assets.roadmap.sh/guest/best-devops-tools-3vo92.jpg\" alt=\"The best DevOps tools to use\"></p>\n<p>Choosing the right DevOps tools can make a significant difference in how effectively your team develops and delivers software. With so many options available in 2025, it can be challenging to determine which tools best fit your organization’s needs.</p>\n<p>This article is designed to help development and operations teams (and their organizations) navigate the landscape of DevOps tools, from the most essential to advanced and pro-level solutions.</p>\n<p>Whether you are just starting with <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> or looking to enhance your existing processes, this guide will provide clear and practical information to support your decision-making.</p>\n<p>Throughout this article, we’ll cover and evaluate the following technologies:</p>\n<ul>\n<li><strong>Continuous Integration/Continuous Deployment (CI/CD) tools:</strong> Jenkins, GitLab, CircleCI, GitHub Actions</li>\n<li><strong>Infrastructure as Code (IaC) Tools:</strong> Terraform, Pulumi</li>\n<li><strong>Containerization and Orchestration Tools:</strong> Docker, Kubernetes, Docker Swarm</li>\n<li><strong>Logging and Monitoring Tools:</strong> Prometheus, ELK, Grafana, Loki</li>\n<li><strong>Configuration Management Tools:</strong> Chef, Puppet, Ansible</li>\n<li><strong>Secrets Management</strong>: HashiCorp Vault, Sealed Secrets, SOPS</li>\n<li><strong>Security and Compliance Tools:</strong> OWASP ZAP, Aqua Security.</li>\n</ul>\n<h2 id=\"evaluation-criteria-for-devops-tools\">Evaluation Criteria for DevOps Tools</h2>\n<p>When selecting the best DevOps tools for your organization, it’s important to evaluate each option based on several key factors. These criteria will help ensure that the DevOps tools you choose not only meet your current needs but also support your growth and adapt to future changes. Below are the primary categories we use to assess each DevOps tool:</p>\n<ul>\n<li><strong>Performance:</strong> Efficiency, speed, and resource utilization to enhance productivity.</li>\n<li><strong>Scalability:</strong> Ability to handle growing workloads and infrastructure seamlessly.</li>\n<li><strong>Community and Ecosystem:</strong> Availability of plugins, integrations, and strong community support.</li>\n<li><strong>Learning Curve:</strong> Ease of adoption and quality of documentation for quick onboarding.</li>\n</ul>\n<h2 id=\"continuous-integrationcontinuous-deployment-cicd-tools\">Continuous Integration/Continuous Deployment (CI/CD) tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/contiuous-integration-vs-continous-deploment-9c872.png\" alt=\"CI/CD Tools\"></p>\n<p>This specific type of DevOps tools are essential for automating the <a href=\"https://roadmap.sh/devops/lifecycle\" target=\"_blank\">software development lifecycle</a> as well as the deployment process. A continuous integration &#x26; continuous deployment platform (which takes continuous delivery one step further) enables developers to integrate code changes continuously (thus the name!) and deploy them efficiently. Below, we evaluate some of the top integration &#x26; deployment DevOps tools in this category available in 2025 based on key criteria, each rated out of five stars.</p>\n<h3 id=\"github-actions\"><strong>GitHub Actions</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nGitHub Actions offers efficient execution of CI/CD workflows by leveraging GitHub’s robust infrastructure. This seamless integration ensures that workflows run smoothly and reliably, minimizing delays and improving overall performance. The ability to trigger actions directly from GitHub repositories enhances the speed and efficiency of the development and deployment processes.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nGitHub Actions scales exceptionally well with GitHub’s infrastructure, making it suitable for projects of all sizes, from small personal repositories to large enterprise applications. The platform can handle high volumes of workflows and concurrent executions, ensuring that your CI/CD pipelines remain effective as your project and team grow.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nGitHub Actions benefits from an extensive marketplace filled with numerous pre-built actions that can be easily integrated into your workflows. This rich ecosystem allows users to find and implement actions for a wide variety of tasks, from testing and deployment to notifications and security checks. The strong community support further enhances the value of GitHub Actions, providing access to shared knowledge and resources.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nGitHub Actions is relatively easy to learn, especially for users already familiar with GitHub’s interface and repository management. The use of YAML-based workflows is intuitive and straightforward, and there is ample documentation available to guide users through the setup and configuration process. While it is user-friendly, mastering more advanced features may require additional learning and experimentation.</li>\n</ul>\n<h3 id=\"gitlab\"><strong>GitLab</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nGitLab CI/CD offers efficient pipeline execution, particularly with its built-in Kubernetes integration. This integration allows for seamless deployment and scaling of applications, enhancing overall performance. GitLab’s optimized runners and caching mechanisms ensure that build and deployment processes are swift and reliable, minimizing downtime and accelerating the development cycle.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nGitLab is designed to scale effortlessly with large projects and teams. Its architecture supports the management of multiple pipelines and extensive workloads without sacrificing performance. Whether you’re handling a small repository or a complex, multi-project environment, GitLab can accommodate your needs, making it an excellent choice for growing organizations.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★☆<br>\nGitLab CI/CD benefits from a strong community and is tightly integrated with GitLab’s comprehensive suite of tools. This integration provides a unified platform for version control, issue tracking, and CI/CD, enhancing productivity and collaboration. While the ecosystem may not be as extensive as Jenkins’s, it still offers a robust set of plugins and integrations that cover most DevOps requirements.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nFor teams already using GitLab, the learning curve for GitLab CI/CD is relatively gentle. The tool is designed with user-friendly interfaces and comprehensive documentation, making it easier for users to get started. Additionally, GitLab provides extensive tutorials and support resources, which help reduce the time and effort required for onboarding and mastering the tool.</li>\n</ul>\n<h3 id=\"circleci\"><strong>CircleCI</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nCircleCI is known for its fast build times, which are achieved through optimized caching and parallelism. These features significantly improve the efficiency of CI/CD pipelines by reducing the time it takes to execute builds and tests. CircleCI’s ability to handle multiple jobs simultaneously ensures that development cycles remain swift and productive, allowing teams to deliver updates quickly.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nCircleCI leverages cloud-based infrastructure to scale effortlessly with your project’s needs. Whether you’re handling small projects or large, complex applications, CircleCI can accommodate the increasing demands without any performance degradation. This scalability ensures that as your organization grows, CircleCI remains a reliable and effective CI/CD solution.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★☆<br>\nCircleCI has a growing ecosystem that offers strong support for modern languages and frameworks. While its ecosystem is not as extensive as some older tools, it is continuously expanding with new integrations and plugins. The active community provides valuable resources, including forums, documentation, and best practices, which help users maximize the tool’s potential.</li>\n<li><strong>Learning Curve</strong> ★★★★★<br>\nCircleCI is praised for its user-friendly interface and easy setup process. New users can quickly get started with minimal configuration, thanks to clear documentation and intuitive design. This ease of use reduces the time and effort required for onboarding, allowing teams to become productive with CircleCI in a shorter timeframe compared to more complex tools.</li>\n</ul>\n<h3 id=\"jenkins\"><strong>Jenkins</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★☆<br>\nJenkins is highly customizable, allowing teams to tailor it to their specific needs through a very complete list of plugins. This flexibility ensures that Jenkins can handle a wide range of tasks efficiently. However, the extensive customization can lead to increased resource consumption, which may impact performance, especially for larger projects or when numerous plugins are in use. Proper optimization and resource management are necessary to maintain optimal performance.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nJenkins excels in scalability, particularly with its support for distributed builds and pipelines. Organizations can set up multiple Jenkins agents across different servers to handle large-scale projects and increased workloads. This distributed architecture ensures that Jenkins can manage growing infrastructure needs without compromising performance (ideally), making it suitable for both small teams and large enterprises.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nJenkins boasts the largest CI/CD ecosystem, supported by a vast library of plugins and a strong, active community. This extensive ecosystem allows users to extend Jenkins’s functionality to meet diverse requirements, from integrating with various version control systems to deploying applications across different environments. The active community also means that users have access to a wealth of resources, including tutorials, forums, and regular updates.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nJenkins has a moderate learning curve. While it offers comprehensive documentation and a wealth of tutorials, the initial setup and configuration can be complex. However, once users become familiar with Jenkins’s interface and capabilities, they can leverage its powerful features effectively. The availability of numerous plugins and customization options may require additional time to master.</li>\n</ul>\n<hr>\n<h2 id=\"infrastructure-as-code-iac-tools\">Infrastructure as Code (IaC) Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/infrastructure-as-code-zrjvp.png\" alt=\"Infrastructure as Code\"></p>\n<p>Infrastructure as Code (IaC) tools are pivotal for automating the provisioning and management of infrastructure, ensuring consistency, scalability, and efficiency in deploying resources. Below, we evaluate some of the leading IaC tools available in 2025 based on key criteria, each rated out of five stars.</p>\n<h3 id=\"terraform\"><strong>Terraform</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nTerraform excels in efficient state management and resource provisioning. It uses a declarative language to define infrastructure, which allows for predictable and repeatable deployments. Terraform’s ability to manage dependencies and its parallel execution capabilities contribute to its high performance, making infrastructure changes swift and reliable.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nTerraform is highly scalable and capable of managing complex and large-scale infrastructures across multiple cloud providers. Its modular approach allows for the reuse of configurations, making it easier to handle expanding infrastructure needs without significant overhead. Whether you’re managing a few resources or thousands, Terraform scales seamlessly to meet your demands.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nTerraform boasts an extensive provider ecosystem, supporting a wide range of cloud platforms, services, and third-party tools. The strong community support means there are plenty of modules, plugins, and extensions available, which can accelerate the setup and customization of your infrastructure. The active Terraform community also provides valuable resources, tutorials, and forums for troubleshooting and best practices.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nTerraform has a moderate learning curve, primarily due to its use of the HashiCorp Configuration Language (HCL). While HCL is designed to be human-readable and straightforward, new users may need some time to become proficient. Comprehensive documentation and a wealth of tutorials help mitigate the learning challenges, allowing users to gradually build their expertise.</li>\n</ul>\n<h3 id=\"pulumi\"><strong>Pulumi</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★☆<br>\nPulumi utilizes modern programming languages such as JavaScript, TypeScript, Python, Go, and C#, which can enhance performance by leveraging familiar development practices. This approach allows for more dynamic and powerful infrastructure definitions. However, performance can vary depending on the complexity of the code and the efficiency of the underlying infrastructure providers.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nPulumi scales well with cloud-native applications and microservices architectures. Its support for infrastructure modularity and reusable components allows organizations to manage complex and distributed systems effectively. Pulumi’s ability to integrate with various cloud providers and services ensures that it can handle growing infrastructure demands seamlessly.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★☆<br>\nPulumi has an emerging ecosystem that is steadily growing in support of multiple programming languages and cloud platforms. While it may not yet match the extensive ecosystems of more established tools like Terraform or Ansible, Pulumi’s active development and increasing adoption are rapidly expanding its community and available resources.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nPulumi has a higher learning curve for users who are not familiar with the languages it supports. While leveraging general-purpose languages offers flexibility and power, it requires users to have coding expertise. Comprehensive documentation and examples help mitigate this challenge, but users may need additional time to become proficient compared to tools with simpler configuration languages.</li>\n</ul>\n<h2 id=\"containerization-and-orchestration-tools\">Containerization and Orchestration Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/container-orchestration-i0rgu.png\" alt=\"Container Orchestration\"></p>\n<h3 id=\"docker\">Docker</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nDocker excels at containerization with minimal overhead, offering fast and efficient deployment of applications. Its lightweight architecture ensures high performance while isolating environments effectively.</li>\n<li><strong>Scalability</strong> ★★★★☆<br>\nDocker scales efficiently for both small projects and large deployments. However integration with orchestration tools like Kubernetes is often necessary to manage complex systems at scale.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nAs the largest container ecosystem, Docker boasts extensive image repositories, plugins, and integrations. Its active community provides robust support and a wealth of learning resources.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nDocker is moderately easy to learn, especially for developers familiar with virtualization or container concepts. Its comprehensive documentation and tutorials make it accessible, though advanced features require more exploration.</li>\n</ul>\n<h3 id=\"kubernetes\">Kubernetes</h3>\n<ul>\n<li><strong>Performance ★★★★★</strong><br>\nKubernetes is a powerhouse in container orchestration, delivering highly efficient performance for containerized applications. Its advanced features like auto-scaling, load balancing, and self-healing ensure optimal resource utilization and application uptime.</li>\n<li><strong>Scalability ★★★★★</strong><br>\nKubernetes is built for exceptional scalability, supporting distributed, large-scale systems with thousands of containers across multi-cloud or hybrid environments. Its design enables seamless scaling of both applications and infrastructure.</li>\n<li><strong>Community and Ecosystem ★★★★★</strong><br>\nWith one of the largest and most vibrant ecosystems, Kubernetes offers a wealth of tools, extensions, and integrations. The active community provides extensive support, including tutorials, forums, and open-source contributions, making it an industry standard for container orchestration.</li>\n<li><strong>Learning Curve ★★☆☆☆</strong><br>\nKubernetes has a steep learning curve due to its complex architecture and vast feature set. While extensive documentation and resources are available, mastering Kubernetes requires significant time, effort, and hands-on experience, especially for managing advanced deployments.</li>\n</ul>\n<h3 id=\"docker-swarm\">Docker Swarm</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★☆<br>\nDocker Swarm delivers efficient container orchestration with lower overhead than more complex systems like Kubernetes. Its simplified approach ensures quick deployment and management of containerized applications, making it a great choice for lightweight orchestration tasks.</li>\n<li><strong>Scalability</strong> ★★★☆☆<br>\nDocker Swarm is ideal for small to medium-scale deployments. While it can handle moderate workloads, it lacks the advanced scalability features required for managing large systems distributed across multiple environments.</li>\n<li><strong>Community and Ecosystem</strong> ★★★☆☆<br>\nDocker Swarm integrates seamlessly with Docker, leveraging Docker’s extensive ecosystem. However, its dedicated ecosystem is smaller and less active compared to Kubernetes, limiting access to third-party tools and advanced community-driven solutions.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nDocker Swarm is straightforward and easy to learn, especially for developers already familiar with Docker. Its intuitive setup and configuration make it an excellent starting point for teams looking to adopt container orchestration without diving into the complexities of Kubernetes.</li>\n</ul>\n<h2 id=\"logging-and-monitoring-tools\">Logging and Monitoring Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/monitoring-and-logging-2quwy.png\" alt=\"Monitoring and Logging\"></p>\n<h3 id=\"prometheus\">Prometheus</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nPrometheus is highly efficient at collecting, storing, and querying time-series metrics. Its pull-based architecture and optimized storage engine make it ideal for monitoring high-performance systems.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nPrometheus scales well for dynamic environments, particularly in microservices and container-based architectures. With federation and sharding, it can handle large-scale setups effectively.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nPrometheus has a robust ecosystem, with tools like Grafana for visualization and Alertmanager for managing alerts. Its strong community provides a wealth of tutorials, plugins, and integrations, making it a staple in monitoring stacks.</li>\n<li><strong>Learning Curve</strong> ★★★☆☆<br>\nPrometheus is moderately challenging to learn, mainly due to its PromQL query language. While its documentation is comprehensive, understanding and leveraging PromQL effectively requires some learning effort.</li>\n</ul>\n<h3 id=\"elk-stack-elasticsearch-logstash-kibana\">ELK Stack (Elasticsearch, Logstash, Kibana)</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nThe ELK Stack excels in log aggregation, storage, and search. Elasticsearch provides fast, scalable search capabilities, while Logstash processes and transforms logs efficiently.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nELK is highly scalable, capable of handling vast volumes of logs and data across distributed architectures. It is widely used in large-scale environments requiring centralized logging solutions.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nWith an extensive ecosystem, the ELK Stack supports numerous plugins, integrations, and use cases. The community is highly active, offering ample resources, forums, and shared configurations.</li>\n<li><strong>Learning Curve</strong> ★★☆☆☆<br>\nThe learning curve for ELK is steep, as users must understand and configure each component—Elasticsearch, Logstash, and Kibana—effectively. The complexity increases when scaling and optimizing performance.</li>\n</ul>\n<h3 id=\"loki\">Loki</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★☆<br>\nLoki excels at aggregating and querying logs efficiently, particularly in Kubernetes and microservices setups. However, it doesn’t index logs by content, relying on labels instead, which can slightly limit complex querying performance compared to fully indexed systems.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nLoki scales seamlessly in distributed environments. Its architecture, mirroring Prometheus, makes it highly suitable for large-scale deployments. With the ability to shard and replicate data, Loki effectively supports dynamic and expansive infrastructures.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nLoki benefits from being part of the Grafana ecosystem, providing tight integration with Grafana dashboards for unified observability alongside Prometheus. Its active community and extensive plugins enhance its usability, ensuring strong support and continuous improvements.</li>\n<li><strong>Learning Curve</strong> ★★★☆☆<br>\nLoki is straightforward to set up and use, especially for those familiar with Prometheus and Grafana. However, the reliance on labels for querying can require adjustment for users accustomed to full-text search in other logging systems.</li>\n</ul>\n<h3 id=\"grafana\">Grafana</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nGrafana is a high-performance tool for data visualization, providing real-time, interactive dashboards for monitoring and analytics. Its ability to integrate with multiple data sources ensures seamless performance across diverse environments.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nGrafana scales effortlessly, supporting large datasets and multiple data sources. It is well-suited for both small and enterprise-level monitoring setups.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nWith a strong community and a wealth of plugins and integrations, Grafana is a leader in the visualization space. Its ecosystem supports various data sources like Prometheus, InfluxDB, and Elasticsearch, among others.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nGrafana is relatively easy to learn, with a user-friendly interface and intuitive dashboard creation. Beginners can get started quickly, while advanced users can leverage its extensive customization options.</li>\n</ul>\n<h2 id=\"configuration-management-tools\">Configuration Management Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/configuration-management-tools-fjrt5.png\" alt=\"Configuration Management Tools\"></p>\n<h3 id=\"chef\">Chef</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★☆<br>\nChef is highly efficient for managing complex configurations in diverse environments. Its Ruby-based approach allows for flexible and powerful automation, though it can be resource-intensive in large-scale setups.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nChef scales well for managing large infrastructures, making it ideal for enterprise-level deployments. Its ability to handle complex dependencies ensures smooth operations in extensive setups.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nChef has a mature ecosystem with a wide range of pre-built cookbooks and strong community support. This provides ample resources, from tutorials to shared configurations, enabling faster implementation.</li>\n<li><strong>Learning Curve</strong> ★★☆☆☆<br>\nChef has a steep learning curve, as it requires knowledge of Ruby and Chef’s DSL. While its documentation is comprehensive, mastering its features and effectively writing custom cookbooks can take significant effort.</li>\n</ul>\n<h3 id=\"puppet\">Puppet</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nPuppet delivers robust performance, especially in large-scale deployments. Its agent-based model ensures reliable configuration management and state enforcement across environments.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nPuppet is highly scalable and built to handle enterprise-grade infrastructures with thousands of nodes. Its declarative approach simplifies management in large, distributed systems.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nPuppet boasts an extensive ecosystem with a rich collection of pre-built modules. Its strong community offers excellent support, resources, and integrations for diverse use cases.</li>\n<li><strong>Learning Curve</strong> ★★☆☆☆<br>\nThe learning curve for Puppet is steep due to its custom DSL and complex architecture. Understanding its declarative syntax and implementing advanced configurations requires considerable time and expertise.</li>\n</ul>\n<h3 id=\"ansible\">Ansible</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nAnsible’s agentless architecture provides fast execution and minimal overhead, making it an efficient choice for managing configurations and automating workflows.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nAnsible scales effectively, managing large infrastructures with ease. Its simple architecture and modular design allow for efficient scaling across environments.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nAnsible has a strong community and a vast collection of modules, known as Ansible Galaxy. Its active ecosystem ensures users can find support, share playbooks, and integrate with various tools seamlessly.</li>\n<li><strong>Learning Curve</strong> ★★★★☆<br>\nAnsible is relatively easy to learn, thanks to its straightforward YAML-based playbooks. Beginners can quickly get started, while advanced users can explore its powerful automation features with minimal learning overhead.</li>\n</ul>\n<h2 id=\"secrets-management\">Secrets Management</h2>\n<h3 id=\"hashicorp-vault\">HashiCorp Vault</h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nHashiCorp Vault excels at secret management and encryption, offering high performance and reliability for securely storing and accessing sensitive information. Its ability to handle dynamic secrets and encryption services ensures efficient operations in diverse environments.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nVault scales seamlessly, making it suitable for managing secrets across large and distributed infrastructures. It integrates well with various platforms and services, providing robust support for enterprise-level setups.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nVault has a strong ecosystem, with numerous integrations and a dedicated community providing extensive support. Its documentation, tutorials, and plugins make it highly adaptable to various use cases.</li>\n<li><strong>Learning Curve</strong> ★★★☆☆<br>\nThe learning curve is moderate, requiring users to understand Vault’s architecture, policies, and authentication methods. While its documentation is thorough, setting up and managing complex configurations demands time and expertise.</li>\n</ul>\n<h3 id=\"sops-simple-and-secure-operations\"><strong>SOPS (Simple and Secure Operations)</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nSOPS is highly efficient for encrypting and decrypting files. It integrates seamlessly with various cloud KMS solutions and supports multiple encryption formats (YAML, JSON, ENV, etc.), making it a robust tool for managing sensitive data.</li>\n<li><strong>Scalability</strong> ★★★★☆<br>\nSOPS scales well for environments with multiple developers or teams, as it can handle keys for multiple users. However, managing large numbers of encrypted files might require careful orchestration and automation to avoid complexity.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★★<br>\nSOPS has a strong community and integrates well with popular infrastructure-as-code tools like Terraform, Kubernetes, and Helm. Its compatibility with multiple key management systems (AWS KMS, GCP KMS, Azure Key Vault, PGP, etc.) makes it highly versatile and widely adopted.</li>\n<li><strong>Learning Curve</strong> ★★★☆☆<br>\nSOPS is relatively straightforward to use for basic encryption needs, but understanding the nuances of key management and integrating it into CI/CD pipelines requires some learning and experimentation.</li>\n</ul>\n<h3 id=\"sealed-secrets-kubernetes\"><strong>Sealed Secrets (Kubernetes)</strong></h3>\n<ul>\n<li><strong>Performance</strong> ★★★★★<br>\nSealed Secrets is purpose-built for Kubernetes and performs exceptionally well in encrypting and decrypting secrets. Its server-side controller efficiently handles encryption, ensuring high availability and low latency in managing secrets.</li>\n<li><strong>Scalability</strong> ★★★★★<br>\nDesigned for Kubernetes, Sealed Secrets scales seamlessly with clusters of any size. Its encryption model allows secrets to be safely shared and stored in version control without compromising security, making it ideal for large, distributed teams.</li>\n<li><strong>Community and Ecosystem</strong> ★★★★☆<br>\nSealed Secrets has a dedicated but smaller community compared to broader tools like SOPS. However, its Kubernetes-specific nature limits its ecosystem integrations outside Kubernetes workflows. It works well with Helm and GitOps practices but is less versatile for non-Kubernetes use cases.</li>\n<li><strong>Learning Curve</strong> ★★★☆☆<br>\nSealed Secrets is easy to adopt for Kubernetes users due to its intuitive interface and integration with the ecosystem. However, understanding the controller mechanics and properly managing the key rotation process might require some Kubernetes expertise.</li>\n</ul>\n<h2 id=\"security-and-compliance-tools\">Security and Compliance Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/security-compliance-vpz26.png\" alt=\"Security and Compliance Tools\"></p>\n<p>Tools in this category empower security teams to identify vulnerabilities, manage secrets, enforce compliance policies, and maintain secure environments. By integrating these tools early in the development lifecycle, organizations can shift security left and build robust systems without compromising speed or agility.</p>\n<h3 id=\"owasp-zap\">OWASP ZAP</h3>\n<ul>\n<li><strong>Performance ★★★★★</strong><br>\nOWASP ZAP is highly efficient for automated security testing and vulnerability scanning, providing reliable results for web application security. Its flexibility makes it a valuable tool for identifying vulnerabilities in various environments.</li>\n<li><strong>Scalability ★★★★☆</strong><br>\nZAP is suitable for both small-scale projects and larger applications, scaling effectively with the needs of diverse teams. However, for extensive enterprise environments, it may require additional tuning and integration.</li>\n<li><strong>Community and Ecosystem ★★★★★</strong><br>\nWith strong community support, OWASP ZAP offers numerous plugins, extensions, and integrations. Its active user base ensures a wealth of resources, from shared scripts to tutorials and forums.</li>\n<li><strong>Learning Curve ★★★★☆</strong><br>\nZAP is relatively easy to learn, especially for users familiar with security testing concepts. Its intuitive interface and extensive resources allow beginners to get started quickly while offering advanced features for seasoned testers.</li>\n</ul>\n<h3 id=\"aqua-security\">Aqua Security</h3>\n<ul>\n<li><strong>Performance ★★★★★</strong><br>\nAqua Security provides comprehensive protection for containerized applications and Kubernetes, ensuring efficient detection and mitigation of vulnerabilities. Its advanced features, such as runtime protection and compliance checks, enhance performance across cloud-native environments.</li>\n<li><strong>Scalability ★★★★★</strong><br>\nAqua Security scales efficiently with modern DevOps and cloud-native environments, making it ideal for enterprises with dynamic and distributed infrastructures.</li>\n<li><strong>Community and Ecosystem ★★★★☆</strong><br>\nAqua Security has a growing ecosystem with strong support for modern <a href=\"https://roadmap.sh/devops/best-practices\" target=\"_blank\">DevOps practices</a>. While its community is not as large as some established tools, its partnerships and integrations ensure robust adaptability.</li>\n<li><strong>Learning Curve ★★★☆☆</strong><br>\nThe learning curve for Aqua Security is moderate, requiring users to understand container security principles and Kubernetes configurations. Its clear documentation and training resources ease the process, though advanced features may take time to master.</li>\n</ul>\n<h2 id=\"expert-recommendations-on-devops-tools\">Expert Recommendations on DevOps Tools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/expert-advice-best-devops-tools-qyihk.png\" alt=\"Expert Recommendations on DevOps Tools\"></p>\n<p>If you’re wondering after all of this, which are the best options for you in terms of DevOps tools, then you’re not alone. The problem is that you can’t really decide without some sort of context around the options.</p>\n<p>So using the following summarized table, I’m going to try and help you decide on the right DevOps tools for your needs.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-tools-summary.png\" alt=\"DevOps tools summary\"></p>\n<h3 id=\"best-cicd-tool-gitlab-cicd\">Best CI/CD Tool: GitLab CI/CD</h3>\n<h4 id=\"ratings-for-gitlab-cicd\">Ratings for GitLab CI/CD</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★★☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nGitLab is the top choice for CI/CD because it provides an all-in-one solution for version control, continuous deployment &#x26; integration pipelines, and deployment. It supports complex workflows, offers strong scalability for enterprise needs, and has extensive community and ecosystem support. Its YAML-based pipeline definitions make it powerful yet user-friendly. Compared to Jenkins, it requires less setup and maintenance, and its integration with GitLab repositories makes it an ideal choice for teams already using GitLab.</p>\n<h3 id=\"best-infrastructure-as-code-tool-terraform--hashicorp-vault\">Best Infrastructure as Code Tool: Terraform + HashiCorp Vault</h3>\n<h4 id=\"ratings-for-hashicorp-vault\">Ratings for HashiCorp Vault</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★☆☆</strong></li>\n</ul>\n<h4 id=\"ratings-for-terraform\">Ratings for Terraform</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★★☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nWhile Terraform leads in IaC, HashiCorp Vault complements it by managing secrets and sensitive credentials. Vault integrates seamlessly into IaC workflows, ensuring secure and scalable deployments. Its robust ecosystem and advanced security features make it indispensable for IaC practices.</p>\n<h3 id=\"best-containerization-tool-docker\">Best Containerization Tool: Docker</h3>\n<h4 id=\"ratings-for-docker\">Ratings for Docker</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★☆</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★★☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nDocker is the cornerstone of containerization, offering lightweight, efficient, and reliable application deployment. Its extensive ecosystem of pre-configured images simplifies container management, and it integrates well with orchestration tools like Kubernetes for scalable environments.</p>\n<h3 id=\"best-monitoring-and-logging-tool-prometheus-with-grafana\">Best Monitoring and Logging Tool: Prometheus (with Grafana)</h3>\n<h4 id=\"ratings-for-prometheus\">Ratings for Prometheus</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★☆☆</strong></li>\n</ul>\n<h4 id=\"ratings-for-grafana\">Ratings for Grafana</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★★☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nPrometheus excels in collecting and storing time-series metrics, while Grafana provides powerful, real-time visualization. Together, they offer an unparalleled monitoring and logging solution for cloud-native environments, ensuring scalability and robust performance insights.</p>\n<h3 id=\"best-configuration-management-tool-puppet\">Best Configuration Management Tool: Puppet</h3>\n<h4 id=\"ratings-for-puppet\">Ratings for Puppet</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★☆☆☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nPuppet’s agent-based model ensures consistent and reliable configuration management across large-scale deployments. Its extensive module library and declarative approach make it a go-to choice for managing complex infrastructures, despite its steep learning curve.</p>\n<h3 id=\"best-security-and-compliance-tool-hashicorp-vault\">Best Security and Compliance Tool: HashiCorp Vault</h3>\n<h4 id=\"ratings-for-hashicorp-vault-1\">Ratings for HashiCorp Vault</h4>\n<ul>\n<li><strong>Performance: ★★★★★</strong></li>\n<li><strong>Scalability: ★★★★★</strong></li>\n<li><strong>Community and Ecosystem: ★★★★★</strong></li>\n<li><strong>Learning Curve: ★★★☆☆</strong></li>\n</ul>\n<p><strong>Why:</strong><br>\nHashiCorp Vault is the gold standard for managing secrets and ensuring encryption. Its scalability, performance, and strong integrations make it ideal for maintaining compliance and securing sensitive data in dynamic, large-scale environments.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Selecting the right DevOps tool requires careful consideration of your organization’s specific needs, project scale, and team expertise. While tools like Kubernetes and ELK Stack excel in scalability, others like Docker Swarm and OWASP ZAP are better suited for simpler setups.</p>\n<p>Aligning what the tool can do with your context (your workflow) ensures maximum efficiency and minimal overhead. Start small, but think big—plan for tools that can grow with your infrastructure.</p>\n<p>For a deeper dive into building a robust DevOps workflow, explore the <a href=\"https://roadmap.sh/devops\" target=\"_blank\"><strong>DevOps Roadmap</strong></a>. It’s a comprehensive guide to understanding essential <a href=\"https://roadmap.sh/devops/skills\" target=\"_blank\">skills</a>, technologies, and processes for optimizing your development pipeline.</p>";

				const frontmatter$U = {"title":"21 Best DevOps Tools from Essentials to Advanced and Pro","description":"Maximize efficiency with top DevOps tools for all expertise levels. Find the perfect solutions to automate, integrate, and optimize your software delivery pipeline.","authorId":"fernando","excludedBySlug":"/devops/tools","seo":{"title":"21 Best DevOps Tools from Essentials to Advanced and Pro","description":"Maximize efficiency with top DevOps tools for all expertise levels. Find the perfect solutions to automate, integrate, and optimize your software delivery pipeline.","ogImageUrl":"https://assets.roadmap.sh/guest/best-devops-tools-3vo92.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-11-29T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$U = "/workspace/src/data/guides/devops-tools.md";
				const url$U = undefined;
				function rawContent$U() {
					return "   \n                                                                 \n                                                                                                                                                                                   \n                  \n                               \n    \n                                                                   \n                                                                                                                                                                                     \n                                                                           \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best DevOps tools to use](https://assets.roadmap.sh/guest/best-devops-tools-3vo92.jpg)\n\nChoosing the right DevOps tools can make a significant difference in how effectively your team develops and delivers software. With so many options available in 2025, it can be challenging to determine which tools best fit your organization’s needs.\n\nThis article is designed to help development and operations teams (and their organizations) navigate the landscape of DevOps tools, from the most essential to advanced and pro-level solutions.\n\nWhether you are just starting with [DevOps](https://roadmap.sh/devops) or looking to enhance your existing processes, this guide will provide clear and practical information to support your decision-making.\n\nThroughout this article, we’ll cover and evaluate the following technologies:\n\n* **Continuous Integration/Continuous Deployment (CI/CD) tools:** Jenkins, GitLab, CircleCI, GitHub Actions\n* **Infrastructure as Code (IaC) Tools:** Terraform, Pulumi\n* **Containerization and Orchestration Tools:** Docker, Kubernetes, Docker Swarm\n* **Logging and Monitoring Tools:** Prometheus, ELK, Grafana, Loki\n* **Configuration Management Tools:** Chef, Puppet, Ansible\n* **Secrets Management**: HashiCorp Vault, Sealed Secrets, SOPS\n* **Security and Compliance Tools:** OWASP ZAP, Aqua Security.\n\n## Evaluation Criteria for DevOps Tools\n\nWhen selecting the best DevOps tools for your organization, it's important to evaluate each option based on several key factors. These criteria will help ensure that the DevOps tools you choose not only meet your current needs but also support your growth and adapt to future changes. Below are the primary categories we use to assess each DevOps tool:\n\n* **Performance:** Efficiency, speed, and resource utilization to enhance productivity.\n* **Scalability:** Ability to handle growing workloads and infrastructure seamlessly.\n* **Community and Ecosystem:** Availability of plugins, integrations, and strong community support.\n* **Learning Curve:** Ease of adoption and quality of documentation for quick onboarding.\n\n\n## Continuous Integration/Continuous Deployment (CI/CD) tools\n\n![CI/CD Tools](https://assets.roadmap.sh/guest/contiuous-integration-vs-continous-deploment-9c872.png)\n\nThis specific type of DevOps tools are essential for automating the [software development lifecycle](https://roadmap.sh/devops/lifecycle) as well as the deployment process. A continuous integration & continuous deployment platform (which takes continuous delivery one step further) enables developers to integrate code changes continuously (thus the name\\!) and deploy them efficiently. Below, we evaluate some of the top integration & deployment DevOps tools in this category available in 2025 based on key criteria, each rated out of five stars.\n\n### **GitHub Actions**\n\n* **Performance** ★★★★★  \n  GitHub Actions offers efficient execution of CI/CD workflows by leveraging GitHub’s robust infrastructure. This seamless integration ensures that workflows run smoothly and reliably, minimizing delays and improving overall performance. The ability to trigger actions directly from GitHub repositories enhances the speed and efficiency of the development and deployment processes.\n* **Scalability** ★★★★★  \n  GitHub Actions scales exceptionally well with GitHub’s infrastructure, making it suitable for projects of all sizes, from small personal repositories to large enterprise applications. The platform can handle high volumes of workflows and concurrent executions, ensuring that your CI/CD pipelines remain effective as your project and team grow.\n* **Community and Ecosystem** ★★★★★  \n  GitHub Actions benefits from an extensive marketplace filled with numerous pre-built actions that can be easily integrated into your workflows. This rich ecosystem allows users to find and implement actions for a wide variety of tasks, from testing and deployment to notifications and security checks. The strong community support further enhances the value of GitHub Actions, providing access to shared knowledge and resources.\n* **Learning Curve** ★★★★☆  \n  GitHub Actions is relatively easy to learn, especially for users already familiar with GitHub’s interface and repository management. The use of YAML-based workflows is intuitive and straightforward, and there is ample documentation available to guide users through the setup and configuration process. While it is user-friendly, mastering more advanced features may require additional learning and experimentation.\n\n### **GitLab**\n\n* **Performance** ★★★★★  \n  GitLab CI/CD offers efficient pipeline execution, particularly with its built-in Kubernetes integration. This integration allows for seamless deployment and scaling of applications, enhancing overall performance. GitLab’s optimized runners and caching mechanisms ensure that build and deployment processes are swift and reliable, minimizing downtime and accelerating the development cycle.\n* **Scalability** ★★★★★  \n  GitLab is designed to scale effortlessly with large projects and teams. Its architecture supports the management of multiple pipelines and extensive workloads without sacrificing performance. Whether you’re handling a small repository or a complex, multi-project environment, GitLab can accommodate your needs, making it an excellent choice for growing organizations.\n* **Community and Ecosystem** ★★★★☆  \n  GitLab CI/CD benefits from a strong community and is tightly integrated with GitLab’s comprehensive suite of tools. This integration provides a unified platform for version control, issue tracking, and CI/CD, enhancing productivity and collaboration. While the ecosystem may not be as extensive as Jenkins’s, it still offers a robust set of plugins and integrations that cover most DevOps requirements.\n* **Learning Curve** ★★★★☆  \n  For teams already using GitLab, the learning curve for GitLab CI/CD is relatively gentle. The tool is designed with user-friendly interfaces and comprehensive documentation, making it easier for users to get started. Additionally, GitLab provides extensive tutorials and support resources, which help reduce the time and effort required for onboarding and mastering the tool.\n\n### **CircleCI**\n\n* **Performance** ★★★★★  \n  CircleCI is known for its fast build times, which are achieved through optimized caching and parallelism. These features significantly improve the efficiency of CI/CD pipelines by reducing the time it takes to execute builds and tests. CircleCI’s ability to handle multiple jobs simultaneously ensures that development cycles remain swift and productive, allowing teams to deliver updates quickly.\n* **Scalability** ★★★★★  \n  CircleCI leverages cloud-based infrastructure to scale effortlessly with your project’s needs. Whether you’re handling small projects or large, complex applications, CircleCI can accommodate the increasing demands without any performance degradation. This scalability ensures that as your organization grows, CircleCI remains a reliable and effective CI/CD solution.\n* **Community and Ecosystem** ★★★★☆  \n  CircleCI has a growing ecosystem that offers strong support for modern languages and frameworks. While its ecosystem is not as extensive as some older tools, it is continuously expanding with new integrations and plugins. The active community provides valuable resources, including forums, documentation, and best practices, which help users maximize the tool’s potential.\n* **Learning Curve** ★★★★★  \n  CircleCI is praised for its user-friendly interface and easy setup process. New users can quickly get started with minimal configuration, thanks to clear documentation and intuitive design. This ease of use reduces the time and effort required for onboarding, allowing teams to become productive with CircleCI in a shorter timeframe compared to more complex tools.\n\n### **Jenkins**\n\n* **Performance** ★★★★☆  \n  Jenkins is highly customizable, allowing teams to tailor it to their specific needs through a very complete list of plugins. This flexibility ensures that Jenkins can handle a wide range of tasks efficiently. However, the extensive customization can lead to increased resource consumption, which may impact performance, especially for larger projects or when numerous plugins are in use. Proper optimization and resource management are necessary to maintain optimal performance.\n* **Scalability** ★★★★★  \n  Jenkins excels in scalability, particularly with its support for distributed builds and pipelines. Organizations can set up multiple Jenkins agents across different servers to handle large-scale projects and increased workloads. This distributed architecture ensures that Jenkins can manage growing infrastructure needs without compromising performance (ideally), making it suitable for both small teams and large enterprises.\n* **Community and Ecosystem** ★★★★★  \n  Jenkins boasts the largest CI/CD ecosystem, supported by a vast library of plugins and a strong, active community. This extensive ecosystem allows users to extend Jenkins’s functionality to meet diverse requirements, from integrating with various version control systems to deploying applications across different environments. The active community also means that users have access to a wealth of resources, including tutorials, forums, and regular updates.\n* **Learning Curve** ★★★★☆  \n  Jenkins has a moderate learning curve. While it offers comprehensive documentation and a wealth of tutorials, the initial setup and configuration can be complex. However, once users become familiar with Jenkins’s interface and capabilities, they can leverage its powerful features effectively. The availability of numerous plugins and customization options may require additional time to master.\n\n---\n\n## Infrastructure as Code (IaC) Tools\n\n![Infrastructure as Code](https://assets.roadmap.sh/guest/infrastructure-as-code-zrjvp.png)\n\nInfrastructure as Code (IaC) tools are pivotal for automating the provisioning and management of infrastructure, ensuring consistency, scalability, and efficiency in deploying resources. Below, we evaluate some of the leading IaC tools available in 2025 based on key criteria, each rated out of five stars.\n\n### **Terraform**\n\n* **Performance** ★★★★★  \n  Terraform excels in efficient state management and resource provisioning. It uses a declarative language to define infrastructure, which allows for predictable and repeatable deployments. Terraform's ability to manage dependencies and its parallel execution capabilities contribute to its high performance, making infrastructure changes swift and reliable.\n* **Scalability** ★★★★★  \n  Terraform is highly scalable and capable of managing complex and large-scale infrastructures across multiple cloud providers. Its modular approach allows for the reuse of configurations, making it easier to handle expanding infrastructure needs without significant overhead. Whether you're managing a few resources or thousands, Terraform scales seamlessly to meet your demands.\n* **Community and Ecosystem** ★★★★★  \n  Terraform boasts an extensive provider ecosystem, supporting a wide range of cloud platforms, services, and third-party tools. The strong community support means there are plenty of modules, plugins, and extensions available, which can accelerate the setup and customization of your infrastructure. The active Terraform community also provides valuable resources, tutorials, and forums for troubleshooting and best practices.\n* **Learning Curve** ★★★★☆  \n  Terraform has a moderate learning curve, primarily due to its use of the HashiCorp Configuration Language (HCL). While HCL is designed to be human-readable and straightforward, new users may need some time to become proficient. Comprehensive documentation and a wealth of tutorials help mitigate the learning challenges, allowing users to gradually build their expertise.\n\n### **Pulumi**\n\n* **Performance** ★★★★☆  \n  Pulumi utilizes modern programming languages such as JavaScript, TypeScript, Python, Go, and C\\#, which can enhance performance by leveraging familiar development practices. This approach allows for more dynamic and powerful infrastructure definitions. However, performance can vary depending on the complexity of the code and the efficiency of the underlying infrastructure providers.\n* **Scalability** ★★★★★  \n  Pulumi scales well with cloud-native applications and microservices architectures. Its support for infrastructure modularity and reusable components allows organizations to manage complex and distributed systems effectively. Pulumi's ability to integrate with various cloud providers and services ensures that it can handle growing infrastructure demands seamlessly.\n* **Community and Ecosystem** ★★★★☆  \n  Pulumi has an emerging ecosystem that is steadily growing in support of multiple programming languages and cloud platforms. While it may not yet match the extensive ecosystems of more established tools like Terraform or Ansible, Pulumi's active development and increasing adoption are rapidly expanding its community and available resources.\n* **Learning Curve** ★★★★☆  \n  Pulumi has a higher learning curve for users who are not familiar with the languages it supports. While leveraging general-purpose languages offers flexibility and power, it requires users to have coding expertise. Comprehensive documentation and examples help mitigate this challenge, but users may need additional time to become proficient compared to tools with simpler configuration languages.\n\n## Containerization and Orchestration Tools\n\n![Container Orchestration](https://assets.roadmap.sh/guest/container-orchestration-i0rgu.png)\n\n### Docker\n\n* **Performance** ★★★★★  \n  Docker excels at containerization with minimal overhead, offering fast and efficient deployment of applications. Its lightweight architecture ensures high performance while isolating environments effectively.\n* **Scalability** ★★★★☆  \n  Docker scales efficiently for both small projects and large deployments. However integration with orchestration tools like Kubernetes is often necessary to manage complex systems at scale.\n* **Community and Ecosystem** ★★★★★  \n  As the largest container ecosystem, Docker boasts extensive image repositories, plugins, and integrations. Its active community provides robust support and a wealth of learning resources.\n* **Learning Curve** ★★★★☆  \n  Docker is moderately easy to learn, especially for developers familiar with virtualization or container concepts. Its comprehensive documentation and tutorials make it accessible, though advanced features require more exploration.\n\n### Kubernetes\n\n* **Performance ★★★★★**  \n  Kubernetes is a powerhouse in container orchestration, delivering highly efficient performance for containerized applications. Its advanced features like auto-scaling, load balancing, and self-healing ensure optimal resource utilization and application uptime.\n* **Scalability ★★★★★**  \n  Kubernetes is built for exceptional scalability, supporting distributed, large-scale systems with thousands of containers across multi-cloud or hybrid environments. Its design enables seamless scaling of both applications and infrastructure.\n* **Community and Ecosystem ★★★★★**  \n  With one of the largest and most vibrant ecosystems, Kubernetes offers a wealth of tools, extensions, and integrations. The active community provides extensive support, including tutorials, forums, and open-source contributions, making it an industry standard for container orchestration.\n* **Learning Curve ★★☆☆☆**  \n  Kubernetes has a steep learning curve due to its complex architecture and vast feature set. While extensive documentation and resources are available, mastering Kubernetes requires significant time, effort, and hands-on experience, especially for managing advanced deployments.\n\n### Docker Swarm\n\n* **Performance** ★★★★☆  \n  Docker Swarm delivers efficient container orchestration with lower overhead than more complex systems like Kubernetes. Its simplified approach ensures quick deployment and management of containerized applications, making it a great choice for lightweight orchestration tasks.\n* **Scalability** ★★★☆☆  \n  Docker Swarm is ideal for small to medium-scale deployments. While it can handle moderate workloads, it lacks the advanced scalability features required for managing large systems distributed across multiple environments.\n* **Community and Ecosystem** ★★★☆☆  \n  Docker Swarm integrates seamlessly with Docker, leveraging Docker's extensive ecosystem. However, its dedicated ecosystem is smaller and less active compared to Kubernetes, limiting access to third-party tools and advanced community-driven solutions.\n* **Learning Curve** ★★★★☆  \n  Docker Swarm is straightforward and easy to learn, especially for developers already familiar with Docker. Its intuitive setup and configuration make it an excellent starting point for teams looking to adopt container orchestration without diving into the complexities of Kubernetes.\n\n## Logging and Monitoring Tools\n\n![Monitoring and Logging](https://assets.roadmap.sh/guest/monitoring-and-logging-2quwy.png)\n\n### Prometheus\n\n* **Performance** ★★★★★  \n  Prometheus is highly efficient at collecting, storing, and querying time-series metrics. Its pull-based architecture and optimized storage engine make it ideal for monitoring high-performance systems.\n* **Scalability** ★★★★★  \n  Prometheus scales well for dynamic environments, particularly in microservices and container-based architectures. With federation and sharding, it can handle large-scale setups effectively.\n* **Community and Ecosystem** ★★★★★  \n  Prometheus has a robust ecosystem, with tools like Grafana for visualization and Alertmanager for managing alerts. Its strong community provides a wealth of tutorials, plugins, and integrations, making it a staple in monitoring stacks.\n* **Learning Curve** ★★★☆☆  \n  Prometheus is moderately challenging to learn, mainly due to its PromQL query language. While its documentation is comprehensive, understanding and leveraging PromQL effectively requires some learning effort.\n\n### ELK Stack (Elasticsearch, Logstash, Kibana)\n\n* **Performance** ★★★★★  \n  The ELK Stack excels in log aggregation, storage, and search. Elasticsearch provides fast, scalable search capabilities, while Logstash processes and transforms logs efficiently.\n* **Scalability** ★★★★★  \n  ELK is highly scalable, capable of handling vast volumes of logs and data across distributed architectures. It is widely used in large-scale environments requiring centralized logging solutions.\n* **Community and Ecosystem** ★★★★★  \n  With an extensive ecosystem, the ELK Stack supports numerous plugins, integrations, and use cases. The community is highly active, offering ample resources, forums, and shared configurations.\n* **Learning Curve** ★★☆☆☆  \n  The learning curve for ELK is steep, as users must understand and configure each component—Elasticsearch, Logstash, and Kibana—effectively. The complexity increases when scaling and optimizing performance.\n\n### Loki\n\n* **Performance** ★★★★☆  \n  Loki excels at aggregating and querying logs efficiently, particularly in Kubernetes and microservices setups. However, it doesn't index logs by content, relying on labels instead, which can slightly limit complex querying performance compared to fully indexed systems.\n* **Scalability** ★★★★★  \n  Loki scales seamlessly in distributed environments. Its architecture, mirroring Prometheus, makes it highly suitable for large-scale deployments. With the ability to shard and replicate data, Loki effectively supports dynamic and expansive infrastructures.\n* **Community and Ecosystem** ★★★★★  \n  Loki benefits from being part of the Grafana ecosystem, providing tight integration with Grafana dashboards for unified observability alongside Prometheus. Its active community and extensive plugins enhance its usability, ensuring strong support and continuous improvements.\n* **Learning Curve** ★★★☆☆  \n  Loki is straightforward to set up and use, especially for those familiar with Prometheus and Grafana. However, the reliance on labels for querying can require adjustment for users accustomed to full-text search in other logging systems.\n\n### Grafana\n\n* **Performance** ★★★★★  \n  Grafana is a high-performance tool for data visualization, providing real-time, interactive dashboards for monitoring and analytics. Its ability to integrate with multiple data sources ensures seamless performance across diverse environments.\n* **Scalability** ★★★★★  \n  Grafana scales effortlessly, supporting large datasets and multiple data sources. It is well-suited for both small and enterprise-level monitoring setups.\n* **Community and Ecosystem** ★★★★★  \n  With a strong community and a wealth of plugins and integrations, Grafana is a leader in the visualization space. Its ecosystem supports various data sources like Prometheus, InfluxDB, and Elasticsearch, among others.\n* **Learning Curve** ★★★★☆  \n  Grafana is relatively easy to learn, with a user-friendly interface and intuitive dashboard creation. Beginners can get started quickly, while advanced users can leverage its extensive customization options.\n\n## Configuration Management Tools\n\n![Configuration Management Tools](https://assets.roadmap.sh/guest/configuration-management-tools-fjrt5.png)\n\n### Chef\n\n* **Performance** ★★★★☆  \n  Chef is highly efficient for managing complex configurations in diverse environments. Its Ruby-based approach allows for flexible and powerful automation, though it can be resource-intensive in large-scale setups.\n* **Scalability** ★★★★★  \n  Chef scales well for managing large infrastructures, making it ideal for enterprise-level deployments. Its ability to handle complex dependencies ensures smooth operations in extensive setups.\n* **Community and Ecosystem** ★★★★★  \n  Chef has a mature ecosystem with a wide range of pre-built cookbooks and strong community support. This provides ample resources, from tutorials to shared configurations, enabling faster implementation.\n* **Learning Curve** ★★☆☆☆  \n  Chef has a steep learning curve, as it requires knowledge of Ruby and Chef’s DSL. While its documentation is comprehensive, mastering its features and effectively writing custom cookbooks can take significant effort.\n\n### Puppet\n\n* **Performance** ★★★★★  \n  Puppet delivers robust performance, especially in large-scale deployments. Its agent-based model ensures reliable configuration management and state enforcement across environments.\n* **Scalability** ★★★★★  \n  Puppet is highly scalable and built to handle enterprise-grade infrastructures with thousands of nodes. Its declarative approach simplifies management in large, distributed systems.\n* **Community and Ecosystem** ★★★★★  \n  Puppet boasts an extensive ecosystem with a rich collection of pre-built modules. Its strong community offers excellent support, resources, and integrations for diverse use cases.\n* **Learning Curve** ★★☆☆☆  \n  The learning curve for Puppet is steep due to its custom DSL and complex architecture. Understanding its declarative syntax and implementing advanced configurations requires considerable time and expertise.\n\n### Ansible\n\n* **Performance** ★★★★★  \n  Ansible's agentless architecture provides fast execution and minimal overhead, making it an efficient choice for managing configurations and automating workflows.\n* **Scalability** ★★★★★  \n  Ansible scales effectively, managing large infrastructures with ease. Its simple architecture and modular design allow for efficient scaling across environments.\n* **Community and Ecosystem** ★★★★★  \n  Ansible has a strong community and a vast collection of modules, known as Ansible Galaxy. Its active ecosystem ensures users can find support, share playbooks, and integrate with various tools seamlessly.\n* **Learning Curve** ★★★★☆  \n  Ansible is relatively easy to learn, thanks to its straightforward YAML-based playbooks. Beginners can quickly get started, while advanced users can explore its powerful automation features with minimal learning overhead.\n\n## Secrets Management\n\n### HashiCorp Vault\n\n* **Performance** ★★★★★  \n  HashiCorp Vault excels at secret management and encryption, offering high performance and reliability for securely storing and accessing sensitive information. Its ability to handle dynamic secrets and encryption services ensures efficient operations in diverse environments.\n* **Scalability** ★★★★★  \n  Vault scales seamlessly, making it suitable for managing secrets across large and distributed infrastructures. It integrates well with various platforms and services, providing robust support for enterprise-level setups.\n* **Community and Ecosystem** ★★★★★  \n  Vault has a strong ecosystem, with numerous integrations and a dedicated community providing extensive support. Its documentation, tutorials, and plugins make it highly adaptable to various use cases.\n* **Learning Curve** ★★★☆☆  \n  The learning curve is moderate, requiring users to understand Vault's architecture, policies, and authentication methods. While its documentation is thorough, setting up and managing complex configurations demands time and expertise.\n\n### **SOPS (Simple and Secure Operations)**\n\n* **Performance** ★★★★★  \n  SOPS is highly efficient for encrypting and decrypting files. It integrates seamlessly with various cloud KMS solutions and supports multiple encryption formats (YAML, JSON, ENV, etc.), making it a robust tool for managing sensitive data.\n* **Scalability** ★★★★☆  \n  SOPS scales well for environments with multiple developers or teams, as it can handle keys for multiple users. However, managing large numbers of encrypted files might require careful orchestration and automation to avoid complexity.\n* **Community and Ecosystem** ★★★★★  \n  SOPS has a strong community and integrates well with popular infrastructure-as-code tools like Terraform, Kubernetes, and Helm. Its compatibility with multiple key management systems (AWS KMS, GCP KMS, Azure Key Vault, PGP, etc.) makes it highly versatile and widely adopted.\n* **Learning Curve** ★★★☆☆  \n  SOPS is relatively straightforward to use for basic encryption needs, but understanding the nuances of key management and integrating it into CI/CD pipelines requires some learning and experimentation.\n\n### **Sealed Secrets (Kubernetes)**\n\n* **Performance** ★★★★★  \n  Sealed Secrets is purpose-built for Kubernetes and performs exceptionally well in encrypting and decrypting secrets. Its server-side controller efficiently handles encryption, ensuring high availability and low latency in managing secrets.\n* **Scalability** ★★★★★  \n  Designed for Kubernetes, Sealed Secrets scales seamlessly with clusters of any size. Its encryption model allows secrets to be safely shared and stored in version control without compromising security, making it ideal for large, distributed teams.\n* **Community and Ecosystem** ★★★★☆  \n  Sealed Secrets has a dedicated but smaller community compared to broader tools like SOPS. However, its Kubernetes-specific nature limits its ecosystem integrations outside Kubernetes workflows. It works well with Helm and GitOps practices but is less versatile for non-Kubernetes use cases.\n* **Learning Curve** ★★★☆☆  \n  Sealed Secrets is easy to adopt for Kubernetes users due to its intuitive interface and integration with the ecosystem. However, understanding the controller mechanics and properly managing the key rotation process might require some Kubernetes expertise.\n\n## Security and Compliance Tools\n\n![Security and Compliance Tools](https://assets.roadmap.sh/guest/security-compliance-vpz26.png)\n\nTools in this category empower security teams to identify vulnerabilities, manage secrets, enforce compliance policies, and maintain secure environments. By integrating these tools early in the development lifecycle, organizations can shift security left and build robust systems without compromising speed or agility.\n\n### OWASP ZAP\n\n* **Performance ★★★★★**  \n  OWASP ZAP is highly efficient for automated security testing and vulnerability scanning, providing reliable results for web application security. Its flexibility makes it a valuable tool for identifying vulnerabilities in various environments.\n* **Scalability ★★★★☆**  \n  ZAP is suitable for both small-scale projects and larger applications, scaling effectively with the needs of diverse teams. However, for extensive enterprise environments, it may require additional tuning and integration.\n* **Community and Ecosystem ★★★★★**  \n  With strong community support, OWASP ZAP offers numerous plugins, extensions, and integrations. Its active user base ensures a wealth of resources, from shared scripts to tutorials and forums.\n* **Learning Curve ★★★★☆**  \n  ZAP is relatively easy to learn, especially for users familiar with security testing concepts. Its intuitive interface and extensive resources allow beginners to get started quickly while offering advanced features for seasoned testers.\n\n### Aqua Security\n\n* **Performance ★★★★★**  \n  Aqua Security provides comprehensive protection for containerized applications and Kubernetes, ensuring efficient detection and mitigation of vulnerabilities. Its advanced features, such as runtime protection and compliance checks, enhance performance across cloud-native environments.\n* **Scalability ★★★★★**  \n  Aqua Security scales efficiently with modern DevOps and cloud-native environments, making it ideal for enterprises with dynamic and distributed infrastructures.\n* **Community and Ecosystem ★★★★☆**  \n  Aqua Security has a growing ecosystem with strong support for modern [DevOps practices](https://roadmap.sh/devops/best-practices). While its community is not as large as some established tools, its partnerships and integrations ensure robust adaptability.\n* **Learning Curve ★★★☆☆**  \n  The learning curve for Aqua Security is moderate, requiring users to understand container security principles and Kubernetes configurations. Its clear documentation and training resources ease the process, though advanced features may take time to master.\n\n## Expert Recommendations on DevOps Tools\n\n![Expert Recommendations on DevOps Tools](https://assets.roadmap.sh/guest/expert-advice-best-devops-tools-qyihk.png)\n\nIf you’re wondering after all of this, which are the best options for you in terms of DevOps tools, then you’re not alone. The problem is that you can’t really decide without some sort of context around the options.\n\nSo using the following summarized table, I’m going to try and help you decide on the right DevOps tools for your needs.\n\n![DevOps tools summary](https://assets.roadmap.sh/guest/devops-tools-summary.png)\n\n### Best CI/CD Tool: GitLab CI/CD\n\n#### Ratings for GitLab CI/CD\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★★☆**\n\n**Why:**  \nGitLab is the top choice for CI/CD because it provides an all-in-one solution for version control, continuous deployment & integration pipelines, and deployment. It supports complex workflows, offers strong scalability for enterprise needs, and has extensive community and ecosystem support. Its YAML-based pipeline definitions make it powerful yet user-friendly. Compared to Jenkins, it requires less setup and maintenance, and its integration with GitLab repositories makes it an ideal choice for teams already using GitLab.\n\n### Best Infrastructure as Code Tool: Terraform \\+ HashiCorp Vault\n\n#### Ratings for HashiCorp Vault\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★☆☆**\n\n#### Ratings for Terraform\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★★☆**\n\n**Why:**  \nWhile Terraform leads in IaC, HashiCorp Vault complements it by managing secrets and sensitive credentials. Vault integrates seamlessly into IaC workflows, ensuring secure and scalable deployments. Its robust ecosystem and advanced security features make it indispensable for IaC practices.\n\n### Best Containerization Tool: Docker\n\n#### Ratings for Docker\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★☆**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★★☆**\n\n**Why:**  \nDocker is the cornerstone of containerization, offering lightweight, efficient, and reliable application deployment. Its extensive ecosystem of pre-configured images simplifies container management, and it integrates well with orchestration tools like Kubernetes for scalable environments.\n\n### Best Monitoring and Logging Tool: Prometheus (with Grafana)\n\n#### Ratings for Prometheus\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★☆☆**\n\n#### Ratings for Grafana\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★★☆**\n\n**Why:**  \nPrometheus excels in collecting and storing time-series metrics, while Grafana provides powerful, real-time visualization. Together, they offer an unparalleled monitoring and logging solution for cloud-native environments, ensuring scalability and robust performance insights.\n\n### Best Configuration Management Tool: Puppet\n\n#### Ratings for Puppet\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★☆☆☆**\n\n**Why:**  \nPuppet's agent-based model ensures consistent and reliable configuration management across large-scale deployments. Its extensive module library and declarative approach make it a go-to choice for managing complex infrastructures, despite its steep learning curve.\n\n### Best Security and Compliance Tool: HashiCorp Vault\n\n#### Ratings for HashiCorp Vault\n\n* **Performance: ★★★★★**\n* **Scalability: ★★★★★**\n* **Community and Ecosystem: ★★★★★**\n* **Learning Curve: ★★★☆☆**\n\n**Why:**  \nHashiCorp Vault is the gold standard for managing secrets and ensuring encryption. Its scalability, performance, and strong integrations make it ideal for maintaining compliance and securing sensitive data in dynamic, large-scale environments.\n\n## Conclusion\n\nSelecting the right DevOps tool requires careful consideration of your organization’s specific needs, project scale, and team expertise. While tools like Kubernetes and ELK Stack excel in scalability, others like Docker Swarm and OWASP ZAP are better suited for simpler setups.\n\nAligning what the tool can do with your context (your workflow) ensures maximum efficiency and minimal overhead. Start small, but think big—plan for tools that can grow with your infrastructure.\n\nFor a deeper dive into building a robust DevOps workflow, explore the [**DevOps Roadmap**](https://roadmap.sh/devops). It’s a comprehensive guide to understanding essential [skills](https://roadmap.sh/devops/skills), technologies, and processes for optimizing your development pipeline.";
				}
				async function compiledContent$U() {
					return await html$U();
				}
				function getHeadings$U() {
					return [{"depth":2,"slug":"evaluation-criteria-for-devops-tools","text":"Evaluation Criteria for DevOps Tools"},{"depth":2,"slug":"continuous-integrationcontinuous-deployment-cicd-tools","text":"Continuous Integration/Continuous Deployment (CI/CD) tools"},{"depth":3,"slug":"github-actions","text":"GitHub Actions"},{"depth":3,"slug":"gitlab","text":"GitLab"},{"depth":3,"slug":"circleci","text":"CircleCI"},{"depth":3,"slug":"jenkins","text":"Jenkins"},{"depth":2,"slug":"infrastructure-as-code-iac-tools","text":"Infrastructure as Code (IaC) Tools"},{"depth":3,"slug":"terraform","text":"Terraform"},{"depth":3,"slug":"pulumi","text":"Pulumi"},{"depth":2,"slug":"containerization-and-orchestration-tools","text":"Containerization and Orchestration Tools"},{"depth":3,"slug":"docker","text":"Docker"},{"depth":3,"slug":"kubernetes","text":"Kubernetes"},{"depth":3,"slug":"docker-swarm","text":"Docker Swarm"},{"depth":2,"slug":"logging-and-monitoring-tools","text":"Logging and Monitoring Tools"},{"depth":3,"slug":"prometheus","text":"Prometheus"},{"depth":3,"slug":"elk-stack-elasticsearch-logstash-kibana","text":"ELK Stack (Elasticsearch, Logstash, Kibana)"},{"depth":3,"slug":"loki","text":"Loki"},{"depth":3,"slug":"grafana","text":"Grafana"},{"depth":2,"slug":"configuration-management-tools","text":"Configuration Management Tools"},{"depth":3,"slug":"chef","text":"Chef"},{"depth":3,"slug":"puppet","text":"Puppet"},{"depth":3,"slug":"ansible","text":"Ansible"},{"depth":2,"slug":"secrets-management","text":"Secrets Management"},{"depth":3,"slug":"hashicorp-vault","text":"HashiCorp Vault"},{"depth":3,"slug":"sops-simple-and-secure-operations","text":"SOPS (Simple and Secure Operations)"},{"depth":3,"slug":"sealed-secrets-kubernetes","text":"Sealed Secrets (Kubernetes)"},{"depth":2,"slug":"security-and-compliance-tools","text":"Security and Compliance Tools"},{"depth":3,"slug":"owasp-zap","text":"OWASP ZAP"},{"depth":3,"slug":"aqua-security","text":"Aqua Security"},{"depth":2,"slug":"expert-recommendations-on-devops-tools","text":"Expert Recommendations on DevOps Tools"},{"depth":3,"slug":"best-cicd-tool-gitlab-cicd","text":"Best CI/CD Tool: GitLab CI/CD"},{"depth":4,"slug":"ratings-for-gitlab-cicd","text":"Ratings for GitLab CI/CD"},{"depth":3,"slug":"best-infrastructure-as-code-tool-terraform--hashicorp-vault","text":"Best Infrastructure as Code Tool: Terraform + HashiCorp Vault"},{"depth":4,"slug":"ratings-for-hashicorp-vault","text":"Ratings for HashiCorp Vault"},{"depth":4,"slug":"ratings-for-terraform","text":"Ratings for Terraform"},{"depth":3,"slug":"best-containerization-tool-docker","text":"Best Containerization Tool: Docker"},{"depth":4,"slug":"ratings-for-docker","text":"Ratings for Docker"},{"depth":3,"slug":"best-monitoring-and-logging-tool-prometheus-with-grafana","text":"Best Monitoring and Logging Tool: Prometheus (with Grafana)"},{"depth":4,"slug":"ratings-for-prometheus","text":"Ratings for Prometheus"},{"depth":4,"slug":"ratings-for-grafana","text":"Ratings for Grafana"},{"depth":3,"slug":"best-configuration-management-tool-puppet","text":"Best Configuration Management Tool: Puppet"},{"depth":4,"slug":"ratings-for-puppet","text":"Ratings for Puppet"},{"depth":3,"slug":"best-security-and-compliance-tool-hashicorp-vault","text":"Best Security and Compliance Tool: HashiCorp Vault"},{"depth":4,"slug":"ratings-for-hashicorp-vault-1","text":"Ratings for HashiCorp Vault"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$U = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$U;
					content.file = file$U;
					content.url = url$U;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$U())}`;
				});

const __vite_glob_0_42 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$U,
	compiledContent: compiledContent$U,
	default: Content$U,
	file: file$U,
	frontmatter: frontmatter$U,
	getHeadings: getHeadings$U,
	rawContent: rawContent$U,
	url: url$U
}, Symbol.toStringTag, { value: 'Module' }));

const html$T = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-vs-agile-methodology-tlxj8.jpg\" alt=\"DevOps vs Agile Methodology\"></p>\n<p>Agile and DevOps are modern approaches organizations use to tackle some of the most complex challenges in software engineering. Whether used to complement each other or as separate methodologies, they can be tricky to define, and the line between the two often appears blurred.</p>\n<p>Both <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> and Agile are designed to help organizations build robust software. But when should you choose one over the other? Which approach works best for your project? Can you combine them effectively to maximize their benefits?</p>\n<p>Having worked as an engineer on projects of all sizes, I’ve experienced firsthand how Agile and DevOps shape workflows and outcomes. In this guide, I’ll discuss their core principles, key differences, and practical use cases to help you decide which approach fits your needs.</p>\n<h2 id=\"devops-vs-agile-core-values-and-goals\">DevOps vs. Agile: Core values and goals</h2>\n<p><strong>Agile</strong> is a project management and software development approach that breaks down the project into several dynamic phases, <strong>known as sprints</strong>, rather than completing an entire project at once. This approach enables teams to adapt to changes quickly, continuously improve the delivery pipeline, and stay focused on meeting customer needs.</p>\n<p>It was born from the <a href=\"https://agilemanifesto.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Agile Manifesto</a> in 2001 as a response to the challenges faced with traditional project management models like the Waterfall method, which often leads to delay, rigidness, and disconnects between customers’ demands and what developers have built.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/agile-timeline-174xo.png\" alt=\"Agile timeline\"></p>\n<p>The core values of Agile methodologies are:</p>\n<ol>\n<li><strong>Individual over processes and tools</strong>: To prioritize human communication and collaboration across cross-functional teams rather than working independently.</li>\n<li><strong>Responding to change over following a plan</strong>: To embrace changing requirements at every stage of the development process. The flexibility allows the team to quickly change workflow and strategies without derailing the entire project.</li>\n<li><strong>Customer collaboration over contract negotiation</strong>: To incorporate continuous customer feedback and use it to shape the project deliverables and align the outcome.</li>\n<li><strong>Working software over comprehensive documentation</strong>: To ensure that the software that Agile teams develop works effectively, while additional tasks like documentation should not take center stage in the development process.</li>\n</ol>\n<p>When you use Agile in your application development or other types of software development process, it offers numerous benefits, such as:</p>\n<ul>\n<li>Responding quickly to market changes and customer feedback.</li>\n<li>Improving collaboration by fostering open communication, frequent iterations, and shared ownership.</li>\n<li>Increasing customer satisfaction throughout the development process.</li>\n<li>Enhancing quality through frequent reviews and continuous testing.</li>\n<li>Empowering teams to innovate and solve problems creatively.</li>\n</ul>\n<p><strong>DevOps,</strong> on the other hand, is a set of tools, practices, and a cultural philosophy that bridges the gap between development (Dev) and operations (Ops) to enhance the delivery pipelines. It emphasizes automation, continuous integration/continuous delivery (CI/CD), and monitoring to ensure rapid and reliable software deployment.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-timeline-f5wbv.png\" alt=\"DevOps timeline\"></p>\n<p>DevOps evolved as an extension of Agile to solve the bottleneck around operations, particularly in deployment, releases, and post-production maintenance. Its core values focus on:</p>\n<ol>\n<li><strong>Collaboration and communication</strong>: Foster a culture where developers, IT operations teams, QA teams, and other stakeholders actively collaborate and communicate throughout the development process.</li>\n<li><strong>Automation</strong>: Increase efficiency and minimize errors by automating repetitive tasks like testing, deployment, and infrastructure provisioning.</li>\n<li><strong>Continuous Integration and Continuous Delivery (CI/CD)</strong>: Implement automated pipelines to test, integrate, and deploy code quickly and reliably.</li>\n<li><strong>Metrics and monitoring</strong>: Use real-time monitoring and analytics to identify issues, optimize performance, and asses system health.</li>\n<li><strong>Customer-centric focused</strong>: Center development and operations processes around delivering value to customers with high-quality releases that meet their needs.</li>\n<li><strong>Continuous improvement</strong>: Establish a culture of seeing the DevOps process as not a one-time thing but rather a continuous process that promotes a feedback loop and learns from success and failure.</li>\n<li><strong>Infrastructure as Code (IaC)</strong>: Treat infrastructure provisioning and maintenance as code to enable version control, scalability, and reproducibility.</li>\n</ol>\n<p>When you adopt DevOps in your development process, it offers numerous benefits, such as:</p>\n<ul>\n<li>Accelerating software releases with streamlined processes and automation.</li>\n<li>Reducing operational costs through efficient workflows and fewer bottlenecks.</li>\n<li>Improving software quality with automated testing to reduce bugs and enhance reliability.</li>\n<li>Resolving issues faster using continuous monitoring and real-time system insights.</li>\n<li>Enhancing security by integrating security practices into the development lifecycle (DevSecOps).</li>\n<li>Gaining a competitive advantage through faster innovation and the ability to adapt quickly to market changes.</li>\n</ul>\n<p>Both DevOps and Agile offer numerous benefits that help you and your team build robust and scalable applications. But when should you choose one over the other? And what types of projects are best suited for each approach?</p>\n<p>Let’s dive into their usage and application next.</p>\n<h2 id=\"identifying-when-to-use-agile-vs-devops\">Identifying when to use Agile vs. DevOps</h2>\n<p>The table below summarizes when to use Agile and DevOps:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Aspect</strong></th><th><strong>When to Use Agile</strong></th><th><strong>When to Use DevOps</strong></th></tr></thead><tbody><tr><td><strong>Focus</strong></td><td>Building software step by step, improving as you go.</td><td>Combining development and operations for faster and smoother delivery.</td></tr><tr><td><strong>Team Structure</strong></td><td>Small teams working closely together, focusing on quick updates.</td><td>Developers and operations teams working as one from start to finish.</td></tr><tr><td><strong>Goal</strong></td><td>Deliver small, working parts of the project quickly and get feedback.</td><td>Deliver updates quickly and keep systems running smoothly.</td></tr><tr><td><strong>When Changes Happen</strong></td><td>Use Agile when project needs are likely to change often.</td><td>Use DevOps to handle changes quickly without breaking the system.</td></tr><tr><td><strong>Project Size</strong></td><td>Good for small to medium projects where teamwork and flexibility are key.</td><td>Good for large or complex projects where automation and speed are important.</td></tr><tr><td><strong>Release Timing</strong></td><td>Use Agile when you want planned updates (e.g., every two weeks).</td><td>Use DevOps when updates need to be released continuously.</td></tr><tr><td><strong>Tools and Automation</strong></td><td>Relies on planning tools like boards or trackers, with some automation.</td><td>Uses lots of automation tools to test, deploy, and monitor systems.</td></tr><tr><td><strong>Customer Involvement</strong></td><td>Use Agile when you need frequent feedback from customers.</td><td>Use DevOps when customers expect reliable and fast updates.</td></tr><tr><td><strong>Example Projects</strong></td><td>Developing a new app or adding new features to a product.</td><td>Running large systems or releasing updates to software quickly and often.</td></tr></tbody></table>\n<h2 id=\"focus\">Focus</h2>\n<p>If your workflow is to develop software in small, manageable parts, Agile will be ideal for you. For example, if you’re developing a new application, you can release the core features first, get feedback, and add more functionality over time.</p>\n<p>DevOps, on the other hand, is perfect for delivering software quickly and maintaining its stability. For example, if you’re managing a large-scale ticketing platform, DevOps ensures updates without downtime.</p>\n<h2 id=\"team-structure\">Team structure</h2>\n<p>Agile works well with small teams of developers, designers, and testers where everyone can collaborate closely. For instance, if you’re building a product for a startup, Agile methodology guarantees everyone is aligned.</p>\n<p>In contrast, DevOps facilitates collaboration between development and operations teams to manage the entire process, from writing code to running in production.</p>\n<h2 id=\"project-size-and-change-frequency\">Project size and change frequency</h2>\n<p>Agile is well-suited for small to medium projects that want to launch their minimum viable product (MVP) or add new features to an existing platform that accounts for customers’ needs along the way.</p>\n<p>DevOps, in contrast, is good for large or complex projects that involve infrastructure, automation, and scalability.</p>\n<h2 id=\"project-delivery\">Project delivery</h2>\n<p>Agile uses sprint (a time-boxed iteration) for planned updates, which makes it ideal for projects that deliver new features frequently (e.g., every two weeks). Agile helps you stay organized and on schedule.</p>\n<p>DevOps doesn’t use intervals like Agile, and it allows you to release updates as soon as they’re ready.</p>\n<h2 id=\"customer-involvement\">Customer involvement</h2>\n<p>Agile works best when you need regular feedback from the customer at every stage of the development. In contrast, DevOps is better suited for scenarios where customers prioritize fast responses and high uptime.</p>\n<h2 id=\"usage-of-tools-and-automation\">Usage of tools and automation</h2>\n<p>Agile keeps things simple by using tools like Jira and Trello to focus on planning and collaboration rather than heavy automation in DevOps, which relies on tools like Jenkins, Docker, and others that automate testing, deployment, and monitoring.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Agile</strong></th><th><strong>DevOps</strong></th></tr></thead><tbody><tr><td>Jira (project management)</td><td>Jenkins (CI/CD automation)</td></tr><tr><td>Trello (task tracking)</td><td>Docker (containerization)</td></tr><tr><td>Confluence (team collaboration)</td><td>Kubernetes (orchestration)</td></tr></tbody></table>\n<p>As a rule of thumb, use the summary table below to decide when starting a new project or expanding existing ones.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Factor</strong></th><th><strong>Agile</strong></th><th><strong>DevOps</strong></th></tr></thead><tbody><tr><td><strong>Small, cross-functional teams?</strong></td><td>✅ Yes</td><td>❌ No</td></tr><tr><td><strong>Large teams requiring IT operations?</strong></td><td>❌ No</td><td>✅ Yes</td></tr><tr><td><strong>High variability in project complexity?</strong></td><td>✅ Yes</td><td>❌ No</td></tr><tr><td><strong>Multi-stage delivery pipelines?</strong></td><td>❌ No</td><td>✅ Yes</td></tr><tr><td><strong>Rare updates (deployment frequency)?</strong></td><td>✅ Yes</td><td>❌ No</td></tr><tr><td><strong>Frequent releases (deployment frequency)?</strong></td><td>❌ No</td><td>✅ Yes</td></tr><tr><td><strong>Need for automation (CI/CD or monitoring)?</strong></td><td>❌ No</td><td>✅ Yes</td></tr></tbody></table>\n<h2 id=\"hybrid-situations-combining-agile-and-devops\">Hybrid Situations: Combining Agile and DevOps</h2>\n<p>In complex projects, blending Agile’s adaptability with DevOps’ automation and deployment efficiency can produce the best results for you and your team. Below are some use cases where adopting both methodologies proves most beneficial:</p>\n<ul>\n<li>Large enterprise applications</li>\n<li>Mobile application development</li>\n<li>Microservices architecture</li>\n<li>Artificial Intelligence (AI) and Machine Learning (ML) projects</li>\n</ul>\n<p><strong>Large enterprise applications</strong></p>\n<p>If you’re building a large enterprise application, you can break down feature development into smaller tasks and prioritize them in sprints using Agile. At the same time, DevOps helps maintain smooth delivery without downtime by automating testing, integration, and deployment. For instance, if you’re managing a video streaming service, you can use Agile to plan features like personalized recommendations and DevOps to deploy them continuously to users.</p>\n<p><strong>Mobile application development</strong></p>\n<p>Mobile app development and maintenance involve fixing bugs, adding new features, and ensuring compatibility with new devices. Agile software development methodology can streamline feature iterations, while DevOps facilitates rapid updates across app stores. For instance, if you’re building a fintech app that demands rapid feature development alongside robust security and reliability, Agile can help you build and iterate features efficiently. Meanwhile, DevOps can automate compliance checks, testing, and secure deployments to maintain quality and trust.</p>\n<p><strong>Microservices architecture</strong></p>\n<p>Microservices involves breaking down applications into smaller, independent services that can be developed and deployed separately. This approach aligns closely with Agile, as you can enable development teams to manage individual services, while DevOps facilitates seamless integration between these services and delivery.</p>\n<p><strong>AI and ML projects</strong></p>\n<p>Training, testing, and deploying AI models is an iterative process essential for keeping the system up to date. Agile practices can help you manage the iterative development of models and features, while DevOps can automate the deployment pipelines for updates and ensure effective monitoring in production.</p>\n<p>The faster deployment cycles, higher customer satisfaction, and stable releases achieved through the combination of Agile and DevOps stem from the shared values between these software development methodologies. Let’s explore these similarities further.</p>\n<h2 id=\"similarities-between-agile-and-devops\">Similarities between Agile and DevOps</h2>\n<p>Agile and DevOps are distinct methodologies, but they share some similarities in their goals, approaches, and principles for software development process and delivery. Below are some key similarities between Agile and DevOps:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/similarities-between-agile-and-devops-9c79k.png\" alt=\"Agile and DevOps Similarities\"></p>\n<ul>\n<li>Both emphasize collaboration between developers, testers, and other stakeholders to break down silos and foster teamwork.</li>\n<li>They prioritize delivering value to customers.</li>\n<li>Both advocate for working in smaller chunks rather than completing the project in one big cycle.</li>\n<li>They align in their focus on shortening the development cycles and reducing the time to market.</li>\n<li>Both promote continuous learning and process optimization.</li>\n<li>Both encourage the use of automation tools to enhance processes and reduce manual tasks.</li>\n<li>Both Agile and DevOps cultures require a shift towards openness and shared responsibility.</li>\n</ul>\n<p>While Agile and DevOps share common similarities, they also differ in focuses, principles, and practices. Let’s explore these differences next.</p>\n<h2 id=\"differences-between-agile-and-devops\">Differences between Agile and DevOps</h2>\n<p>Below are some key differences between Agile and DevOps:</p>\n<ul>\n<li>Agile primarily focuses on the development phase with an emphasis on iterative development and continuous feedback, while DevOps focuses on the entire software lifecycle by bridging the gap between development and operations.</li>\n<li>Agile’s core principle is customer-centric and welcomes changing requirements even late in the development process, while DevOps principle is to automate repetitive tasks, strive for efficiency in the delivery pipeline, and maintain reliable systems.</li>\n<li>The approach Agile uses to measure success is through speed, quality of software development, and customer satisfaction. DevOps, on the other hand, uses metrics like deployment frequency, mean time to recovery (MTTR), lead time for changes, and system reliability.</li>\n<li>Agile promotes a culture of collaboration and adaptability among the development team, while DevOps promotes a culture of shared responsibility and accountability across the development and operations team.</li>\n</ul>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>Agile and DevOps differ in their approaches, addressing distinct aspects of software delivery. Agile is best suited for small to medium projects that change frequently and require a high degree of adaptability. In contrast, DevOps excels in medium to large projects where efficiency and reliability are paramount. Ultimately, the approach you choose depends on factors such as project complexity, release frequency, and team size.</p>\n<p>If you’re considering adopting DevOps at any stage of your development process, explore our comprehensive <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a> for actionable steps and valuable resources to get started.</p>";

				const frontmatter$T = {"title":"DevOps vs Agile Methodology: Key Differences & Applications","description":"Explore the contrasts between DevOps and Agile: Understand their principles, differences, and how to apply them effectively in projects.","authorId":"ekene","excludedBySlug":"/devops/vs-agile","seo":{"title":"DevOps vs Agile Methodology: Key Differences & Applications","description":"Explore the contrasts between DevOps and Agile: Understand their principles, differences, and how to apply them effectively in projects.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-vs-agile-methodology-tlxj8.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2025-01-17","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$T = "/workspace/src/data/guides/devops-vs-agile.md";
				const url$T = undefined;
				function rawContent$T() {
					return "   \n                                                                    \n                                                                                                                                                       \n               \n                                  \n    \n                                                                      \n                                                                                                                                                         \n                                                                                     \n                            \n                         \n            \n               \n                  \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps vs Agile Methodology](https://assets.roadmap.sh/guest/devops-vs-agile-methodology-tlxj8.jpg)\n\nAgile and DevOps are modern approaches organizations use to tackle some of the most complex challenges in software engineering. Whether used to complement each other or as separate methodologies, they can be tricky to define, and the line between the two often appears blurred.\n\nBoth [DevOps](https://roadmap.sh/devops) and Agile are designed to help organizations build robust software. But when should you choose one over the other? Which approach works best for your project? Can you combine them effectively to maximize their benefits?\n\nHaving worked as an engineer on projects of all sizes, I've experienced firsthand how Agile and DevOps shape workflows and outcomes. In this guide, I'll discuss their core principles, key differences, and practical use cases to help you decide which approach fits your needs.\n\n## DevOps vs. Agile: Core values and goals\n\n**Agile** is a project management and software development approach that breaks down the project into several dynamic phases, **known as sprints**, rather than completing an entire project at once. This approach enables teams to adapt to changes quickly, continuously improve the delivery pipeline, and stay focused on meeting customer needs.\n\nIt was born from the [Agile Manifesto](https://agilemanifesto.org/) in 2001 as a response to the challenges faced with traditional project management models like the Waterfall method, which often leads to delay, rigidness, and disconnects between customers' demands and what developers have built.\n\n![Agile timeline](https://assets.roadmap.sh/guest/agile-timeline-174xo.png)\n\nThe core values of Agile methodologies are:\n\n1. **Individual over processes and tools**: To prioritize human communication and collaboration across cross-functional teams rather than working independently.\n2. **Responding to change over following a plan**: To embrace changing requirements at every stage of the development process. The flexibility allows the team to quickly change workflow and strategies without derailing the entire project.\n3. **Customer collaboration over contract negotiation**: To incorporate continuous customer feedback and use it to shape the project deliverables and align the outcome.\n4. **Working software over comprehensive documentation**: To ensure that the software that Agile teams develop works effectively, while additional tasks like documentation should not take center stage in the development process.\n\nWhen you use Agile in your application development or other types of software development process, it offers numerous benefits, such as:\n\n- Responding quickly to market changes and customer feedback.\n- Improving collaboration by fostering open communication, frequent iterations, and shared ownership.\n- Increasing customer satisfaction throughout the development process.\n- Enhancing quality through frequent reviews and continuous testing.\n- Empowering teams to innovate and solve problems creatively.\n\n**DevOps,** on the other hand, is a set of tools, practices, and a cultural philosophy that bridges the gap between development (Dev) and operations (Ops) to enhance the delivery pipelines. It emphasizes automation, continuous integration/continuous delivery (CI/CD), and monitoring to ensure rapid and reliable software deployment.\n\n![DevOps timeline](https://assets.roadmap.sh/guest/devops-timeline-f5wbv.png)\n\nDevOps evolved as an extension of Agile to solve the bottleneck around operations, particularly in deployment, releases, and post-production maintenance. Its core values focus on:\n\n1. **Collaboration and communication**: Foster a culture where developers, IT operations teams, QA teams, and other stakeholders actively collaborate and communicate throughout the development process.\n2. **Automation**: Increase efficiency and minimize errors by automating repetitive tasks like testing, deployment, and infrastructure provisioning.\n3. **Continuous Integration and Continuous Delivery (CI/CD)**: Implement automated pipelines to test, integrate, and deploy code quickly and reliably.\n4. **Metrics and monitoring**: Use real-time monitoring and analytics to identify issues, optimize performance, and asses system health.\n5. **Customer-centric focused**: Center development and operations processes around delivering value to customers with high-quality releases that meet their needs.\n6. **Continuous improvement**: Establish a culture of seeing the DevOps process as not a one-time thing but rather a continuous process that promotes a feedback loop and learns from success and failure.\n7. **Infrastructure as Code (IaC)**: Treat infrastructure provisioning and maintenance as code to enable version control, scalability, and reproducibility.\n\nWhen you adopt DevOps in your development process, it offers numerous benefits, such as:\n\n- Accelerating software releases with streamlined processes and automation.\n- Reducing operational costs through efficient workflows and fewer bottlenecks.\n- Improving software quality with automated testing to reduce bugs and enhance reliability.\n- Resolving issues faster using continuous monitoring and real-time system insights.\n- Enhancing security by integrating security practices into the development lifecycle (DevSecOps).\n- Gaining a competitive advantage through faster innovation and the ability to adapt quickly to market changes.\n\nBoth DevOps and Agile offer numerous benefits that help you and your team build robust and scalable applications. But when should you choose one over the other? And what types of projects are best suited for each approach?\n\nLet's dive into their usage and application next.\n\n## Identifying when to use Agile vs. DevOps\n\nThe table below summarizes when to use Agile and DevOps:\n\n| **Aspect**               | **When to Use Agile**                                                     | **When to Use DevOps**                                                       |\n| ------------------------ | ------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |\n| **Focus**                | Building software step by step, improving as you go.                      | Combining development and operations for faster and smoother delivery.       |\n| **Team Structure**       | Small teams working closely together, focusing on quick updates.          | Developers and operations teams working as one from start to finish.         |\n| **Goal**                 | Deliver small, working parts of the project quickly and get feedback.     | Deliver updates quickly and keep systems running smoothly.                   |\n| **When Changes Happen**  | Use Agile when project needs are likely to change often.                  | Use DevOps to handle changes quickly without breaking the system.            |\n| **Project Size**         | Good for small to medium projects where teamwork and flexibility are key. | Good for large or complex projects where automation and speed are important. |\n| **Release Timing**       | Use Agile when you want planned updates (e.g., every two weeks).          | Use DevOps when updates need to be released continuously.                    |\n| **Tools and Automation** | Relies on planning tools like boards or trackers, with some automation.   | Uses lots of automation tools to test, deploy, and monitor systems.          |\n| **Customer Involvement** | Use Agile when you need frequent feedback from customers.                 | Use DevOps when customers expect reliable and fast updates.                  |\n| **Example Projects**     | Developing a new app or adding new features to a product.                 | Running large systems or releasing updates to software quickly and often.    |\n\n## Focus\n\nIf your workflow is to develop software in small, manageable parts, Agile will be ideal for you. For example, if you're developing a new application, you can release the core features first, get feedback, and add more functionality over time.\n\nDevOps, on the other hand, is perfect for delivering software quickly and maintaining its stability. For example, if you're managing a large-scale ticketing platform, DevOps ensures updates without downtime.\n\n## Team structure\n\nAgile works well with small teams of developers, designers, and testers where everyone can collaborate closely. For instance, if you're building a product for a startup, Agile methodology guarantees everyone is aligned.\n\nIn contrast, DevOps facilitates collaboration between development and operations teams to manage the entire process, from writing code to running in production.\n\n## Project size and change frequency\n\nAgile is well-suited for small to medium projects that want to launch their minimum viable product (MVP) or add new features to an existing platform that accounts for customers' needs along the way. \n\nDevOps, in contrast, is good for large or complex projects that involve infrastructure, automation, and scalability.\n\n## Project delivery\n\nAgile uses sprint (a time-boxed iteration) for planned updates, which makes it ideal for projects that deliver new features frequently (e.g., every two weeks). Agile helps you stay organized and on schedule.\n\nDevOps doesn't use intervals like Agile, and it allows you to release updates as soon as they're ready.\n\n## Customer involvement\n\nAgile works best when you need regular feedback from the customer at every stage of the development. In contrast, DevOps is better suited for scenarios where customers prioritize fast responses and high uptime.\n\n## Usage of tools and automation\n\nAgile keeps things simple by using tools like Jira and Trello to focus on planning and collaboration rather than heavy automation in DevOps, which relies on tools like Jenkins, Docker, and others that automate testing, deployment, and monitoring.\n\n| **Agile**                       | **DevOps**                 |\n| ------------------------------- | -------------------------- |\n| Jira (project management)       | Jenkins (CI/CD automation) |\n| Trello (task tracking)          | Docker (containerization)  |\n| Confluence (team collaboration) | Kubernetes (orchestration) |\n\nAs a rule of thumb, use the summary table below to decide when starting a new project or expanding existing ones.\n\n| **Factor**                                     | **Agile** | **DevOps** |\n| ---------------------------------------------- | --------- | ---------- |\n| **Small, cross-functional teams?**             | ✅ Yes     | ❌ No       |\n| **Large teams requiring IT operations?**       | ❌ No      | ✅ Yes      |\n| **High variability in project complexity?**    | ✅ Yes     | ❌ No       |\n| **Multi-stage delivery pipelines?**            | ❌ No      | ✅ Yes      |\n| **Rare updates (deployment frequency)?**       | ✅ Yes     | ❌ No       |\n| **Frequent releases (deployment frequency)?**  | ❌ No      | ✅ Yes      |\n| **Need for automation (CI/CD or monitoring)?** | ❌ No      | ✅ Yes      |\n\n## Hybrid Situations: Combining Agile and DevOps\n\nIn complex projects, blending Agile's adaptability with DevOps' automation and deployment efficiency can produce the best results for you and your team. Below are some use cases where adopting both methodologies proves most beneficial:\n\n- Large enterprise applications\n- Mobile application development\n- Microservices architecture\n- Artificial Intelligence (AI) and Machine Learning (ML) projects\n\n**Large enterprise applications**\n\nIf you're building a large enterprise application, you can break down feature development into smaller tasks and prioritize them in sprints using Agile. At the same time, DevOps helps maintain smooth delivery without downtime by automating testing, integration, and deployment. For instance, if you're managing a video streaming service, you can use Agile to plan features like personalized recommendations and DevOps to deploy them continuously to users.\n\n**Mobile application development**\n\nMobile app development and maintenance involve fixing bugs, adding new features, and ensuring compatibility with new devices. Agile software development methodology can streamline feature iterations, while DevOps facilitates rapid updates across app stores. For instance, if you're building a fintech app that demands rapid feature development alongside robust security and reliability, Agile can help you build and iterate features efficiently. Meanwhile, DevOps can automate compliance checks, testing, and secure deployments to maintain quality and trust.\n\n**Microservices architecture**\n\nMicroservices involves breaking down applications into smaller, independent services that can be developed and deployed separately. This approach aligns closely with Agile, as you can enable development teams to manage individual services, while DevOps facilitates seamless integration between these services and delivery.\n\n**AI and ML projects**\n\nTraining, testing, and deploying AI models is an iterative process essential for keeping the system up to date. Agile practices can help you manage the iterative development of models and features, while DevOps can automate the deployment pipelines for updates and ensure effective monitoring in production.\n\nThe faster deployment cycles, higher customer satisfaction, and stable releases achieved through the combination of Agile and DevOps stem from the shared values between these software development methodologies. Let's explore these similarities further.\n\n## Similarities between Agile and DevOps\n\nAgile and DevOps are distinct methodologies, but they share some similarities in their goals, approaches, and principles for software development process and delivery. Below are some key similarities between Agile and DevOps:\n\n![Agile and DevOps Similarities](https://assets.roadmap.sh/guest/similarities-between-agile-and-devops-9c79k.png)\n\n- Both emphasize collaboration between developers, testers, and other stakeholders to break down silos and foster teamwork.\n- They prioritize delivering value to customers.\n- Both advocate for working in smaller chunks rather than completing the project in one big cycle.\n- They align in their focus on shortening the development cycles and reducing the time to market.\n- Both promote continuous learning and process optimization.\n- Both encourage the use of automation tools to enhance processes and reduce manual tasks.\n- Both Agile and DevOps cultures require a shift towards openness and shared responsibility.\n\nWhile Agile and DevOps share common similarities, they also differ in focuses, principles, and practices. Let's explore these differences next.\n\n## Differences between Agile and DevOps\n\nBelow are some key differences between Agile and DevOps:\n\n- Agile primarily focuses on the development phase with an emphasis on iterative development and continuous feedback, while DevOps focuses on the entire software lifecycle by bridging the gap between development and operations.\n- Agile's core principle is customer-centric and welcomes changing requirements even late in the development process, while DevOps principle is to automate repetitive tasks, strive for efficiency in the delivery pipeline, and maintain reliable systems.\n- The approach Agile uses to measure success is through speed, quality of software development, and customer satisfaction. DevOps, on the other hand, uses metrics like deployment frequency, mean time to recovery (MTTR), lead time for changes, and system reliability.\n- Agile promotes a culture of collaboration and adaptability among the development team, while DevOps promotes a culture of shared responsibility and accountability across the development and operations team.\n\n## Next steps\n\nAgile and DevOps differ in their approaches, addressing distinct aspects of software delivery. Agile is best suited for small to medium projects that change frequently and require a high degree of adaptability. In contrast, DevOps excels in medium to large projects where efficiency and reliability are paramount. Ultimately, the approach you choose depends on factors such as project complexity, release frequency, and team size.\n\nIf you're considering adopting DevOps at any stage of your development process, explore our comprehensive [DevOps roadmap](https://roadmap.sh/devops) for actionable steps and valuable resources to get started.";
				}
				async function compiledContent$T() {
					return await html$T();
				}
				function getHeadings$T() {
					return [{"depth":2,"slug":"devops-vs-agile-core-values-and-goals","text":"DevOps vs. Agile: Core values and goals"},{"depth":2,"slug":"identifying-when-to-use-agile-vs-devops","text":"Identifying when to use Agile vs. DevOps"},{"depth":2,"slug":"focus","text":"Focus"},{"depth":2,"slug":"team-structure","text":"Team structure"},{"depth":2,"slug":"project-size-and-change-frequency","text":"Project size and change frequency"},{"depth":2,"slug":"project-delivery","text":"Project delivery"},{"depth":2,"slug":"customer-involvement","text":"Customer involvement"},{"depth":2,"slug":"usage-of-tools-and-automation","text":"Usage of tools and automation"},{"depth":2,"slug":"hybrid-situations-combining-agile-and-devops","text":"Hybrid Situations: Combining Agile and DevOps"},{"depth":2,"slug":"similarities-between-agile-and-devops","text":"Similarities between Agile and DevOps"},{"depth":2,"slug":"differences-between-agile-and-devops","text":"Differences between Agile and DevOps"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$T = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$T;
					content.file = file$T;
					content.url = url$T;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$T())}`;
				});

const __vite_glob_0_43 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$T,
	compiledContent: compiledContent$T,
	default: Content$T,
	file: file$T,
	frontmatter: frontmatter$T,
	getHeadings: getHeadings$T,
	rawContent: rawContent$T,
	url: url$T
}, Symbol.toStringTag, { value: 'Module' }));

const html$S = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-vs-developer-yv25p.jpg\" alt=\"DevOps engineers vs software developers compared\"></p>\n<p>In the software development process, the main task of developers is to create, test, and deploy software applications. However, the increasing complexities of software projects have led to the creation of new roles, such as DevOps engineers.</p>\n<p>For hiring managers, understanding the distinct roles and contributions of DevOps and software developers can streamline the recruitment process, ensuring the right talent aligns with project needs. Career seekers, on the other hand, can make informed decisions by comparing the responsibilities and growth potential in each path.</p>\n<p>DevOps and software developers contribute to software development yet differ in various aspects and roles. DevOps is a broader framework that involves development and operations teams working together to modernize the <strong>s</strong>oftware <strong>d</strong>evelopment <strong>l</strong>ifecycle (SDLC). However, software development teams work exclusively on development tasks.</p>\n<p>Both career paths have their own roles and benefits, yet most people wonder: Who is paid more, a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> or a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer</a>? Some people even have a misconception that DevOps is a bit more difficult than software development. Anyone planning to choose a career path between the two must clearly understand their roles and core responsibilities.</p>\n<p>In this guide, I’ll break down the key differences between DevOps and software developers. Additionally, you’ll get a quick overview of salary insights for both roles and gain an understanding of new advancements and technologies that are set to shape the future of both fields.</p>\n<p>The table below summarizes the key differences between a DevOps engineer and a software developer.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Job Title</strong></th><th><strong>Software Developer</strong></th><th><strong>DevOps Engineer</strong></th></tr></thead><tbody><tr><td><strong>Key Tasks</strong></td><td>Software developers generally create codes, run tests, and manage deployment in small teams.</td><td>DevOps engineers automate tasks, manage infrastructure, and monitor and troubleshoot issues.</td></tr><tr><td><strong>Collaboration and Team Dynamics</strong></td><td>Communication is mostly restricted to software functionalities.</td><td>Communication and collaboration go beyond the development process, i.e., conveying technical issues, gathering feedback from different teams, discussing potential impacts, etc.</td></tr><tr><td><strong>Responsibilities and Processes</strong></td><td>Limited to writing, testing, and debugging codes.</td><td>Automate workflows and orchestrate SDLC.</td></tr></tbody></table>\n<h2 id=\"how-do-a-devops-engineer-and-a-software-developer-differ\">How do a DevOps engineer and a software developer differ?</h2>\n<p>A <a href=\"https://roadmap.sh/devops/devops-engineer\" target=\"_blank\">DevOps engineer</a> focuses on automating infrastructure, managing deployments, and ensuring smooth integration between development and operations, while a software developer primarily writes code to build applications or features.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-vs-software-developer-qodix.png\" alt=\"DevOps Engineer vs Software Developer\"></p>\n<p>A software developer creates quality code and builds software applications. They focus primarily on designing, development, application testing, and software maintenance.</p>\n<p>Some may specialize in frontend, backend, or even full stack development, giving them the flexibility to manage comprehensive software projects.</p>\n<p>For HR professionals, if your organization wants to improve operational efficiency and teamwork across departments, hiring a DevOps engineer could be a good choice. On the other hand, if your focus is on innovation and coding, a skilled software developer or full stack developer might be the better option.</p>\n<p>A skilled software developer knows the right tools and programming languages essential to build applications. Some experts even have <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend</a>, <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a>, or <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack</a> development experience.</p>\n<p>However, DevOps is a broader field that involves collaboration between the development and IT operations teams. Software developers majorly focus on writing codes, whereas DevOps ensures that the generated code works well.</p>\n<p>Some of the key tasks of a software developer include:</p>\n<ul>\n<li><strong>Coding and development:</strong> using different programming languages and frameworks to create clean code for your software.</li>\n<li><strong>Testing:</strong> running tests to get more clarity on whether the implemented code functions correctly and guarantees smooth software performance.</li>\n<li><strong>Deployment</strong>: While traditionally managed by the DevOps team, many developers now handle deployment processes, especially in smaller teams.</li>\n</ul>\n<p>On the other hand, DevOps engineer’s key tasks include:</p>\n<ul>\n<li><strong>Automation DevOps</strong>: automating all the tasks from testing software to deploying CI/CD pipelines.</li>\n<li><strong>Infrastructure management</strong>: facilitating collaboration and managing the entire infrastructure to ensure smooth application performance.</li>\n<li><strong>Monitoring and maintenance</strong>: using monitoring tools to track issues and application performance in real time.</li>\n</ul>\n<h2 id=\"importance-of-collaboration-with-cross-functional-teams-in-both-roles\">Importance of collaboration with cross-functional teams in both roles</h2>\n<p>Both developers and DevOps engineers need to collaborate with cross-functional teams for a smooth workflow.</p>\n<p>Working with cross-functional teams is essential for both software developers and DevOps engineers. These interactions streamline workflows, improve communication, and ensure that each department’s needs and constraints are understood throughout the project lifecycle.</p>\n<p><strong>Hiring resource tip:</strong> DevOps engineers may be more suitable for roles requiring collaboration across departments, whereas software developers, including full-stack developers, are better suited to focused development tasks.</p>\n<p><strong>Career insight -</strong> As a software developer, your interaction might be limited to the design, development, and testing phases. However, moving toward DevOps expands your scope to include operational aspects, which could be beneficial for long-term career growth.</p>\n<p>Software developers need to constantly communicate with other developers on the team, designers, and even quality assurance(QA) engineers to ensure the delivery of high-quality software. Their collaboration is primarily focused on software functionalities. In the early stages of the traditional software development process, developers were not very involved in how their code operated in production. A separate department, i.e., the IT operations team or deployment manager, was responsible for tracking application deployment.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/collaboration-and-team-dynamics-k302s.png\" alt=\"Collaboration and team dynamics\"></p>\n<p>In the case of DevOps, things are completely different. Their collaboration with cross-functional teams goes beyond the development process. The DevOps concept was introduced to bridge the gap between development and operations for smooth workflow and rapid delivery. The development and IT operation team need to frequently communicate and provide quick feedback on different aspects for efficient software performance and deployment of code changes.</p>\n<p>The incorporation of DevOps practices will enable organizations to improve their product quality, automate complex and repetitive tasks, detect errors in real time, and deploy new features in less time.</p>\n<p>Let’s understand more about software developers and DevOps engineers’ responsibilities and processes.</p>\n<h2 id=\"key-differences-in-responsibilities-and-processes\">Key differences in responsibilities and processes</h2>\n<p><strong>Software developer</strong>\nThe primary responsibility of a software developer is to write, test, and debug code. The development team also looks after the software application’s maintenance and ensures the final product aligns with your business goals and customer needs.</p>\n<p>Apart from writing code, software developers are also responsible for preparing technical documentation, troubleshooting issues in real time, and managing security issues. A software development team even collaborates and works closely with product managers, designers, and stakeholders to turn the basic idea into a high-quality software product.</p>\n<p>Another critical aspect of software developer role is participating in code reviews and providing constructive feedback to team members, contributing to overall code quality and team growth.</p>\n<p><strong>DevOps engineers</strong>\nThe primary responsibility of a DevOps team is to automate the entire testing and deployment process. By automating workflow, organizations can ensure faster software delivery.</p>\n<p>The professionals use a wide range of DevOps tools to automate and orchestrate SDLC. They also monitor software performance via different monitoring tools like Prometheus, Grafana, Datadog, etc., provide rapid feedback loops, and troubleshoot errors and code bugs in real time.</p>\n<p>DevOps job role is not limited to deployment but is a continuous process that looks after various aspects to deliver highly scalable and secure software.</p>\n<p>Once you are clear with the responsibilities that come under both job profiles, it is also important to get clarity on the different career paths you can choose from and their pay scale. This will help determine which one can bring you more growth and success in the future.</p>\n<h2 id=\"career-paths-and-salary-insights-for-software-developer\">Career paths and salary insights for software developer</h2>\n<p>Job titles for software developers may vary based on the company and experience level. These include software engineers, software architects, and full stack developers.</p>\n<p>For career seekers, a full stack developer handles both frontend and backend tasks, making them highly versatile. This role offers a balanced career path for those looking to build comprehensive expertise in development.</p>\n<p>A DevOps engineer, meanwhile, is pivotal for organizations adopting modern frameworks like CI/CD pipelines and cloud infrastructure.</p>\n<p>For hiring managers, offering competitive salaries and clearly defined roles for full stack developers and DevOps engineers can attract top talent. Highlighting growth opportunities within your company can also increase retention rates.</p>\n<p>Below are some common job titles for software developers, along with salary insights for each role:</p>\n<ul>\n<li>Full stack developer</li>\n<li>Software engineer</li>\n<li>Software architect</li>\n</ul>\n<p><strong>Full stack developer</strong>\nA full stack developer is a computer professional responsible for managing both the frontend and backend of your software. Full stack developers handle all aspects of database management, analysis, user interface design, code testing, and user communication.</p>\n<p>Based on my experience, currently, the salary of a junior full stack developer with (<strong>0-1 year of experience</strong>) ranges between <strong>$61,000-$99,000</strong>. A mid-level developer with <strong>1 to 3 years of experience</strong> can earn between <strong>$67,000 and $106,000</strong>. However, a senior full stack developer with <strong>2 to 4 years of experience</strong> can expect a salary ranging from <strong>$72,000 to $113,000</strong> in the United States.</p>\n<p>If you’re looking to dive deeper into the specifics between full stack development and other technical roles, check out our detailed comparison of <a href=\"https://roadmap.sh/devops/vs-full-stack\" target=\"_blank\">DevOps vs full stack developer.</a> It outlines how these professionals contribute to different aspects of the software development lifecycle, offering clarity for career seekers and hiring managers.</p>\n<p><strong>Software engineer</strong>\nSoftware engineering is another popular job profile that involves a wide range of domain options, such as mobile apps, frontend, backend, native apps, web development, etc. Software engineering professionals use engineering principles, new technologies, and programming languages to develop software applications and operating systems for end users.</p>\n<p>Have a look at our guide that compares <a href=\"https://roadmap.sh/full-stack/vs-software-engineer\" target=\"_blank\">full stack developers vs software engineers</a>,  which will help you understand their roles and determine which aligns best with your skills and aspirations.</p>\n<p>The salary of a software engineering job profile ranges between $65K-$325K (<a href=\"https://builtin.com/salaries/dev-engineer/software-engineer\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">source</a>). A junior software engineering job position can make up to <strong>$89,247</strong>, while a senior software engineer’s average salary may come to around <strong>$152,400.</strong></p>\n<p><strong>Software architect</strong>\nA software architect is another demanding position in software development projects. These professionals are responsible for some of the critical tasks that are highly complex in nature. They work on software functionality, security, performance, and other key aspects like architectural prototyping and quality assurance.</p>\n<p>Most software developers apply for software architect role because it is challenging and high-paying. A software architect’s estimated <a href=\"https://www.payscale.com/research/US/Job=Software_Architect/Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary will be $140,379.</a></p>\n<h2 id=\"career-paths-and-salary-insights-for-devops-engineer\">Career paths and salary insights for DevOps engineer</h2>\n<p>The following are the job titles for DevOps engineer with their salary insights:</p>\n<ul>\n<li>Cloud engineer</li>\n<li>Infrastructure engineer</li>\n<li>DevOps architect</li>\n</ul>\n<p><strong>Cloud engineer</strong>\nCloud engineers are IT professionals who design, plan, and manage tasks related to cloud computing. These DevOps professionals help with cloud migration, maintain cloud resources, configure cloud infrastructure components, design scalable cloud applications, monitor cloud services and platforms, and more.</p>\n<p>In 2024, the estimated average salary of a cloud engineer ranges around <strong>$116,252</strong>, depending on experience, location, and specific skills in demand.</p>\n<p><strong>Infrastructure engineer</strong>\nInfrastructure engineers help assess existing software and project improvements. The infra engineer uses the latest techniques and technologies to maintain IT infrastructure and ensure seamless functioning. Further, they monitor system performance, troubleshoot errors, administer automated workflow tools, etc.</p>\n<p>In 2024, the <a href=\"https://www.fieldengineer.com/skills/what-is-an-infrastructure-engineer\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a infrastructure engineer is between <strong>$79,480</strong> (<a href=\"https://www.payscale.com/research/US/Job=IT_Infrastructure_Engineer/Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Payscale</a>) and <strong>$115,606</strong> (<a href=\"https://www.ziprecruiter.com/Salaries/Infrastructure-Engineer-Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ZipRecruiter</a>), depending on factors such as geographic location, years of experience, and expertise in specific cloud platforms.</p>\n<p><strong>DevOps architect</strong>\nAnother demanding position for DevOps engineers. These experts play an important role in implementing DevOps practices, facilitating proper integration and continuous deployment. They develop the overall DevOps strategy, select appropriate automation tools, manage the CI/CD pipeline, and cultivate a culture of collaboration among development and operation teams.</p>\n<p>In 2024, the <a href=\"https://www.talent.com/salary?job=devops+architect\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary of a DevOps architect</a> is estimated to be around $150,000, depending on industry, experience, geographic location, and specific cloud technologies or tools expertise.</p>\n<p>Now, if you have decided which career path you would like to pursue, let’s get a quick insight into the skills essential for both job profiles.</p>\n<h2 id=\"essential-skills-for-aspiring-devops-engineers-and-software-developers\">Essential skills for aspiring DevOps engineers and software developers.</h2>\n<p><strong>Top skills required for software developers</strong>\nApplying for software development job titles is no longer as simple as it used to be. Changes in the technology-driven workforce have resulted in companies looking for highly specialized individuals with the right set of skills and knowledge. Here are the top skills that IT decision-makers look for in an individual when hiring software developers for their organization:</p>\n<ul>\n<li>\n<p><strong>Programming languages</strong>\nA developer in an organization may work on a wide range of projects using different programming languages, so it’s essential to have knowledge of multiple languages to develop an app or software. <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, and <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> are a few of the most commonly used languages.</p>\n</li>\n<li>\n<p><strong>Database administration</strong>\nDatabase administration and management are other skills most organizations look for in a software developer. Developing a web application or software without database expertise is challenging, so it’s essential to have a solid understanding of Oracle, MySQL, and other popular database management systems.</p>\n</li>\n<li>\n<p><strong>Data structures and algorithms</strong>\nAnother essential skill set is a good knowledge of <a href=\"https://roadmap.sh/datastructures-and-algorithms\" target=\"_blank\">data structures and algorithms</a>. A data structure is an organizing and storage format used in computer science to provide effective access to data. This helps software developers analyze massive codebases and identify errors more quickly.</p>\n</li>\n<li>\n<p><strong>Secure coding practices</strong>\nIT decision-makers make sure that the selected software developer can build secure apps. This person, basically, uses secure coding practices and pays attention to details.</p>\n</li>\n<li>\n<p><strong>Problem-solving and communication</strong>\nDeveloper’s core responsibility is to find solutions to issues. Developers can face various challenges when building an app or software, such as broken codes, errors, etc. One can analyze and fix the problem faster with problem-solving skills and creativity. Also, the ability to communicate with cross-team members and clients is another key factor often considered\nwhen hiring software developers.</p>\n</li>\n<li>\n<p><strong>Version control systems</strong>\nVersion control is an essential skill for any software developer, as it enables collaboration, tracks changes, and ensures code integrity across teams and projects. Modern development workflows heavily rely on version control systems to manage source code effectively.</p>\n</li>\n</ul>\n<p><strong>Top skills required for DevOps engineers</strong>\nThe demand for DevOps engineers is constantly rising. Many organizations are looking to hire DevOps engineers with the right skills and talent. The applicant must have expertise in soft and technical skills in their roles. Hiring DevOps Engineers requires the following skills:</p>\n<ul>\n<li>\n<p><strong>Coding and scripting</strong>\nDevOps engineers must have the two most important skills: coding and scripting. The DevOps professional must also have a good command of different programming languages for writing code.</p>\n</li>\n<li>\n<p><strong>Linux</strong>\nMany organizations use Linux over other operating systems because of its flexibility, security, and stability. DevOps engineers must be clear with the fundamentals of Linux.</p>\n</li>\n<li>\n<p><strong>System administration</strong>\nAnother key skill that tech teams look for in a DevOps engineer is the ability to manage servers and troubleshoot issues faster. Experience in user administration, software installation, and system monitoring are a few skills essential to upkeep a robust infrastructure.</p>\n</li>\n<li>\n<p><strong>Software testing</strong>\nWith this skill, DevOps engineer can identify faults and bugs faster and improve codebase quality. A DevOps engineer must be proficient in using different testing methodologies.</p>\n</li>\n<li>\n<p><strong>Automation</strong>\nInfrastructure provisioning, configuration management, automation of CI/CD pipelines, or application deployment are a few areas that DevOps must know how to use and implement.</p>\n</li>\n<li>\n<p><strong>Cloud computing</strong>\nIn the modern DevOps landscape, cloud computing plays an important role. DevOps engineers must be skilled in deploying, managing, and maintaining applications on cloud platforms like AWS, Microsoft Azure, and Google Cloud Platform (GCP).</p>\n</li>\n</ul>\n<p>Here are a few DevOps engineer certifications and training courses you can apply for:</p>\n<ul>\n<li>AWS-certified DevOps engineer</li>\n<li>Google professional DevOps engineer</li>\n<li>Continuous delivery and DevOps</li>\n<li>DevOps culture and mindset</li>\n</ul>\n<h2 id=\"future-trends-in-devops-culture\">Future trends in DevOps culture</h2>\n<p>Software development has been in practice for a long time. Despite advancements and innovations in technology, the software development process remains essential. However, the introduction of DevOps had an impact on modern software development:</p>\n<ul>\n<li><strong>Faster time-to-market</strong>: With DevOps principles, organizational teams are able to ensure faster software delivery.</li>\n<li><strong>Enhanced collaboration</strong>: DevOps enabled better communication and collaboration between development, operations, and other cross-functional teams.</li>\n<li><strong>Faster resolution and quality</strong>: Automation tools helped gain faster feedback on code quality and reduce errors, which improved overall software quality and performance.\n<img src=\"https://assets.roadmap.sh/guest/future-trends-indevops-culture-mczvt.png\" alt=\"Future trends in DevOps culture\"></li>\n</ul>\n<p>Organizations constantly adapt new digital techniques and technologies to ease the task and deliver quality software design to end-users. In fact, <a href=\"https://www.puppet.com/resources/state-of-platform-engineering\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Puppet’s State of DevOps report</a> clearly stated that developer needs are changing. Many other DevOps enterprise summits have discussed how these transformations will sooner or later further evolve DevOps culture as well as impact software developers. Some of the key trends that may impact the future of DevOps include:</p>\n<ul>\n<li>\n<p><strong>AI and machine learning</strong>\nIntegration of AI and machine learning into DevOps processes is becoming a trend. With this incorporation, all the major tasks, such as code releases and analysis, software deployment, and application software monitoring, will become faster and more reliable. By enabling quicker identification and resolution of issues, they also improve predictive analytics, aiding in resource planning and performance optimization.</p>\n</li>\n<li>\n<p><strong>DevSecOps</strong>\nAn approach to software development that focuses on identifying and reducing security vulnerabilities in software systems. It strongly emphasizes working together to automate procedures and expedite deployment across development, operations, and security teams, ensuring secure, seamless, and faster deployments.</p>\n</li>\n<li>\n<p><strong>GitOps</strong>\nGitOps is a powerful framework software development teams use to automate deployment processes and better manage infrastructure. The approach is based on DevOps practices, such as version control systems and continuous integration and delivery.</p>\n</li>\n<li>\n<p><strong>Infrastructure as Code</strong>\nAnother DevOps practice that uses configuration files for infrastructure management and provisioning. It not only saves time but also improves accuracy by eliminating manual processes.</p>\n</li>\n<li>\n<p><strong>Low-code and no-code development</strong>\nThese platforms are making DevOps accessible by enabling non-technical users to participate in development processes. By integrating with DevOps pipelines, these tools accelerate application delivery while maintaining high standards of quality and security.</p>\n</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Have you made up your mind? Which one will you choose as your career path—a DevOps engineer or a software developer?</p>\n<p>For hiring managers, decide whether your organization needs operational efficiency (DevOps) or innovative software solutions (Developers). For career seekers, choose based on your interest in infrastructure challenges or creative coding.</p>\n<p>It can be challenging to decide between the two prominent profiles. However, you must pursue your interests and career goals. Here is a quick recap of what we covered in this post:</p>\n<p>Software development is more about design and development. If you are interested in coding or building new features, you can opt for software developers. You can choose from the different job titles available under software developers, i.e., <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend developers</a>, software architect, etc.</p>\n<p>DevOps engineers, on the other hand, is a process framework that involves challenges with access to automation, configuration management, infrastructure management, and other areas essential for smooth system performance and functioning. They must be familiar with Continuous integration and delivery, and other above-listed skills. This field also comprises roles and positions, such as Cloud Engineer, Infrastructure Engineer, etc.</p>\n<p>Whatever path you choose, you can get more insights and guidance from our <a href=\"https://roadmap.sh/\" target=\"_blank\">roadmaps</a>. Register with us and gain access to a wide array of insightful guides, covering different roles and diverse topics. If you want detailed insights on any specific role, join the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a> and stay informed!</p>";

				const frontmatter$S = {"title":"DevOps Vs. Developer: What Are The Key Differences?","description":"Understand the differences between DevOps and Developer roles. Find out which career aligns with your skills and future goals.","authorId":"william","excludedBySlug":"/devops/vs-developer","seo":{"title":"DevOps Vs. Developer: What Are The Key Differences?","description":"Understand the differences between DevOps and Developer roles. Find out which career aligns with your skills and future goals.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-vs-developer-yv25p.jpg"},"isNew":false,"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","type":"textual","date":"2024-12-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$S = "/workspace/src/data/guides/devops-vs-developer.md";
				const url$S = undefined;
				function rawContent$S() {
					return "   \n                                                            \n                                                                                                                                             \n                 \n                                      \n    \n                                                              \n                                                                                                                                               \n                                                                             \n            \n                                  \n                       \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps engineers vs software developers compared](https://assets.roadmap.sh/guest/devops-vs-developer-yv25p.jpg)\n\nIn the software development process, the main task of developers is to create, test, and deploy software applications. However, the increasing complexities of software projects have led to the creation of new roles, such as DevOps engineers.\n\nFor hiring managers, understanding the distinct roles and contributions of DevOps and software developers can streamline the recruitment process, ensuring the right talent aligns with project needs. Career seekers, on the other hand, can make informed decisions by comparing the responsibilities and growth potential in each path.\n\nDevOps and software developers contribute to software development yet differ in various aspects and roles. DevOps is a broader framework that involves development and operations teams working together to modernize the **s**oftware **d**evelopment **l**ifecycle (SDLC). However, software development teams work exclusively on development tasks.\n\nBoth career paths have their own roles and benefits, yet most people wonder: Who is paid more, a [DevOps](https://roadmap.sh/devops) or a [full stack developer](https://roadmap.sh/full-stack)? Some people even have a misconception that DevOps is a bit more difficult than software development. Anyone planning to choose a career path between the two must clearly understand their roles and core responsibilities.\n\nIn this guide, I’ll break down the key differences between DevOps and software developers. Additionally, you’ll get a quick overview of salary insights for both roles and gain an understanding of new advancements and technologies that are set to shape the future of both fields.\n\nThe table below summarizes the key differences between a DevOps engineer and a software developer.\n\n| **Job Title**                       | **Software Developer**                                                                       | **DevOps Engineer**                                                                                                                                                              |\n| ----------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Key Tasks**                       | Software developers generally create codes, run tests, and manage deployment in small teams. | DevOps engineers automate tasks, manage infrastructure, and monitor and troubleshoot issues.                                                                                     |\n| **Collaboration and Team Dynamics** | Communication is mostly restricted to software functionalities.                              | Communication and collaboration go beyond the development process, i.e., conveying technical issues, gathering feedback from different teams, discussing potential impacts, etc. |\n| **Responsibilities and Processes**  | Limited to writing, testing, and debugging codes.                                            | Automate workflows and orchestrate SDLC.                                                                                                                                         |\n\n## How do a DevOps engineer and a software developer differ?\n\nA [DevOps engineer](https://roadmap.sh/devops/devops-engineer) focuses on automating infrastructure, managing deployments, and ensuring smooth integration between development and operations, while a software developer primarily writes code to build applications or features.\n\n![DevOps Engineer vs Software Developer](https://assets.roadmap.sh/guest/devops-engineer-vs-software-developer-qodix.png)\n\nA software developer creates quality code and builds software applications. They focus primarily on designing, development, application testing, and software maintenance.\n\nSome may specialize in frontend, backend, or even full stack development, giving them the flexibility to manage comprehensive software projects.\n\nFor HR professionals, if your organization wants to improve operational efficiency and teamwork across departments, hiring a DevOps engineer could be a good choice. On the other hand, if your focus is on innovation and coding, a skilled software developer or full stack developer might be the better option.\n\nA skilled software developer knows the right tools and programming languages essential to build applications. Some experts even have [frontend](https://roadmap.sh/frontend), [backend](https://roadmap.sh/backend), or [full stack](https://roadmap.sh/full-stack) development experience.\n\nHowever, DevOps is a broader field that involves collaboration between the development and IT operations teams. Software developers majorly focus on writing codes, whereas DevOps ensures that the generated code works well.\n\nSome of the key tasks of a software developer include:\n\n- **Coding and development:** using different programming languages and frameworks to create clean code for your software.\n- **Testing:** running tests to get more clarity on whether the implemented code functions correctly and guarantees smooth software performance.\n- **Deployment**: While traditionally managed by the DevOps team, many developers now handle deployment processes, especially in smaller teams.\n\nOn the other hand, DevOps engineer's key tasks include:\n\n- **Automation DevOps**: automating all the tasks from testing software to deploying CI/CD pipelines.\n- **Infrastructure management**: facilitating collaboration and managing the entire infrastructure to ensure smooth application performance.\n- **Monitoring and maintenance**: using monitoring tools to track issues and application performance in real time.\n\n## Importance of collaboration with cross-functional teams in both roles\n\nBoth developers and DevOps engineers need to collaborate with cross-functional teams for a smooth workflow.\n\nWorking with cross-functional teams is essential for both software developers and DevOps engineers. These interactions streamline workflows, improve communication, and ensure that each department's needs and constraints are understood throughout the project lifecycle.\n\n**Hiring resource tip:** DevOps engineers may be more suitable for roles requiring collaboration across departments, whereas software developers, including full-stack developers, are better suited to focused development tasks.\n\n**Career insight -** As a software developer, your interaction might be limited to the design, development, and testing phases. However, moving toward DevOps expands your scope to include operational aspects, which could be beneficial for long-term career growth.\n\nSoftware developers need to constantly communicate with other developers on the team, designers, and even quality assurance(QA) engineers to ensure the delivery of high-quality software. Their collaboration is primarily focused on software functionalities. In the early stages of the traditional software development process, developers were not very involved in how their code operated in production. A separate department, i.e., the IT operations team or deployment manager, was responsible for tracking application deployment.\n\n![Collaboration and team dynamics](https://assets.roadmap.sh/guest/collaboration-and-team-dynamics-k302s.png)\n\nIn the case of DevOps, things are completely different. Their collaboration with cross-functional teams goes beyond the development process. The DevOps concept was introduced to bridge the gap between development and operations for smooth workflow and rapid delivery. The development and IT operation team need to frequently communicate and provide quick feedback on different aspects for efficient software performance and deployment of code changes.\n\nThe incorporation of DevOps practices will enable organizations to improve their product quality, automate complex and repetitive tasks, detect errors in real time, and deploy new features in less time.\n\nLet’s understand more about software developers and DevOps engineers' responsibilities and processes.\n\n## Key differences in responsibilities and processes\n\n**Software developer**\nThe primary responsibility of a software developer is to write, test, and debug code. The development team also looks after the software application's maintenance and ensures the final product aligns with your business goals and customer needs.\n\nApart from writing code, software developers are also responsible for preparing technical documentation, troubleshooting issues in real time, and managing security issues. A software development team even collaborates and works closely with product managers, designers, and stakeholders to turn the basic idea into a high-quality software product.\n\nAnother critical aspect of software developer role is participating in code reviews and providing constructive feedback to team members, contributing to overall code quality and team growth.\n\n**DevOps engineers**\nThe primary responsibility of a DevOps team is to automate the entire testing and deployment process. By automating workflow, organizations can ensure faster software delivery.\n\nThe professionals use a wide range of DevOps tools to automate and orchestrate SDLC. They also monitor software performance via different monitoring tools like Prometheus, Grafana, Datadog, etc., provide rapid feedback loops, and troubleshoot errors and code bugs in real time.\n\nDevOps job role is not limited to deployment but is a continuous process that looks after various aspects to deliver highly scalable and secure software.\n\nOnce you are clear with the responsibilities that come under both job profiles, it is also important to get clarity on the different career paths you can choose from and their pay scale. This will help determine which one can bring you more growth and success in the future.\n\n## Career paths and salary insights for software developer\n\nJob titles for software developers may vary based on the company and experience level. These include software engineers, software architects, and full stack developers.\n\nFor career seekers, a full stack developer handles both frontend and backend tasks, making them highly versatile. This role offers a balanced career path for those looking to build comprehensive expertise in development.\n\nA DevOps engineer, meanwhile, is pivotal for organizations adopting modern frameworks like CI/CD pipelines and cloud infrastructure.\n\nFor hiring managers, offering competitive salaries and clearly defined roles for full stack developers and DevOps engineers can attract top talent. Highlighting growth opportunities within your company can also increase retention rates.\n\nBelow are some common job titles for software developers, along with salary insights for each role:\n\n- Full stack developer\n- Software engineer\n- Software architect\n\n**Full stack developer**\nA full stack developer is a computer professional responsible for managing both the frontend and backend of your software. Full stack developers handle all aspects of database management, analysis, user interface design, code testing, and user communication.\n\nBased on my experience, currently, the salary of a junior full stack developer with (**0-1 year of experience**) ranges between **$61,000-$99,000**. A mid-level developer with **1 to 3 years of experience** can earn between **$67,000 and $106,000**. However, a senior full stack developer with **2 to 4 years of experience** can expect a salary ranging from **$72,000 to $113,000** in the United States.\n\nIf you're looking to dive deeper into the specifics between full stack development and other technical roles, check out our detailed comparison of [DevOps vs full stack developer.](https://roadmap.sh/devops/vs-full-stack) It outlines how these professionals contribute to different aspects of the software development lifecycle, offering clarity for career seekers and hiring managers.\n\n**Software engineer**\nSoftware engineering is another popular job profile that involves a wide range of domain options, such as mobile apps, frontend, backend, native apps, web development, etc. Software engineering professionals use engineering principles, new technologies, and programming languages to develop software applications and operating systems for end users.\n\nHave a look at our guide that compares [full stack developers vs software engineers](https://roadmap.sh/full-stack/vs-software-engineer),  which will help you understand their roles and determine which aligns best with your skills and aspirations.\n\nThe salary of a software engineering job profile ranges between $65K-$325K ([source](https://builtin.com/salaries/dev-engineer/software-engineer)). A junior software engineering job position can make up to **$89,247**, while a senior software engineer's average salary may come to around **$152,400.**\n\n**Software architect**\nA software architect is another demanding position in software development projects. These professionals are responsible for some of the critical tasks that are highly complex in nature. They work on software functionality, security, performance, and other key aspects like architectural prototyping and quality assurance.\n\nMost software developers apply for software architect role because it is challenging and high-paying. A software architect's estimated [average salary will be $140,379.](https://www.payscale.com/research/US/Job=Software_Architect/Salary)\n\n## Career paths and salary insights for DevOps engineer\n\nThe following are the job titles for DevOps engineer with their salary insights:\n\n- Cloud engineer\n- Infrastructure engineer\n- DevOps architect\n\n**Cloud engineer**\nCloud engineers are IT professionals who design, plan, and manage tasks related to cloud computing. These DevOps professionals help with cloud migration, maintain cloud resources, configure cloud infrastructure components, design scalable cloud applications, monitor cloud services and platforms, and more.\n\nIn 2024, the estimated average salary of a cloud engineer ranges around **$116,252**, depending on experience, location, and specific skills in demand.\n\n**Infrastructure engineer**\nInfrastructure engineers help assess existing software and project improvements. The infra engineer uses the latest techniques and technologies to maintain IT infrastructure and ensure seamless functioning. Further, they monitor system performance, troubleshoot errors, administer automated workflow tools, etc.\n\nIn 2024, the [average salary](https://www.fieldengineer.com/skills/what-is-an-infrastructure-engineer) of a infrastructure engineer is between **$79,480** ([Payscale](https://www.payscale.com/research/US/Job=IT_Infrastructure_Engineer/Salary)) and **$115,606** ([ZipRecruiter](https://www.ziprecruiter.com/Salaries/Infrastructure-Engineer-Salary)), depending on factors such as geographic location, years of experience, and expertise in specific cloud platforms.\n\n**DevOps architect**\nAnother demanding position for DevOps engineers. These experts play an important role in implementing DevOps practices, facilitating proper integration and continuous deployment. They develop the overall DevOps strategy, select appropriate automation tools, manage the CI/CD pipeline, and cultivate a culture of collaboration among development and operation teams.\n\nIn 2024, the [average salary of a DevOps architect](https://www.talent.com/salary?job=devops+architect) is estimated to be around $150,000, depending on industry, experience, geographic location, and specific cloud technologies or tools expertise.\n\nNow, if you have decided which career path you would like to pursue, let's get a quick insight into the skills essential for both job profiles.\n\n## Essential skills for aspiring DevOps engineers and software developers.\n\n**Top skills required for software developers**\nApplying for software development job titles is no longer as simple as it used to be. Changes in the technology-driven workforce have resulted in companies looking for highly specialized individuals with the right set of skills and knowledge. Here are the top skills that IT decision-makers look for in an individual when hiring software developers for their organization:\n\n- **Programming languages**\n  A developer in an organization may work on a wide range of projects using different programming languages, so it's essential to have knowledge of multiple languages to develop an app or software. [JavaScript](https://roadmap.sh/javascript), [Go](https://roadmap.sh/golang), [Java](https://roadmap.sh/java), and [Python](https://roadmap.sh/python) are a few of the most commonly used languages.\n\n- **Database administration**\n  Database administration and management are other skills most organizations look for in a software developer. Developing a web application or software without database expertise is challenging, so it's essential to have a solid understanding of Oracle, MySQL, and other popular database management systems.\n\n- **Data structures and algorithms**\n  Another essential skill set is a good knowledge of [data structures and algorithms](https://roadmap.sh/datastructures-and-algorithms). A data structure is an organizing and storage format used in computer science to provide effective access to data. This helps software developers analyze massive codebases and identify errors more quickly.\n\n- **Secure coding practices**\n  IT decision-makers make sure that the selected software developer can build secure apps. This person, basically, uses secure coding practices and pays attention to details.\n\n- **Problem-solving and communication**\n  Developer’s core responsibility is to find solutions to issues. Developers can face various challenges when building an app or software, such as broken codes, errors, etc. One can analyze and fix the problem faster with problem-solving skills and creativity. Also, the ability to communicate with cross-team members and clients is another key factor often considered\n  when hiring software developers.\n\n- **Version control systems**\n  Version control is an essential skill for any software developer, as it enables collaboration, tracks changes, and ensures code integrity across teams and projects. Modern development workflows heavily rely on version control systems to manage source code effectively.\n\n**Top skills required for DevOps engineers**\nThe demand for DevOps engineers is constantly rising. Many organizations are looking to hire DevOps engineers with the right skills and talent. The applicant must have expertise in soft and technical skills in their roles. Hiring DevOps Engineers requires the following skills:\n\n\n- **Coding and scripting**\n  DevOps engineers must have the two most important skills: coding and scripting. The DevOps professional must also have a good command of different programming languages for writing code.\n\n- **Linux**\n  Many organizations use Linux over other operating systems because of its flexibility, security, and stability. DevOps engineers must be clear with the fundamentals of Linux.\n\n- **System administration**\n  Another key skill that tech teams look for in a DevOps engineer is the ability to manage servers and troubleshoot issues faster. Experience in user administration, software installation, and system monitoring are a few skills essential to upkeep a robust infrastructure.\n\n- **Software testing**\n  With this skill, DevOps engineer can identify faults and bugs faster and improve codebase quality. A DevOps engineer must be proficient in using different testing methodologies.\n\n- **Automation**\n  Infrastructure provisioning, configuration management, automation of CI/CD pipelines, or application deployment are a few areas that DevOps must know how to use and implement.\n\n- **Cloud computing**\n  In the modern DevOps landscape, cloud computing plays an important role. DevOps engineers must be skilled in deploying, managing, and maintaining applications on cloud platforms like AWS, Microsoft Azure, and Google Cloud Platform (GCP).\n\nHere are a few DevOps engineer certifications and training courses you can apply for:\n\n- AWS-certified DevOps engineer\n- Google professional DevOps engineer\n- Continuous delivery and DevOps\n- DevOps culture and mindset\n\n## Future trends in DevOps culture\n\nSoftware development has been in practice for a long time. Despite advancements and innovations in technology, the software development process remains essential. However, the introduction of DevOps had an impact on modern software development:\n\n- **Faster time-to-market**: With DevOps principles, organizational teams are able to ensure faster software delivery.\n- **Enhanced collaboration**: DevOps enabled better communication and collaboration between development, operations, and other cross-functional teams.\n- **Faster resolution and quality**: Automation tools helped gain faster feedback on code quality and reduce errors, which improved overall software quality and performance.\n  ![Future trends in DevOps culture](https://assets.roadmap.sh/guest/future-trends-indevops-culture-mczvt.png)\n\nOrganizations constantly adapt new digital techniques and technologies to ease the task and deliver quality software design to end-users. In fact, [Puppet’s State of DevOps report](https://www.puppet.com/resources/state-of-platform-engineering) clearly stated that developer needs are changing. Many other DevOps enterprise summits have discussed how these transformations will sooner or later further evolve DevOps culture as well as impact software developers. Some of the key trends that may impact the future of DevOps include:\n\n- **AI and machine learning**\n  Integration of AI and machine learning into DevOps processes is becoming a trend. With this incorporation, all the major tasks, such as code releases and analysis, software deployment, and application software monitoring, will become faster and more reliable. By enabling quicker identification and resolution of issues, they also improve predictive analytics, aiding in resource planning and performance optimization.\n\n- **DevSecOps**\n  An approach to software development that focuses on identifying and reducing security vulnerabilities in software systems. It strongly emphasizes working together to automate procedures and expedite deployment across development, operations, and security teams, ensuring secure, seamless, and faster deployments.\n\n- **GitOps**\n  GitOps is a powerful framework software development teams use to automate deployment processes and better manage infrastructure. The approach is based on DevOps practices, such as version control systems and continuous integration and delivery.\n\n- **Infrastructure as Code**\n  Another DevOps practice that uses configuration files for infrastructure management and provisioning. It not only saves time but also improves accuracy by eliminating manual processes.\n\n- **Low-code and no-code development**\n  These platforms are making DevOps accessible by enabling non-technical users to participate in development processes. By integrating with DevOps pipelines, these tools accelerate application delivery while maintaining high standards of quality and security.\n\n## Conclusion\n\nHave you made up your mind? Which one will you choose as your career path—a DevOps engineer or a software developer?\n\nFor hiring managers, decide whether your organization needs operational efficiency (DevOps) or innovative software solutions (Developers). For career seekers, choose based on your interest in infrastructure challenges or creative coding.\n\nIt can be challenging to decide between the two prominent profiles. However, you must pursue your interests and career goals. Here is a quick recap of what we covered in this post:\n\nSoftware development is more about design and development. If you are interested in coding or building new features, you can opt for software developers. You can choose from the different job titles available under software developers, i.e., [frontend developers](https://roadmap.sh/frontend), software architect, etc.\n\nDevOps engineers, on the other hand, is a process framework that involves challenges with access to automation, configuration management, infrastructure management, and other areas essential for smooth system performance and functioning. They must be familiar with Continuous integration and delivery, and other above-listed skills. This field also comprises roles and positions, such as Cloud Engineer, Infrastructure Engineer, etc.\n\nWhatever path you choose, you can get more insights and guidance from our [roadmaps](https://roadmap.sh/). Register with us and gain access to a wide array of insightful guides, covering different roles and diverse topics. If you want detailed insights on any specific role, join the [Discord community](https://roadmap.sh/discord) and stay informed!";
				}
				async function compiledContent$S() {
					return await html$S();
				}
				function getHeadings$S() {
					return [{"depth":2,"slug":"how-do-a-devops-engineer-and-a-software-developer-differ","text":"How do a DevOps engineer and a software developer differ?"},{"depth":2,"slug":"importance-of-collaboration-with-cross-functional-teams-in-both-roles","text":"Importance of collaboration with cross-functional teams in both roles"},{"depth":2,"slug":"key-differences-in-responsibilities-and-processes","text":"Key differences in responsibilities and processes"},{"depth":2,"slug":"career-paths-and-salary-insights-for-software-developer","text":"Career paths and salary insights for software developer"},{"depth":2,"slug":"career-paths-and-salary-insights-for-devops-engineer","text":"Career paths and salary insights for DevOps engineer"},{"depth":2,"slug":"essential-skills-for-aspiring-devops-engineers-and-software-developers","text":"Essential skills for aspiring DevOps engineers and software developers."},{"depth":2,"slug":"future-trends-in-devops-culture","text":"Future trends in DevOps culture"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$S = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$S;
					content.file = file$S;
					content.url = url$S;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$S())}`;
				});

const __vite_glob_0_44 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$S,
	compiledContent: compiledContent$S,
	default: Content$S,
	file: file$S,
	frontmatter: frontmatter$S,
	getHeadings: getHeadings$S,
	rawContent: rawContent$S,
	url: url$S
}, Symbol.toStringTag, { value: 'Module' }));

const html$R = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-vs-devsecops-3drth.jpg\" alt=\"DevOps vs DevSecOps comparison guide\"></p>\n<p>Over the years, the demand for high-quality software and resilient systems has grown significantly. Businesses are under immense pressure to deliver software faster than ever. However, rushing development often comes with trade-offs, such as increased security risks that can compromise entire systems.</p>\n<p>Traditional development practices struggled to keep up with the need for both speed and security, creating a critical challenge for organizations. To address the challenge of balancing rapid software delivery with the need for robust security and quality, two models were introduced: DevOps and DevSecOps.</p>\n<p><a href=\"https://roadmap.sh/devops/devops-engineer\" target=\"_blank\">DevOps</a> focuses on streamlining the development and operations lifecycle to deliver software quickly. DevSecOps integrates security practices into the DevOps pipeline, prioritizing security from the start and throughout the entire development process.</p>\n<p>In this blog, you will learn about the main purpose and role of DevOps and DevSecOps. You will also explore a comparison between the two, helping you determine which approach is right for your needs. Understanding the key differences and benefits is essential to choosing the right model, so keep reading!</p>\n<p>Below is a quick comparison table of DevOps vs. DevSecOps for easier reference:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/comparison-table-of-devops-vs-devsecops-wcai5.png\" alt=\"DevOps vs DevSecOps\"></p>\n<h2 id=\"devops-vs-devsecops-how-are-they-different\">DevOps vs DevSecOps: How are they different?</h2>\n<p>Choosing between DevOps and DevSecOps can determine whether your software is fast—or secure from the start.</p>\n<p>While both approaches aim to enhance collaboration and efficiency in software development, DevSecOps incorporates security practices early in the development cycle, unlike DevOps, which often addresses security issues at a later stage.</p>\n<p>DevOps is primarily focused on improving collaboration between design, development, and operations teams to speed up software delivery. The core idea is to remove bottlenecks and inefficiencies in the development pipeline. DevOps engineers are skilled in coding, automation, and system administration, and they focus on delivering high-quality software with minimal errors, often through continuous integration and continuous delivery (CI/CD).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/understanding-devops-vs-devsecops-v9tkn.png\" alt=\"Understanding DevOps vs DevSecOps\"></p>\n<p>On the other hand, DevSecOps brings security into the equation by integrating cybersecurity practices throughout the development process. This approach arose to address increasing cyber threats by embedding security checks at every phase of the software development lifecycle (SDLC). While DevOps ensures quick software delivery, DevSecOps emphasizes secure and compliant software delivery by shifting security considerations to the left of the development timeline, ensuring that vulnerabilities are detected early.</p>\n<h2 id=\"security-in-devops-vs-devsecops-a-closer-look-at-processes-and-tools\">Security in DevOps vs. DevSecOps: A Closer Look at Processes and Tools</h2>\n<p>One of the key differences between DevOps and DevSecOps lies in how they handle security.\nIn DevOps workflows, security testing typically occurs near the end of the development cycle, during quality assurance or post-deployment. Security measures, such as patches or vulnerability scanning, are often applied as part of the release process. This can result in delayed launches or costly remediation efforts if critical issues are discovered late in the pipeline.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/role-of-security-rj7j1.png\" alt=\"Role of security in DevOps and DevSecOps\"></p>\n<p>DevSecOps, on the other hand, focuses on strengthening deployment security and maintaining data protection and compliance by tracking issues as they arise. This approach uses both shift-left and shift-right security testing strategies. Shift-left testing involves identifying security vulnerabilities early in the development process, even before code is merged.</p>\n<p>Tools like static application security testing (SAST), dynamic application security testing (DAST), and dependency checkers are embedded into CI/CD pipelines to catch publicly disclosed vulnerabilities. Additionally, automated scanners and code analyzers ensure that potential risks are flagged before reaching production.</p>\n<p>For example, in a DevOps environment, a team may identify security vulnerabilities only after a routine code audit or during the final phase of testing. However, in a DevSecOps setup, automated security checks would be integrated into the CI/CD pipeline, flagging issues in real time before code is deployed, saving time and mitigating risks.</p>\n<h3 id=\"shift-left-and-shift-right-strategies\">Shift-Left and Shift-Right Strategies</h3>\n<p><a href=\"https://roadmap.sh/devops/shift-left-testing\" target=\"_blank\">Shift-left security</a> is a key component of DevSecOps. With early security testing (shift-left security), DevSecOps helps identify risks and prevent product compromise. Addressing errors during the production phase is far more cost-effective than fixing them after deployment. Additionally, continuous security testing reinforces compliance with industry standards.</p>\n<p>A real-world example of the consequences of delayed security integration is the <a href=\"https://archive.epic.org/privacy/data-breach/equifax/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">2017 Equifax data breach</a>. A known vulnerability in the Apache Struts framework was left unpatched, resulting in the exposure of sensitive customer data for over 147 million people. Had shift-left security practices been in place, experts could have flagged the outdated library during the early stages of development and prevented breach.</p>\n<p>Shift-right testing is equally important as it helps developers detect security threats and fix issues in real time. Delays in security threat detection can impact product integrity and customer trust.</p>\n<p>For instance, imagine your organization is working on financial application design and creation, in which security processes and tests are supposed to run during the final phase.</p>\n<p>In such a case, issue detection at the final phase can result in a product launch delay. This might also result in higher costs. And if, to avoid a launch delay, you introduce the product, the unresolved vulnerabilities can hamper your reputation and erode customer trust.</p>\n<p>DevSecOps understands the impact of security issues and thus recommend implementing shift-left and shift-right strategies that help reduce vulnerabilities and achieve faster time to market, thus saving your organizational reputation and customer trust.</p>\n<h2 id=\"how-devops-and-devsecops-affect-business-goals\">How DevOps and DevSecOps affect business goals?</h2>\n<p>DevOps and DevSecOps affects several key business such as time to market, customer satisfaction, operational efficiency and risk management. Here’s how they affect these goals.</p>\n<ol>\n<li><strong>Time to market</strong></li>\n</ol>\n<p>DevOps speeds up product delivery by automating workflows, removing bottlenecks and enabling faster iterations. DevSecOps puts the necessary checks in place without derailing development timelines so businesses can maintain a regular release cadence and meet market demand.</p>\n<ol start=\"2\">\n<li><strong>Customer satisfaction</strong></li>\n</ol>\n<p>DevOps delivers frequent updates and new features to keep up with customer demand and improve user experience. DevSecOps builds on this by delivering secure and reliable products, reducing the risk of issues that will frustrate users. Both speed and reliability increases customer trust and loyalty.</p>\n<ol start=\"3\">\n<li><strong>Operational efficiency</strong></li>\n</ol>\n<p>DevOps makes tasks more efficient by removing duplication, eliminating manual intervention. DevSecOps adds to this by addressing risks early, avoiding rework or operational downtime. Together they reduce development costs and increase productivity.</p>\n<ol start=\"4\">\n<li><strong>Risk management</strong></li>\n</ol>\n<p>DevOps allows for faster iterations and deployments which can introduce risks if not managed properly. DevSecOps mitigates these risks by making security a core part of the development lifecycle. This proactive approach reduces the chance of breaches or compliance issues and protects the business’s reputation and financials.</p>\n<h2 id=\"core-processes-in-devops-and-devsecops\">Core processes in DevOps and DevSecOps</h2>\n<p>To accelerate the software development lifecycle, DevOps gives more attention to automation and collaboration. Monitoring in DevOps primarily focuses on performance, availability, and system uptime. Metrics like CPU utilization, application response times, and log aggregation form the foundation of DevOps monitoring strategies. Incident response, while essential, is reactive in nature—triggered only after an issue, such as a system crash or performance degradation, arises.</p>\n<p>DevSecOps runs security tests in all stages, thus adopting a more proactive approach. Continuous monitoring in DevSecOps goes beyond traditional metrics to include threat detection, vulnerability scanning, and compliance checks, focusing more on reducing risk and cost. They even use tools like SIEM (Security Information and Event Management) systems and cloud-native security platforms to detect threats in real time. Incident response in DevSecOps involves automated playbooks and AI-driven analysis to address vulnerabilities, often before they can escalate rapidly.</p>\n<p>In fact, DevSecOps even employs SAST and DAST strategies that help identify security vulnerabilities faster. Under SAST, professionals scans source code early to prevent vulnerabilities from entering production. Some of the common SAST tools are <a href=\"https://www.sonarsource.com/products/sonarqube/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SonarQube</a> and <a href=\"https://checkmarx.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Checkmarx</a>.</p>\n<p>However, under the DAST strategy, professionals evaluate applications in their running state to identify vulnerabilities. Some of the common DAST tools are <a href=\"https://www.zaproxy.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OWASP ZAP</a> and <a href=\"https://portswigger.net/burp\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Burp Suite</a> which help identify injection flaws and security misconfigurations.</p>\n<p>Interactive Application Security Testing (IAST), another practice that combines SAST and DAST, operates within the application runtime environment to provide detailed insights into vulnerabilities during testing and QA phases.</p>\n<p>These advanced testing methodologies—SAST, DAST, and IAST—not only enhance security within specific stages of development but also lay the groundwork for broader, innovative practices in continuous security monitoring. These emerging practices are redefining traditional monitoring and response strategies:</p>\n<h3 id=\"real-time-incident-response\">Real-time incident response</h3>\n<p>DevSecOps uses tools that use AI and machine learning for real-time threat detection and mitigation.</p>\n<p>Examples of tools used for real-time response in DevSecOps are Splunk, Datadog Security Monitoring, and CrowdStrike Falcon which do AI driven threat detection and automated response to incidents.</p>\n<h3 id=\"behavioral-analytics\">Behavioral analytics</h3>\n<p>Monitoring user and application behavior allows DevSecOps teams to detect anomalies such as data access or traffic patterns that are not normal which could be a breach.</p>\n<h3 id=\"continuous-compliance\">Continuous compliance</h3>\n<p>DevSecOps embeds security policies and regulatory standards into the development process for continuous compliance. Teams use automation tools like Policy-as-Code frameworks and compliance scanners to enforce and validate against standards like GDPR, HIPAA and PCI DSS. This way reduces compliance risks and makes auditing easier.</p>\n<h2 id=\"moving-from-devops-to-devsecops\">Moving from DevOps to DevSecOps</h2>\n<p>The shift from DevOps to DevSecOps is a critical evolution for organizations aiming to integrate security seamlessly into the development lifecycle. Below is a guide to facilitate this transition, highlighting actionable steps, tools, and strategies for success.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/moving-from-devops-to-devsecops-gimtv.png\" alt=\"Moving from DevOps to DevSecOps\"></p>\n<h3 id=\"understand-your-goals\">Understand your goals</h3>\n<p>Before implementing changes or transitioning to DevSecOps, step back and clearly lay out your goals. What do you want to achieve after transitioning to the DevSecOps model? Are you looking to enhance your security model or need faster software deployment? Being specific with your goals will help you make informed decisions and develop a plan that aligns with your goals.</p>\n<h3 id=\"current-flow-assessment\">Current flow assessment</h3>\n<p>Before transitioning to a new model, it is important to assess and change the existing workflow. Trace areas that demand or require improvement and attention. For example, check for proper coordination and communication among development, operations, and security teams. Are there any loopholes or faults in your current workflow? Is security feedback consistently integrated into development cycles? Identify gaps in communication by hosting cross-team retrospectives or root cause analyses to get more clarity of your situation.</p>\n<h3 id=\"choose-the-right-automation-tool\">Choose the right automation tool</h3>\n<p>If workflow efficiency is an issue, the best solution is to implement automation tools. These common tools can reduce manual tasks, run faster code reviews, perform security tests, and provide quick deployment. These tools further enable professionals to focus on other key areas and tasks, such as fixing errors or initiating new features within the application.</p>\n<h3 id=\"training-your-teammates\">Training your teammates</h3>\n<p>Adopting a new model or practice demands educating the team members early about the new process and security concerns. Inform and educate your team members about the importance of security systems and how integrating them can improve their overall performance. You can also run training sessions or seminars to cover more about security guidelines and standards. Help them understand rising security concerns, how to fill gaps, and how to integrate security throughout the software development cycle. This step will further prevent confusion and problems from escalating in the future.</p>\n<p>Educating the team early prevents missteps and promotes ownership of the new processes. But. despite preparation, organizations often face challenges when transitioning to DevSecOps. Let us have a look at some common DevSecOps transition challenges.</p>\n<h2 id=\"devsecops-transition-challenges\">DevSecOps transition challenges</h2>\n<p>Remember, transitioning to DevSecOps is not as easy as it sounds. There are various challenges, but these can be managed with the right approach.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devsecops-best-practices-m6e21.png\" alt=\"DevSecOps Best Practices\"></p>\n<p>Here are a few things to avoid in the transition period:</p>\n<h3 id=\"wrong-tool-selection\">Wrong tool selection</h3>\n<p>There is a wide range of security applications on the market, but make sure to select the right one that is relevant to your code and meets your requirements. Otherwise, you might find it hard to run in the long term.</p>\n<p>For guidance on selecting the right tools, refer to the <strong>“Top tools and processes for a smooth transition”</strong> section, where we highlight specific tools and best practices to facilitate a successful DevSecOps implementation.</p>\n<h3 id=\"non-inclusion-of-operations-and-security-teams\">Non-inclusion of operations and security teams</h3>\n<p>Security tests are conducted at every phase of software production. Excluding your operations and security teams from the monitoring and tracking process limits the ability to identify and address faults and bugs effectively. Involving security experts from the start allows them to provide guidance on misconfigurations, tools, and best practices.</p>\n<h3 id=\"speed-over-quality\">Speed over quality</h3>\n<p>DevOps emphasizes quick software delivery, which can sometimes lead to insufficient attention to quality and security functionality. This may affect the user experience and your business reputation. Allocating more time and effort to ensuring quality and integrating security practices can help strike the right balance.</p>\n<h3 id=\"code-monitoring-issues\">Code monitoring issues</h3>\n<p>Since code constantly changes in software production, keeping an eye on it at all times can be challenging for some professionals. It is important to introduce new configurations, tools, and practices that can identify vulnerabilities in real time.</p>\n<h2 id=\"top-tools-and-processes-for-a-smooth-transition\">Top tools and processes for a smooth transition</h2>\n<p>Further, let’s have a look at how tools and processes can facilitate this transition while keeping agility and innovation intact:</p>\n<h3 id=\"prioritize-security-first-cicd-configurations\">Prioritize security-first CI/CD configurations</h3>\n<p>CI/CD pipelines are the backbone of modern DevOps workflows. Embedding security into these pipelines guarantees vulnerabilities are identified and mitigated at every stage. So, incorporate Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST) tools.</p>\n<p>Further, you can use HashiCorp Vault or AWS Secrets Manager to manage sensitive information securely. Also, you can set policies to prevent critical vulnerabilities using tools such as Jenkins, GitHub Actions, or GitLab CI/CD.</p>\n<h3 id=\"embrace-infrastructure-as-code-iac\">Embrace infrastructure as code (IaC)</h3>\n<p>IaC automates infrastructure provisioning, but it can also introduce risks if not properly secured. For a smooth transition, it is important to integrate security into IaC processes. You can invest in Terrascan to detect vulnerabilities in Terraform or implement <a href=\"https://devops.com/immutable-infrastructure-the-next-step-for-devops/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">immutable infrastructure practices</a> to reduce configuration drift. Further, you can conduct regular audits of IaC templates for misconfigurations.</p>\n<h3 id=\"leverage-advanced-threat-modeling\">Leverage advanced threat modeling</h3>\n<p>Threat modeling makes certain that potential security risks are identified early. New tools and frameworks make this process more effective. Invest in AI-powered tools that automatically suggest mitigations for identified risks.</p>\n<h2 id=\"will-devsecops-replace-devops\">Will DevSecOps replace DevOps?</h2>\n<p>No, DevSecOps will not replace DevOps; instead, it enhances it. Rather than being a replacement, DevSecOps is an augmentation of DevOps, bringing security practices into the development and operations workflow. While DevOps focuses on speed, collaboration, and efficiency, DevSecOps makes sure that security becomes an inherent part of these processes. For example, integrating security tools like Snyk or SonarQube into CI/CD pipelines helps organizations identify vulnerabilities early in the development lifecycle.</p>\n<p>The two are complementary rather than mutually exclusive. DevSecOps acts as a bridge, ensuring that security doesn’t become a bottleneck while maintaining the agility of DevOps. This natural evolution addresses the growing need for secure software development without compromising agility. Let’s further learn how DevSecOps will evolve in the future.</p>\n<h2 id=\"future-of-devsecops\">Future of DevSecOps</h2>\n<p>As cybersecurity threats grow in sophistication and compliance regulations tighten, DevSecOps is poised to become the cornerstone of secure software development. In the recent <a href=\"https://www.crowdstrike.com/en-us/global-threat-report/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">CrowdStrike Global Threat Report</a>, experts clearly stated that attacks hardly take a few minutes to succeed. The report also noted that CrowdStrike tracked over 230 adversaries leveraging the global adoption of cloud technologies for their attacks.</p>\n<p>Tackling these challenges demands strategic teamwork and technical expertise. Here’s how DevSecOps is expected to evolve and why it is the future of secure DevOps:</p>\n<h3 id=\"proactive-threat-mitigation\">Proactive threat mitigation</h3>\n<p>DevSecOps is transitioning from reactive to proactive security. Predictive threat analysis, enabled by AI and machine learning, will play a crucial role in identifying security concerns and vulnerabilities before exploitation. For example, tools like CrowdStrike will become essential for analyzing attack patterns.</p>\n<h3 id=\"integration-with-governance-and-compliance\">Integration with governance and compliance</h3>\n<p>Stricter regulations such as GDPR, HIPAA, and CCPA are driving a compliance-first culture. DevSecOps will increasingly integrate automated compliance checks into CI/CD pipelines, facilitating adherence to global standards without manual intervention.</p>\n<h3 id=\"rise-of-zero-trust-architectures\">Rise of zero-trust architectures</h3>\n<p>The adoption of zero-trust principles will reshape security frameworks. DevSecOps will integrate zero-trust policies into development environments, guaranteeing continuous authentication and access verification. This approach will strengthen security for microservices and API-driven architectures.</p>\n<h3 id=\"cloud-native-and-container-security\">Cloud-native and container security</h3>\n<p>With the surge in cloud-native applications, securing containers and serverless environments will be a top priority. Several tools are available that will enable seamless security integration into cloud workloads, addressing misconfigurations and runtime vulnerabilities.</p>\n<p>In fact, in terms of demand and salary, DevSecOps roles tend to offer higher salaries due to the specialized skill set and smaller talent pool. Soon, there will be more role demands for security teams, DevSecOps engineers, security automation specialists, and compliance analysts job profiles to integrate security systems throughout the SDLC.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Now that you understand the differences between DevOps and DevSecOps, the choice comes down to your organization’s specific goals and priorities.</p>\n<p>If speed and efficiency are your primary focus, DevOps is a great fit. However, if security is paramount, DevSecOps is the better choice. By embedding security into every stage of the development lifecycle, DevSecOps helps mitigate vulnerabilities while ensuring compliance and quality.</p>\n<p>Both methodologies hold significant value, but in an era of increasing cybersecurity threats, DevSecOps is becoming essential for organizations that prioritize secure innovation.</p>\n<p>To navigate these approaches effectively and align them with your long-term goals—such as scalability, compliance, and reputation—explore our comprehensive <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps roadmap</a>. It offers actionable insights to help you build a strategy that drives efficiency, security, and success.</p>";

				const frontmatter$R = {"title":"DevOps vs DevSecOps: Key Differences and Best Fit","description":"DevOps vs DevSecOps: Learn the key differences, benefits, and how to choose the best approach for your needs and applications.","authorId":"ekene","excludedBySlug":"/devops/vs-devsecops","seo":{"title":"DevOps vs DevSecOps: Key Differences and Best Fit","description":"DevOps vs DevSecOps: Learn the key differences, benefits, and how to choose the best approach for your needs and applications.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-vs-devsecops-3drth.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2025-01-17","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$R = "/workspace/src/data/guides/devops-vs-devsecops.md";
				const url$R = undefined;
				function rawContent$R() {
					return "   \n                                                          \n                                                                                                                                             \n               \n                                      \n    \n                                                            \n                                                                                                                                               \n                                                                             \n                            \n                         \n            \n               \n                  \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps vs DevSecOps comparison guide](https://assets.roadmap.sh/guest/devops-vs-devsecops-3drth.jpg)\n\nOver the years, the demand for high-quality software and resilient systems has grown significantly. Businesses are under immense pressure to deliver software faster than ever. However, rushing development often comes with trade-offs, such as increased security risks that can compromise entire systems.\n\nTraditional development practices struggled to keep up with the need for both speed and security, creating a critical challenge for organizations. To address the challenge of balancing rapid software delivery with the need for robust security and quality, two models were introduced: DevOps and DevSecOps.\n\n[DevOps](https://roadmap.sh/devops/devops-engineer) focuses on streamlining the development and operations lifecycle to deliver software quickly. DevSecOps integrates security practices into the DevOps pipeline, prioritizing security from the start and throughout the entire development process.\n\nIn this blog, you will learn about the main purpose and role of DevOps and DevSecOps. You will also explore a comparison between the two, helping you determine which approach is right for your needs. Understanding the key differences and benefits is essential to choosing the right model, so keep reading!\n\nBelow is a quick comparison table of DevOps vs. DevSecOps for easier reference:\n\n![DevOps vs DevSecOps](https://assets.roadmap.sh/guest/comparison-table-of-devops-vs-devsecops-wcai5.png)\n\n## DevOps vs DevSecOps: How are they different?\n\nChoosing between DevOps and DevSecOps can determine whether your software is fast—or secure from the start.\n\nWhile both approaches aim to enhance collaboration and efficiency in software development, DevSecOps incorporates security practices early in the development cycle, unlike DevOps, which often addresses security issues at a later stage.\n\nDevOps is primarily focused on improving collaboration between design, development, and operations teams to speed up software delivery. The core idea is to remove bottlenecks and inefficiencies in the development pipeline. DevOps engineers are skilled in coding, automation, and system administration, and they focus on delivering high-quality software with minimal errors, often through continuous integration and continuous delivery (CI/CD).\n\n![Understanding DevOps vs DevSecOps](https://assets.roadmap.sh/guest/understanding-devops-vs-devsecops-v9tkn.png)\n\nOn the other hand, DevSecOps brings security into the equation by integrating cybersecurity practices throughout the development process. This approach arose to address increasing cyber threats by embedding security checks at every phase of the software development lifecycle (SDLC). While DevOps ensures quick software delivery, DevSecOps emphasizes secure and compliant software delivery by shifting security considerations to the left of the development timeline, ensuring that vulnerabilities are detected early.\n\n## Security in DevOps vs. DevSecOps: A Closer Look at Processes and Tools\n\nOne of the key differences between DevOps and DevSecOps lies in how they handle security.\nIn DevOps workflows, security testing typically occurs near the end of the development cycle, during quality assurance or post-deployment. Security measures, such as patches or vulnerability scanning, are often applied as part of the release process. This can result in delayed launches or costly remediation efforts if critical issues are discovered late in the pipeline.\n\n![Role of security in DevOps and DevSecOps](https://assets.roadmap.sh/guest/role-of-security-rj7j1.png)\n\nDevSecOps, on the other hand, focuses on strengthening deployment security and maintaining data protection and compliance by tracking issues as they arise. This approach uses both shift-left and shift-right security testing strategies. Shift-left testing involves identifying security vulnerabilities early in the development process, even before code is merged. \n\nTools like static application security testing (SAST), dynamic application security testing (DAST), and dependency checkers are embedded into CI/CD pipelines to catch publicly disclosed vulnerabilities. Additionally, automated scanners and code analyzers ensure that potential risks are flagged before reaching production.\n\nFor example, in a DevOps environment, a team may identify security vulnerabilities only after a routine code audit or during the final phase of testing. However, in a DevSecOps setup, automated security checks would be integrated into the CI/CD pipeline, flagging issues in real time before code is deployed, saving time and mitigating risks.\n\n### Shift-Left and Shift-Right Strategies\n\n[Shift-left security](https://roadmap.sh/devops/shift-left-testing) is a key component of DevSecOps. With early security testing (shift-left security), DevSecOps helps identify risks and prevent product compromise. Addressing errors during the production phase is far more cost-effective than fixing them after deployment. Additionally, continuous security testing reinforces compliance with industry standards.\n\nA real-world example of the consequences of delayed security integration is the [2017 Equifax data breach](https://archive.epic.org/privacy/data-breach/equifax/). A known vulnerability in the Apache Struts framework was left unpatched, resulting in the exposure of sensitive customer data for over 147 million people. Had shift-left security practices been in place, experts could have flagged the outdated library during the early stages of development and prevented breach.\n\nShift-right testing is equally important as it helps developers detect security threats and fix issues in real time. Delays in security threat detection can impact product integrity and customer trust.\n\nFor instance, imagine your organization is working on financial application design and creation, in which security processes and tests are supposed to run during the final phase. \n\nIn such a case, issue detection at the final phase can result in a product launch delay. This might also result in higher costs. And if, to avoid a launch delay, you introduce the product, the unresolved vulnerabilities can hamper your reputation and erode customer trust.\n\nDevSecOps understands the impact of security issues and thus recommend implementing shift-left and shift-right strategies that help reduce vulnerabilities and achieve faster time to market, thus saving your organizational reputation and customer trust.\n\n## How DevOps and DevSecOps affect business goals?\n\nDevOps and DevSecOps affects several key business such as time to market, customer satisfaction, operational efficiency and risk management. Here's how they affect these goals.\n\n1. **Time to market**\n\nDevOps speeds up product delivery by automating workflows, removing bottlenecks and enabling faster iterations. DevSecOps puts the necessary checks in place without derailing development timelines so businesses can maintain a regular release cadence and meet market demand.\n\n2. **Customer satisfaction**\n\nDevOps delivers frequent updates and new features to keep up with customer demand and improve user experience. DevSecOps builds on this by delivering secure and reliable products, reducing the risk of issues that will frustrate users. Both speed and reliability increases customer trust and loyalty.\n\n3. **Operational efficiency**\n\nDevOps makes tasks more efficient by removing duplication, eliminating manual intervention. DevSecOps adds to this by addressing risks early, avoiding rework or operational downtime. Together they reduce development costs and increase productivity.\n\n4. **Risk management**\n\nDevOps allows for faster iterations and deployments which can introduce risks if not managed properly. DevSecOps mitigates these risks by making security a core part of the development lifecycle. This proactive approach reduces the chance of breaches or compliance issues and protects the business's reputation and financials.\n\n## Core processes in DevOps and DevSecOps\n\nTo accelerate the software development lifecycle, DevOps gives more attention to automation and collaboration. Monitoring in DevOps primarily focuses on performance, availability, and system uptime. Metrics like CPU utilization, application response times, and log aggregation form the foundation of DevOps monitoring strategies. Incident response, while essential, is reactive in nature—triggered only after an issue, such as a system crash or performance degradation, arises.\n\nDevSecOps runs security tests in all stages, thus adopting a more proactive approach. Continuous monitoring in DevSecOps goes beyond traditional metrics to include threat detection, vulnerability scanning, and compliance checks, focusing more on reducing risk and cost. They even use tools like SIEM (Security Information and Event Management) systems and cloud-native security platforms to detect threats in real time. Incident response in DevSecOps involves automated playbooks and AI-driven analysis to address vulnerabilities, often before they can escalate rapidly. \n\nIn fact, DevSecOps even employs SAST and DAST strategies that help identify security vulnerabilities faster. Under SAST, professionals scans source code early to prevent vulnerabilities from entering production. Some of the common SAST tools are [SonarQube](https://www.sonarsource.com/products/sonarqube/) and [Checkmarx](https://checkmarx.com/).\n\nHowever, under the DAST strategy, professionals evaluate applications in their running state to identify vulnerabilities. Some of the common DAST tools are [OWASP ZAP](https://www.zaproxy.org/) and [Burp Suite](https://portswigger.net/burp) which help identify injection flaws and security misconfigurations.\n\nInteractive Application Security Testing (IAST), another practice that combines SAST and DAST, operates within the application runtime environment to provide detailed insights into vulnerabilities during testing and QA phases.\n\nThese advanced testing methodologies—SAST, DAST, and IAST—not only enhance security within specific stages of development but also lay the groundwork for broader, innovative practices in continuous security monitoring. These emerging practices are redefining traditional monitoring and response strategies:\n\n### Real-time incident response\n\nDevSecOps uses tools that use AI and machine learning for real-time threat detection and mitigation.\n\nExamples of tools used for real-time response in DevSecOps are Splunk, Datadog Security Monitoring, and CrowdStrike Falcon which do AI driven threat detection and automated response to incidents.\n\n### Behavioral analytics\n\nMonitoring user and application behavior allows DevSecOps teams to detect anomalies such as data access or traffic patterns that are not normal which could be a breach.\n\n### Continuous compliance\n\nDevSecOps embeds security policies and regulatory standards into the development process for continuous compliance. Teams use automation tools like Policy-as-Code frameworks and compliance scanners to enforce and validate against standards like GDPR, HIPAA and PCI DSS. This way reduces compliance risks and makes auditing easier.\n\n## Moving from DevOps to DevSecOps\n\nThe shift from DevOps to DevSecOps is a critical evolution for organizations aiming to integrate security seamlessly into the development lifecycle. Below is a guide to facilitate this transition, highlighting actionable steps, tools, and strategies for success.\n\n![Moving from DevOps to DevSecOps](https://assets.roadmap.sh/guest/moving-from-devops-to-devsecops-gimtv.png)\n\n### Understand your goals\n\nBefore implementing changes or transitioning to DevSecOps, step back and clearly lay out your goals. What do you want to achieve after transitioning to the DevSecOps model? Are you looking to enhance your security model or need faster software deployment? Being specific with your goals will help you make informed decisions and develop a plan that aligns with your goals.\n\n### Current flow assessment\n\nBefore transitioning to a new model, it is important to assess and change the existing workflow. Trace areas that demand or require improvement and attention. For example, check for proper coordination and communication among development, operations, and security teams. Are there any loopholes or faults in your current workflow? Is security feedback consistently integrated into development cycles? Identify gaps in communication by hosting cross-team retrospectives or root cause analyses to get more clarity of your situation.\n\n### Choose the right automation tool\n\nIf workflow efficiency is an issue, the best solution is to implement automation tools. These common tools can reduce manual tasks, run faster code reviews, perform security tests, and provide quick deployment. These tools further enable professionals to focus on other key areas and tasks, such as fixing errors or initiating new features within the application.\n\n### Training your teammates\n\nAdopting a new model or practice demands educating the team members early about the new process and security concerns. Inform and educate your team members about the importance of security systems and how integrating them can improve their overall performance. You can also run training sessions or seminars to cover more about security guidelines and standards. Help them understand rising security concerns, how to fill gaps, and how to integrate security throughout the software development cycle. This step will further prevent confusion and problems from escalating in the future.\n\nEducating the team early prevents missteps and promotes ownership of the new processes. But. despite preparation, organizations often face challenges when transitioning to DevSecOps. Let us have a look at some common DevSecOps transition challenges.\n\n## DevSecOps transition challenges\n\nRemember, transitioning to DevSecOps is not as easy as it sounds. There are various challenges, but these can be managed with the right approach.\n\n![DevSecOps Best Practices](https://assets.roadmap.sh/guest/devsecops-best-practices-m6e21.png)\n\nHere are a few things to avoid in the transition period:\n\n### Wrong tool selection\n\nThere is a wide range of security applications on the market, but make sure to select the right one that is relevant to your code and meets your requirements. Otherwise, you might find it hard to run in the long term.\n\nFor guidance on selecting the right tools, refer to the **\"Top tools and processes for a smooth transition\"** section, where we highlight specific tools and best practices to facilitate a successful DevSecOps implementation.\n\n### Non-inclusion of operations and security teams\n\nSecurity tests are conducted at every phase of software production. Excluding your operations and security teams from the monitoring and tracking process limits the ability to identify and address faults and bugs effectively. Involving security experts from the start allows them to provide guidance on misconfigurations, tools, and best practices.\n\n### Speed over quality\n\nDevOps emphasizes quick software delivery, which can sometimes lead to insufficient attention to quality and security functionality. This may affect the user experience and your business reputation. Allocating more time and effort to ensuring quality and integrating security practices can help strike the right balance.\n\n### Code monitoring issues\n\nSince code constantly changes in software production, keeping an eye on it at all times can be challenging for some professionals. It is important to introduce new configurations, tools, and practices that can identify vulnerabilities in real time.\n\n## Top tools and processes for a smooth transition\n\nFurther, let's have a look at how tools and processes can facilitate this transition while keeping agility and innovation intact:\n\n### Prioritize security-first CI/CD configurations\n\nCI/CD pipelines are the backbone of modern DevOps workflows. Embedding security into these pipelines guarantees vulnerabilities are identified and mitigated at every stage. So, incorporate Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST) tools. \n\nFurther, you can use HashiCorp Vault or AWS Secrets Manager to manage sensitive information securely. Also, you can set policies to prevent critical vulnerabilities using tools such as Jenkins, GitHub Actions, or GitLab CI/CD.\n\n### Embrace infrastructure as code (IaC)\n\nIaC automates infrastructure provisioning, but it can also introduce risks if not properly secured. For a smooth transition, it is important to integrate security into IaC processes. You can invest in Terrascan to detect vulnerabilities in Terraform or implement [immutable infrastructure practices](https://devops.com/immutable-infrastructure-the-next-step-for-devops/) to reduce configuration drift. Further, you can conduct regular audits of IaC templates for misconfigurations.\n\n### Leverage advanced threat modeling\n\nThreat modeling makes certain that potential security risks are identified early. New tools and frameworks make this process more effective. Invest in AI-powered tools that automatically suggest mitigations for identified risks.\n\n## Will DevSecOps replace DevOps?\n\nNo, DevSecOps will not replace DevOps; instead, it enhances it. Rather than being a replacement, DevSecOps is an augmentation of DevOps, bringing security practices into the development and operations workflow. While DevOps focuses on speed, collaboration, and efficiency, DevSecOps makes sure that security becomes an inherent part of these processes. For example, integrating security tools like Snyk or SonarQube into CI/CD pipelines helps organizations identify vulnerabilities early in the development lifecycle.\n\nThe two are complementary rather than mutually exclusive. DevSecOps acts as a bridge, ensuring that security doesn't become a bottleneck while maintaining the agility of DevOps. This natural evolution addresses the growing need for secure software development without compromising agility. Let's further learn how DevSecOps will evolve in the future.\n\n## Future of DevSecOps\n\nAs cybersecurity threats grow in sophistication and compliance regulations tighten, DevSecOps is poised to become the cornerstone of secure software development. In the recent [CrowdStrike Global Threat Report](https://www.crowdstrike.com/en-us/global-threat-report/), experts clearly stated that attacks hardly take a few minutes to succeed. The report also noted that CrowdStrike tracked over 230 adversaries leveraging the global adoption of cloud technologies for their attacks.\n\nTackling these challenges demands strategic teamwork and technical expertise. Here's how DevSecOps is expected to evolve and why it is the future of secure DevOps:\n\n### Proactive threat mitigation\n\nDevSecOps is transitioning from reactive to proactive security. Predictive threat analysis, enabled by AI and machine learning, will play a crucial role in identifying security concerns and vulnerabilities before exploitation. For example, tools like CrowdStrike will become essential for analyzing attack patterns.\n\n### Integration with governance and compliance\n\nStricter regulations such as GDPR, HIPAA, and CCPA are driving a compliance-first culture. DevSecOps will increasingly integrate automated compliance checks into CI/CD pipelines, facilitating adherence to global standards without manual intervention.\n\n### Rise of zero-trust architectures\n\nThe adoption of zero-trust principles will reshape security frameworks. DevSecOps will integrate zero-trust policies into development environments, guaranteeing continuous authentication and access verification. This approach will strengthen security for microservices and API-driven architectures.\n\n### Cloud-native and container security\n\nWith the surge in cloud-native applications, securing containers and serverless environments will be a top priority. Several tools are available that will enable seamless security integration into cloud workloads, addressing misconfigurations and runtime vulnerabilities.\n\nIn fact, in terms of demand and salary, DevSecOps roles tend to offer higher salaries due to the specialized skill set and smaller talent pool. Soon, there will be more role demands for security teams, DevSecOps engineers, security automation specialists, and compliance analysts job profiles to integrate security systems throughout the SDLC.\n\n## Conclusion\n\nNow that you understand the differences between DevOps and DevSecOps, the choice comes down to your organization's specific goals and priorities.\n\nIf speed and efficiency are your primary focus, DevOps is a great fit. However, if security is paramount, DevSecOps is the better choice. By embedding security into every stage of the development lifecycle, DevSecOps helps mitigate vulnerabilities while ensuring compliance and quality.\n\nBoth methodologies hold significant value, but in an era of increasing cybersecurity threats, DevSecOps is becoming essential for organizations that prioritize secure innovation.\n\nTo navigate these approaches effectively and align them with your long-term goals—such as scalability, compliance, and reputation—explore our comprehensive [DevOps roadmap](https://roadmap.sh/devops). It offers actionable insights to help you build a strategy that drives efficiency, security, and success.";
				}
				async function compiledContent$R() {
					return await html$R();
				}
				function getHeadings$R() {
					return [{"depth":2,"slug":"devops-vs-devsecops-how-are-they-different","text":"DevOps vs DevSecOps: How are they different?"},{"depth":2,"slug":"security-in-devops-vs-devsecops-a-closer-look-at-processes-and-tools","text":"Security in DevOps vs. DevSecOps: A Closer Look at Processes and Tools"},{"depth":3,"slug":"shift-left-and-shift-right-strategies","text":"Shift-Left and Shift-Right Strategies"},{"depth":2,"slug":"how-devops-and-devsecops-affect-business-goals","text":"How DevOps and DevSecOps affect business goals?"},{"depth":2,"slug":"core-processes-in-devops-and-devsecops","text":"Core processes in DevOps and DevSecOps"},{"depth":3,"slug":"real-time-incident-response","text":"Real-time incident response"},{"depth":3,"slug":"behavioral-analytics","text":"Behavioral analytics"},{"depth":3,"slug":"continuous-compliance","text":"Continuous compliance"},{"depth":2,"slug":"moving-from-devops-to-devsecops","text":"Moving from DevOps to DevSecOps"},{"depth":3,"slug":"understand-your-goals","text":"Understand your goals"},{"depth":3,"slug":"current-flow-assessment","text":"Current flow assessment"},{"depth":3,"slug":"choose-the-right-automation-tool","text":"Choose the right automation tool"},{"depth":3,"slug":"training-your-teammates","text":"Training your teammates"},{"depth":2,"slug":"devsecops-transition-challenges","text":"DevSecOps transition challenges"},{"depth":3,"slug":"wrong-tool-selection","text":"Wrong tool selection"},{"depth":3,"slug":"non-inclusion-of-operations-and-security-teams","text":"Non-inclusion of operations and security teams"},{"depth":3,"slug":"speed-over-quality","text":"Speed over quality"},{"depth":3,"slug":"code-monitoring-issues","text":"Code monitoring issues"},{"depth":2,"slug":"top-tools-and-processes-for-a-smooth-transition","text":"Top tools and processes for a smooth transition"},{"depth":3,"slug":"prioritize-security-first-cicd-configurations","text":"Prioritize security-first CI/CD configurations"},{"depth":3,"slug":"embrace-infrastructure-as-code-iac","text":"Embrace infrastructure as code (IaC)"},{"depth":3,"slug":"leverage-advanced-threat-modeling","text":"Leverage advanced threat modeling"},{"depth":2,"slug":"will-devsecops-replace-devops","text":"Will DevSecOps replace DevOps?"},{"depth":2,"slug":"future-of-devsecops","text":"Future of DevSecOps"},{"depth":3,"slug":"proactive-threat-mitigation","text":"Proactive threat mitigation"},{"depth":3,"slug":"integration-with-governance-and-compliance","text":"Integration with governance and compliance"},{"depth":3,"slug":"rise-of-zero-trust-architectures","text":"Rise of zero-trust architectures"},{"depth":3,"slug":"cloud-native-and-container-security","text":"Cloud-native and container security"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$R = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$R;
					content.file = file$R;
					content.url = url$R;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$R())}`;
				});

const __vite_glob_0_45 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$R,
	compiledContent: compiledContent$R,
	default: Content$R,
	file: file$R,
	frontmatter: frontmatter$R,
	getHeadings: getHeadings$R,
	rawContent: rawContent$R,
	url: url$R
}, Symbol.toStringTag, { value: 'Module' }));

const html$Q = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-engineer-vs-full-stack-developer-jccsq.jpg\" alt=\"DevOps vs Full Stack: Which suits you best?\"></p>\n<p>There are several roles in tech, two common ones being DevOps engineers and full stack developers. The software development industry relies heavily on full stack and DevOps development.</p>\n<p>DevOps aims at bridging the gap between developers and operation teams. This leads to an efficient and improved software delivery process.</p>\n<p>A <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineer’s</a> primary responsibility is creating automated processes to develop, test, deploy, and maintain software systems, while a full stack developer specializes in writing application code that covers both the user-facing side (frontend) and behind-the-scenes logic (backend).</p>\n<p>This guide explains what each role entails, addresses the motivations behind choosing either path, guides developers on choosing either path, and gives helpful tips for those who want to transition to DevOps engineering.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-process-ajk6p.png\" alt=\"DevOps Process\"></p>\n<p>The key differences between DevOps engineers and full stack developers are summarized in the table below.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>DevOps engineer</th><th>Full stack developer</th></tr></thead><tbody><tr><td>Responsible for the smooth flow of code changes from development to production.</td><td>Focuses on end-to-end application development (both frontend and backend)</td></tr><tr><td>Uses monitoring tools to track the performance of deployed software and also identify issues and bottlenecks in the deployment process.</td><td>Writes unit, integration, and end-to-end tests for the application code and fixes bugs related to the code.</td></tr><tr><td>Focuses on automating processes and ensuring a software application runs reliably and flawlessly.</td><td>Handles the development of web applications or a software program (frontend and backend)</td></tr><tr><td>Familiar with <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">tools that aid task automation</a>, code testing and deployments.</td><td>Has expertise in various frontend and backend programming languages</td></tr><tr><td>Focuses more on the infrastructure management side of the whole development life-cycle, which includes managing networks and servers.</td><td>Could either focus on the frontend and backend web architectures.</td></tr><tr><td>Has an in-depth understanding of operations to ensure optimal software delivery.</td><td>Possess a basic knowledge of operations.</td></tr></tbody></table>\n<h2 id=\"devops-engineer-or-full-stack-developer\">DevOps engineer or full stack developer</h2>\n<p>Full stack developers specialize in web development, while DevOps engineers <strong>focus</strong> on the smooth integration and delivery of software components.</p>\n<p>Both roles offer great career opportunities. DevOps engineers can work in different sectors and organizations occupying different capacities.</p>\n<p>Some DevOps specializations include code release manager, automation architect, DevSecOps engineer, etc. The same applies to a full stack engineer. As a full stack developer, you can work as a <a href=\"https://roadmap.sh/frontend?r=frontend-beginner\" target=\"_blank\">frontend</a> or <a href=\"https://roadmap.sh/frontend?r=frontend-beginner\" target=\"_blank\">backend</a> developer.</p>\n<p>DevOps developers and full stack developers are also in high demand. According to <a href=\"https://www.statista.com/statistics/1367003/in-demand-it-roles/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, full stack developers and DevOps developers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average salary of a  <a href=\"https://www.indeed.com/career/development-operations-engineer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">DevOps engineer</a> in the USA is $124,392, and that of a <a href=\"https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full</a> <a href=\"https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"></a><a href=\"https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">stack software developer</a> is $124,120.</p>\n<p>Before deciding which path to follow, some introspection is encouraged, and some factors are to be considered. Some of the things to consider include:</p>\n<ul>\n<li>Interest</li>\n<li>Strengths</li>\n<li>Willingness to continously learn new skills and technology</li>\n</ul>\n<h3 id=\"interest\">Interest</h3>\n<p>Considering your interests before choosing which path to follow is helpful. Building a career takes time and hard work, and it is advisable to do that in something you are interested in.</p>\n<p>DevOps is probably the right choice if you are interested in automating repetitive tasks, servers and cloud management, containerization, monitoring, logging etc.</p>\n<p>On the other hand, if you are interested in writing application and domain code and enjoy seeing what you build and how users interact with applications directly and indirectly, then it is advisable to choose full stack development.</p>\n<h3 id=\"strengths\">Strengths</h3>\n<p>In addition to your interests, it is also helpful to consider what your strengths are. This would help you to decide what you can work on effortlessly and with less struggle.</p>\n<p>Do you find scripting easy? Are you able to grasp the complexities behind containerization and container orchestration? Do you spend more time writing infrastructure code than writing application and domain code? If your answer to these questions is yes, you should consider DevOps.</p>\n<p>Can you easily convert mock-ups to actual user interfaces? Do you find it fascinating to translate customer requirements into code? Are you able to interact with databases using SQL without much hassle? If yes, then it might be worth going for full stack development.</p>\n<h3 id=\"willingness-to-continuously-learn-new-skills-and-technology\">Willingness to continuously learn new skills and technology</h3>\n<p>The DevOps and full stack fields continually evolve, and there is always something new. To be up to date, you have to be willing and open to learning constantly. This involves taking courses, reading articles, and getting updates on things happening in the tech field.</p>\n<p>Here is each role in detail to help you make a deeper consideration.</p>\n<h2 id=\"who-is-a-devops-engineer\">Who is a DevOps engineer?</h2>\n<p>A <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> engineer who can also be referred to as a DevOps developer  is an IT professional with knowledge of development and operations. The development part involves writing codes and scripts, while the operations part includes managing on-premises and/or cloud infrastructure and system infrastructure.</p>\n<p>In traditional software development, there is the challenge of having different teams working in silos. This siloed team structure makes it challenging to collaborate amongst teams, and the priorities and timelines of each team don’t align with other teams.</p>\n<p>DevOps helps to bridge the gap between development teams and operations teams. DevOps experts often work in a collaborative surrounding where they can collaborate with software engineers and IT teams.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-lifecycle-simple-9lvkw.png\" alt=\"DevOps process\"></p>\n<p>DevOps has some core principles that influence the effectiveness of development and operations. Some of these DevOps principles include:</p>\n<ul>\n<li><a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">Automation</a> of the software development lifecycle</li>\n<li>Collaboration</li>\n</ul>\n<h3 id=\"automation-of-the-software-development-lifecycle\">Automation of the software development lifecycle</h3>\n<p>This involves automating tests, builds, and releases of software versions, as well as tasks that can slow down the software delivery process.</p>\n<h3 id=\"collaboration\">Collaboration</h3>\n<p>It breaks the silos across teams and enables collaboration and communication. This creates horizontal slices and enhances productivity across teams.</p>\n<p>A DevOps developer can use several programming languages for development. Some of them are <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, Ruby, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, and <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>. Also, bash scripts help to automate processes.</p>\n<p>Some organizations manage their own server infrastructure on-premise and deploy their applications on these servers. DevOps engineers are responsible for ensuring the servers run reliably and applications deploy successfully.</p>\n<p>Cloud computing has gained popularity, and many software applications are deployed on various cloud computing platforms. There are cloud solution providers like <a href=\"https://azure.microsoft.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Microsoft Azure</a>, <a href=\"https://roadmap.sh/aws\" target=\"_blank\">Amazon Web Services</a>, and <a href=\"https://cloud.google.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Google Cloud Platform</a> who take care of the server infrastructure and are mostly more reliable than the on-premise solution. One significant benefit of the cloud solution is that it is on a pay-as-you-go basis, i.e., you pay for only the cloud resources you use.</p>\n<h2 id=\"skills-required-to-be-a-devops-engineer\">Skills required to be a DevOps engineer</h2>\n<p>DevOps engineers require soft and technical skills to succeed in their career path. The skills required include:</p>\n<ul>\n<li>Knowledge of coding and scripting</li>\n<li>Knowledge of operating systems</li>\n<li>In-depth knowledge of containerization and orchestration</li>\n<li>Basic understanding of version control</li>\n<li>Understanding of monitoring, logging, and alerting systems</li>\n<li>Knowledge of cloud computing</li>\n</ul>\n<h3 id=\"knowledge-of-coding-and-scripting\">Knowledge of coding and scripting</h3>\n<p>Coding and scripting are essential skills every DevOps engineer should have. These skills are typically employed to automate repetitive tasks. Some of the recommended programming/scripting languages used in DevOps include <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, Ruby, <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>, and Bash.</p>\n<h3 id=\"knowledge-of-operating-systems\">Knowledge of operating systems</h3>\n<p>DevOps engineers should have knowledge of operating systems. One common operating system used in DevOps is <a href=\"https://roadmap.sh/linux\" target=\"_blank\">Linux</a>. Having the fundamental knowledge of Linux is required, as many servers are Linux based.</p>\n<h3 id=\"in-depth-knowledge-of-containerization-and-orchestration\">In-depth knowledge of containerization and orchestration</h3>\n<p>DevOps engineers should know how to use containerization tools to do their jobs effectively. Some common examples of containerization and orchestration tools include <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>.</p>\n<p><strong>Basic understanding of version control and continuous integration and deployment</strong>\nA DevOps engineer should be able to manage and track code changes. This is done with the use of version control systems. Git is a common version control system</p>\n<p>Also, DevOps engineers should be familiar with continuous integration and deployment (CI/CD) tools that enable the automatic integration of code changes. Some common CI/CD tools are CirceCl and GitLab.</p>\n<h3 id=\"understanding-of-monitoring-logging-and-alerting-systems\">Understanding of monitoring, logging, and alerting systems</h3>\n<p>Monitoring and logging are key aspects of the DevOps process, and it is expected that as a DevOps engineer, you have a good understanding of them. DevOps engineers use logging and monitoring systems to gather, analyze, and understand the system performance, and they set up alerts to be notified if the system state changes and needs to be attended to.</p>\n<h3 id=\"knowledge-of-cloud-computing\">Knowledge of cloud computing</h3>\n<p>DevOps engineers should have solid cloud computing skills. Recently, many applications have been deployed on the cloud. Third-party cloud providers mostly manage the cloud infrastructure. Some of the common cloud providers include <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Microsoft Azure, and Google Cloud Platform.</p>\n<h2 id=\"who-is-a-full-stack-developer\">Who is a full stack developer?</h2>\n<p><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">Full stack developers</a> are software developers with extensive frontend and backend development knowledge. Their role is to handle the complete web development process, from designing the user interface to building the server-side logic.</p>\n<p>The frontend of an application includes everything the user can see and interact with, i.e., the user interface. The backend consists of the things the user doesn’t see. These include the server-side and systems supporting the business logic.</p>\n<p>Full stack coders also use <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">DevOps tools</a>. Depending on the project, a full stack developer may use DevOps technologies like GitHub and mongoDB to create software applications.</p>\n<p>Let’s take a look at frontend and backend development in greater detail.</p>\n<h3 id=\"frontend-development\">Frontend development</h3>\n<p>It is concerned primarily with the user interface (UI) and user experience (UX). The common languages used in frontend development include HTML, CSS, and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for frontend development and adds logic to your web page. You’ll find an excellent guide and roadmap to learning <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> on roadmap.sh.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-development-common-languages-25kzq.png\" alt=\"Frontend development\"></p>\n<p>There are quite a few frontend frameworks out there. Some of the common ones are <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>. For a more detailed guide, look at the <a href=\"https://roadmap.sh/frontend?r=frontend-beginner\" target=\"_blank\">frontend beginners roadmap</a> or the <a href=\"https://roadmap.sh/frontend?r=frontend\" target=\"_blank\">advanced frontend roadmap</a>.</p>\n<h3 id=\"backend-development\">Backend development</h3>\n<p>It focuses on the application’s functionality and <em>business logic</em>. Examples of backend components include data storage, security, and handling of business logic.</p>\n<p>Backend development mainly involves creating API endpoints consumed by the application’s front end. Some common backend programming languages include C#, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Golang</a>, and <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>. Check out the <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend developer</a> roadmap.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-programming-common-languages-oyd3s.png\" alt=\"Backend development\"></p>\n<h2 id=\"skills-required-by-full-stack-developers\">Skills required by full stack developers.</h2>\n<p>The necessary technical skills to required by full stack engineers include:</p>\n<ul>\n<li>Knowledge of HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>/<a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a>.</li>\n<li>Knowledge of at least one JavaScript framework, e.g., <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue js</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>.</li>\n<li>Knowledge of at least one backend language. You can transfer your knowledge of JavaScript to backend development with <a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">Node JS</a>.</li>\n<li>In-depth understanding of server-side rendering and web security.</li>\n<li>Knowledge of APIs.</li>\n<li>Understanding of database management systems and database architecture.</li>\n</ul>\n<h2 id=\"how-to-transition-to-devops\">How to transition to DevOps</h2>\n<p>Some fundamental knowledge and skills are required for DevOps that will certainly be helpful in the transition.  Here is a step-by-step guide for you:</p>\n<ul>\n<li>If you do not already know a programming language, learn one. Some languages used in DevOps include <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> and <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Golang</a>. <a href=\"https://www.gnu.org/software/bash/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Bash</a> is commonly used for scripting.</li>\n<li>Learn about file systems and how to use bash to navigate through files. Also, learn to use Command-Line Interfaces (CLIs).</li>\n<li>Learn about <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>.</li>\n<li>Learn about servers and cloud infrastructures. Some of the common cloud service providers include <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, <a href=\"https://azure.microsoft.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Azure</a>, and <a href=\"https://cloud.google.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GCP</a>.</li>\n</ul>\n<p>For more detailed guidance, refer to roadmap.sh’s DevOps <a href=\"https://roadmap.sh/devops\" target=\"_blank\">beginner</a> and <a href=\"https://roadmap.sh/devops?r=devops\" target=\"_blank\">advanced</a> roadmaps.</p>\n<h2 id=\"how-to-transition-to-full-stack-development\">How to transition to full stack development</h2>\n<p>Are you looking to transition into full stack development? Here is a handy guide:</p>\n<ul>\n<li>Learn HTML, CSS, and JavaScript.</li>\n<li>Learn a JavaScript framework, e.g., <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>.</li>\n<li>Learn a backend programming language of your choice, e.g., C#, <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a></li>\n<li>Learn a backend framework of your choice, e.g., Node.js, <a href=\"https://roadmap.sh/aspnet-core\" target=\"_blank\">ASP.NET Core,</a> <a href=\"https://roadmap.sh/spring-boot\" target=\"_blank\">Spring boot</a>.</li>\n<li>Learn database systems i.e SQL and NoSQL databases, e.g., <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>, MongoDB</li>\n</ul>\n<p>You can refer to roadmap.sh’s <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack development roadmap</a> for a more detailed guideline.</p>\n<p>As you’ve seen, becoming a DevOps engineer and full stack web developer requires several skill sets.  Full stack developers and DevOps engineers have important roles in software development but have different areas of expertise and responsibilities.</p>\n<p>Ultimately, the right choice depends on the specific needs and goals of the <strong>software development project</strong>.  roadmap.sh offers step-by-step guidance on how to become a <a href=\"https://roadmap.sh/devops?r=devops\" target=\"_blank\">DevOps engineer</a> and a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer</a>, and by signing up, you will be able to:</p>\n<ul>\n<li>Keep track of your progress and also share it on your roadmap.sh profile.</li>\n<li>Collaborate on other official roadmaps.</li>\n<li>Draw your roadmap, either as an individual learner or for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">Dev</a> <a href=\"https://roadmap.sh/teams\" target=\"_blank\">t</a><a href=\"https://roadmap.sh/teams\" target=\"_blank\">eams</a>.</li>\n<li><a href=\"https://roadmap.sh/ai\" target=\"_blank\">Generate new roadmaps</a> with AI.</li>\n</ul>";

				const frontmatter$Q = {"title":"DevOps engineer vs Full stack developer: Which is best?","description":"DevOps engineer vs Full stack developer: Compare the roles, required skills, and future prospects to make an informed career choice.","authorId":"ekene","excludedBySlug":"/devops/vs-full-stack","seo":{"title":"DevOps engineer vs Full stack developer: Which is best?","description":"DevOps engineer vs Full stack developer: Compare the roles, required skills, and future prospects to make an informed career choice.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-engineer-vs-full-stack-developer-jccsq.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-10-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$Q = "/workspace/src/data/guides/devops-vs-full-stack.md";
				const url$Q = undefined;
				function rawContent$Q() {
					return "   \n                                                                \n                                                                                                                                                   \n               \n                                       \n    \n                                                                  \n                                                                                                                                                     \n                                                                                                 \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![DevOps vs Full Stack: Which suits you best?](https://assets.roadmap.sh/guest/devops-engineer-vs-full-stack-developer-jccsq.jpg)\n\nThere are several roles in tech, two common ones being DevOps engineers and full stack developers. The software development industry relies heavily on full stack and DevOps development.\n\nDevOps aims at bridging the gap between developers and operation teams. This leads to an efficient and improved software delivery process.\n\nA [DevOps engineer's](https://roadmap.sh/devops) primary responsibility is creating automated processes to develop, test, deploy, and maintain software systems, while a full stack developer specializes in writing application code that covers both the user-facing side (frontend) and behind-the-scenes logic (backend).\n\nThis guide explains what each role entails, addresses the motivations behind choosing either path, guides developers on choosing either path, and gives helpful tips for those who want to transition to DevOps engineering.\n\n![DevOps Process](https://assets.roadmap.sh/guest/devops-process-ajk6p.png)\n\nThe key differences between DevOps engineers and full stack developers are summarized in the table below.\n\n| DevOps engineer | Full stack developer |\n|-----------------|----------------------|\n| Responsible for the smooth flow of code changes from development to production. | Focuses on end-to-end application development (both frontend and backend) |\n| Uses monitoring tools to track the performance of deployed software and also identify issues and bottlenecks in the deployment process. | Writes unit, integration, and end-to-end tests for the application code and fixes bugs related to the code. |\n| Focuses on automating processes and ensuring a software application runs reliably and flawlessly. | Handles the development of web applications or a software program (frontend and backend) |\n| Familiar with [tools that aid task automation](https://roadmap.sh/devops/automation-tools), code testing and deployments. | Has expertise in various frontend and backend programming languages |\n| Focuses more on the infrastructure management side of the whole development life-cycle, which includes managing networks and servers. | Could either focus on the frontend and backend web architectures. |\n| Has an in-depth understanding of operations to ensure optimal software delivery. | Possess a basic knowledge of operations. |\n\n## DevOps engineer or full stack developer\n\nFull stack developers specialize in web development, while DevOps engineers **focus** on the smooth integration and delivery of software components.\n\nBoth roles offer great career opportunities. DevOps engineers can work in different sectors and organizations occupying different capacities.\n\nSome DevOps specializations include code release manager, automation architect, DevSecOps engineer, etc. The same applies to a full stack engineer. As a full stack developer, you can work as a [frontend](https://roadmap.sh/frontend?r=frontend-beginner) or [backend](https://roadmap.sh/frontend?r=frontend-beginner) developer.\n\nDevOps developers and full stack developers are also in high demand. According to [Statista](https://www.statista.com/statistics/1367003/in-demand-it-roles/), full stack developers and DevOps developers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average salary of a  [DevOps engineer](https://www.indeed.com/career/development-operations-engineer/salaries?from=top_sb) in the USA is $124,392, and that of a [full](https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb) [](https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb)[stack software developer](https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb) is $124,120.\n\nBefore deciding which path to follow, some introspection is encouraged, and some factors are to be considered. Some of the things to consider include:\n\n- Interest\n- Strengths\n- Willingness to continously learn new skills and technology\n\n### Interest\n\nConsidering your interests before choosing which path to follow is helpful. Building a career takes time and hard work, and it is advisable to do that in something you are interested in.\n\nDevOps is probably the right choice if you are interested in automating repetitive tasks, servers and cloud management, containerization, monitoring, logging etc.\n\nOn the other hand, if you are interested in writing application and domain code and enjoy seeing what you build and how users interact with applications directly and indirectly, then it is advisable to choose full stack development.\n\n### Strengths\n\nIn addition to your interests, it is also helpful to consider what your strengths are. This would help you to decide what you can work on effortlessly and with less struggle.\n\nDo you find scripting easy? Are you able to grasp the complexities behind containerization and container orchestration? Do you spend more time writing infrastructure code than writing application and domain code? If your answer to these questions is yes, you should consider DevOps.\n\nCan you easily convert mock-ups to actual user interfaces? Do you find it fascinating to translate customer requirements into code? Are you able to interact with databases using SQL without much hassle? If yes, then it might be worth going for full stack development.\n\n### Willingness to continuously learn new skills and technology\n\nThe DevOps and full stack fields continually evolve, and there is always something new. To be up to date, you have to be willing and open to learning constantly. This involves taking courses, reading articles, and getting updates on things happening in the tech field.\n\nHere is each role in detail to help you make a deeper consideration.\n\n## Who is a DevOps engineer?\n\nA [DevOps](https://roadmap.sh/devops) engineer who can also be referred to as a DevOps developer  is an IT professional with knowledge of development and operations. The development part involves writing codes and scripts, while the operations part includes managing on-premises and/or cloud infrastructure and system infrastructure.\n\nIn traditional software development, there is the challenge of having different teams working in silos. This siloed team structure makes it challenging to collaborate amongst teams, and the priorities and timelines of each team don't align with other teams.\n\nDevOps helps to bridge the gap between development teams and operations teams. DevOps experts often work in a collaborative surrounding where they can collaborate with software engineers and IT teams.\n\n![DevOps process](https://assets.roadmap.sh/guest/devops-lifecycle-simple-9lvkw.png)\n\nDevOps has some core principles that influence the effectiveness of development and operations. Some of these DevOps principles include:\n\n- [Automation](https://roadmap.sh/devops/automation) of the software development lifecycle\n- Collaboration\n\n### Automation of the software development lifecycle\n\nThis involves automating tests, builds, and releases of software versions, as well as tasks that can slow down the software delivery process.\n\n### Collaboration\n\nIt breaks the silos across teams and enables collaboration and communication. This creates horizontal slices and enhances productivity across teams.\n\nA DevOps developer can use several programming languages for development. Some of them are [Python](https://roadmap.sh/python), Ruby, [Go](https://roadmap.sh/golang), and [Rust](https://roadmap.sh/rust). Also, bash scripts help to automate processes.\n\nSome organizations manage their own server infrastructure on-premise and deploy their applications on these servers. DevOps engineers are responsible for ensuring the servers run reliably and applications deploy successfully.\n\nCloud computing has gained popularity, and many software applications are deployed on various cloud computing platforms. There are cloud solution providers like [Microsoft Azure](https://azure.microsoft.com/), [Amazon Web Services](https://roadmap.sh/aws), and [Google Cloud Platform](https://cloud.google.com/) who take care of the server infrastructure and are mostly more reliable than the on-premise solution. One significant benefit of the cloud solution is that it is on a pay-as-you-go basis, i.e., you pay for only the cloud resources you use.\n\n## Skills required to be a DevOps engineer\n\nDevOps engineers require soft and technical skills to succeed in their career path. The skills required include:\n\n- Knowledge of coding and scripting\n- Knowledge of operating systems\n- In-depth knowledge of containerization and orchestration\n- Basic understanding of version control\n- Understanding of monitoring, logging, and alerting systems\n- Knowledge of cloud computing\n\n### Knowledge of coding and scripting\n\nCoding and scripting are essential skills every DevOps engineer should have. These skills are typically employed to automate repetitive tasks. Some of the recommended programming/scripting languages used in DevOps include [Python](https://roadmap.sh/python), [Go](https://roadmap.sh/golang), Ruby, [Rust](https://roadmap.sh/rust), and Bash.\n\n### Knowledge of operating systems\n\nDevOps engineers should have knowledge of operating systems. One common operating system used in DevOps is [Linux](https://roadmap.sh/linux). Having the fundamental knowledge of Linux is required, as many servers are Linux based.\n\n### In-depth knowledge of containerization and orchestration\n\nDevOps engineers should know how to use containerization tools to do their jobs effectively. Some common examples of containerization and orchestration tools include [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes).\n\n**Basic understanding of version control and continuous integration and deployment**\nA DevOps engineer should be able to manage and track code changes. This is done with the use of version control systems. Git is a common version control system\n\nAlso, DevOps engineers should be familiar with continuous integration and deployment (CI/CD) tools that enable the automatic integration of code changes. Some common CI/CD tools are CirceCl and GitLab.\n\n### Understanding of monitoring, logging, and alerting systems\n\nMonitoring and logging are key aspects of the DevOps process, and it is expected that as a DevOps engineer, you have a good understanding of them. DevOps engineers use logging and monitoring systems to gather, analyze, and understand the system performance, and they set up alerts to be notified if the system state changes and needs to be attended to.\n\n### Knowledge of cloud computing\n\nDevOps engineers should have solid cloud computing skills. Recently, many applications have been deployed on the cloud. Third-party cloud providers mostly manage the cloud infrastructure. Some of the common cloud providers include [AWS](https://roadmap.sh/aws), Microsoft Azure, and Google Cloud Platform.\n\n## Who is a full stack developer?\n\n[Full stack developers](https://roadmap.sh/full-stack) are software developers with extensive frontend and backend development knowledge. Their role is to handle the complete web development process, from designing the user interface to building the server-side logic. \n\nThe frontend of an application includes everything the user can see and interact with, i.e., the user interface. The backend consists of the things the user doesn’t see. These include the server-side and systems supporting the business logic.\n\nFull stack coders also use [DevOps tools](https://roadmap.sh/devops/tools). Depending on the project, a full stack developer may use DevOps technologies like GitHub and mongoDB to create software applications. \n\nLet's take a look at frontend and backend development in greater detail.\n\n### Frontend development\n\nIt is concerned primarily with the user interface (UI) and user experience (UX). The common languages used in frontend development include HTML, CSS, and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for frontend development and adds logic to your web page. You'll find an excellent guide and roadmap to learning [JavaScript](https://roadmap.sh/javascript) on roadmap.sh.\n\n![Frontend development](https://assets.roadmap.sh/guest/frontend-development-common-languages-25kzq.png)\n\nThere are quite a few frontend frameworks out there. Some of the common ones are [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular). For a more detailed guide, look at the [frontend beginners roadmap](https://roadmap.sh/frontend?r=frontend-beginner) or the [advanced frontend roadmap](https://roadmap.sh/frontend?r=frontend).\n\n### Backend development\n\nIt focuses on the application's functionality and *business logic*. Examples of backend components include data storage, security, and handling of business logic.\n\nBackend development mainly involves creating API endpoints consumed by the application's front end. Some common backend programming languages include C#, [Java](https://roadmap.sh/java), [Rust](https://roadmap.sh/rust), [Golang](https://roadmap.sh/golang), and [Python](https://roadmap.sh/python). Check out the [backend developer](https://roadmap.sh/backend) roadmap.\n\n![Backend development](https://assets.roadmap.sh/guest/backend-programming-common-languages-oyd3s.png)\n\n## Skills required by full stack developers.\n\nThe necessary technical skills to required by full stack engineers include:\n\n- Knowledge of HTML, CSS, and [JavaScript](https://roadmap.sh/javascript)/[TypeScript](https://roadmap.sh/typescript).\n- Knowledge of at least one JavaScript framework, e.g., [React](https://roadmap.sh/react), [Vue js](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular).\n- Knowledge of at least one backend language. You can transfer your knowledge of JavaScript to backend development with [Node JS](https://roadmap.sh/nodejs).\n- In-depth understanding of server-side rendering and web security.\n- Knowledge of APIs.\n- Understanding of database management systems and database architecture.\n\n## How to transition to DevOps\n\nSome fundamental knowledge and skills are required for DevOps that will certainly be helpful in the transition.  Here is a step-by-step guide for you:\n\n- If you do not already know a programming language, learn one. Some languages used in DevOps include [Python](https://roadmap.sh/python) and [Golang](https://roadmap.sh/golang). [Bash](https://www.gnu.org/software/bash/) is commonly used for scripting.\n- Learn about file systems and how to use bash to navigate through files. Also, learn to use Command-Line Interfaces (CLIs).\n- Learn about [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes).\n- Learn about servers and cloud infrastructures. Some of the common cloud service providers include [AWS](https://roadmap.sh/aws), [Azure](https://azure.microsoft.com/), and [GCP](https://cloud.google.com/).\n\nFor more detailed guidance, refer to roadmap.sh's DevOps [beginner](https://roadmap.sh/devops) and [advanced](https://roadmap.sh/devops?r=devops) roadmaps.\n\n## How to transition to full stack development\n\nAre you looking to transition into full stack development? Here is a handy guide:\n\n- Learn HTML, CSS, and JavaScript.\n- Learn a JavaScript framework, e.g., [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular).\n- Learn a backend programming language of your choice, e.g., C#, [Python](https://roadmap.sh/python), [Java](https://roadmap.sh/java)\n- Learn a backend framework of your choice, e.g., Node.js, [ASP.NET Core,](https://roadmap.sh/aspnet-core) [Spring boot](https://roadmap.sh/spring-boot).\n- Learn database systems i.e SQL and NoSQL databases, e.g., [PostgreSQL](https://roadmap.sh/postgresql-dba), MongoDB\n\nYou can refer to roadmap.sh's [full stack development roadmap](https://roadmap.sh/full-stack) for a more detailed guideline.\n\nAs you've seen, becoming a DevOps engineer and full stack web developer requires several skill sets.  Full stack developers and DevOps engineers have important roles in software development but have different areas of expertise and responsibilities.\n\nUltimately, the right choice depends on the specific needs and goals of the **software development project**.  roadmap.sh offers step-by-step guidance on how to become a [DevOps engineer](https://roadmap.sh/devops?r=devops) and a [full stack developer](https://roadmap.sh/full-stack), and by signing up, you will be able to:\n\n- Keep track of your progress and also share it on your roadmap.sh profile.\n- Collaborate on other official roadmaps.\n- Draw your roadmap, either as an individual learner or for [Dev](https://roadmap.sh/teams) [t](https://roadmap.sh/teams)[eams](https://roadmap.sh/teams).\n- [Generate new roadmaps](https://roadmap.sh/ai) with AI.\n";
				}
				async function compiledContent$Q() {
					return await html$Q();
				}
				function getHeadings$Q() {
					return [{"depth":2,"slug":"devops-engineer-or-full-stack-developer","text":"DevOps engineer or full stack developer"},{"depth":3,"slug":"interest","text":"Interest"},{"depth":3,"slug":"strengths","text":"Strengths"},{"depth":3,"slug":"willingness-to-continuously-learn-new-skills-and-technology","text":"Willingness to continuously learn new skills and technology"},{"depth":2,"slug":"who-is-a-devops-engineer","text":"Who is a DevOps engineer?"},{"depth":3,"slug":"automation-of-the-software-development-lifecycle","text":"Automation of the software development lifecycle"},{"depth":3,"slug":"collaboration","text":"Collaboration"},{"depth":2,"slug":"skills-required-to-be-a-devops-engineer","text":"Skills required to be a DevOps engineer"},{"depth":3,"slug":"knowledge-of-coding-and-scripting","text":"Knowledge of coding and scripting"},{"depth":3,"slug":"knowledge-of-operating-systems","text":"Knowledge of operating systems"},{"depth":3,"slug":"in-depth-knowledge-of-containerization-and-orchestration","text":"In-depth knowledge of containerization and orchestration"},{"depth":3,"slug":"understanding-of-monitoring-logging-and-alerting-systems","text":"Understanding of monitoring, logging, and alerting systems"},{"depth":3,"slug":"knowledge-of-cloud-computing","text":"Knowledge of cloud computing"},{"depth":2,"slug":"who-is-a-full-stack-developer","text":"Who is a full stack developer?"},{"depth":3,"slug":"frontend-development","text":"Frontend development"},{"depth":3,"slug":"backend-development","text":"Backend development"},{"depth":2,"slug":"skills-required-by-full-stack-developers","text":"Skills required by full stack developers."},{"depth":2,"slug":"how-to-transition-to-devops","text":"How to transition to DevOps"},{"depth":2,"slug":"how-to-transition-to-full-stack-development","text":"How to transition to full stack development"}];
				}

				const Content$Q = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$Q;
					content.file = file$Q;
					content.url = url$Q;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$Q())}`;
				});

const __vite_glob_0_46 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$Q,
	compiledContent: compiledContent$Q,
	default: Content$Q,
	file: file$Q,
	frontmatter: frontmatter$Q,
	getHeadings: getHeadings$Q,
	rawContent: rawContent$Q,
	url: url$Q
}, Symbol.toStringTag, { value: 'Module' }));

const html$P = () => "<p><img src=\"https://assets.roadmap.sh/guest/devops-vs-sre1-pfhzy.jpg\" alt=\"Key differences between DevOps and SRE.\"></p>\n<p>When it comes to managing and enhancing software development and operations, companies often adopt sets of practices and processes such as Development Operations (DevOps) or Site Reliability Engineering (SRE). These approaches increase their ability to deliver applications scalably and maintain a fast pace.</p>\n<p>In fact, companies and individuals seeking to deliver applications and services at a higher velocity are increasingly moving away from traditional software development and infrastructure management. They achieve this by either combining selected <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> and SRE practices or opting for one over the other.</p>\n<p>Despite their shared goal of improving the software delivery process, some nuances set DevOps and SRE apart.</p>\n<p>This guide provides an in-depth discussion of the key differences between each approach, what they entail, similarities, and the <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">tools</a> and technologies involved. Finally, it offers roadmaps for your DevOps or SRE journey.</p>\n<h2 id=\"differences-between-devops-and-sre\">Differences between DevOps and SRE</h2>\n<p>The primary difference between DevOps and SRE lies in their primary <strong>goals</strong>. DevOps aims to improve the software development lifecycle (SDLC), while SRE <strong>focuses</strong> on maintaining stability and resilience after application deployment. In addition, they also differ in <strong>scope</strong>, <strong>metrics</strong>, and <strong>team structure</strong>.</p>\n<p>Let’s look at these points in detail:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/the-difference-between-devops-and-sre-85kpt.JPG\" alt=\"DevOps vs SRE\"></p>\n<h3 id=\"goals\">Goals</h3>\n<p>DevOps engineers’ primary focus is to improve the (SDLC) through process automation, enhance collaboration, and promote continuous improvement. Site Reliability Engineers aims to create easily maintained systems by automating processes,  manual and repetitive tasks, implementing monitoring and alerting systems, and designing for scale and resilience.</p>\n<h3 id=\"roles-and-ownership\">Roles and ownership</h3>\n<p>In DevOps culture, developers, and other related stakeholders are often involved in operational tasks, sharing ownership of the entire software delivery process from development through to production.</p>\n<p>In contrast, the SRE model promotes a clear separation between development and operations. The development team is focused on building and maintaining features, while the SRE team is responsible for the reliability and availability of services.</p>\n<h3 id=\"scope-and-mindset\">Scope and mindset</h3>\n<p>DevOps is typically applied to self-contained applications or services, encouraging experimentation and innovation with opportunities to learn from failures. In contrast, SRE is applied to entire systems and platforms, primarily focusing on minimizing human error and downtime for the operations teams.</p>\n<h3 id=\"metrics\">Metrics</h3>\n<p>In measuring success, DevOps teams track metrics such as the time from code commit to deployment, deployment frequency, failure rate, and overall system performance. On the other hand, Site Reliability Engineers focus on metrics related to service level objectives like Mean Time to Recover (MTTR), Mean Time Between Failures (MTBF), latency, traffic, and the frequency of errors occurring in the system.</p>\n<h3 id=\"team-structure-and-processes\">Team structure and processes</h3>\n<p>DevOps teams work more like an Agile development team, ensuring collaboration between development and operations teams. They often break projects into smaller features and use <a href=\"https://roadmap.sh/guides/ci-cd\" target=\"_blank\">continuous integration(CI) / continuous delivery (CD)</a> to prioritize delivery based on business needs.</p>\n<p>In contrast, SRE teams are highly specialized teams as compared to DevOps. They see the production environment as a highly available service and implement measures to address threats and failures that may arise from deployed features and integrations.</p>\n<p>Both DevOps and SRE aim to enhance the software development process and operations. DevOps primarily focuses on software development and delivery, while SRE concentrates on software operations and maintenance after deployment, emphasizing reliability and scalability strongly.</p>\n<h2 id=\"key-components-of-devops\">Key components of DevOps</h2>\n<p>According to <a href=\"https://www.statista.com/statistics/1234098/software-development-process-changes/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, DevOps adoption is expected to grow, with <strong>21% of respondents having integrated it into their source code management</strong>. Recruiters are also actively hiring for DevOps job roles, <a href=\"https://www.statista.com/statistics/1296668/top-in-demand-tech-skills-worldwide/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><strong>with demand currently at 35.5%</strong></a><strong>.</strong></p>\n<p>One core principle of DevOps is automating manual processes within the SDLC, focusing on reducing costs and minimizing errors. In addition, DevOps embraces continuous integration, enabling companies to adapt and accommodate changes to end-users’ needs or business requirements.</p>\n<p>The following are key aspects of DevOps:</p>\n<h3 id=\"ci-and-cd\">CI and CD</h3>\n<p>One of the fundamental principles of DevOps is to facilitate faster release cycles for software. This is achieved by continuously integrating code into a repository and automatically deploying it to the required environment.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cicd-xrwy2.JPG\" alt=\"ci/cd\"></p>\n<h3 id=\"automation\">Automation</h3>\n<p>Development processes such as testing, deployment, and infrastructural provisioning can be tedious, error-prone, and manual. DevOps addresses these challenges through automation.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/automation-mdtdr.jpeg\" alt=\"automation\"></p>\n<h3 id=\"monitoring\">Monitoring</h3>\n<p>Proactive monitoring of application performance, health, availability, and customer experience are some of the key principles of DevOps. With this capability, companies can identify issues quickly, iterate on solutions, and continuously improve.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/monitoring-uyfmx.jpeg\" alt=\"metric\"></p>\n<h3 id=\"collaboration-and-communication\">Collaboration and communication</h3>\n<p>The overall goal of shipping secure and reliable software involves stakeholders like the development teams, operations teams, and other relevant teams to adhere to DevOps practices of collaborating and actively communicating throughout the SDLC.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/collaboration-t3wa1.jpeg\" alt=\"collaboration &#x26; communication\"></p>\n<h3 id=\"infrastructure-as-code\">Infrastructure as Code</h3>\n<p>Using scripts or declarative definitions to provision and configure infrastructure is a key component in DevOps. This approach enables teams to be consistent, efficiently manage resources, and reproduce environment-specific bugs.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/infrastructure-as-code-gj75w.jpeg\" alt=\"iac\"></p>\n<h3 id=\"continuous-learning-and-improvement\">Continuous learning and improvement</h3>\n<p>In DevOps, teams are encouraged to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.</p>\n<h2 id=\"key-components-of-sre\">Key components of SRE</h2>\n<p>Site Reliability Engineering can function as a tool, a set of best practices, or a strategy to automate IT operations tasks such as production system management, change management, and incident response. It empowers system administrators to manage large systems using code rather than manual methods.</p>\n<p>The following are the key aspects of SRE:</p>\n<h3 id=\"automation-1\">Automation</h3>\n<p>One key principle followed by Site Reliability Engineering is establishing a workflow to reduce manual and repetitive work related to operational tasks. SRE ensures that every team member has access to updated automation tools and technologies.</p>\n<h3 id=\"monitoring-and-alerting\">Monitoring and alerting</h3>\n<p>A core principle of SRE is using real-time monitored metrics and alerts to detect and respond to issues promptly before they impact the development teams and end users. With these systems in place, SRE teams can diagnose and resolve potential issues before they impact the system.</p>\n<h3 id=\"forecast-and-planning\">Forecast and planning</h3>\n<p>Due to user traffic and workload, systems can experience increased demand and heavy resource usage. Site Reliability Engineering implements measures to ensure that such demand is properly handled by forecasting resources and managing related infrastructure.</p>\n<h3 id=\"incident-management\">Incident management</h3>\n<p>SRE teams define clear processes for detecting, diagnosing, and resolving incidents. When incidents occur, postmortems are conducted to identify root causes and prevent similar issues from recurring.</p>\n<h3 id=\"service-level-objectives-slos\">Service Level Objectives (SLOs)</h3>\n<p>Site Reliability Engineering aims to deliver higher availability percentages, uptime, and other metrics such as error rates and response time to system customers or users.</p>\n<p>These processes help software developers build and deliver software more efficiently.</p>\n<h2 id=\"similarities-between-devops-and-sre\">Similarities between DevOps and SRE</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/similarities-devops-sre-eqa7p.jpeg\" alt=\"Similarities\"></p>\n<p>DevOps and SRE principles have become popular and widely adopted by organizations because they create robust and bug-free systems with continuous improvement in mind. Below are some key similarities between DevOps and SRE:</p>\n<ul>\n<li>Both advocate automating repetitive tasks like continuous testing, deployment, monitoring, etc.</li>\n<li>They promote the use of CI and CD for software releases.</li>\n<li>There is a strong emphasis on real-time monitoring and collection of metrics for diagnosis and performance monitoring.</li>\n<li>Both focus on reducing organizational silos through collaboration and encourage a culture of continuous learning and improvement.</li>\n<li>They prioritize building reliable systems with a great user experience, quick recovery from disruptions, reliability, and effective operations lifecycle management.</li>\n</ul>\n<h2 id=\"what-is-the-role-of-a-devops-engineer\">What is the role of a DevOps engineer?</h2>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineers</a> are integral to any organization looking to bridge the gap between development and operations teams. They collaborate closely with software engineers,  quality assurance teams, and other stakeholders to achieve this goal.  Here are some key responsibilities of a DevOps engineer:</p>\n<ul>\n<li>Adopts the agile methodology and automation to remove bottlenecks in the SDLC.</li>\n<li>Set up monitoring and logging mechanisms to track the performance, availability, and health of systems.</li>\n<li>Provision resources, deploy, and manage applications on cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, Google Cloud, etc.</li>\n<li>Creates standards and manages configuration to enforce and maintain system integrity across multiple environments.</li>\n<li>Creates a plan to optimize system performance and resource utilization.</li>\n<li>Promotes knowledge sharing by carefully documenting processes, procedures, and <a href=\"https://roadmap.sh/devops/best-practices\" target=\"_blank\">best practices</a>.</li>\n</ul>\n<p>To perform these responsibilities, the DevOps team uses many tools to automate and improve their workflow. Here are some of the <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">DevOps automation tools</a> commonly used:</p>\n<ul>\n<li><strong>Docker</strong>: <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> is an open-source platform that enables developers to build, deploy, and run containerized applications.</li>\n<li><strong>Kubernetes</strong>: <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> is an open-source orchestration platform for automating the deployment processes, scaling, and managing containerized applications.</li>\n<li><strong>Jenkins</strong>: Jenkins is an automation server used for performing CI and CD in a software project.</li>\n<li><strong>Git</strong>: Git is a distributed version control system for tracking changes in source code during software development.</li>\n<li><strong>Prometheus</strong>: Prometheus is an open-source application for event monitoring and alerting.</li>\n<li><strong>Grafana</strong>: Grafana is an open-source analytics and visualization application that helps identify issues and improve the performance of software systems.</li>\n<li><strong>Ansible</strong>: Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks.</li>\n</ul>\n<h2 id=\"what-is-the-role-of-an-sre-engineer\">What is the role of an SRE engineer?</h2>\n<p>Similar to the DevOps engineers, SRE engineers are also an integral part of any organization looking to build systems and services that are reliable, available, scalable, and performant. SREs have a narrow focus on specific practices and metrics that allow for improved collaboration and service delivery. Here are some key responsibilities of an SRE engineer:</p>\n<ul>\n<li>Responsible for maintaining and ensuring system reliability and uptime.</li>\n<li>Collaborate with the development team to design and architect applications.</li>\n<li>Automate tasks by developing tools and scripts for deployment, alerting, and incident response.</li>\n<li>Analyze and plan resources to cater for future growth and scale.</li>\n<li>Creates plans to mitigate or eliminate events or system failures.</li>\n<li>Promotes knowledge sharing by documenting system configuration, procedures, and best practices.</li>\n</ul>\n<p>To perform these responsibilities, the SRE team uses various tools to tackle infrastructure and operational problems. Here are some of the tools commonly used:</p>\n<ul>\n<li><strong>Kibana</strong>: Kibana is an open-source data visualization platform for monitoring metrics and events</li>\n<li><strong>Datadog</strong>: Datadog is a cloud monitoring tool for events, infrastructure hosts, and much more</li>\n<li><strong>NetApp Cloud Insights</strong>: NetApp Cloud Insights is a tool used to monitor IT infrastructure</li>\n<li><strong>Terraform</strong>: Terraform is an infrastructure as code tool used to automate infrastructure tasks</li>\n<li><strong>Ansible</strong>: Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks</li>\n<li><strong>New Relic</strong>: New Relic is a cloud-based full-stack observability platform for monitoring and analyzing metrics</li>\n<li><strong>Opsgenie</strong>: Opsgenie is an incident response solution with functionalities like on-call scheduling, reporting, analytics, and alerting</li>\n</ul>\n<p>In summary, <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> focuses on developing and delivering software, and SRE works on the deployed software to ensure it functions as intended and is reliable. They both have similarities and differences that organizations actively adopt when building and maintaining scalable applications.</p>\n<p>Whether you’re an experienced developer aiming to improve your skills or a beginner exploring a career as a DevOps or SRE engineer, you might have seen tons of resources available online and maybe get overwhelmed without a clear path on the way to go. Well, not anymore, roadmap.sh provides a comprehensive guide on any of the career paths you choose to follow. You will be able to:</p>\n<ul>\n<li>Stay updated with a new roadmap, track your progress, and share it on your roadmap.sh profile.</li>\n<li>Learn with like-minded individuals by joining a supportive community when you <a href=\"https://roadmap.sh/signup\" target=\"_blank\">sign up</a> on roadmap.sh platform.</li>\n<li><a href=\"https://roadmap.sh/ai\" target=\"_blank\">Generate a new roadmap with AI</a>.</li>\n</ul>";

				const frontmatter$P = {"title":"DevOps vs SRE: Key Differences Explained","description":"DevOps vs SRE: Discover which role suits your career best. Learn key differences, skills required, and career prospects in our detailed guide.","authorId":"william","excludedBySlug":"/devops/devops-vs-sre","seo":{"title":"DevOps vs SRE: Key Differences Explained","description":"DevOps vs SRE: Discover which role suits your career best. Learn key differences, skills required, and career prospects in our detailed guide.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-vs-sre1-pfhzy.jpg"},"isNew":false,"type":"textual","date":"2024-06-13T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$P = "/workspace/src/data/guides/devops-vs-sre.md";
				const url$P = undefined;
				function rawContent$P() {
					return "   \n                                                 \n                                                                                                                                                             \n                 \n                                       \n    \n                                                   \n                                                                                                                                                               \n                                                                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Key differences between DevOps and SRE.](https://assets.roadmap.sh/guest/devops-vs-sre1-pfhzy.jpg)\n\nWhen it comes to managing and enhancing software development and operations, companies often adopt sets of practices and processes such as Development Operations (DevOps) or Site Reliability Engineering (SRE). These approaches increase their ability to deliver applications scalably and maintain a fast pace.\n\nIn fact, companies and individuals seeking to deliver applications and services at a higher velocity are increasingly moving away from traditional software development and infrastructure management. They achieve this by either combining selected [DevOps](https://roadmap.sh/devops) and SRE practices or opting for one over the other.\n\nDespite their shared goal of improving the software delivery process, some nuances set DevOps and SRE apart.\n\nThis guide provides an in-depth discussion of the key differences between each approach, what they entail, similarities, and the [tools](https://roadmap.sh/devops/tools) and technologies involved. Finally, it offers roadmaps for your DevOps or SRE journey.\n\n## Differences between DevOps and SRE\n\nThe primary difference between DevOps and SRE lies in their primary **goals**. DevOps aims to improve the software development lifecycle (SDLC), while SRE **focuses** on maintaining stability and resilience after application deployment. In addition, they also differ in **scope**, **metrics**, and **team structure**.\n\nLet’s look at these points in detail:\n\n![DevOps vs SRE](https://assets.roadmap.sh/guest/the-difference-between-devops-and-sre-85kpt.JPG)\n\n### Goals\n\nDevOps engineers' primary focus is to improve the (SDLC) through process automation, enhance collaboration, and promote continuous improvement. Site Reliability Engineers aims to create easily maintained systems by automating processes,  manual and repetitive tasks, implementing monitoring and alerting systems, and designing for scale and resilience.\n\n### Roles and ownership\n\nIn DevOps culture, developers, and other related stakeholders are often involved in operational tasks, sharing ownership of the entire software delivery process from development through to production.\n\nIn contrast, the SRE model promotes a clear separation between development and operations. The development team is focused on building and maintaining features, while the SRE team is responsible for the reliability and availability of services.\n\n### Scope and mindset \n\nDevOps is typically applied to self-contained applications or services, encouraging experimentation and innovation with opportunities to learn from failures. In contrast, SRE is applied to entire systems and platforms, primarily focusing on minimizing human error and downtime for the operations teams.\n\n### Metrics\n\nIn measuring success, DevOps teams track metrics such as the time from code commit to deployment, deployment frequency, failure rate, and overall system performance. On the other hand, Site Reliability Engineers focus on metrics related to service level objectives like Mean Time to Recover (MTTR), Mean Time Between Failures (MTBF), latency, traffic, and the frequency of errors occurring in the system.\n\n### Team structure and processes\n\nDevOps teams work more like an Agile development team, ensuring collaboration between development and operations teams. They often break projects into smaller features and use [continuous integration(CI) / continuous delivery (CD)](https://roadmap.sh/guides/ci-cd) to prioritize delivery based on business needs.\n\nIn contrast, SRE teams are highly specialized teams as compared to DevOps. They see the production environment as a highly available service and implement measures to address threats and failures that may arise from deployed features and integrations.\n\nBoth DevOps and SRE aim to enhance the software development process and operations. DevOps primarily focuses on software development and delivery, while SRE concentrates on software operations and maintenance after deployment, emphasizing reliability and scalability strongly.\n\n## Key components of DevOps\n\nAccording to [Statista](https://www.statista.com/statistics/1234098/software-development-process-changes/), DevOps adoption is expected to grow, with **21% of respondents having integrated it into their source code management**. Recruiters are also actively hiring for DevOps job roles, [**with demand currently at 35.5%**](https://www.statista.com/statistics/1296668/top-in-demand-tech-skills-worldwide/)**.**\n\nOne core principle of DevOps is automating manual processes within the SDLC, focusing on reducing costs and minimizing errors. In addition, DevOps embraces continuous integration, enabling companies to adapt and accommodate changes to end-users' needs or business requirements.\n\nThe following are key aspects of DevOps:\n\n### CI and CD\n\nOne of the fundamental principles of DevOps is to facilitate faster release cycles for software. This is achieved by continuously integrating code into a repository and automatically deploying it to the required environment.\n\n![ci/cd](https://assets.roadmap.sh/guest/cicd-xrwy2.JPG)\n\n### Automation\n\nDevelopment processes such as testing, deployment, and infrastructural provisioning can be tedious, error-prone, and manual. DevOps addresses these challenges through automation.\n\n![automation](https://assets.roadmap.sh/guest/automation-mdtdr.jpeg)\n\n### Monitoring\n\nProactive monitoring of application performance, health, availability, and customer experience are some of the key principles of DevOps. With this capability, companies can identify issues quickly, iterate on solutions, and continuously improve.\n\n![metric](https://assets.roadmap.sh/guest/monitoring-uyfmx.jpeg)\n\n### Collaboration and communication\n\nThe overall goal of shipping secure and reliable software involves stakeholders like the development teams, operations teams, and other relevant teams to adhere to DevOps practices of collaborating and actively communicating throughout the SDLC.\n\n![collaboration & communication](https://assets.roadmap.sh/guest/collaboration-t3wa1.jpeg)\n\n### Infrastructure as Code\n\nUsing scripts or declarative definitions to provision and configure infrastructure is a key component in DevOps. This approach enables teams to be consistent, efficiently manage resources, and reproduce environment-specific bugs.\n\n![iac](https://assets.roadmap.sh/guest/infrastructure-as-code-gj75w.jpeg)\n\n### Continuous learning and improvement\n\nIn DevOps, teams are encouraged to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.\n\n## Key components of SRE\n\nSite Reliability Engineering can function as a tool, a set of best practices, or a strategy to automate IT operations tasks such as production system management, change management, and incident response. It empowers system administrators to manage large systems using code rather than manual methods.\n\nThe following are the key aspects of SRE:\n\n### Automation\n\nOne key principle followed by Site Reliability Engineering is establishing a workflow to reduce manual and repetitive work related to operational tasks. SRE ensures that every team member has access to updated automation tools and technologies.\n\n### Monitoring and alerting\n\nA core principle of SRE is using real-time monitored metrics and alerts to detect and respond to issues promptly before they impact the development teams and end users. With these systems in place, SRE teams can diagnose and resolve potential issues before they impact the system.\n\n### Forecast and planning\n\nDue to user traffic and workload, systems can experience increased demand and heavy resource usage. Site Reliability Engineering implements measures to ensure that such demand is properly handled by forecasting resources and managing related infrastructure.\n\n### Incident management\n\nSRE teams define clear processes for detecting, diagnosing, and resolving incidents. When incidents occur, postmortems are conducted to identify root causes and prevent similar issues from recurring.\n\n### Service Level Objectives (SLOs)\n\nSite Reliability Engineering aims to deliver higher availability percentages, uptime, and other metrics such as error rates and response time to system customers or users.\n\nThese processes help software developers build and deliver software more efficiently. \n\n## Similarities between DevOps and SRE\n![Similarities](https://assets.roadmap.sh/guest/similarities-devops-sre-eqa7p.jpeg)\n\nDevOps and SRE principles have become popular and widely adopted by organizations because they create robust and bug-free systems with continuous improvement in mind. Below are some key similarities between DevOps and SRE:\n\n- Both advocate automating repetitive tasks like continuous testing, deployment, monitoring, etc.\n- They promote the use of CI and CD for software releases.\n- There is a strong emphasis on real-time monitoring and collection of metrics for diagnosis and performance monitoring.\n- Both focus on reducing organizational silos through collaboration and encourage a culture of continuous learning and improvement.\n- They prioritize building reliable systems with a great user experience, quick recovery from disruptions, reliability, and effective operations lifecycle management.\n\n## What is the role of a DevOps engineer?\n\n[DevOps engineers](https://roadmap.sh/devops) are integral to any organization looking to bridge the gap between development and operations teams. They collaborate closely with software engineers,  quality assurance teams, and other stakeholders to achieve this goal.  Here are some key responsibilities of a DevOps engineer:\n\n- Adopts the agile methodology and automation to remove bottlenecks in the SDLC.\n- Set up monitoring and logging mechanisms to track the performance, availability, and health of systems.\n- Provision resources, deploy, and manage applications on cloud platforms like [AWS](https://roadmap.sh/aws), Azure, Google Cloud, etc.\n- Creates standards and manages configuration to enforce and maintain system integrity across multiple environments.\n- Creates a plan to optimize system performance and resource utilization.\n- Promotes knowledge sharing by carefully documenting processes, procedures, and [best practices](https://roadmap.sh/devops/best-practices).\n\nTo perform these responsibilities, the DevOps team uses many tools to automate and improve their workflow. Here are some of the [DevOps automation tools](https://roadmap.sh/devops/automation-tools) commonly used:\n\n- **Docker**: [Docker](https://roadmap.sh/docker) is an open-source platform that enables developers to build, deploy, and run containerized applications.\n- **Kubernetes**: [Kubernetes](https://roadmap.sh/kubernetes) is an open-source orchestration platform for automating the deployment processes, scaling, and managing containerized applications.\n- **Jenkins**: Jenkins is an automation server used for performing CI and CD in a software project.\n- **Git**: Git is a distributed version control system for tracking changes in source code during software development.\n- **Prometheus**: Prometheus is an open-source application for event monitoring and alerting.\n- **Grafana**: Grafana is an open-source analytics and visualization application that helps identify issues and improve the performance of software systems.\n- **Ansible**: Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks.\n\n## What is the role of an SRE engineer?\n\nSimilar to the DevOps engineers, SRE engineers are also an integral part of any organization looking to build systems and services that are reliable, available, scalable, and performant. SREs have a narrow focus on specific practices and metrics that allow for improved collaboration and service delivery. Here are some key responsibilities of an SRE engineer:\n\n- Responsible for maintaining and ensuring system reliability and uptime.\n- Collaborate with the development team to design and architect applications.\n- Automate tasks by developing tools and scripts for deployment, alerting, and incident response.\n- Analyze and plan resources to cater for future growth and scale.\n- Creates plans to mitigate or eliminate events or system failures.\n- Promotes knowledge sharing by documenting system configuration, procedures, and best practices.\n\nTo perform these responsibilities, the SRE team uses various tools to tackle infrastructure and operational problems. Here are some of the tools commonly used:\n\n- **Kibana**: Kibana is an open-source data visualization platform for monitoring metrics and events\n- **Datadog**: Datadog is a cloud monitoring tool for events, infrastructure hosts, and much more\n- **NetApp Cloud Insights**: NetApp Cloud Insights is a tool used to monitor IT infrastructure \n- **Terraform**: Terraform is an infrastructure as code tool used to automate infrastructure tasks\n- **Ansible**: Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks\n- **New Relic**: New Relic is a cloud-based full-stack observability platform for monitoring and analyzing metrics\n- **Opsgenie**: Opsgenie is an incident response solution with functionalities like on-call scheduling, reporting, analytics, and alerting\n\nIn summary, [DevOps](https://roadmap.sh/devops) focuses on developing and delivering software, and SRE works on the deployed software to ensure it functions as intended and is reliable. They both have similarities and differences that organizations actively adopt when building and maintaining scalable applications.\n\nWhether you're an experienced developer aiming to improve your skills or a beginner exploring a career as a DevOps or SRE engineer, you might have seen tons of resources available online and maybe get overwhelmed without a clear path on the way to go. Well, not anymore, roadmap.sh provides a comprehensive guide on any of the career paths you choose to follow. You will be able to:\n\n- Stay updated with a new roadmap, track your progress, and share it on your roadmap.sh profile.\n- Learn with like-minded individuals by joining a supportive community when you [sign up](https://roadmap.sh/signup) on roadmap.sh platform.\n- [Generate a new roadmap with AI](https://roadmap.sh/ai).\n";
				}
				async function compiledContent$P() {
					return await html$P();
				}
				function getHeadings$P() {
					return [{"depth":2,"slug":"differences-between-devops-and-sre","text":"Differences between DevOps and SRE"},{"depth":3,"slug":"goals","text":"Goals"},{"depth":3,"slug":"roles-and-ownership","text":"Roles and ownership"},{"depth":3,"slug":"scope-and-mindset","text":"Scope and mindset"},{"depth":3,"slug":"metrics","text":"Metrics"},{"depth":3,"slug":"team-structure-and-processes","text":"Team structure and processes"},{"depth":2,"slug":"key-components-of-devops","text":"Key components of DevOps"},{"depth":3,"slug":"ci-and-cd","text":"CI and CD"},{"depth":3,"slug":"automation","text":"Automation"},{"depth":3,"slug":"monitoring","text":"Monitoring"},{"depth":3,"slug":"collaboration-and-communication","text":"Collaboration and communication"},{"depth":3,"slug":"infrastructure-as-code","text":"Infrastructure as Code"},{"depth":3,"slug":"continuous-learning-and-improvement","text":"Continuous learning and improvement"},{"depth":2,"slug":"key-components-of-sre","text":"Key components of SRE"},{"depth":3,"slug":"automation-1","text":"Automation"},{"depth":3,"slug":"monitoring-and-alerting","text":"Monitoring and alerting"},{"depth":3,"slug":"forecast-and-planning","text":"Forecast and planning"},{"depth":3,"slug":"incident-management","text":"Incident management"},{"depth":3,"slug":"service-level-objectives-slos","text":"Service Level Objectives (SLOs)"},{"depth":2,"slug":"similarities-between-devops-and-sre","text":"Similarities between DevOps and SRE"},{"depth":2,"slug":"what-is-the-role-of-a-devops-engineer","text":"What is the role of a DevOps engineer?"},{"depth":2,"slug":"what-is-the-role-of-an-sre-engineer","text":"What is the role of an SRE engineer?"}];
				}

				const Content$P = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$P;
					content.file = file$P;
					content.url = url$P;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$P())}`;
				});

const __vite_glob_0_47 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$P,
	compiledContent: compiledContent$P,
	default: Content$P,
	file: file$P,
	frontmatter: frontmatter$P,
	getHeadings: getHeadings$P,
	rawContent: rawContent$P,
	url: url$P
}, Symbol.toStringTag, { value: 'Module' }));

const html$O = () => "<p><a href=\"/guides/dhcp.png\"><img src=\"/guides/dhcp.png\" alt=\"DHCP in One Picture\"></a></p>";

				const frontmatter$O = {"title":"DHCP in One Picture","description":"Here is what happens when a new device joins the network.","authorId":"kamran","seo":{"title":"DHCP in One Picture - roadmap.sh","description":"Here is what happens when a new device joins the network."},"isNew":false,"type":"visual","date":"2021-04-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$O = "/workspace/src/data/guides/dhcp-in-one-picture.md";
				const url$O = undefined;
				function rawContent$O() {
					return "   \n                            \n                                                                        \n                  \n    \n                                           \n                                                                          \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![DHCP in One Picture](/guides/dhcp.png)](/guides/dhcp.png)\n";
				}
				async function compiledContent$O() {
					return await html$O();
				}
				function getHeadings$O() {
					return [];
				}

				const Content$O = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$O;
					content.file = file$O;
					content.url = url$O;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$O())}`;
				});

const __vite_glob_0_48 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$O,
	compiledContent: compiledContent$O,
	default: Content$O,
	file: file$O,
	frontmatter: frontmatter$O,
	getHeadings: getHeadings$O,
	rawContent: rawContent$O,
	url: url$O
}, Symbol.toStringTag, { value: 'Module' }));

const html$N = () => "<p>DNS or Domain Name System is one of the fundamental blocks of the internet. As a developer, you should have at-least the basic understanding of how it works. This article is a brief introduction to what is DNS and how it works.</p>\n<p>DNS at its simplest is like a phonebook on your mobile phone. Whenever you have to call one of your contacts, you can either dial their number from your memory or use their name which will then be used by your mobile phone to search their number in your phone book to call them. Every time you make a new friend, or your existing friend gets a mobile phone, you have to memorize their phone number or save it in your phonebook to be able to call them later on. DNS or Domain Name System, in a similar fashion, is a mechanism that allows you to browse websites on the internet. Just like your mobile phone does not know how to call without knowing the phone number, your browser does not know how to open a website just by the domain name; it needs to know the IP Address for the website to open. You can either type the IP Address to open, or provide the domain name and press enter which will then be used by your browser to find the IP address by going through several hoops. The picture below is the illustration of how your browser finds a website on the internet.</p>\n<p><a href=\"https://i.imgur.com/z9rwm5A.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://i.imgur.com/z9rwm5A.png\" alt=\"DNS in One Picture\"></a></p>";

				const frontmatter$N = {"title":"DNS in One Picture","description":"Quick illustrative guide on how a website is found on the internet.","authorId":"kamran","seo":{"title":"DNS in One Picture - roadmap.sh","description":"Quick illustrative guide on how a website is found on the internet."},"isNew":false,"type":"visual","date":"2018-12-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$N = "/workspace/src/data/guides/dns-in-one-picture.md";
				const url$N = undefined;
				function rawContent$N() {
					return "   \n                           \n                                                                                  \n                  \n    \n                                          \n                                                                                    \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nDNS or Domain Name System is one of the fundamental blocks of the internet. As a developer, you should have at-least the basic understanding of how it works. This article is a brief introduction to what is DNS and how it works.\n\nDNS at its simplest is like a phonebook on your mobile phone. Whenever you have to call one of your contacts, you can either dial their number from your memory or use their name which will then be used by your mobile phone to search their number in your phone book to call them. Every time you make a new friend, or your existing friend gets a mobile phone, you have to memorize their phone number or save it in your phonebook to be able to call them later on. DNS or Domain Name System, in a similar fashion, is a mechanism that allows you to browse websites on the internet. Just like your mobile phone does not know how to call without knowing the phone number, your browser does not know how to open a website just by the domain name; it needs to know the IP Address for the website to open. You can either type the IP Address to open, or provide the domain name and press enter which will then be used by your browser to find the IP address by going through several hoops. The picture below is the illustration of how your browser finds a website on the internet.\n\n[![DNS in One Picture](https://i.imgur.com/z9rwm5A.png)](https://i.imgur.com/z9rwm5A.png)\n";
				}
				async function compiledContent$N() {
					return await html$N();
				}
				function getHeadings$N() {
					return [];
				}

				const Content$N = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$N;
					content.file = file$N;
					content.url = url$N;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$N())}`;
				});

const __vite_glob_0_49 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$N,
	compiledContent: compiledContent$N,
	default: Content$N,
	file: file$N,
	frontmatter: frontmatter$N,
	getHeadings: getHeadings$N,
	rawContent: rawContent$N,
	url: url$N
}, Symbol.toStringTag, { value: 'Module' }));

const html$M = () => "<p>Language Models (LLMs) have revolutionized the field of Natural Language Processing (NLP), enabling machines to understand and generate human-like text. In my last visual guide, we discussed <a href=\"https://roadmap.sh/guides/introduction-to-llms\" target=\"_blank\">what LLMs are and how they work on a high level</a>. This guide is a curation of 5 free resources to help you further learn about LLMs and NLP. I have personally gone through these and would highly recommend these to anyone wanting to learn about LLMs.</p>\n<h2 id=\"nlp-course-by-huggingface\">NLP Course by HuggingFace</h2>\n<p><a href=\"https://huggingface.co/learn/nlp-course/chapter1/1\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">huggingface.co/learn/nlp-course</a></p>\n<p>HuggingFace, a leading NLP platform, offers an in-depth NLP course that delves into transformer models, their workings, and how to effectively utilize HuggingFace’s models. The course starts with the basics of Datasets and Tokenizers, equipping you with essential knowledge before diving into classic NLP tasks. What sets this course apart is its broader perspective, exploring how transformer models can be applied in speech processing and computer vision domains. By the end, you’ll have a strong foundation in using and fine-tuning models from HuggingFace.</p>\n<h2 id=\"prompt-engineering-by-deeplearningai\">Prompt Engineering by DeepLearning.AI</h2>\n<p><a href=\"https://deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ChatGPT Prompt Engineering for Developers</a></p>\n<p>Prompt engineering is a critical aspect of working with LLMs, and deeplearning.ai offers a comprehensive course focused specifically on this topic. With hands-on practice materials, you’ll gain practical knowledge and techniques for effective prompt engineering. By understanding how to craft prompts that yield desired model outputs, you’ll enhance the performance and control of LLMs in various applications. This course is a valuable resource for anyone aiming to master the art of prompt engineering.</p>\n<h2 id=\"llm-university-by-cohere\">LLM University by Cohere</h2>\n<p><a href=\"https://docs.cohere.com/docs/llmu\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">llm.university</a></p>\n<p>Cohere’s LLM University provides a diverse curriculum covering essential NLP techniques. From semantic search and generation to classification and embeddings, this resource offers comprehensive instruction on a wide range of topics. With a combination of theory and practical exercises, LLM University equips learners with the knowledge and skills necessary to leverage LLMs effectively. Whether you’re a beginner or an experienced practitioner, this resource will enhance your understanding and proficiency in various NLP applications.</p>\n<h2 id=\"llmops\">LLMOps</h2>\n<p><a href=\"https://fullstackdeeplearning.com/llm-bootcamp/spring-2023/llmops/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">LLMOps Course</a></p>\n<p>LLMOps, a dedicated resource for operationalizing LLMs, offers insights into testing, evaluation metrics, deployment, monitoring, and more. This resource takes you beyond the development stage, exploring the crucial aspects of LLMOps in real-world scenarios. Learn how to effectively test LLMs, evaluate their performance, and deploy them in production environments. With an emphasis on test-driven development for LLMs, LLMOps equips you with the necessary knowledge to ensure the reliability and effectiveness of your models.</p>\n<h2 id=\"llm-bootcamp\">LLM Bootcamp</h2>\n<p><a href=\"https://fullstackdeeplearning.com/llm-bootcamp/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Full Stack LLM Bootcamp</a></p>\n<p>This is a course by a team of UC Berkeley PhD alumni that teaches best practices and tools for building LLM-powered apps. It covers the full stack from prompt engineering to user-centered design. They have a “<a href=\"https://fullstackdeeplearning.com/course/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Full Stack Deep Learning</a>” course as well if you are interested in learning that.</p>\n<p>With these 5 free resources, you have a wealth of knowledge at your fingertips to master LLMs and advance your NLP skills. We have also been working on AI related content i.e. including roadmaps and best practices on <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a> so stay tuned for that as well. Happy learning!</p>";

				const frontmatter$M = {"title":"5 Free Resources to Master LLMs","description":"Dive into the world of LLMs with these free resources","authorId":"william","seo":{"title":"5 Free Resources to Master Language Models (LLMs) - roadmap.sh","description":"Looking to dive into the fascinating world of Language Models (LLMs)? Discover the top 5 free resources that will help you learn and excel in understanding LLMs. From comprehensive tutorials to interactive courses, this blog post provides you with the ultimate guide to sharpen your skills and unravel the potential of language models. Start your journey today and become a pro in LLMs without spending a dime!"},"isNew":false,"type":"textual","date":"2023-05-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","guide-sitemap"]};
				const file$M = "/workspace/src/data/guides/free-resources-to-learn-llms.md";
				const url$M = undefined;
				function rawContent$M() {
					return "   \n                                        \n                                                                    \n                 \n    \n                                                                         \n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n   \n\nLanguage Models (LLMs) have revolutionized the field of Natural Language Processing (NLP), enabling machines to understand and generate human-like text. In my last visual guide, we discussed [what LLMs are and how they work on a high level](https://roadmap.sh/guides/introduction-to-llms). This guide is a curation of 5 free resources to help you further learn about LLMs and NLP. I have personally gone through these and would highly recommend these to anyone wanting to learn about LLMs.\n\n## NLP Course by HuggingFace\n\n[huggingface.co/learn/nlp-course](https://huggingface.co/learn/nlp-course/chapter1/1)\n\nHuggingFace, a leading NLP platform, offers an in-depth NLP course that delves into transformer models, their workings, and how to effectively utilize HuggingFace's models. The course starts with the basics of Datasets and Tokenizers, equipping you with essential knowledge before diving into classic NLP tasks. What sets this course apart is its broader perspective, exploring how transformer models can be applied in speech processing and computer vision domains. By the end, you'll have a strong foundation in using and fine-tuning models from HuggingFace.\n\n## Prompt Engineering by DeepLearning.AI\n\n[ChatGPT Prompt Engineering for Developers](https://deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/)\n\nPrompt engineering is a critical aspect of working with LLMs, and deeplearning.ai offers a comprehensive course focused specifically on this topic. With hands-on practice materials, you'll gain practical knowledge and techniques for effective prompt engineering. By understanding how to craft prompts that yield desired model outputs, you'll enhance the performance and control of LLMs in various applications. This course is a valuable resource for anyone aiming to master the art of prompt engineering.\n\n## LLM University by Cohere\n\n[llm.university](https://docs.cohere.com/docs/llmu)\n\nCohere's LLM University provides a diverse curriculum covering essential NLP techniques. From semantic search and generation to classification and embeddings, this resource offers comprehensive instruction on a wide range of topics. With a combination of theory and practical exercises, LLM University equips learners with the knowledge and skills necessary to leverage LLMs effectively. Whether you're a beginner or an experienced practitioner, this resource will enhance your understanding and proficiency in various NLP applications.\n\n## LLMOps\n\n[LLMOps Course](https://fullstackdeeplearning.com/llm-bootcamp/spring-2023/llmops/)\n\nLLMOps, a dedicated resource for operationalizing LLMs, offers insights into testing, evaluation metrics, deployment, monitoring, and more. This resource takes you beyond the development stage, exploring the crucial aspects of LLMOps in real-world scenarios. Learn how to effectively test LLMs, evaluate their performance, and deploy them in production environments. With an emphasis on test-driven development for LLMs, LLMOps equips you with the necessary knowledge to ensure the reliability and effectiveness of your models.\n\n## LLM Bootcamp\n\n[Full Stack LLM Bootcamp](https://fullstackdeeplearning.com/llm-bootcamp/)\n\nThis is a course by a team of UC Berkeley PhD alumni that teaches best practices and tools for building LLM-powered apps. It covers the full stack from prompt engineering to user-centered design. They have a \"[Full Stack Deep Learning](https://fullstackdeeplearning.com/course/)\" course as well if you are interested in learning that.\n\nWith these 5 free resources, you have a wealth of knowledge at your fingertips to master LLMs and advance your NLP skills. We have also been working on AI related content i.e. including roadmaps and best practices on [roadmap.sh](https://roadmap.sh) so stay tuned for that as well. Happy learning!\n";
				}
				async function compiledContent$M() {
					return await html$M();
				}
				function getHeadings$M() {
					return [{"depth":2,"slug":"nlp-course-by-huggingface","text":"NLP Course by HuggingFace"},{"depth":2,"slug":"prompt-engineering-by-deeplearningai","text":"Prompt Engineering by DeepLearning.AI"},{"depth":2,"slug":"llm-university-by-cohere","text":"LLM University by Cohere"},{"depth":2,"slug":"llmops","text":"LLMOps"},{"depth":2,"slug":"llm-bootcamp","text":"LLM Bootcamp"}];
				}

				const Content$M = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$M;
					content.file = file$M;
					content.url = url$M;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$M())}`;
				});

const __vite_glob_0_50 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$M,
	compiledContent: compiledContent$M,
	default: Content$M,
	file: file$M,
	frontmatter: frontmatter$M,
	getHeadings: getHeadings$M,
	rawContent: rawContent$M,
	url: url$M
}, Symbol.toStringTag, { value: 'Module' }));

const html$L = () => "<p><img src=\"https://assets.roadmap.sh/guest/frontend-developer-skills-zdpyd.jpg\" alt=\"The best frontend developer skills to learn.\"></p>\n<p>Front end development is probably one of the most dynamic fields in our industry, it’s constantly forcing developers to stay up-to-date with the latest trends and technologies. Either by learning about new frameworks or libraries, or simply by making them choose between their current stack and the hot new framework released every other month.</p>\n<p>While working as a front end developer can be headache-inducing sometimes, it’s also a great field for those who love to constantly learn new technologies. Given how active and dynamic the frontend community is.</p>\n<p>In this article, we’ll try to help guide you through the constantly growing front end ecosystem and we’re going to cover 12 essential front end development skills that every front end dev should master to remain competitive and effective in their role.</p>\n<h2 id=\"understanding-front-end-development\">Understanding Front End Development</h2>\n<p>But before we move forward, let’s first understand <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">what front end development is</a>.</p>\n<p>Front end development involves creating the parts of a website or application that users interact with directly. This includes designing layouts, implementing visual elements, and ensuring a seamless user experience by coding the interactions through the use of three basic <a href=\"https://roadmap.sh/frontend/technologies\" target=\"_blank\">frontend technologies</a>: HTML, CSS, and JavaScript.</p>\n<p>Unlike backend development, which deals with server-side logic, front end development focuses exclusively on client-side logic.</p>\n<p>With that said, HTML, CSS, and JavaScript aren’t the only three front end developer skills you should be focusing on, in fact, there are many others that are just as important, so let’s take a quick look at them.</p>\n<h2 id=\"1-htmlcssjavascript\">1. HTML/CSS/JavaScript</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/html-css-javascript-layers-7agjb.png\" alt=\"html css and javascript layers\"></p>\n<p>HTML, CSS, and JavaScript are the foundational <a href=\"https://roadmap.sh/frontend/languages\" target=\"_blank\">programming languages for front end development</a>. Mind you, they’re not the only skills that matter, but they’re definitely the three skills you should focus on first.</p>\n<h3 id=\"html-hypertext-markup-language\">HTML (HyperText Markup Language):</h3>\n<ul>\n<li><strong>Role</strong>: HTML is the backbone of any web page, providing the basic structure and content. It defines elements like headings, paragraphs, links, images, and other multimedia.</li>\n<li><strong>Key Features</strong>: Semantic HTML5 elements (like <code>&#x3C;header></code>, <code>&#x3C;footer></code>, <code>&#x3C;article></code>, and <code>&#x3C;section></code>) improve accessibility and SEO. Proper use of these elements makes the content more understandable for both users, search engines and even accessibility devices (like screen readers).</li>\n</ul>\n<h3 id=\"css-cascading-style-sheets\">CSS (Cascading Style Sheets):</h3>\n<ul>\n<li><strong>Role</strong>: CSS is responsible for the visual presentation of the web page. It controls the layout, colors, fonts, and overall style. While HTML lays out the foundational work for the page, CSS is a big component in making it look “good” for the users.</li>\n<li><strong>Key Features</strong>: CSS3 introduces features like Flexbox, Grid Layout, animations, and transitions, which enable complex designs with less code. While trying to build responsive designs (which everyone should be doing by now), media queries, flexbox and grid are your friends, making web pages look good on all devices.</li>\n</ul>\n<h3 id=\"javascript\">JavaScript</h3>\n<ul>\n<li><strong>Role</strong>: JavaScript adds interactivity and dynamic behavior to web pages. It enables features like form validation, content updates without page reloads, and interactive elements like sliders and carousels. In other words, while CSS makes it look “good”, JavaScript makes it interactive and reactive to the user’s actions.</li>\n<li><strong>Key Features</strong>: Modern JavaScript (ES6+) introduces features like arrow functions, template literals, destructuring, modules, and promises. These features make the code more concise and readable. Whether you’re an old developer looking to become a front end developer, or a new one just getting started, adopting these features is key to your success as a JavaScript developer.</li>\n</ul>\n<p>Mastering these three key front end developer skills is not just about knowing the syntax but also understanding how to use these technologies together to create responsive, interactive, and accessible web pages.</p>\n<h2 id=\"2-accessibility\">2. Accessibility</h2>\n<p>Accessibility ensures that websites are usable by people with various disabilities (from being sight-challenged to having other types of mobility-related disabilities).</p>\n<p>In the end, the web should be accessible to everyone, and knowing and understanding about accessibility allows you to make your web-based products something that everyone can use.</p>\n<p>This practice includes practices that range from implementing proper HTML tags, ARIA roles, all the way up to proper keyboard navigations. Accessible websites are not only compliant with legal standards but also offer a better user experience for a broader audience. Tools like screen readers and voice recognition software rely on well-structured, accessible content to function correctly.</p>\n<p>You can read more about Accessibility in the web space by <a href=\"https://www.youtube.com/watch?v=chEEnz0MJ10\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">listening to this interview I did</a> with an accessibility expert.</p>\n<h2 id=\"3-version-control\">3. Version Control</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/gitflow-example-j1iu3.png\" alt=\"git flow\"></p>\n<p>Version control is an essential skill for any front end developer, as it allows you to manage and track changes to your codebase efficiently. It provides a structured way to collaborate with other developers, maintain a history of changes, and ensure the integrity of your code. Here’s a more detailed look at why this skill is crucial and how to use it effectively:</p>\n<ul>\n<li><strong>Collaboration</strong>: When working on a project with a team, version control systems (VCS) enable multiple developers to work on the same codebase without conflicts. Each developer can create their own branches, make changes, and then merge their work into the main codebase.</li>\n<li><strong>History and Documentation</strong>: These systems maintain a history of all changes made to the code. This is invaluable for tracking when and why changes were made, which helps in debugging and understanding the evolution of the project.</li>\n<li><strong>Backup and Recovery</strong>: Version control acts as a backup system. If something goes wrong with the current code, developers can revert to previous versions without losing their work. This is a massive benefit for teams and honestly, for solo developers as well.</li>\n</ul>\n<h3 id=\"popular-version-control-systems\">Popular Version Control Systems</h3>\n<p>While the de-facto standard is Git, it’s also interesting to learn that Git is not the only VCS option out there (even though it’s the recommended option):</p>\n<ul>\n<li><strong>Git</strong>: The most widely used version control system. Git is a distributed VCS, meaning every developer has a complete copy of the repository. This allows for offline work and provides redundancy.</li>\n<li><strong>Subversion (SVN)</strong>: A centralized VCS where the repository is stored on a server, and developers check out the latest version to work on. This option is slowly fading out, and is mostly in use only by teams that inherit it as a company-wide standard.</li>\n</ul>\n<h3 id=\"best-practices\">Best Practices</h3>\n<p>Regardless of the solution you use for this, try to keep in mind these best practices that will make your life (and your teammate’s life) a lot easier:</p>\n<ul>\n<li><strong>Frequent Commits</strong>: Make small, frequent commits with clear, descriptive messages. This makes it easier to track changes and debug issues.</li>\n<li><strong>Branching Strategy</strong>: Use a branching strategy that fits your workflow. Common strategies include <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Git Flow</a> and <a href=\"https://docs.github.com/en/get-started/using-github/github-flow\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub Flow</a>.</li>\n<li><strong>Code Reviews</strong>: Use pull requests to facilitate code reviews. This helps maintain code quality and fosters collaboration.</li>\n</ul>\n<h2 id=\"4-responsive-web-design\">4. Responsive Web Design</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/responsive-design-example-6j7wq.png\" alt=\"responsive design example\"></p>\n<p>Responsive web design ensures that a website looks and functions well on different devices and screen sizes.  With the increasing use of mobile devices, responsive design is key for providing a consistent user experience across desktops, tablets, and smartphones.</p>\n<p>From the implementation side, one of the key elements to achieve responsive web design, are media queries. Through the use of media queries, developers can test for multiple screens and viewport sizes and style different sections of the page accordingly.</p>\n<p>That said, if media queries sound too complex or just not flexible enough (given that testing for every screen size can be too much nowadays), the alternative is to create a “flexible grid”, in other words, a layout that by definition, can adapt to the current screen size automatically.</p>\n<p>The main responsive design techniques to use for these flexible grids are: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">multi-column layouts, flexbox</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">grid</a>. Either way, whatever you decide to go with, they will all provide you with a flexible layout right off the bat.</p>\n<h2 id=\"5-basics-of-ux\">5. Basics of UX</h2>\n<p>As a front end developer, you are not strictly in charge of designing and defining the user experience standards, however, in some team compositions (especially when they work for smaller companies), the front end developers are also in charge of defining aspects of the user experience.</p>\n<p>Understanding the basics of user experience (UX) design helps developers create websites that are not only functional but also intuitive and enjoyable to use. This includes, in theory,  knowledge of design principles, user research, and usability testing. However,  front end developers, given their partial contact and responsibility over the UX, don’t usually go deep into UX, but rather, take a more practical approach, learning from experts or from their own past experience.</p>\n<p>A solid grasp of UX principles allows developers to build interfaces that meet users’ needs and expectations, leading to higher satisfaction and engagement.</p>\n<ul>\n<li><strong>Enhanced User Satisfaction</strong>: Good UX design leads to higher user satisfaction by making interfaces intuitive and enjoyable to use. Users are more likely to return to and recommend a product that provides a positive experience.</li>\n<li><strong>Improved Engagement and Retention</strong>: A well-designed UX keeps users engaged and encourages them to spend more time on a site or app. This can lead to higher retention rates and better overall performance metrics.</li>\n<li><strong>Competitive Advantage</strong>: In a crowded market, products with superior UX stand out. Investing in UX design can provide a competitive edge by attracting and retaining more users compared to products with poor UX.</li>\n<li><strong>Alignment with Business Goals</strong>: Good UX design aligns with business objectives by enhancing user satisfaction, which can lead to increased conversions, sales, and customer loyalty. It ensures that the product meets both user needs and business goals effectively.</li>\n</ul>\n<h2 id=\"6-basics-of-seo\">6. Basics of SEO</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/serp-results-rny9a.jpg\" alt=\"SERP results\"></p>\n<p>Search Engine Optimization (SEO) is essential for ensuring that a website is discoverable by search engines. This involves optimizing the site’s content, structure, and performance to rank higher in search engine results.</p>\n<p>Key aspects of SEO include using relevant keywords, creating high-quality content, optimizing meta tags, and ensuring fast load times. Effective SEO practices can significantly increase organic traffic to a website.</p>\n<p>With that said, why should this be of interest to a front end developer? Shouldn’t there be an SEO expert taking care of all of this?</p>\n<p>The answer to that question is “yes, there should be”, however, as a front end developer, you do benefit from having some basic understanding of how SEO works:</p>\n<ul>\n<li><strong>Increased visibility and traffic</strong>: Good SEO practices improve a website’s ranking on search engine results pages (SERPs). As a front end developer you have control over how the page is rendered, including how fast it does it and the information that is provided to search engines In other words, you have full control over the traffic and visibility of the project you’re working on.</li>\n<li><strong>Career advancement</strong>: As businesses increasingly recognize the importance of online presence, the demand for developers with SEO expertise is growing. Front End developers who can implement SEO best practices are more valuable to employers and clients, leading to better - job opportunities and career growth.</li>\n<li><strong>Improved code quality</strong>: SEO-friendly code is usually cleaner, more organized, and easier to maintain (there are no guarantees though). By adhering to SEO best practices, front end developers tend to produce code that is well-structured and follows industry standards, leading to fewer bugs and more scalable projects.</li>\n</ul>\n<h2 id=\"7-restful-apis\">7. RESTful APIs</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/restfulapi-from-frontend-dev-8msjn.png\" alt=\"RESTful API\"></p>\n<p>RESTful APIs are a key piece of technology for front end developers to master. Mind you, not from the POV of creating them, but rather, understanding how to use and interact with them.</p>\n<p>These APIs are used to connect the front end of a web application to its backend services. Understanding how to work with APIs, including making HTTP requests and handling responses, is essential for integrating dynamic data into your web applications (i.e. data from your database, data from a third party API, etc).</p>\n<p>Familiarity with REST principles and tools like <a href=\"https://postman.com\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Postman</a> can help developers efficiently test and debug API integrations. As a front end developer, by understanding how RESTful APIs work, you gain the following “superpowers”:</p>\n<ul>\n<li><strong>Dynamic Content</strong>: RESTful APIs allow front end applications to request and receive data from servers dynamically. This enables the development of interactive and responsive applications that can update content without requiring a full page reload.</li>\n<li><strong>Separation of Concerns</strong>: By using RESTful APIs, front end developers can separate the user interface from the backend logic (dumping the responsibility of creating the backend logic on backend developers). This division allows each part of the application to be developed, tested, and maintained independently, leading to cleaner and more manageable codebases.</li>\n<li><strong>Scalability and Flexibility</strong>: RESTful APIs provide a standardized way to interact with backend services. This standardization makes it easier to scale applications and integrate with various third-party services. Front End developers can easily connect to different data sources and services as needed.</li>\n<li><strong>Improved Collaboration</strong>: Working with RESTful APIs improves collaboration between front end and backend teams. Clear API documentation and standardized endpoints enable teams to work in parallel without dependencies, speeding up the development process.</li>\n</ul>\n<h2 id=\"8-testing-and-debugging\">8. Testing and Debugging</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/breakpoint-debugging-izun3.jpg\" alt=\"breakpoint debugging\"></p>\n<p>Testing and debugging are crucial for ensuring that your code is functional and free of errors. While this applies to both front end and backend development alike, we tend to oversimplify the complexity of the front end logic (in our minds) and, usually, we try to avoid writing tests for it.</p>\n<p>However, there is a reason why so many testing frameworks exist for the front end: because front end logic is just as complex and requires just as much care and attention as backend logic.</p>\n<p>Now, keep in mind that familiarity with testing frameworks like Jest and debugging tools in modern browser DevTools will help you maintain high-quality code standards. However, keep in mind these are not magical tools, and they will not automatically make your code better, you still have to put in the effort.</p>\n<p>Unit testing, integration testing, and end-to-end testing are all important practices to ensure that different parts of the application work correctly both individually and together.</p>\n<p>As front end developers, you’ll want to focus on debugging and testing to ensure:</p>\n<ul>\n<li><strong>Improved Code Quality</strong>: Regular testing helps identify and fix bugs early in the development process, resulting in cleaner and more reliable code. This, as you’ve probably guessed by now, reduces the likelihood of errors in production, ensuring a smoother user experience.</li>\n<li><strong>Increased Developer Efficiency</strong>: By using debugging tools and techniques, developers can quickly pinpoint and resolve issues, ideally,  saving time and effort.</li>\n<li><strong>Easier Maintenance</strong>: Well-tested code is easier to maintain and extend, period. Test suites act as a safety net around your code, and as new features are added, existing functionality remains stable (and safe), reducing the risk of introducing new bugs. This makes it easier to scale applications over time.</li>\n</ul>\n<h2 id=\"9-browser-devtools\">9. Browser DevTools</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/chrome-dev-tools-ef41z.jpg\" alt=\"chrome devtools\"></p>\n<p>Browser DevTools are essential for inspecting, debugging, and profiling your web applications. Directly built-in to browsers such as Chrome, Firefox and Safari, these tools provide a suite of features for diagnosing and fixing issues in your code. Developers can use these tools to inspect HTML elements, modify CSS styles in real-time, monitor network requests, and analyze performance bottlenecks.</p>\n<p>If you’re still wondering why a front end developer should focus on browser DevTools, these are the main reasons:</p>\n<ul>\n<li><strong>Immediate Feedback</strong>: Browser DevTools allow developers to inspect and modify HTML, CSS, and JavaScript in real\ntime. This immediate feedback is crucial for quickly diagnosing and fixing issues without the need to reload the page.</li>\n<li><strong>Enhanced Debugging Capabilities</strong>: DevTools provide powerful debugging features, such as setting breakpoints, stepping through code, and inspecting variables. These capabilities make it easier to identify and resolve bugs in complex applications.</li>\n<li><strong>Performance Optimization</strong>: Performance tabs in DevTools enable developers to analyze the loading and runtime performance of their applications. Tools like the Lighthouse audit and the Network panel help identify bottlenecks and optimize resource loading, leading to faster and more efficient web applications.</li>\n<li><strong>Responsive Design Testing</strong>: DevTools offer features for testing responsive designs across different screen sizes and devices. The device toolbar allows developers to simulate various mobile and tablet environments, ensuring that applications provide a consistent experience across all platforms.</li>\n<li><strong>Detailed Network Analysis</strong>: The Network panel provides insights into all network requests made by the application, including fetches, XHRs, and resource loading. This information is crucial for debugging network issues, understanding load times, and optimizing the overall performance of the application.</li>\n<li><strong>CSS and Style Debugging</strong>: The Elements panel allows developers to inspect and manipulate the DOM and CSS. It provides tools to edit styles, view CSS rules, and understand the computed styles for any element, making it easier to fine-tune the visual aspects of an application.</li>\n</ul>\n<h2 id=\"10-at-least-one-framework-react-vue-angular\">10. At Least One Framework (React, Vue, Angular)</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png\" alt=\"react, angular &#x26; vue logos\"></p>\n<p>While in theory, all you need to be a front end developer is JavaScript + HTML + CSS, in practice, there are tools available (i.e. frameworks and libraries) that will help you speed up your dev process and produce much cleaner and maintainable code than what you would normally produce on your own.</p>\n<p>And in fact, those tools will also let you focus on the actual application you’re building, leaving the extra, presentation-related logic to the framework.</p>\n<p>We are, of course, talking about modern <a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">front end frameworks</a> (or libraries) such as React, Vue, or Angular.</p>\n<p>Of course, there are other options out there, such as Svelte, Solid, or even just the native Web Components that all major browsers support nowadays. However, while those are very valid options, the main 3 still remain the most used options and if you’re <a href=\"https://roadmap.sh/frontend/how-to-become-frontend-developer\" target=\"_blank\">looking to become a front end developer</a>, you’ll want to first focus on one of them.</p>\n<p>Each framework has its own strengths and use cases, so understanding their core concepts and ecosystems can significantly enhance a developer’s productivity.</p>\n<p>Now the question remains: which one is the right one for you? That’s entirely up to you to decide, but here are some of the highlights of each framework:</p>\n<h3 id=\"highlights-about-react\">Highlights about React</h3>\n<ul>\n<li><strong>Component-Based Architecture</strong>: React’s component-based structure promotes reusability and maintainability. Components encapsulate logic, styles, and behavior, making the code more modular and easier to manage.</li>\n<li><strong>Virtual DOM</strong>: React’s use of a virtual DOM improves performance by minimizing direct manipulations of the real DOM. This approach results in faster updates and a smoother user experience.</li>\n<li><strong>Large Ecosystem and Community</strong>: React has a huge ecosystem of libraries, tools, and a strong community. This support makes it easier to find solutions, share knowledge, and access a wide range of third-party integrations.</li>\n<li><strong>Flexibility</strong>: Contrary to popular belief, React is not a full-fledged framework but a library, providing flexibility in choosing additional tools and libraries for routing, state management, and other functionalities.</li>\n</ul>\n<h3 id=\"highlights-about-angular\">Highlights about Angular</h3>\n<ul>\n<li><strong>Full-Featured Framework</strong>: Angular provides a complete solution with built-in tools for routing, state management, form handling, and HTTP requests. This reduces the need for third-party libraries and offers a cohesive development experience.</li>\n<li><strong>Two-Way Data Binding</strong>: Angular’s two-way data binding simplifies the synchronization between the model and the view, reducing the amount of boilerplate code needed for updates.</li>\n<li><strong>Comprehensive Documentation and Community Support</strong>: Angular has extensive documentation and a supportive community, making it easier to find resources and get help.</li>\n</ul>\n<h3 id=\"highlights-about-vue\">Highlights about Vue</h3>\n<ul>\n<li><strong>Progressive Framework</strong>: Vue is designed to be incrementally adoptable. Developers can start with a small part of the application and progressively integrate Vue’s features as needed.</li>\n<li><strong>Simplicity and Ease of Learning</strong>: Vue’s syntax and design are straightforward, making it easier for new developers to learn and start building applications quickly.</li>\n<li><strong>Flexibility</strong>: Vue allows for extensive customization and can be integrated with other projects or libraries. It offers both a simple core library and advanced features for larger applications.</li>\n</ul>\n<h2 id=\"11-web-performance\">11. Web Performance</h2>\n<p>Web performance is a key aspect of front end development because it affects many areas around the product. And not only on the technical side, but also from the business side as well, considering how performance affects the way users experience and interact with your app.</p>\n<p>In simple terms, optimizing web performance involves making your website load faster and run more efficiently. In the space of front end development, performance optimization techniques include minimizing HTTP requests, optimizing images (as in reducing their size without losing quality), using lazy loading (async loading of portions of your app or specific components), and leveraging browser caching.</p>\n<h3 id=\"why-should-you-care-about-web-performance-as-a-front-end-developer\">Why should you care about web performance as a front end developer?</h3>\n<p>As a front end developer, the performance of your user interface is your responsibility, however, here are other reasons in case that’s not enough:</p>\n<ul>\n<li><strong>User Experience</strong>: As already mentioned, fast-loading websites provide a better user experience. Users are more likely to stay on a site and interact with it if pages load quickly and smoothly.</li>\n<li><strong>SEO Benefits</strong>: Another way to focus on SEO as a front end developer, is to focus on the performance of your app. Search engines like Google consider page speed as a ranking factor. Faster websites are more likely to rank higher in search results, driving more organic traffic.</li>\n<li><strong>Conversion Rates</strong>: <a href=\"https://www.speedsense.com/insights/web-performance-impact-ecommerce-revenue\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Studies show</a> that even a small delay in page load time can significantly reduce conversion rates. Improving performance can directly impact the bottom line by increasing sales and sign-ups.</li>\n<li><strong>Mobile Performance</strong>: With the increasing use of mobile devices, optimizing performance for mobile users is essential. Mobile networks can be slower in some parts of the world, making performance optimizations even more critical.</li>\n</ul>\n<h2 id=\"12-typescript\">12. TypeScript</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/image3-y7ryl.png\" alt=\"typescript logo\"></p>\n<p>TypeScript is a superset of JavaScript that adds static typing (amongst other things). It helps catch errors early during development and helps to make your code more maintainable.</p>\n<p>As a front end developer, learning TypeScript can enhance your JavaScript skills and improve the quality of your code by giving you both types and higher-level OOP constructs (such as interfaces) to add more structure to your written logic.</p>\n<p>By providing these extra tools, TypeScript enables developers to write more predictable and robust code.</p>\n<p>Is your code going to be automatically better because of this? No, it’s not. You will still have to pay attention to what you’re writing and building, and you will still have to apply many of the concepts mentioned throughout this article.</p>\n<h3 id=\"getting-started-with-typescript\">Getting started with TypeScript</h3>\n<ul>\n<li><strong>Official Documentation</strong>: The TypeScript Handbook is an excellent resource for learning the basics and advanced features of TypeScript.</li>\n<li><strong>Check out the TypeScript Roadmap</strong>: If you’re wondering what steps to take on your way to learning TypeScript, take a look at the TypeScript Roadmap to learn exactly what you need.</li>\n<li><strong>Community Resources</strong>: The TypeScript community is active and supportive. Joining forums, participating in discussions on platforms like Stack Overflow, and following TypeScript-related blogs can provide valuable insights and help.</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Understanding the importance and relevance of these essential front end developer skills can equip front end developers with the tools and knowledge needed to create high-quality, performant, and accessible web applications.</p>\n<p>That said, this is only a high-level overview of these skills, if you want to know more about how to tackle each of every one of these skills, check out <strong><a href=\"https://roadmap.sh/frontend\" target=\"_blank\">this front end roadmap</a></strong>.</p>\n<p>In the end, staying updated with these core skills ensures that you can effectively tackle new challenges while remaining competitive in the industry. Plus, the stronger your skillset, the better your chances are of ticking requirements on a <a href=\"https://roadmap.sh/frontend/job-description\" target=\"_blank\">front end developer job description</a>.</p>";

				const frontmatter$L = {"title":"12 In-Demand Front End Developer Skills to Master","description":"Master these 12 in-demand front end developer skills and become a standout candidate in the web development field.","authorId":"fernando","excludedBySlug":"/frontend/developer-skills","seo":{"title":"12 In-Demand Front End Developer Skills to Master","description":"Master these 12 in-demand front end developer skills and become a standout candidate in the web development field.","ogImageUrl":"https://assets.roadmap.sh/guest/frontend-developer-skills-zdpyd.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-07-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$L = "/workspace/src/data/guides/frontend-developer-skills.md";
				const url$L = undefined;
				function rawContent$L() {
					return "   \n                                                          \n                                                                                                                                 \n                  \n                                            \n    \n                                                            \n                                                                                                                                   \n                                                                                   \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best frontend developer skills to learn.](https://assets.roadmap.sh/guest/frontend-developer-skills-zdpyd.jpg)\n\nFront end development is probably one of the most dynamic fields in our industry, it’s constantly forcing developers to stay up-to-date with the latest trends and technologies. Either by learning about new frameworks or libraries, or simply by making them choose between their current stack and the hot new framework released every other month.\n\nWhile working as a front end developer can be headache-inducing sometimes, it’s also a great field for those who love to constantly learn new technologies. Given how active and dynamic the frontend community is.\n\nIn this article, we’ll try to help guide you through the constantly growing front end ecosystem and we’re going to cover 12 essential front end development skills that every front end dev should master to remain competitive and effective in their role.\n\n## Understanding Front End Development\n\nBut before we move forward, let’s first understand [what front end development is](https://roadmap.sh/frontend).\n\nFront end development involves creating the parts of a website or application that users interact with directly. This includes designing layouts, implementing visual elements, and ensuring a seamless user experience by coding the interactions through the use of three basic [frontend technologies](https://roadmap.sh/frontend/technologies): HTML, CSS, and JavaScript.\n\nUnlike backend development, which deals with server-side logic, front end development focuses exclusively on client-side logic.\n\nWith that said, HTML, CSS, and JavaScript aren’t the only three front end developer skills you should be focusing on, in fact, there are many others that are just as important, so let’s take a quick look at them.\n\n## 1. HTML/CSS/JavaScript\n\n![html css and javascript layers](https://assets.roadmap.sh/guest/html-css-javascript-layers-7agjb.png)\n\nHTML, CSS, and JavaScript are the foundational [programming languages for front end development](https://roadmap.sh/frontend/languages). Mind you, they’re not the only skills that matter, but they’re definitely the three skills you should focus on first.\n\n### HTML (HyperText Markup Language):\n\n- **Role**: HTML is the backbone of any web page, providing the basic structure and content. It defines elements like headings, paragraphs, links, images, and other multimedia.\n- **Key Features**: Semantic HTML5 elements (like `<header>`, `<footer>`, `<article>`, and `<section>`) improve accessibility and SEO. Proper use of these elements makes the content more understandable for both users, search engines and even accessibility devices (like screen readers).\n\n### CSS (Cascading Style Sheets):\n\n- **Role**: CSS is responsible for the visual presentation of the web page. It controls the layout, colors, fonts, and overall style. While HTML lays out the foundational work for the page, CSS is a big component in making it look “good” for the users.\n- **Key Features**: CSS3 introduces features like Flexbox, Grid Layout, animations, and transitions, which enable complex designs with less code. While trying to build responsive designs (which everyone should be doing by now), media queries, flexbox and grid are your friends, making web pages look good on all devices.\n\n### JavaScript\n\n- **Role**: JavaScript adds interactivity and dynamic behavior to web pages. It enables features like form validation, content updates without page reloads, and interactive elements like sliders and carousels. In other words, while CSS makes it look “good”, JavaScript makes it interactive and reactive to the user’s actions.\n- **Key Features**: Modern JavaScript (ES6+) introduces features like arrow functions, template literals, destructuring, modules, and promises. These features make the code more concise and readable. Whether you’re an old developer looking to become a front end developer, or a new one just getting started, adopting these features is key to your success as a JavaScript developer.\n\nMastering these three key front end developer skills is not just about knowing the syntax but also understanding how to use these technologies together to create responsive, interactive, and accessible web pages. \n\n## 2. Accessibility\n\nAccessibility ensures that websites are usable by people with various disabilities (from being sight-challenged to having other types of mobility-related disabilities).\n\nIn the end, the web should be accessible to everyone, and knowing and understanding about accessibility allows you to make your web-based products something that everyone can use.\n\nThis practice includes practices that range from implementing proper HTML tags, ARIA roles, all the way up to proper keyboard navigations. Accessible websites are not only compliant with legal standards but also offer a better user experience for a broader audience. Tools like screen readers and voice recognition software rely on well-structured, accessible content to function correctly.\n\nYou can read more about Accessibility in the web space by [listening to this interview I did](https://www.youtube.com/watch?v=chEEnz0MJ10) with an accessibility expert.\n\n## 3. Version Control\n\n![git flow](https://assets.roadmap.sh/guest/gitflow-example-j1iu3.png)\n\nVersion control is an essential skill for any front end developer, as it allows you to manage and track changes to your codebase efficiently. It provides a structured way to collaborate with other developers, maintain a history of changes, and ensure the integrity of your code. Here’s a more detailed look at why this skill is crucial and how to use it effectively:\n\n- **Collaboration**: When working on a project with a team, version control systems (VCS) enable multiple developers to work on the same codebase without conflicts. Each developer can create their own branches, make changes, and then merge their work into the main codebase.\n- **History and Documentation**: These systems maintain a history of all changes made to the code. This is invaluable for tracking when and why changes were made, which helps in debugging and understanding the evolution of the project.\n- **Backup and Recovery**: Version control acts as a backup system. If something goes wrong with the current code, developers can revert to previous versions without losing their work. This is a massive benefit for teams and honestly, for solo developers as well.\n\n### Popular Version Control Systems\n\nWhile the de-facto standard is Git, it’s also interesting to learn that Git is not the only VCS option out there (even though it’s the recommended option):\n\n- **Git**: The most widely used version control system. Git is a distributed VCS, meaning every developer has a complete copy of the repository. This allows for offline work and provides redundancy.\n- **Subversion (SVN)**: A centralized VCS where the repository is stored on a server, and developers check out the latest version to work on. This option is slowly fading out, and is mostly in use only by teams that inherit it as a company-wide standard.\n\n### Best Practices\n\nRegardless of the solution you use for this, try to keep in mind these best practices that will make your life (and your teammate’s life) a lot easier:\n\n- **Frequent Commits**: Make small, frequent commits with clear, descriptive messages. This makes it easier to track changes and debug issues.\n- **Branching Strategy**: Use a branching strategy that fits your workflow. Common strategies include [Git Flow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow) and [GitHub Flow](https://docs.github.com/en/get-started/using-github/github-flow).\n- **Code Reviews**: Use pull requests to facilitate code reviews. This helps maintain code quality and fosters collaboration.\n\n## 4. Responsive Web Design\n\n![responsive design example](https://assets.roadmap.sh/guest/responsive-design-example-6j7wq.png)\n\nResponsive web design ensures that a website looks and functions well on different devices and screen sizes.  With the increasing use of mobile devices, responsive design is key for providing a consistent user experience across desktops, tablets, and smartphones.\n\nFrom the implementation side, one of the key elements to achieve responsive web design, are media queries. Through the use of media queries, developers can test for multiple screens and viewport sizes and style different sections of the page accordingly.\n\nThat said, if media queries sound too complex or just not flexible enough (given that testing for every screen size can be too much nowadays), the alternative is to create a “flexible grid”, in other words, a layout that by definition, can adapt to the current screen size automatically.\n\nThe main responsive design techniques to use for these flexible grids are: [multi-column layouts, flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout) and [grid](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids). Either way, whatever you decide to go with, they will all provide you with a flexible layout right off the bat.\n\n## 5. Basics of UX\n\nAs a front end developer, you are not strictly in charge of designing and defining the user experience standards, however, in some team compositions (especially when they work for smaller companies), the front end developers are also in charge of defining aspects of the user experience.\n\nUnderstanding the basics of user experience (UX) design helps developers create websites that are not only functional but also intuitive and enjoyable to use. This includes, in theory,  knowledge of design principles, user research, and usability testing. However,  front end developers, given their partial contact and responsibility over the UX, don’t usually go deep into UX, but rather, take a more practical approach, learning from experts or from their own past experience.\n\nA solid grasp of UX principles allows developers to build interfaces that meet users' needs and expectations, leading to higher satisfaction and engagement.\n\n- **Enhanced User Satisfaction**: Good UX design leads to higher user satisfaction by making interfaces intuitive and enjoyable to use. Users are more likely to return to and recommend a product that provides a positive experience.\n- **Improved Engagement and Retention**: A well-designed UX keeps users engaged and encourages them to spend more time on a site or app. This can lead to higher retention rates and better overall performance metrics.\n- **Competitive Advantage**: In a crowded market, products with superior UX stand out. Investing in UX design can provide a competitive edge by attracting and retaining more users compared to products with poor UX.\n- **Alignment with Business Goals**: Good UX design aligns with business objectives by enhancing user satisfaction, which can lead to increased conversions, sales, and customer loyalty. It ensures that the product meets both user needs and business goals effectively.\n\n## 6. Basics of SEO\n\n![SERP results](https://assets.roadmap.sh/guest/serp-results-rny9a.jpg)\n\nSearch Engine Optimization (SEO) is essential for ensuring that a website is discoverable by search engines. This involves optimizing the site's content, structure, and performance to rank higher in search engine results.\n\nKey aspects of SEO include using relevant keywords, creating high-quality content, optimizing meta tags, and ensuring fast load times. Effective SEO practices can significantly increase organic traffic to a website.\n\nWith that said, why should this be of interest to a front end developer? Shouldn’t there be an SEO expert taking care of all of this?\n\nThe answer to that question is “yes, there should be”, however, as a front end developer, you do benefit from having some basic understanding of how SEO works:\n\n- **Increased visibility and traffic**: Good SEO practices improve a website’s ranking on search engine results pages (SERPs). As a front end developer you have control over how the page is rendered, including how fast it does it and the information that is provided to search engines In other words, you have full control over the traffic and visibility of the project you’re working on.\n- **Career advancement**: As businesses increasingly recognize the importance of online presence, the demand for developers with SEO expertise is growing. Front End developers who can implement SEO best practices are more valuable to employers and clients, leading to better - job opportunities and career growth.\n- **Improved code quality**: SEO-friendly code is usually cleaner, more organized, and easier to maintain (there are no guarantees though). By adhering to SEO best practices, front end developers tend to produce code that is well-structured and follows industry standards, leading to fewer bugs and more scalable projects.\n\n## 7. RESTful APIs\n\n![RESTful API](https://assets.roadmap.sh/guest/restfulapi-from-frontend-dev-8msjn.png)\n\nRESTful APIs are a key piece of technology for front end developers to master. Mind you, not from the POV of creating them, but rather, understanding how to use and interact with them.\n\nThese APIs are used to connect the front end of a web application to its backend services. Understanding how to work with APIs, including making HTTP requests and handling responses, is essential for integrating dynamic data into your web applications (i.e. data from your database, data from a third party API, etc).\n\nFamiliarity with REST principles and tools like [Postman](https://postman.com) can help developers efficiently test and debug API integrations. As a front end developer, by understanding how RESTful APIs work, you gain the following “superpowers”:\n\n- **Dynamic Content**: RESTful APIs allow front end applications to request and receive data from servers dynamically. This enables the development of interactive and responsive applications that can update content without requiring a full page reload.\n- **Separation of Concerns**: By using RESTful APIs, front end developers can separate the user interface from the backend logic (dumping the responsibility of creating the backend logic on backend developers). This division allows each part of the application to be developed, tested, and maintained independently, leading to cleaner and more manageable codebases.\n- **Scalability and Flexibility**: RESTful APIs provide a standardized way to interact with backend services. This standardization makes it easier to scale applications and integrate with various third-party services. Front End developers can easily connect to different data sources and services as needed.\n- **Improved Collaboration**: Working with RESTful APIs improves collaboration between front end and backend teams. Clear API documentation and standardized endpoints enable teams to work in parallel without dependencies, speeding up the development process.\n\n## 8. Testing and Debugging\n\n![breakpoint debugging](https://assets.roadmap.sh/guest/breakpoint-debugging-izun3.jpg)\n\nTesting and debugging are crucial for ensuring that your code is functional and free of errors. While this applies to both front end and backend development alike, we tend to oversimplify the complexity of the front end logic (in our minds) and, usually, we try to avoid writing tests for it.\n\nHowever, there is a reason why so many testing frameworks exist for the front end: because front end logic is just as complex and requires just as much care and attention as backend logic.\n\nNow, keep in mind that familiarity with testing frameworks like Jest and debugging tools in modern browser DevTools will help you maintain high-quality code standards. However, keep in mind these are not magical tools, and they will not automatically make your code better, you still have to put in the effort.\n\nUnit testing, integration testing, and end-to-end testing are all important practices to ensure that different parts of the application work correctly both individually and together.\n\nAs front end developers, you’ll want to focus on debugging and testing to ensure:\n\n- **Improved Code Quality**: Regular testing helps identify and fix bugs early in the development process, resulting in cleaner and more reliable code. This, as you’ve probably guessed by now, reduces the likelihood of errors in production, ensuring a smoother user experience. \n- **Increased Developer Efficiency**: By using debugging tools and techniques, developers can quickly pinpoint and resolve issues, ideally,  saving time and effort.\n- **Easier Maintenance**: Well-tested code is easier to maintain and extend, period. Test suites act as a safety net around your code, and as new features are added, existing functionality remains stable (and safe), reducing the risk of introducing new bugs. This makes it easier to scale applications over time.\n\n## 9. Browser DevTools\n\n![chrome devtools](https://assets.roadmap.sh/guest/chrome-dev-tools-ef41z.jpg)\n\nBrowser DevTools are essential for inspecting, debugging, and profiling your web applications. Directly built-in to browsers such as Chrome, Firefox and Safari, these tools provide a suite of features for diagnosing and fixing issues in your code. Developers can use these tools to inspect HTML elements, modify CSS styles in real-time, monitor network requests, and analyze performance bottlenecks.\n\nIf you’re still wondering why a front end developer should focus on browser DevTools, these are the main reasons:\n\n- **Immediate Feedback**: Browser DevTools allow developers to inspect and modify HTML, CSS, and JavaScript in real \ntime. This immediate feedback is crucial for quickly diagnosing and fixing issues without the need to reload the page.\n- **Enhanced Debugging Capabilities**: DevTools provide powerful debugging features, such as setting breakpoints, stepping through code, and inspecting variables. These capabilities make it easier to identify and resolve bugs in complex applications.\n- **Performance Optimization**: Performance tabs in DevTools enable developers to analyze the loading and runtime performance of their applications. Tools like the Lighthouse audit and the Network panel help identify bottlenecks and optimize resource loading, leading to faster and more efficient web applications.\n- **Responsive Design Testing**: DevTools offer features for testing responsive designs across different screen sizes and devices. The device toolbar allows developers to simulate various mobile and tablet environments, ensuring that applications provide a consistent experience across all platforms.\n- **Detailed Network Analysis**: The Network panel provides insights into all network requests made by the application, including fetches, XHRs, and resource loading. This information is crucial for debugging network issues, understanding load times, and optimizing the overall performance of the application.\n- **CSS and Style Debugging**: The Elements panel allows developers to inspect and manipulate the DOM and CSS. It provides tools to edit styles, view CSS rules, and understand the computed styles for any element, making it easier to fine-tune the visual aspects of an application.\n\n## 10. At Least One Framework (React, Vue, Angular)\n\n![react, angular & vue logos](https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png)\n\nWhile in theory, all you need to be a front end developer is JavaScript + HTML + CSS, in practice, there are tools available (i.e. frameworks and libraries) that will help you speed up your dev process and produce much cleaner and maintainable code than what you would normally produce on your own.\n\nAnd in fact, those tools will also let you focus on the actual application you’re building, leaving the extra, presentation-related logic to the framework.\n\nWe are, of course, talking about modern [front end frameworks](https://roadmap.sh/frontend/frameworks) (or libraries) such as React, Vue, or Angular.\n\nOf course, there are other options out there, such as Svelte, Solid, or even just the native Web Components that all major browsers support nowadays. However, while those are very valid options, the main 3 still remain the most used options and if you’re [looking to become a front end developer](https://roadmap.sh/frontend/how-to-become-frontend-developer), you’ll want to first focus on one of them.\n\nEach framework has its own strengths and use cases, so understanding their core concepts and ecosystems can significantly enhance a developer's productivity.\n\nNow the question remains: which one is the right one for you? That’s entirely up to you to decide, but here are some of the highlights of each framework:\n\n### Highlights about React\n\n- **Component-Based Architecture**: React's component-based structure promotes reusability and maintainability. Components encapsulate logic, styles, and behavior, making the code more modular and easier to manage.\n- **Virtual DOM**: React’s use of a virtual DOM improves performance by minimizing direct manipulations of the real DOM. This approach results in faster updates and a smoother user experience.\n- **Large Ecosystem and Community**: React has a huge ecosystem of libraries, tools, and a strong community. This support makes it easier to find solutions, share knowledge, and access a wide range of third-party integrations.\n- **Flexibility**: Contrary to popular belief, React is not a full-fledged framework but a library, providing flexibility in choosing additional tools and libraries for routing, state management, and other functionalities.\n\n### Highlights about Angular\n\n- **Full-Featured Framework**: Angular provides a complete solution with built-in tools for routing, state management, form handling, and HTTP requests. This reduces the need for third-party libraries and offers a cohesive development experience.\n- **Two-Way Data Binding**: Angular’s two-way data binding simplifies the synchronization between the model and the view, reducing the amount of boilerplate code needed for updates.\n- **Comprehensive Documentation and Community Support**: Angular has extensive documentation and a supportive community, making it easier to find resources and get help.\n\n### Highlights about Vue\n\n- **Progressive Framework**: Vue is designed to be incrementally adoptable. Developers can start with a small part of the application and progressively integrate Vue’s features as needed.\n- **Simplicity and Ease of Learning**: Vue’s syntax and design are straightforward, making it easier for new developers to learn and start building applications quickly.\n- **Flexibility**: Vue allows for extensive customization and can be integrated with other projects or libraries. It offers both a simple core library and advanced features for larger applications.\n\n## 11. Web Performance\n\nWeb performance is a key aspect of front end development because it affects many areas around the product. And not only on the technical side, but also from the business side as well, considering how performance affects the way users experience and interact with your app.\n\nIn simple terms, optimizing web performance involves making your website load faster and run more efficiently. In the space of front end development, performance optimization techniques include minimizing HTTP requests, optimizing images (as in reducing their size without losing quality), using lazy loading (async loading of portions of your app or specific components), and leveraging browser caching.\n\n### Why should you care about web performance as a front end developer?\n\nAs a front end developer, the performance of your user interface is your responsibility, however, here are other reasons in case that’s not enough:\n\n- **User Experience**: As already mentioned, fast-loading websites provide a better user experience. Users are more likely to stay on a site and interact with it if pages load quickly and smoothly.\n- **SEO Benefits**: Another way to focus on SEO as a front end developer, is to focus on the performance of your app. Search engines like Google consider page speed as a ranking factor. Faster websites are more likely to rank higher in search results, driving more organic traffic.\n- **Conversion Rates**: [Studies show](https://www.speedsense.com/insights/web-performance-impact-ecommerce-revenue) that even a small delay in page load time can significantly reduce conversion rates. Improving performance can directly impact the bottom line by increasing sales and sign-ups.\n- **Mobile Performance**: With the increasing use of mobile devices, optimizing performance for mobile users is essential. Mobile networks can be slower in some parts of the world, making performance optimizations even more critical.\n\n## 12. TypeScript\n\n![typescript logo](https://assets.roadmap.sh/guest/image3-y7ryl.png)\n\nTypeScript is a superset of JavaScript that adds static typing (amongst other things). It helps catch errors early during development and helps to make your code more maintainable.\n\nAs a front end developer, learning TypeScript can enhance your JavaScript skills and improve the quality of your code by giving you both types and higher-level OOP constructs (such as interfaces) to add more structure to your written logic.\n\nBy providing these extra tools, TypeScript enables developers to write more predictable and robust code.\n\nIs your code going to be automatically better because of this? No, it’s not. You will still have to pay attention to what you’re writing and building, and you will still have to apply many of the concepts mentioned throughout this article.\n\n### Getting started with TypeScript\n\n- **Official Documentation**: The TypeScript Handbook is an excellent resource for learning the basics and advanced features of TypeScript.\n- **Check out the TypeScript Roadmap**: If you’re wondering what steps to take on your way to learning TypeScript, take a look at the TypeScript Roadmap to learn exactly what you need.\n- **Community Resources**: The TypeScript community is active and supportive. Joining forums, participating in discussions on platforms like Stack Overflow, and following TypeScript-related blogs can provide valuable insights and help.\n\n## Conclusion\n\nUnderstanding the importance and relevance of these essential front end developer skills can equip front end developers with the tools and knowledge needed to create high-quality, performant, and accessible web applications.\n\nThat said, this is only a high-level overview of these skills, if you want to know more about how to tackle each of every one of these skills, check out **[this front end roadmap](https://roadmap.sh/frontend)**.\n\nIn the end, staying updated with these core skills ensures that you can effectively tackle new challenges while remaining competitive in the industry. Plus, the stronger your skillset, the better your chances are of ticking requirements on a [front end developer job description](https://roadmap.sh/frontend/job-description).\n";
				}
				async function compiledContent$L() {
					return await html$L();
				}
				function getHeadings$L() {
					return [{"depth":2,"slug":"understanding-front-end-development","text":"Understanding Front End Development"},{"depth":2,"slug":"1-htmlcssjavascript","text":"1. HTML/CSS/JavaScript"},{"depth":3,"slug":"html-hypertext-markup-language","text":"HTML (HyperText Markup Language):"},{"depth":3,"slug":"css-cascading-style-sheets","text":"CSS (Cascading Style Sheets):"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":2,"slug":"2-accessibility","text":"2. Accessibility"},{"depth":2,"slug":"3-version-control","text":"3. Version Control"},{"depth":3,"slug":"popular-version-control-systems","text":"Popular Version Control Systems"},{"depth":3,"slug":"best-practices","text":"Best Practices"},{"depth":2,"slug":"4-responsive-web-design","text":"4. Responsive Web Design"},{"depth":2,"slug":"5-basics-of-ux","text":"5. Basics of UX"},{"depth":2,"slug":"6-basics-of-seo","text":"6. Basics of SEO"},{"depth":2,"slug":"7-restful-apis","text":"7. RESTful APIs"},{"depth":2,"slug":"8-testing-and-debugging","text":"8. Testing and Debugging"},{"depth":2,"slug":"9-browser-devtools","text":"9. Browser DevTools"},{"depth":2,"slug":"10-at-least-one-framework-react-vue-angular","text":"10. At Least One Framework (React, Vue, Angular)"},{"depth":3,"slug":"highlights-about-react","text":"Highlights about React"},{"depth":3,"slug":"highlights-about-angular","text":"Highlights about Angular"},{"depth":3,"slug":"highlights-about-vue","text":"Highlights about Vue"},{"depth":2,"slug":"11-web-performance","text":"11. Web Performance"},{"depth":3,"slug":"why-should-you-care-about-web-performance-as-a-front-end-developer","text":"Why should you care about web performance as a front end developer?"},{"depth":2,"slug":"12-typescript","text":"12. TypeScript"},{"depth":3,"slug":"getting-started-with-typescript","text":"Getting started with TypeScript"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$L = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$L;
					content.file = file$L;
					content.url = url$L;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$L())}`;
				});

const __vite_glob_0_51 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$L,
	compiledContent: compiledContent$L,
	default: Content$L,
	file: file$L,
	frontmatter: frontmatter$L,
	getHeadings: getHeadings$L,
	rawContent: rawContent$L,
	url: url$L
}, Symbol.toStringTag, { value: 'Module' }));

const html$K = () => "<p><img src=\"https://assets.roadmap.sh/guest/top-frontend-frameworks-wmqwc.jpg\" alt=\"Best frontend frameworks\"></p>\n<p>With the growing complexity of web applications, selecting the right frontend framework is more important than ever. Your choice will impact performance, scalability, and development speed. Not to mention the future-proofing of your application.</p>\n<p>In 2024, web development is increasingly about building fast, scalable, and highly interactive user interfaces. Frontend frameworks now need to support real-time interactions, handle large-scale data, and provide excellent developer experiences by simplifying the web development process.</p>\n<p>Picking the right frontend framework isn’t just about what’s popular—it’s about finding the tool that fits your project’s needs, whether you’re building a small static site or a large, complex application.</p>\n<p>The top frontend frameworks for web development that I’ll cover as part of this article are:</p>\n<ul>\n<li>React</li>\n<li>VueJS</li>\n<li>Angular</li>\n<li>Svelte</li>\n<li>Solid.js</li>\n<li>Qwik</li>\n<li>Astro</li>\n</ul>\n<h2 id=\"criteria-for-evaluating-frontend-frameworks\">Criteria for Evaluating Frontend Frameworks</h2>\n<p>Finding what the “best frontend framework” looks like is not easy. In fact, it’s impossible without the particular characteristics of your project, your team, and all other surrounding details. They will all inform your final decision.</p>\n<p>To help in that process, I’ve defined our own set of key indicators that will give you an idea of how we’re measuring the value of each of the leading <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend development</a> frameworks covered in this article.</p>\n<ol>\n<li><strong>Performance:</strong> How well does the frontend framework handle real-world scenarios, including page load times, rendering speed, and efficient resource use?</li>\n<li><strong>Popularity and Community Support:</strong> Is there a large community around the framework? How easy is it to find tutorials, forums, and third-party tools?</li>\n<li><strong>Learning Curve:</strong> Is the framework an easy <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">frontend developer skill</a> to learn for new devs, or does it require mastering complex patterns and paradigms?</li>\n<li><strong>Ecosystem and Extensibility:</strong> Does the framework offer a robust ecosystem of libraries, plugins, and tooling to extend its functionality?</li>\n<li><strong>Scalability and Flexibility:</strong> Can the framework handle both small and large projects? Is it flexible enough to support different project types, from single-page applications (SPAs) to complex enterprise solutions?</li>\n<li><strong>Future-Proofing:</strong> Is the framework actively maintained and evolving? Will it remain relevant in the next few years, based on trends and support?</li>\n</ol>\n<h3 id=\"my-go-to-frontend-framework-of-choice\">My go-to frontend framework of choice</h3>\n<p>My go-to framework is React because it has the highest ecosystem score and is one of the most future-proofed ones.</p>\n<p>I’ve applied the above criteria to the best frontend development frameworks I’m covering below in this guide. This table gives you a snapshot view of how they all compare according to my ratings, and I’ll explain the details further below.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/table-of-frameworks-yu22p.png\" alt=\"table of frameworks\"></p>\n<p>Of course, the choice of React is mine, and mine alone. You have to consider your own projects and your own context to understand what the best choice for you would be.</p>\n<p>Let’s get into the selection and what their strengths and weaknesses are to help you select the right one for you.</p>\n<h2 id=\"top-7-frontend-development-frameworks-in-2025\">Top 7 Frontend Development Frameworks in 2025</h2>\n<h3 id=\"react\">React</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/react-logo-d5ice.png\" alt=\"React\"></p>\n<p>React was created by Facebook in 2013 and has since become one of the most popular frontend frameworks (though technically a library). Initially developed to solve the challenges of building dynamic and complex user interfaces for Facebook’s apps, React introduced the revolutionary concept of the virtual DOM (Document Object Model), which allowed developers to efficiently update only the parts of the UI that changed instead of re-rendering the entire page.</p>\n<h4 id=\"performance\">Performance</h4>\n<p>React uses a virtual DOM (the Virtual Document Object Model) to optimize performance by minimizing the number of direct manipulations to the actual DOM. This allows React to efficiently update only the components that need to change, rather than re-rendering the entire page. While React is fast, performance can be impacted in large applications if not managed carefully, especially with unnecessary re-renders or poorly optimized state management (two concepts that have created a lot of literature around them, and yet, most developers still get wrong).</p>\n<p><strong>⭐ Rating: 4/5</strong></p>\n<h4 id=\"popularity-and-community-support\">Popularity and Community Support</h4>\n<p>React is one of the most popular frontend frameworks worldwide, with widespread adoption in both small and large-scale applications. Its massive community means there’s a wealth of tutorials, libraries, and third-party tools available. With strong backing from Meta and continuous contributions from developers globally, React has one of the richest ecosystems and the largest support networks.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"learning-curve\">Learning Curve</h4>\n<p>React has a moderate learning curve. It’s relatively easy to get started with, especially if you’re familiar with JavaScript, but understanding concepts like JSX and hooks can take some time (especially if you throw in the relatively new server components). Once you grasp the basics, React becomes easier to work with, but mastering advanced patterns and state management solutions can add complexity.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility\">Ecosystem and Extensibility</h4>\n<p>React has one of the most mature and extensive ecosystems in the frontend space. With a vast selection of libraries, tools, and plugins, React can be extended to meet virtually any development need. Key libraries like React Router (for routing) and Redux (for state management) are widely adopted, and there are countless third-party components available. React’s ecosystem is one of its greatest strengths, offering flexibility and extensibility for all kinds of projects.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"scalability-and-flexibility\">Scalability and Flexibility</h4>\n<p>React is highly flexible and can scale to meet the needs of both small and large applications. Its component-based architecture allows for modular development, making it easy to manage complex UIs. React is adaptable to various types of projects, from simple SPAs to large, enterprise-level applications. However, managing state in larger applications can become challenging, often requiring the use of external tools like Redux or Context API for better scalability.</p>\n<p><strong>⭐ Rating: 4.5/5</strong></p>\n<h4 id=\"future-proofing\">Future-Proofing</h4>\n<p>React remains one of the most future-proof frameworks, with continuous updates and strong backing from Meta (Facebook). Its widespread adoption ensures that it will be well-supported for years to come. The ecosystem is mature, but React is constantly evolving with features like concurrent rendering and server-side components. The size of the community and corporate support make React a safe bet for long-term projects.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"vuejs\">Vue.js</h3>\n<h3 id=\"\"><img src=\"https://assets.roadmap.sh/guest/vuejs-logo-b8w07.png\" alt=\"vuejs\"></h3>\n<p>Vue.js was developed in 2014 by Evan You, who had previously worked on AngularJS at Google. His goal was to create a framework that combined the best parts of Angular’s templating system with the simplicity and flexibility of modern JavaScript libraries like React. Vue is known for its progressive nature, which means developers can incrementally adopt its features without having to completely rewrite an existing project.</p>\n<h4 id=\"performance-1\">Performance</h4>\n<p>Vue’s reactivity system provides a highly efficient way to track changes to data and update the DOM only when necessary. Its virtual DOM implementation is lightweight and fast, making Vue a strong performer for both small and large applications. Vue 3’s Composition API has further optimized performance by enabling more granular control over component updates.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"popularity-and-community-support-1\">Popularity and Community Support:</h4>\n<p>Vue.js has grown significantly in popularity, especially in regions like China and Europe, and is widely adopted by startups and smaller companies. Although it doesn’t have the corporate backing of React or Angular, its community is passionate, and the framework enjoys strong support from individual contributors. Vue’s ecosystem is robust, with many official libraries and third-party plugins, making it a favorite among developers looking for a balance of simplicity and power.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"learning-curve-1\">Learning Curve</h4>\n<p>Vue’s syntax is clean and straightforward, with a structure that is easy to understand even for those new to frontend frameworks. Features like two-way data binding and directives are intuitive, making Vue much easier to pick up compared to React or Angular.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-1\">Ecosystem and Extensibility</h4>\n<p>Vue has a rich and growing ecosystem, with many official libraries like Vue Router, Vuex (for state management), and Vue CLI (for project setup). Additionally, its ecosystem includes many high-quality third-party plugins that make it easy to extend Vue applications. While not as large as React’s, Vue’s ecosystem is well-curated and highly effective, making it both powerful and developer-friendly.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"scalability-and-flexibility-1\">Scalability and Flexibility</h4>\n<p>Vue is extremely flexible and scalable. It is designed to be incrementally adoptable, which means you can use it in small parts of a project or as the foundation for a large-scale application. Vue’s core libraries, along with tools like Vuex, make it highly scalable.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"future-proofing-1\">Future-Proofing</h4>\n<p>Vue is actively maintained and supported by a strong open-source community. Its development pace is steady. While it doesn’t have the same level of corporate backing as React or Angular, its growing popularity and enthusiastic community ensure its longevity. Vue is a solid choice for long-lasting projects.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h3 id=\"angular\">Angular</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/angular-logo-tr4wg.png\" alt=\"Angular\"></p>\n<p>Angular was first introduced by Google in 2010 as AngularJS, a framework that revolutionized web development by introducing two-way data binding and dependency injection. However, AngularJS eventually became difficult to maintain as applications grew more complex, leading Google to rewrite the framework from the ground up in 2016 with the release of Angular 2 (commonly referred to simply as “Angular”).</p>\n<h4 id=\"performance-2\">Performance</h4>\n<p>Angular offers solid performance, especially in large enterprise applications. It uses a change detection mechanism combined with the Ahead-of-Time (AOT) compiler to optimize performance by compiling templates into JavaScript code before the browser runs them. The built-in optimizations are robust, but Angular’s size and complexity can lead to performance overhead if not managed correctly.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"popularity-and-community-support-2\">Popularity and Community Support</h4>\n<p>Angular is backed by Google and is a popular choice for enterprise-level applications, especially in larger organizations. Its community is active, and Google’s long-term support ensures regular updates and improvements. Angular has a strong presence in corporate environments, and its ecosystem includes official tooling and libraries. However, it is less commonly used by smaller teams and individual developers compared to React and Vue.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"learning-curve-2\">Learning Curve</h4>\n<p>Angular has a steep learning curve due to its complexity and reliance on TypeScript. New web developers may find it challenging to grasp Angular’s concepts, such as dependency injection, decorators, and modules. The comprehensive nature of Angular also means there’s a lot to learn before you can be fully productive, but for experienced developers working on large-scale applications, the structure and tooling can be highly beneficial.</p>\n<p>⭐ <strong>Rating: 3/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-2\">Ecosystem and Extensibility</h4>\n<p>Angular’s ecosystem is comprehensive and fully integrated, offering everything developers need right out of the box. Angular includes official libraries for routing, HTTP client, forms, and more, all provided and maintained by Google. The Angular CLI is a robust tool for managing projects. However, Angular’s strict architecture means less flexibility when integrating with external libraries compared to React or Vue, though the ecosystem is extensive.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"scalability-and-flexibility-2\">Scalability and Flexibility</h4>\n<p>Angular is built with scalability in mind, making it ideal for large, complex applications. Its strict structure and reliance on TypeScript make it a great fit for projects that require clear architecture and maintainability over time. Angular’s modularity and out-of-the-box features like dependency injection and lazy loading enable it to handle enterprise-level web applications with multiple teams. However, its strictness can reduce flexibility for smaller, less complex projects.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"future-proofing-2\">Future-Proofing</h4>\n<p>Angular has a clear roadmap and long-term support, making it one of the most future-proof frameworks, especially for enterprise applications. Google’s regular updates ensure that Angular remains competitive in the evolving frontend ecosystem. Its TypeScript foundation, strong architecture, and large-scale adoption make it a reliable option for projects with long lifecycles.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h3 id=\"svelte\">Svelte</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/svelte-logo-mln7r.png\" alt=\"Svelte\"></p>\n<p>Svelte is a relatively new entrant in the frontend landscape, created by Rich Harris in 2016. Unlike traditional frameworks like React and Vue, which do much of their work in the browser, Svelte takes a different approach. It shifts most of the work to compile time, meaning that the framework compiles the application code into optimized vanilla JavaScript during the build process, resulting in highly efficient and fast-running code.</p>\n<h4 id=\"performance-3\">Performance</h4>\n<p>Svelte takes a unique approach to performance by compiling components into highly optimized vanilla JavaScript at build time, removing the need for a virtual DOM entirely. This leads to very fast runtime performance and smaller bundle sizes, as only the necessary code is shipped to the browser. Svelte excels in small, fast-loading applications, making it one of the fastest frontend frameworks available.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"popularity-and-community-support-3\">Popularity and Community Support</h4>\n<p>Svelte has seen rapid growth in popularity (partially due to its novel approach). While its community is smaller compared to React, Vue, or Angular, it’s highly engaged and growing steadily. Svelte has fewer third-party libraries and tools, but the community is working hard to expand its ecosystem. It’s particularly popular for smaller projects and developers who want a minimalistic framework.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"learning-curve-3\">Learning Curve</h4>\n<p>Svelte is relatively easy to learn, especially for web developers familiar with modern JavaScript. Its component-based structure is intuitive, and there’s no need to learn a virtual DOM or complex state management patterns. The absence of a virtual DOM and the simplicity of Svelte’s syntax make it one of the easiest frontend frameworks to pick up.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-3\">Ecosystem and Extensibility</h4>\n<p>Svelte’s ecosystem is still maturing compared to more established frameworks. While it lacks the extensive third-party library support of React or Vue, Svelte’s core tools like SvelteKit (for building full-stack applications) provide much of what is needed for most use cases. That said, the growing community is actively contributing to expanding the ecosystem and its extensive documentation.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"scalability-and-flexibility-3\">Scalability and Flexibility</h4>\n<p>Svelte is highly flexible and performs well in small to medium-sized projects. It’s great at creating fast, lightweight applications with minimal boilerplate. While Svelte’s compile-time approach leads to excellent performance, the truth is Svelte is still too new and untested, so its scalability for very large projects or teams is still to be determined.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"future-proofing-3\">Future-Proofing</h4>\n<p>Svelte is gaining momentum as a modern, high-performance framework, and its unique approach has attracted a lot of attention. While the community is still smaller than that of React or Vue, it is growing rapidly, and the introduction of tools like SvelteKit further enhances its long-term viability. Svelte’s focus on simplicity and performance means it has the potential to become a significant player, but it’s still early in terms of large-scale enterprise adoption.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h3 id=\"solidjs\">Solid.js</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/solid-logo-4sh7s.png\" alt=\"Solidjs\"></p>\n<p>Solid.js is a more recent addition to the frontend ecosystem, developed by Ryan Carniato in 2018. Inspired by React’s declarative style, Solid.js seeks to offer similar features but with even better performance by using a fine-grained reactivity system. Unlike React, which uses a virtual DOM, Solid compiles its reactive components down to fine-grained, efficient updates, reducing overhead and increasing speed.</p>\n<h4 id=\"performance-4\">Performance</h4>\n<p>Solid.js is designed for performance, using a fine-grained reactivity system to ensure that only the necessary parts of the DOM are updated. This eliminates the need for a virtual DOM, resulting in highly efficient rendering and state updates. Solid’s performance is often considered one of the best in the frontend space, especially for applications with complex state management.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"popularity-and-community-support-4\">Popularity and Community Support</h4>\n<p>Solid.js is still a relatively new player in the frontend space, but it is gaining traction due to its high performance and fine-grained reactivity model. The community is smaller compared to other frameworks but highly enthusiastic, and interest in Solid.js is growing quickly. While it has fewer resources and libraries available compared to larger frameworks, it is gradually building a strong support network.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"learning-curve-4\">Learning Curve</h4>\n<p>Solid.js has a learning curve similar to React, particularly because of its JSX-like syntax. However, its fine-grained reactivity system introduces new concepts that might take some time to fully understand, especially for those new to reactive programming. While its reactivity model offers powerful performance benefits, frontend developers need to adjust to this different approach, making it slightly more challenging than React for beginners.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-4\">Ecosystem and Extensibility</h4>\n<p>Solid.js has a smaller but rapidly growing ecosystem. While it supports libraries like Solid Router for routing and integrates well with existing JavaScript tools, the number of available third-party extensions is still limited compared to React or Vue. Solid is seeing increasing contributions from the community, and as it grows in popularity, its ecosystem is expected to expand.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"scalability-and-flexibility-4\">Scalability and Flexibility</h4>\n<p>Solid.js, with its fine-grained reactivity, is extremely flexible and scales well for complex applications. Its unique reactivity model enables it to handle large, state-heavy applications with minimal overhead. While Solid is still proving itself in larger, enterprise-level environments, its design offers promising scalability. However, due to its newness, large-scale implementations are less common compared to more established frameworks like React or Angular.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"future-proofing-4\">Future-Proofing</h4>\n<p>Solid.js, although newer, is quickly gaining traction due to its performance benefits and innovative reactivity model. Its small but dedicated community is growing, and the framework’s architecture is built with modern web needs in mind. While it’s not yet widely adopted in enterprise environments, its potential for long-term use is promising, especially as more developers discover its benefits. However, its ecosystem is still developing.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h3 id=\"qwik\">Qwik</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/qwik-logo-3dfy8.png\" alt=\"Qwik\"></p>\n<p>Qwik, created by Misko Hevery (the creator of Angular), is an innovative frontend framework that aims to solve the problem of slow page load times by introducing a new architecture called “resumability.” Introduced in 2021 (making it the youngest frontend framework on this list), Qwik is designed to instantly load websites by only downloading and executing the minimal amount of code required to render the page, deferring the loading of other parts of the application until they are needed.</p>\n<h4 id=\"performance-5\">Performance</h4>\n<p>Qwik’s performance is built around its innovative resumable architecture, which optimizes for instant loading. It loads only the minimal amount of JavaScript needed to render the page, and additional code is loaded asynchronously as needed. This makes Qwik ideal for performance-critical applications, especially on slower devices and networks.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"popularity-and-community-support-5\">Popularity and Community Support</h4>\n<p>Qwik is an emerging framework with an innovative approach to performance. Its community is still in its early stages, but there is increasing interest due to its “resumable” architecture. Although the ecosystem is small, the framework’s unique features have caught the attention of developers looking to push the boundaries of frontend performance. As of 2024, Qwik’s community is expanding, though still much smaller than React or Vue.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"learning-curve-5\">Learning Curve</h4>\n<p>Qwik has a moderate learning curve, largely due to its new “resumable” approach to web development. Developers who are used to traditional frontend frameworks may find Qwik’s architecture and its emphasis on lazy loading and instant loading a bit unfamiliar. While the concepts are powerful, it can take time to fully grasp how to take advantage of Qwik’s unique features.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-5\">Ecosystem and Extensibility</h4>\n<p>Qwik’s ecosystem is still in its early stages, but it is designed to be compatible with existing tools and libraries. The framework’s emphasis on performance over complexity means that while it lacks a large number of third-party plugins, it is designed to work alongside existing technologies.</p>\n<p>⭐ <strong>Rating: 3/5</strong></p>\n<h4 id=\"scalability-and-flexibility-5\">Scalability and Flexibility</h4>\n<p>Qwik’s architecture is designed to handle scalability from the ground up. Its “resumable” approach allows applications to scale by loading only the necessary parts of the app on demand, making it particularly well-suited for performance-critical, large-scale projects. Although Qwik is still emerging, its emphasis on scalability and performance ensures it can grow with the demands of large, complex applications, at least on paper. Much like with Svelte, Qwik needs a lot more testing before we can draw a final verdict on its scalability.</p>\n<p>⭐ <strong>Rating: 4.5/5</strong></p>\n<h4 id=\"future-proofing-5\">Future-Proofing</h4>\n<p>Qwik is an exciting new frontend framework that introduces a novel approach with its resumable architecture, positioning it well for future needs around performance and scalability. Though still emerging, Qwik’s design aligns with modern web development process demands, particularly for fast-loading, performance-critical applications. If the community and ecosystem continue to grow, Qwik has strong future-proofing potential, especially for performance-sensitive projects.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h3 id=\"-1\"></h3>\n<h3 id=\"astro\">Astro</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/astro-logo-7rzp9.png\" alt=\"Astro\"></p>\n<p>Astro was created by the team at Snowpack in 2021 and is a frontend framework focused on static site generation with minimal JavaScript. Astro takes a unique approach by allowing developers to build components using popular frameworks like React, Vue, and Svelte, but it only ships the HTML to the browser, greatly reducing the amount of JavaScript that needs to be processed by the client.</p>\n<h4 id=\"performance-6\">Performance</h4>\n<p>Astro is optimized for static site generation, shipping little to no JavaScript to the browser by default. This approach leads to very fast page load times, especially for content-heavy sites. While Astro does allow for interactive components, its performance is generally excellent due to the minimal JavaScript footprint on the client side.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"popularity-and-community-support-6\">Popularity and Community Support</h4>\n<p>Astro is rapidly gaining popularity, especially in the static site generation space. Its framework-agnostic approach and performance optimizations have led to a growing community. While smaller than React or Vue, Astro’s community is highly active, with increasing adoption for content-heavy websites and static site generation. The ecosystem is expanding quickly with new integrations and plugins.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"learning-curve-6\">Learning Curve</h4>\n<p>Astro is known for being easy to pick up, especially for developers already familiar with other frontend frameworks like React, Vue, or Svelte. Its framework-agnostic approach allows developers to use familiar components and libraries while taking advantage of Astro’s static site generation features. Astro’s simplicity makes it an accessible choice for beginners and experienced developers alike.</p>\n<p>⭐ <strong>Rating: 5/5</strong></p>\n<h4 id=\"ecosystem-and-extensibility-6\">Ecosystem and Extensibility</h4>\n<p>Astro’s ecosystem is rapidly growing, with support for integrations with popular frameworks like React, Vue, and Svelte. Astro’s framework-agnostic approach allows developers to combine reusable components from different ecosystems in a single project. Its extensibility is also enhanced by its plugin system, which allows web developers to customize their creations even further.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h4 id=\"scalability-and-flexibility-6\">Scalability and Flexibility</h4>\n<p>Astro is highly flexible for static sites and excels in building fast, scalable content-heavy websites. Its architecture allows for scaling static sites with minimal client-side JavaScript, making it an excellent choice for projects like blogs, documentation sites, or e-commerce platforms. However, Astro is not designed for large-scale, dynamic web applications like React or Angular, limiting its scalability in highly interactive or complex projects.</p>\n<p>⭐ <strong>Rating: 3.5/5</strong></p>\n<h4 id=\"future-proofing-6\">Future-Proofing</h4>\n<p>Astro is rapidly growing in popularity, especially for static site generation, and its framework-agnostic approach ensures that it can work with future tools and technologies. As the need for fast, content-heavy websites continues to grow, Astro is well-positioned to meet that demand. Its unique architecture and growing ecosystem suggest it will remain relevant, especially for static sites, but its future-proofing for dynamic applications is less certain compared to other frontend frameworks.</p>\n<p>⭐ <strong>Rating: 4/5</strong></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The space of frontend development continues to evolve with an impressive list of frameworks and <a href=\"https://roadmap.sh/frontend/languages\" target=\"_blank\">languages</a> to choose from. Whether you’re aiming for performance, scalability, ease of use, or future-proofing, each frontend framework brings something unique to the table.</p>\n<ul>\n<li><strong>React</strong> remains a reliable choice for large-scale applications.</li>\n<li><strong>Vue.js</strong> offers a perfect balance of simplicity and scalability.</li>\n<li><strong>Angular</strong> is the go-to for enterprise-level projects.</li>\n<li><strong>Svelte</strong> and <strong>Solid.js</strong> are great options for developers who prioritize performance and simplicity.</li>\n<li><strong>Qwik</strong> is an exciting new contender focused on instant loading and performance.</li>\n<li><strong>Astro</strong> shines in static site generation, combining a modern approach with the ability to integrate multiple frameworks for highly flexible, content-heavy sites.</li>\n</ul>\n<p>In the end, the choice comes down to your specific project needs. Whatever you’re building, there’s a framework here that can help you succeed.</p>\n<p>The future of frontend development is exciting, and these frontend frameworks ensure you’re equipped for whatever challenges lie ahead.</p>";

				const frontmatter$K = {"title":"Top 7 Frontend Frameworks to Use in 2025: Pro Advice","description":"Get expert advice on frontend frameworks for 2024. Elevate your web development process with these top picks.","authorId":"fernando","excludedBySlug":"/frontend/frameworks","seo":{"title":"Top 7 Frontend Frameworks to Use in 2025: Pro Advice","description":"Get expert advice on frontend frameworks for 2024. Elevate your web development process with these top picks.","ogImageUrl":"https://assets.roadmap.sh/guest/top-frontend-frameworks-wmqwc.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-09-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$K = "/workspace/src/data/guides/frontend-frameworks.md";
				const url$K = undefined;
				function rawContent$K() {
					return "   \n                                                             \n                                                                                                                            \n                  \n                                      \n    \n                                                               \n                                                                                                                              \n                                                                                 \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Best frontend frameworks](https://assets.roadmap.sh/guest/top-frontend-frameworks-wmqwc.jpg)\n\nWith the growing complexity of web applications, selecting the right frontend framework is more important than ever. Your choice will impact performance, scalability, and development speed. Not to mention the future-proofing of your application.\n\nIn 2024, web development is increasingly about building fast, scalable, and highly interactive user interfaces. Frontend frameworks now need to support real-time interactions, handle large-scale data, and provide excellent developer experiences by simplifying the web development process.\n\nPicking the right frontend framework isn't just about what's popular—it's about finding the tool that fits your project’s needs, whether you’re building a small static site or a large, complex application.\n\nThe top frontend frameworks for web development that I’ll cover as part of this article are:\n\n* React\n* VueJS\n* Angular\n* Svelte\n* Solid.js\n* Qwik\n* Astro\n\n## Criteria for Evaluating Frontend Frameworks\n\nFinding what the “best frontend framework” looks like is not easy. In fact, it’s impossible without the particular characteristics of your project, your team, and all other surrounding details. They will all inform your final decision.\n\nTo help in that process, I’ve defined our own set of key indicators that will give you an idea of how we’re measuring the value of each of the leading [frontend development](https://roadmap.sh/frontend) frameworks covered in this article.\n\n1. **Performance:** How well does the frontend framework handle real-world scenarios, including page load times, rendering speed, and efficient resource use?\n2. **Popularity and Community Support:** Is there a large community around the framework? How easy is it to find tutorials, forums, and third-party tools?\n3. **Learning Curve:** Is the framework an easy [frontend developer skill](https://roadmap.sh/frontend/developer-skills) to learn for new devs, or does it require mastering complex patterns and paradigms?\n4. **Ecosystem and Extensibility:** Does the framework offer a robust ecosystem of libraries, plugins, and tooling to extend its functionality?\n5. **Scalability and Flexibility:** Can the framework handle both small and large projects? Is it flexible enough to support different project types, from single-page applications (SPAs) to complex enterprise solutions?\n6. **Future-Proofing:** Is the framework actively maintained and evolving? Will it remain relevant in the next few years, based on trends and support?\n\n### My go-to frontend framework of choice\n\nMy go-to framework is React because it has the highest ecosystem score and is one of the most future-proofed ones.\n\nI’ve applied the above criteria to the best frontend development frameworks I’m covering below in this guide. This table gives you a snapshot view of how they all compare according to my ratings, and I’ll explain the details further below.\n\n![table of frameworks](https://assets.roadmap.sh/guest/table-of-frameworks-yu22p.png)\n\nOf course, the choice of React is mine, and mine alone. You have to consider your own projects and your own context to understand what the best choice for you would be.\n\nLet’s get into the selection and what their strengths and weaknesses are to help you select the right one for you.\n\n## Top 7 Frontend Development Frameworks in 2025\n\n### React\n\n![React](https://assets.roadmap.sh/guest/react-logo-d5ice.png)\n\nReact was created by Facebook in 2013 and has since become one of the most popular frontend frameworks (though technically a library). Initially developed to solve the challenges of building dynamic and complex user interfaces for Facebook’s apps, React introduced the revolutionary concept of the virtual DOM (Document Object Model), which allowed developers to efficiently update only the parts of the UI that changed instead of re-rendering the entire page.\n\n#### Performance\n\nReact uses a virtual DOM (the Virtual Document Object Model) to optimize performance by minimizing the number of direct manipulations to the actual DOM. This allows React to efficiently update only the components that need to change, rather than re-rendering the entire page. While React is fast, performance can be impacted in large applications if not managed carefully, especially with unnecessary re-renders or poorly optimized state management (two concepts that have created a lot of literature around them, and yet, most developers still get wrong).\n\n**⭐ Rating: 4/5**\n\n#### Popularity and Community Support\n\nReact is one of the most popular frontend frameworks worldwide, with widespread adoption in both small and large-scale applications. Its massive community means there's a wealth of tutorials, libraries, and third-party tools available. With strong backing from Meta and continuous contributions from developers globally, React has one of the richest ecosystems and the largest support networks.\n\n⭐ **Rating: 5/5**\n\n#### Learning Curve\n\nReact has a moderate learning curve. It’s relatively easy to get started with, especially if you’re familiar with JavaScript, but understanding concepts like JSX and hooks can take some time (especially if you throw in the relatively new server components). Once you grasp the basics, React becomes easier to work with, but mastering advanced patterns and state management solutions can add complexity.\n\n⭐ **Rating: 3.5/5**\n\n#### Ecosystem and Extensibility\n\nReact has one of the most mature and extensive ecosystems in the frontend space. With a vast selection of libraries, tools, and plugins, React can be extended to meet virtually any development need. Key libraries like React Router (for routing) and Redux (for state management) are widely adopted, and there are countless third-party components available. React's ecosystem is one of its greatest strengths, offering flexibility and extensibility for all kinds of projects.\n\n⭐ **Rating: 5/5**\n\n#### Scalability and Flexibility\n\nReact is highly flexible and can scale to meet the needs of both small and large applications. Its component-based architecture allows for modular development, making it easy to manage complex UIs. React is adaptable to various types of projects, from simple SPAs to large, enterprise-level applications. However, managing state in larger applications can become challenging, often requiring the use of external tools like Redux or Context API for better scalability.\n\n**⭐ Rating: 4.5/5**\n\n#### Future-Proofing\n\nReact remains one of the most future-proof frameworks, with continuous updates and strong backing from Meta (Facebook). Its widespread adoption ensures that it will be well-supported for years to come. The ecosystem is mature, but React is constantly evolving with features like concurrent rendering and server-side components. The size of the community and corporate support make React a safe bet for long-term projects.\n\n⭐ **Rating: 5/5**\n\n### Vue.js\n\n### ![vuejs](https://assets.roadmap.sh/guest/vuejs-logo-b8w07.png)\n\nVue.js was developed in 2014 by Evan You, who had previously worked on AngularJS at Google. His goal was to create a framework that combined the best parts of Angular’s templating system with the simplicity and flexibility of modern JavaScript libraries like React. Vue is known for its progressive nature, which means developers can incrementally adopt its features without having to completely rewrite an existing project.\n\n#### Performance\n\nVue’s reactivity system provides a highly efficient way to track changes to data and update the DOM only when necessary. Its virtual DOM implementation is lightweight and fast, making Vue a strong performer for both small and large applications. Vue 3’s Composition API has further optimized performance by enabling more granular control over component updates.\n\n⭐ **Rating: 4.5/5**\n\n#### Popularity and Community Support:\n\nVue.js has grown significantly in popularity, especially in regions like China and Europe, and is widely adopted by startups and smaller companies. Although it doesn't have the corporate backing of React or Angular, its community is passionate, and the framework enjoys strong support from individual contributors. Vue’s ecosystem is robust, with many official libraries and third-party plugins, making it a favorite among developers looking for a balance of simplicity and power.\n\n⭐ **Rating: 4.5/5**\n\n#### Learning Curve\n\nVue’s syntax is clean and straightforward, with a structure that is easy to understand even for those new to frontend frameworks. Features like two-way data binding and directives are intuitive, making Vue much easier to pick up compared to React or Angular.\n\n⭐ **Rating: 4.5/5**\n\n#### Ecosystem and Extensibility\n\nVue has a rich and growing ecosystem, with many official libraries like Vue Router, Vuex (for state management), and Vue CLI (for project setup). Additionally, its ecosystem includes many high-quality third-party plugins that make it easy to extend Vue applications. While not as large as React’s, Vue’s ecosystem is well-curated and highly effective, making it both powerful and developer-friendly.\n\n⭐ **Rating: 4.5/5**\n\n#### Scalability and Flexibility\n\nVue is extremely flexible and scalable. It is designed to be incrementally adoptable, which means you can use it in small parts of a project or as the foundation for a large-scale application. Vue’s core libraries, along with tools like Vuex, make it highly scalable.\n\n⭐ **Rating: 4.5/5**\n\n#### Future-Proofing\n\nVue is actively maintained and supported by a strong open-source community. Its development pace is steady. While it doesn’t have the same level of corporate backing as React or Angular, its growing popularity and enthusiastic community ensure its longevity. Vue is a solid choice for long-lasting projects.\n\n⭐ **Rating: 4.5/5**\n\n### Angular\n\n![Angular](https://assets.roadmap.sh/guest/angular-logo-tr4wg.png)\n\nAngular was first introduced by Google in 2010 as AngularJS, a framework that revolutionized web development by introducing two-way data binding and dependency injection. However, AngularJS eventually became difficult to maintain as applications grew more complex, leading Google to rewrite the framework from the ground up in 2016 with the release of Angular 2 (commonly referred to simply as \"Angular\").\n\n#### Performance\n\nAngular offers solid performance, especially in large enterprise applications. It uses a change detection mechanism combined with the Ahead-of-Time (AOT) compiler to optimize performance by compiling templates into JavaScript code before the browser runs them. The built-in optimizations are robust, but Angular’s size and complexity can lead to performance overhead if not managed correctly.\n\n⭐ **Rating: 4/5**\n\n#### Popularity and Community Support\n\nAngular is backed by Google and is a popular choice for enterprise-level applications, especially in larger organizations. Its community is active, and Google’s long-term support ensures regular updates and improvements. Angular has a strong presence in corporate environments, and its ecosystem includes official tooling and libraries. However, it is less commonly used by smaller teams and individual developers compared to React and Vue.\n\n⭐ **Rating: 4.5/5**\n\n#### Learning Curve\n\nAngular has a steep learning curve due to its complexity and reliance on TypeScript. New web developers may find it challenging to grasp Angular’s concepts, such as dependency injection, decorators, and modules. The comprehensive nature of Angular also means there’s a lot to learn before you can be fully productive, but for experienced developers working on large-scale applications, the structure and tooling can be highly beneficial.\n\n⭐ **Rating: 3/5**\n\n#### Ecosystem and Extensibility\n\nAngular’s ecosystem is comprehensive and fully integrated, offering everything developers need right out of the box. Angular includes official libraries for routing, HTTP client, forms, and more, all provided and maintained by Google. The Angular CLI is a robust tool for managing projects. However, Angular's strict architecture means less flexibility when integrating with external libraries compared to React or Vue, though the ecosystem is extensive.\n\n⭐ **Rating: 4.5/5**\n\n#### Scalability and Flexibility\n\nAngular is built with scalability in mind, making it ideal for large, complex applications. Its strict structure and reliance on TypeScript make it a great fit for projects that require clear architecture and maintainability over time. Angular’s modularity and out-of-the-box features like dependency injection and lazy loading enable it to handle enterprise-level web applications with multiple teams. However, its strictness can reduce flexibility for smaller, less complex projects.\n\n⭐ **Rating: 5/5**\n\n#### Future-Proofing\n\nAngular has a clear roadmap and long-term support, making it one of the most future-proof frameworks, especially for enterprise applications. Google’s regular updates ensure that Angular remains competitive in the evolving frontend ecosystem. Its TypeScript foundation, strong architecture, and large-scale adoption make it a reliable option for projects with long lifecycles.\n\n⭐ **Rating: 5/5**\n\n### Svelte\n\n![Svelte](https://assets.roadmap.sh/guest/svelte-logo-mln7r.png)\n\nSvelte is a relatively new entrant in the frontend landscape, created by Rich Harris in 2016\\. Unlike traditional frameworks like React and Vue, which do much of their work in the browser, Svelte takes a different approach. It shifts most of the work to compile time, meaning that the framework compiles the application code into optimized vanilla JavaScript during the build process, resulting in highly efficient and fast-running code.\n\n#### Performance\n\nSvelte takes a unique approach to performance by compiling components into highly optimized vanilla JavaScript at build time, removing the need for a virtual DOM entirely. This leads to very fast runtime performance and smaller bundle sizes, as only the necessary code is shipped to the browser. Svelte excels in small, fast-loading applications, making it one of the fastest frontend frameworks available.\n\n⭐ **Rating: 5/5**\n\n#### Popularity and Community Support\n\nSvelte has seen rapid growth in popularity (partially due to its novel approach). While its community is smaller compared to React, Vue, or Angular, it’s highly engaged and growing steadily. Svelte has fewer third-party libraries and tools, but the community is working hard to expand its ecosystem. It's particularly popular for smaller projects and developers who want a minimalistic framework.\n\n⭐ **Rating: 4/5**\n\n#### Learning Curve\n\nSvelte is relatively easy to learn, especially for web developers familiar with modern JavaScript. Its component-based structure is intuitive, and there’s no need to learn a virtual DOM or complex state management patterns. The absence of a virtual DOM and the simplicity of Svelte’s syntax make it one of the easiest frontend frameworks to pick up.\n\n⭐ **Rating: 4.5/5**\n\n#### Ecosystem and Extensibility\n\nSvelte’s ecosystem is still maturing compared to more established frameworks. While it lacks the extensive third-party library support of React or Vue, Svelte’s core tools like SvelteKit (for building full-stack applications) provide much of what is needed for most use cases. That said, the growing community is actively contributing to expanding the ecosystem and its extensive documentation.\n\n⭐ **Rating: 3.5/5**\n\n#### Scalability and Flexibility\n\nSvelte is highly flexible and performs well in small to medium-sized projects. It’s great at creating fast, lightweight applications with minimal boilerplate. While Svelte’s compile-time approach leads to excellent performance, the truth is Svelte is still too new and untested, so its scalability for very large projects or teams is still to be determined.\n\n⭐ **Rating: 4/5**\n\n#### Future-Proofing\n\nSvelte is gaining momentum as a modern, high-performance framework, and its unique approach has attracted a lot of attention. While the community is still smaller than that of React or Vue, it is growing rapidly, and the introduction of tools like SvelteKit further enhances its long-term viability. Svelte’s focus on simplicity and performance means it has the potential to become a significant player, but it's still early in terms of large-scale enterprise adoption.\n\n⭐ **Rating: 4/5**\n\n### Solid.js\n\n![Solidjs](https://assets.roadmap.sh/guest/solid-logo-4sh7s.png)\n\nSolid.js is a more recent addition to the frontend ecosystem, developed by Ryan Carniato in 2018\\. Inspired by React’s declarative style, Solid.js seeks to offer similar features but with even better performance by using a fine-grained reactivity system. Unlike React, which uses a virtual DOM, Solid compiles its reactive components down to fine-grained, efficient updates, reducing overhead and increasing speed.\n\n#### Performance\n\nSolid.js is designed for performance, using a fine-grained reactivity system to ensure that only the necessary parts of the DOM are updated. This eliminates the need for a virtual DOM, resulting in highly efficient rendering and state updates. Solid’s performance is often considered one of the best in the frontend space, especially for applications with complex state management.\n\n⭐ **Rating: 5/5**\n\n#### Popularity and Community Support\n\nSolid.js is still a relatively new player in the frontend space, but it is gaining traction due to its high performance and fine-grained reactivity model. The community is smaller compared to other frameworks but highly enthusiastic, and interest in Solid.js is growing quickly. While it has fewer resources and libraries available compared to larger frameworks, it is gradually building a strong support network.\n\n⭐ **Rating: 3.5/5**\n\n#### Learning Curve\n\nSolid.js has a learning curve similar to React, particularly because of its JSX-like syntax. However, its fine-grained reactivity system introduces new concepts that might take some time to fully understand, especially for those new to reactive programming. While its reactivity model offers powerful performance benefits, frontend developers need to adjust to this different approach, making it slightly more challenging than React for beginners.\n\n⭐ **Rating: 3.5/5**\n\n#### Ecosystem and Extensibility\n\nSolid.js has a smaller but rapidly growing ecosystem. While it supports libraries like Solid Router for routing and integrates well with existing JavaScript tools, the number of available third-party extensions is still limited compared to React or Vue. Solid is seeing increasing contributions from the community, and as it grows in popularity, its ecosystem is expected to expand.\n\n⭐ **Rating: 3.5/5**\n\n#### Scalability and Flexibility\n\nSolid.js, with its fine-grained reactivity, is extremely flexible and scales well for complex applications. Its unique reactivity model enables it to handle large, state-heavy applications with minimal overhead. While Solid is still proving itself in larger, enterprise-level environments, its design offers promising scalability. However, due to its newness, large-scale implementations are less common compared to more established frameworks like React or Angular.\n\n⭐ **Rating: 4/5**\n\n#### Future-Proofing\n\nSolid.js, although newer, is quickly gaining traction due to its performance benefits and innovative reactivity model. Its small but dedicated community is growing, and the framework's architecture is built with modern web needs in mind. While it’s not yet widely adopted in enterprise environments, its potential for long-term use is promising, especially as more developers discover its benefits. However, its ecosystem is still developing.\n\n⭐ **Rating: 4/5**\n\n### Qwik\n\n![Qwik](https://assets.roadmap.sh/guest/qwik-logo-3dfy8.png)\n\nQwik, created by Misko Hevery (the creator of Angular), is an innovative frontend framework that aims to solve the problem of slow page load times by introducing a new architecture called \"resumability.\" Introduced in 2021 (making it the youngest frontend framework on this list), Qwik is designed to instantly load websites by only downloading and executing the minimal amount of code required to render the page, deferring the loading of other parts of the application until they are needed.\n\n#### Performance\n\nQwik’s performance is built around its innovative resumable architecture, which optimizes for instant loading. It loads only the minimal amount of JavaScript needed to render the page, and additional code is loaded asynchronously as needed. This makes Qwik ideal for performance-critical applications, especially on slower devices and networks.\n\n⭐ **Rating: 5/5**\n\n#### Popularity and Community Support\n\nQwik is an emerging framework with an innovative approach to performance. Its community is still in its early stages, but there is increasing interest due to its \"resumable\" architecture. Although the ecosystem is small, the framework’s unique features have caught the attention of developers looking to push the boundaries of frontend performance. As of 2024, Qwik's community is expanding, though still much smaller than React or Vue.\n\n⭐ **Rating: 3.5/5**\n\n#### Learning Curve\n\nQwik has a moderate learning curve, largely due to its new \"resumable\" approach to web development. Developers who are used to traditional frontend frameworks may find Qwik’s architecture and its emphasis on lazy loading and instant loading a bit unfamiliar. While the concepts are powerful, it can take time to fully grasp how to take advantage of Qwik’s unique features.\n\n⭐ **Rating: 3.5/5**\n\n#### Ecosystem and Extensibility\n\nQwik’s ecosystem is still in its early stages, but it is designed to be compatible with existing tools and libraries. The framework’s emphasis on performance over complexity means that while it lacks a large number of third-party plugins, it is designed to work alongside existing technologies.\n\n⭐ **Rating: 3/5**\n\n#### Scalability and Flexibility\n\nQwik’s architecture is designed to handle scalability from the ground up. Its \"resumable\" approach allows applications to scale by loading only the necessary parts of the app on demand, making it particularly well-suited for performance-critical, large-scale projects. Although Qwik is still emerging, its emphasis on scalability and performance ensures it can grow with the demands of large, complex applications, at least on paper. Much like with Svelte, Qwik needs a lot more testing before we can draw a final verdict on its scalability.\n\n⭐ **Rating: 4.5/5**\n\n#### Future-Proofing\n\nQwik is an exciting new frontend framework that introduces a novel approach with its resumable architecture, positioning it well for future needs around performance and scalability. Though still emerging, Qwik’s design aligns with modern web development process demands, particularly for fast-loading, performance-critical applications. If the community and ecosystem continue to grow, Qwik has strong future-proofing potential, especially for performance-sensitive projects.\n\n⭐ **Rating: 4/5**\n\n###\n\n### Astro\n\n![Astro](https://assets.roadmap.sh/guest/astro-logo-7rzp9.png)\n\nAstro was created by the team at Snowpack in 2021 and is a frontend framework focused on static site generation with minimal JavaScript. Astro takes a unique approach by allowing developers to build components using popular frameworks like React, Vue, and Svelte, but it only ships the HTML to the browser, greatly reducing the amount of JavaScript that needs to be processed by the client.\n\n#### Performance\n\nAstro is optimized for static site generation, shipping little to no JavaScript to the browser by default. This approach leads to very fast page load times, especially for content-heavy sites. While Astro does allow for interactive components, its performance is generally excellent due to the minimal JavaScript footprint on the client side.\n\n⭐ **Rating: 5/5**\n\n#### Popularity and Community Support\n\nAstro is rapidly gaining popularity, especially in the static site generation space. Its framework-agnostic approach and performance optimizations have led to a growing community. While smaller than React or Vue, Astro’s community is highly active, with increasing adoption for content-heavy websites and static site generation. The ecosystem is expanding quickly with new integrations and plugins.\n\n⭐ **Rating: 4/5**\n\n#### Learning Curve\n\nAstro is known for being easy to pick up, especially for developers already familiar with other frontend frameworks like React, Vue, or Svelte. Its framework-agnostic approach allows developers to use familiar components and libraries while taking advantage of Astro’s static site generation features. Astro’s simplicity makes it an accessible choice for beginners and experienced developers alike.\n\n⭐ **Rating: 5/5**\n\n#### Ecosystem and Extensibility\n\nAstro’s ecosystem is rapidly growing, with support for integrations with popular frameworks like React, Vue, and Svelte. Astro’s framework-agnostic approach allows developers to combine reusable components from different ecosystems in a single project. Its extensibility is also enhanced by its plugin system, which allows web developers to customize their creations even further.\n\n⭐ **Rating: 4/5**\n\n#### Scalability and Flexibility\n\nAstro is highly flexible for static sites and excels in building fast, scalable content-heavy websites. Its architecture allows for scaling static sites with minimal client-side JavaScript, making it an excellent choice for projects like blogs, documentation sites, or e-commerce platforms. However, Astro is not designed for large-scale, dynamic web applications like React or Angular, limiting its scalability in highly interactive or complex projects.\n\n⭐ **Rating: 3.5/5**\n\n#### Future-Proofing\n\nAstro is rapidly growing in popularity, especially for static site generation, and its framework-agnostic approach ensures that it can work with future tools and technologies. As the need for fast, content-heavy websites continues to grow, Astro is well-positioned to meet that demand. Its unique architecture and growing ecosystem suggest it will remain relevant, especially for static sites, but its future-proofing for dynamic applications is less certain compared to other frontend frameworks.\n\n⭐ **Rating: 4/5**\n\n## Conclusion\n\nThe space of frontend development continues to evolve with an impressive list of frameworks and [languages](https://roadmap.sh/frontend/languages) to choose from. Whether you're aiming for performance, scalability, ease of use, or future-proofing, each frontend framework brings something unique to the table.\n\n* **React** remains a reliable choice for large-scale applications.\n* **Vue.js** offers a perfect balance of simplicity and scalability.\n* **Angular** is the go-to for enterprise-level projects.\n* **Svelte** and **Solid.js** are great options for developers who prioritize performance and simplicity.\n* **Qwik** is an exciting new contender focused on instant loading and performance.\n* **Astro** shines in static site generation, combining a modern approach with the ability to integrate multiple frameworks for highly flexible, content-heavy sites.\n\nIn the end, the choice comes down to your specific project needs. Whatever you’re building, there's a framework here that can help you succeed.\n\nThe future of frontend development is exciting, and these frontend frameworks ensure you're equipped for whatever challenges lie ahead.\n";
				}
				async function compiledContent$K() {
					return await html$K();
				}
				function getHeadings$K() {
					return [{"depth":2,"slug":"criteria-for-evaluating-frontend-frameworks","text":"Criteria for Evaluating Frontend Frameworks"},{"depth":3,"slug":"my-go-to-frontend-framework-of-choice","text":"My go-to frontend framework of choice"},{"depth":2,"slug":"top-7-frontend-development-frameworks-in-2025","text":"Top 7 Frontend Development Frameworks in 2025"},{"depth":3,"slug":"react","text":"React"},{"depth":4,"slug":"performance","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing","text":"Future-Proofing"},{"depth":3,"slug":"vuejs","text":"Vue.js"},{"depth":3,"slug":"","text":""},{"depth":4,"slug":"performance-1","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-1","text":"Popularity and Community Support:"},{"depth":4,"slug":"learning-curve-1","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-1","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-1","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-1","text":"Future-Proofing"},{"depth":3,"slug":"angular","text":"Angular"},{"depth":4,"slug":"performance-2","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-2","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve-2","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-2","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-2","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-2","text":"Future-Proofing"},{"depth":3,"slug":"svelte","text":"Svelte"},{"depth":4,"slug":"performance-3","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-3","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve-3","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-3","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-3","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-3","text":"Future-Proofing"},{"depth":3,"slug":"solidjs","text":"Solid.js"},{"depth":4,"slug":"performance-4","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-4","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve-4","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-4","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-4","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-4","text":"Future-Proofing"},{"depth":3,"slug":"qwik","text":"Qwik"},{"depth":4,"slug":"performance-5","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-5","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve-5","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-5","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-5","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-5","text":"Future-Proofing"},{"depth":3,"slug":"-1","text":""},{"depth":3,"slug":"astro","text":"Astro"},{"depth":4,"slug":"performance-6","text":"Performance"},{"depth":4,"slug":"popularity-and-community-support-6","text":"Popularity and Community Support"},{"depth":4,"slug":"learning-curve-6","text":"Learning Curve"},{"depth":4,"slug":"ecosystem-and-extensibility-6","text":"Ecosystem and Extensibility"},{"depth":4,"slug":"scalability-and-flexibility-6","text":"Scalability and Flexibility"},{"depth":4,"slug":"future-proofing-6","text":"Future-Proofing"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$K = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$K;
					content.file = file$K;
					content.url = url$K;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$K())}`;
				});

const __vite_glob_0_52 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$K,
	compiledContent: compiledContent$K,
	default: Content$K,
	file: file$K,
	frontmatter: frontmatter$K,
	getHeadings: getHeadings$K,
	rawContent: rawContent$K,
	url: url$K
}, Symbol.toStringTag, { value: 'Module' }));

const html$J = () => "<p><img src=\"https://assets.roadmap.sh/guest/frontend-developer-job-description-5fwzy.jpg\" alt=\"Frontend developer job description example and template.\"></p>\n<p>Frontend developers create the interface and experience that people interact with. They develop visually appealing and functional website components, such as buttons. Their work shapes how users see and interact with a company’s online presence. However, as a hiring manager, finding the right frontend developer for your team can be tough. It requires a thorough evaluation of a broad range of skills and know-how.</p>\n<p>A well-written developer job description is key to finding the right developer. The challenge, however, is writing a developer job description that attracts top talent. A poorly written job description can attract unqualified applicants and overlook top talent. If you want to hire top frontend developers, you must understand what skills and duties come with the job.</p>\n<p>In this guide, I will show you how to create a good front-end developer job description template based on my experience hiring <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end developers</a>. In the following sections, you’ll learn about the responsibilities, <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">skills</a>, and what to look for when hiring candidates.</p>\n<h2 id=\"frontend-developer-job-description-template\">Frontend developer job description template</h2>\n<p>Front-end developer job descriptions may differ depending on a company’s requirements and needs. Based on my experience as a front-end developer recruiter and an analysis of front-end developer job descriptions on LinkedIn, Indeed, and ZipRecruiter, here is a developer job description template that covers the essential skills and qualifications that hiring managers look for in potential hires:</p>\n<p><strong>Job Title: Frontend Developer.</strong></p>\n<p><strong>Company</strong>: [Company Name].</p>\n<p><strong>Location</strong>: [Location].</p>\n<p><strong>Job Type</strong>: Full-time.</p>\n<p><strong>About Us</strong>: <strong>[Company Name]</strong> is [give a brief description of the company’s history and goals].</p>\n<p><strong>Job Description</strong></p>\n<p><strong>[Company Name]</strong> seeks experienced frontend developers who are passionate about developing user-friendly designs. This role requires expertise in HTML, CSS, JavaScript, and modern frontend frameworks (React). The ideal candidate will have a strong eye for design and a deep understanding of frontend technologies.</p>\n<p><strong>Responsibilities</strong></p>\n<ul>\n<li>Translate web design mockups and feature requirements into functional, mobile-friendly websites using HTML, CSS, and JavaScript frameworks such as React, Angular, or Vue.js.</li>\n<li>Work closely with UI/UX designers to translate design wireframes into reusable code and collaborate with back-end developers to integrate APIs and services.</li>\n<li>Ensure cross-browser compatibility and optimize applications for maximum speed and scalability.</li>\n<li>Write clean, maintainable, and reusable code and conduct code reviews to ensure adherence to coding standards and best practices.</li>\n</ul>\n<p><strong>Requirements</strong></p>\n<ul>\n<li>Professional experience building dynamic frontend web applications and websites.</li>\n<li>Hands-on experience in HTML, CSS, JavaScript, and modern frontend frameworks.</li>\n<li>Solid understanding of responsive and adaptive design.</li>\n<li>Ability to collaborate with product managers, back-end developers, designers, and other team members during project development.</li>\n<li>Experience optimizing frontend performance for maximum speed and ensuring the technical feasibility of UI/UX designs.</li>\n<li>Hands-on experience with version control systems such as Git.</li>\n<li>Experience with tools for debugging and development automation like Chrome DevTools and Webpack.</li>\n<li>Relevant soft skills like customer service, communication, and problem-solving skills.</li>\n<li>Practical experience and a strong <a href=\"https://roadmap.sh/frontend/web-developer-portfolio\" target=\"_blank\">web developer portfolio</a> that shows a broad range of abilities.</li>\n<li>Bachelor’s degree in computer science or relevant industry experience.</li>\n</ul>\n<p><strong>Nice to Have</strong></p>\n<ul>\n<li>Experience with web accessibility and SEO best practices.</li>\n<li>In-depth understanding of UI/UX design principles.</li>\n</ul>\n<p><strong>What We Offer</strong>\n[Insert company’s offers, for example, competitive salary and benefits package, etc.].</p>\n<p><strong>How to Apply</strong>\nIf this role excites you, please submit your resume and cover letter to <strong>[contact email or link to application portal]</strong>.</p>\n<p><strong>Note</strong>: From my experience hiring frontend developers, I have seen that a bachelor’s degree in computer science is often preferred, but it is not always necessary. A lot of frontend developers are self-taught or go through coding boot camps. Therefore, hands-on experience and a solid portfolio can be as valuable as a formal degree.</p>\n<h2 id=\"key-frontend-developer-responsibilities\">Key frontend developer responsibilities</h2>\n<p>Frontend developers are essential in the development process of web applications and websites. They ensure that the final product meets the users’ and business needs from start to finish.</p>\n<p><img src=\"https://images.surferseo.art/641302d8-76f9-49b1-94c8-685fa873fc06.jpeg\" alt=\"Key responsibilities of a frontend developer\"></p>\n<p>Below are frontend developer responsibilities a hiring manager should look for when hiring:</p>\n<ul>\n<li>Understanding the requirements of the project.</li>\n<li>Develop a responsive and seamless user experience.</li>\n<li>Maintain and optimize existing web applications.</li>\n<li>Collaborate with backend web developers and other teams.</li>\n</ul>\n<h3 id=\"understanding-the-requirements-of-the-project\">Understanding the requirements of the project</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/key-front-end-developer-responsibilities-5vttr.png\" alt=\"Understanding the requirements of the project\"></p>\n<p>Hiring frontend developers who understand project requirements is crucial for a hiring manager. The ideal candidate should be able to:</p>\n<ul>\n<li>Communicate effectively with development teams to get a complete understanding of project requirements.</li>\n<li>Collaborate with designers, QA testers, and product managers to get project feedback.</li>\n</ul>\n<p>This process involves the frontend developer:</p>\n<ul>\n<li>Attending project meetings to understand the project goals and objectives. These meetings can be in person or online with the design team to get all the details needed for the design.</li>\n<li>Collaborating with teams to clearly define requirements and gather feedback.</li>\n<li>Creating quality mockups to design and improve UI components like buttons and forms.</li>\n<li>Writing high-quality code <strong>(HTML, CSS, JavaScript, etc)</strong> that meets industry standards.</li>\n<li>Translating project requirements into functional user interfaces that incorporate new user-facing features. Examples of these new user-facing features include buttons, menus, and other navigation elements.</li>\n</ul>\n<p>Hiring frontend developers who can easily understand project requirements is very important. They help increase a development team’s performance and guarantee your project’s success.</p>\n<h3 id=\"develop-a-responsive-and-seamless-user-experience\">Develop a responsive and seamless user experience.</h3>\n<p>A website thrives on a responsive and seamless user experience. Are users finding what they are searching for fast enough? Is moving around the website accessible for them? Hiring a frontend developer who understands and can answer these questions is essential.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/develop-a-responsive-and-seamless-user-experience-hbiki.png\" alt=\"Develop a responsive and smooth user experience.\"></p>\n<p>Frontend developer duties go far beyond designing a website’s appearance. They prioritize the experience of every user and ensure a website is:</p>\n<ul>\n<li><strong>Responsive.</strong> Website content must be viewable on mobile applications, desktops, and several devices.</li>\n<li><strong>Easy to use and understand.</strong></li>\n<li><strong>Ensuring cross-browser compatibility.</strong> Users access websites via popular browsers like Chrome. A frontend developer must ensure a website looks and works the same on all browsers. It involves following web standards and debugging compatibility issues with browser developer tools.</li>\n</ul>\n<h3 id=\"maintain-and-optimize-existing-web-applications\">Maintain and optimize existing web applications.</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/maintain-and-optimize-existing-web-applications-7yuvl.png\" alt=\"Maintain and optimize performance of an existing web application.\"></p>\n<p>Frontend developers aren’t just individual who make cool web applications or websites. They also play a critical role in maintaining existing web applications. It is crucial to hire a frontend developer who can:</p>\n<ul>\n<li>\n<p><strong>Fix bugs:</strong> Frontend developers help resolve website issues like browser compatibility issues, unclickable buttons, etc.</p>\n</li>\n<li>\n<p><strong>Optimize applications:</strong> Frontend web developers ensure a website works well and loads fast. They are responsible for optimizing website performance, improving load times, and troubleshooting frontend issues. Frontend developers must stay up-to-date with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards#web_best_practices\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">industry trends</a> and <a href=\"https://roadmap.sh/best-practices/frontend-performance\" target=\"_blank\">best practices</a>. This ensures that the websites they work on are accessible, follow web standards, and provide a great user experience.</p>\n</li>\n</ul>\n<h3 id=\"collaborate-with-backend-web-developers-and-other-teams\">Collaborate with backend web developers and other teams</h3>\n<p>Completing a web development project isn’t something one can do alone–it takes a team effort to get it done right.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/collaborate-with-back-end-developers-and-other-teams-mt61w.png\" alt=\"Collaboration between backend, frontend, web designers and other team members\"></p>\n<p>It is important to hire a frontend developer who can collaborate with various teams, like:</p>\n<ul>\n<li>\n<p><strong>Backend web developers</strong>: <a href=\"https://roadmap.sh/backend\" target=\"_blank\">Backend developers</a> handle a website’s server-side logic and data management. They code the website’s core functionality, such as user authentication and data processing. Frontend and backend web developers collaborate to make the website functional and secure.</p>\n</li>\n<li>\n<p><strong>UI designers</strong>: UI designers are like the artists who create a website’s visual elements. They design the website’s layout and appearance, such as the colors, buttons, and images. Frontend developers convert the design into a working website using their technical skills. They also collaborate with the UI designer to understand feature requirements related to the project.</p>\n</li>\n<li>\n<p><strong>Quality assurance testers (QA testers):</strong> QA testers play a critical role in web development. They participate in the application development process from start to finish. Their early involvement helps them spot possible issues as the application develops. The QA tester creates testing plans at each stage, like functional and unit testing. They improve user experience by working with the frontend to identify and fix bugs.</p>\n</li>\n</ul>\n<h2 id=\"essential-skills-for-a-frontend-developer\">Essential skills for a frontend developer</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/essential-skills-of-a-front-end-developer-970q1.png\" alt=\"Essential frontend developer skills\"></p>\n<p>Creating easy-to-use websites and applications requires a broad range of technical skills. When evaluating candidates, look for proficiency in these must-have frontend developer skills:</p>\n<ul>\n<li>Strong foundation in core <a href=\"https://roadmap.sh/frontend/technologies\" target=\"_blank\">web development technologies</a>, like HTML, CSS, and JavaScript.</li>\n<li>Strong grasp of version control systems, such as Git.</li>\n<li>Good knowledge of frontend frameworks and libraries, for example, React JS and TailwindCSS.</li>\n<li>Experience with CSS preprocessors for modular and maintainable styling, such as Sass.</li>\n<li>Experience with browser testing and debugging tools, like Chrome DevTools.</li>\n<li>Proficient understanding of web performance optimization techniques, like lazy loading.</li>\n<li>Experience identifying and fixing performance bottlenecks using tools such as Google PageSpeed Insights.</li>\n<li>Attention to detail to ensure visually consistent and error-free web applications.</li>\n<li>Ability to stay up-to-date with emerging technologies like progressive web apps.</li>\n</ul>\n<h2 id=\"desirable-skills-for-a-frontend-developer\">Desirable skills for a frontend developer</h2>\n<p>Desirable skills set exceptional frontend web developers apart from the rest. They demonstrate a developer’s ability to excel and deliver high-quality results.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/difference-between-front-end-developers-and-back-end-web-developers-1-vaw6v.png\" alt=\"Frontend vs Backend Developers\"></p>\n<p>Hire a frontend web developer who can do more than just the basics by checking for the following skills:</p>\n<ul>\n<li>Excellent knowledge of accessibility.</li>\n<li>Basic understanding of UI/UX design principles.</li>\n<li>Proficient in optimization techniques.</li>\n</ul>\n<h3 id=\"excellent-knowledge-of-accessibility\">Excellent knowledge of accessibility</h3>\n<p><a href=\"https://code.pieces.app/blog/ada-compliance-made-easy-ada-testing-for-websites-and-applications\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">A good understanding of accessibility</a> is a skill that frontend developers should have. It involves creating websites that everyone uses, including users with disabilities.</p>\n<p>It is essential to hire a frontend web developer who has an understanding of the following:</p>\n<ul>\n<li>Accessibility guidelines and regulations, such as <a href=\"https://www.w3.org/TR/WCAG21/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">WCAG 2.1</a>.</li>\n<li><a href=\"https://css-tricks.com/why-how-and-when-to-use-semantic-html-and-aria/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Semantic HTML and ARIA attributes</a>.</li>\n<li><a href=\"https://blog.hubspot.com/website/screen-reader-accessibility\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Screen readers</a> and other assistive technologies.</li>\n</ul>\n<h3 id=\"basic-understanding-of-ux-and-ui-design-principles\">Basic understanding of UX and UI design principles</h3>\n<p>Front-end developers must have a foundational knowledge of UI and UX design principles. This ability allows them to create easy-to-use designs, websites, and applications. Some essential elements of UI/UX design principles are:</p>\n<ul>\n<li>\n<p><strong>Visual design principles:</strong>  Understanding this principle is vital for frontend developers. It involves understanding basic design principles like color theory and typography. These principles provide visual consistency and help developers create functional code.</p>\n</li>\n<li>\n<p><strong>User-centered design:</strong> User-centred design <strong>(UCD)</strong> is a more thorough approach to design. This approach prioritizes the user’s needs in all design and development decisions. It involves many stages, including user research and testing, design iterations, and more.</p>\n</li>\n</ul>\n<h3 id=\"proficient-in-optimization-techniques\">Proficient in optimization techniques</h3>\n<p>Hiring a frontend web developer who possesses excellent performance optimization skills is important. This skill consists of:</p>\n<ul>\n<li>Code optimization techniques (code minification, compression, etc)</li>\n<li>Resource optimization (image compression, lazy loading, caching, etc.)</li>\n<li>Rendering optimization (browser, server-side rendering, etc.)</li>\n<li>Browser optimization (browser caching, HTTP/2, etc.)</li>\n<li>Tooling optimization (Webpack, code splitting, etc.)</li>\n</ul>\n<p>A frontend web developer who is proficient at performance optimization techniques will:</p>\n<ul>\n<li>Use popular tools like Lighthouse and WebPageTest to analyze performance metrics.</li>\n<li>Identify bottlenecks using performance-enhancing techniques like network requests and DOM manipulation.</li>\n<li>Implement optimization strategies using techniques like lazy loading.</li>\n<li>Monitor performance regressions like page load times and response times.</li>\n</ul>\n<p>Hiring Frontend developers who know optimization techniques is important for the following reasons:</p>\n<ul>\n<li>They help improve search engine rankings</li>\n<li>Improve user experience and engage users more with the web content.</li>\n<li>Increase conversation rates.</li>\n<li>Reduce bounce rates and user frustration.</li>\n</ul>\n<h2 id=\"tools-used-in-frontend-development\">Tools used in frontend development</h2>\n<p>Frontend web developers need tools to implement new features and build interactive websites. These tools help them bring their creative vision to life and ensure a good user experience.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/tools-used-in-front-end-development-qcocc.png\" alt=\"Tools used by frontend developers\"></p>\n<p>When hiring a frontend developer, prioritize their proficiency in using tools like:</p>\n<ul>\n<li><strong>Web building blocks</strong>: Examples of web building blocks are HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>.</li>\n<li><strong>Build tools</strong>: Examples of these tools are Grunt, Gulp, or Webpack.</li>\n<li><strong>CSS preprocessors</strong>: Examples of CSS preprocessors are Sass, Less, and Stylus.</li>\n<li><strong>Web frameworks</strong>: Examples of popular frameworks are TailwindCSS, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, and <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue.js</a>.</li>\n<li><strong>Web libraries</strong>: Examples of libraries are <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, Anime.js, and Chart.js.</li>\n<li><strong>Debugging tools</strong>: Examples of debugging tools are Chrome DevTools</li>\n<li><strong>Version control systems (VCS):</strong> Git <strong>(e.g., GitHub, GitLab, Bitbucket)</strong> is an example of a VCS.</li>\n</ul>\n<h2 id=\"evaluating-candidates-for-a-frontend-developer-job\">Evaluating candidates for a frontend developer job</h2>\n<p>Hiring a frontend developer is not just about evaluating their technical abilities. There’s more to it than that! It’s about checking their fit with the company culture, soft skills, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/evaluating-candidates-for-a-front-end-developer-job-ugl1z.png\" alt=\"The evaluation process for a front-end developer job\"></p>\n<p>The evaluation process for a frontend developer job involves the following steps:</p>\n<ul>\n<li>Technical interviews</li>\n<li>Behavioral interviews</li>\n<li>Practical assessment</li>\n<li>Reference checks</li>\n</ul>\n<h3 id=\"technical-interviews\">Technical interviews</h3>\n<p>Technical interviews help ensure qualified candidates have the essential skills for the job. You can conduct technical interviews via online platforms like <a href=\"https://www.hackerrank.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">HackerRank</a> or in-person interviews. It enables you to test their knowledge of frontend tools, ability to explain code, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/technical-interviews-358u3.png\" alt=\"Technical interviews\"></p>\n<p>Some examples of technical <a href=\"https://roadmap.sh/questions/frontend\" target=\"_blank\">interview questions for a frontend developer job</a> include:</p>\n<ul>\n<li>Explain the difference between the undefined and null values in JavaScript</li>\n<li>Explain the principle of responsive web design and how you implement it.</li>\n<li>Explain CSS specificity and how it works.</li>\n</ul>\n<h3 id=\"behavioral-interviews\">Behavioral interviews</h3>\n<p>Behavioral interviews test a candidate’s communication, problem-solving, teamwork, and adaptability skills. They give you an understanding of how well the candidate will fit with the team and company culture.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/behavioral-interviews-pdgyj.png\" alt=\"Behavioral interviews\"></p>\n<p>Some examples of behavioral interview questions for a frontend developer job include:</p>\n<ul>\n<li>Can you describe a time when you had to collaborate with a designer to implement a complex UI feature?</li>\n<li>How do you approach debugging coding issues?</li>\n<li>How do you handle tight deadlines when they all seem important and urgent?</li>\n</ul>\n<h3 id=\"practical-assessment\">Practical assessment</h3>\n<p>A practical assessment is a hands-on test asking the candidates to complete a task or build a project. They include take-home projects, live coding sessions, pair programming, and code review exercises. It gives you a better idea of what the candidates can do beyond what you see on their resumes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/practical-assessment-tumxb.png\" alt=\"Practical assessment\"></p>\n<p>Some examples of practical assessments for a frontend web developer job include:</p>\n<ul>\n<li>Build a basic web application using React or Angular.</li>\n<li>Debug and fix a broken webpage or web application.</li>\n</ul>\n<p>Conduct the practical assessment based on the tools mentioned in the job description. This way, you ensure you’re testing if the candidates are good at the skills and tools needed for the job.</p>\n<h3 id=\"reference-checks\">Reference checks</h3>\n<p>Reference checks help double-check a candidate’s past job history and skills. Types of reference checks include professional, peer, character references, and more. They ensure the candidate fits the company culture and matches the job description.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/reference-check-k6kpf.png\" alt=\"Reference checks\"></p>\n<p>Some examples of reference check questions for a frontend web developer job include:</p>\n<ul>\n<li>What do you think about the candidate’s work ethic and teamwork skills?</li>\n<li>Would you hire the candidate again if you had the opportunity?</li>\n</ul>\n<p>Ask the above reference questions to people who know the candidate inside and out. People like ex-coworkers who can vouch for their skills and personal qualities. Use phone or video calls, email or online surveys, or in-person meetings to ask these questions.</p>\n<h2 id=\"frequently-asked-questions-about-frontend-web-development\">Frequently asked questions about frontend web development</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/frequently-asked-questions-about-front-end-web-development-pipia.png\" alt=\"Frequently asked questions\"></p>\n<p>The process of getting into frontend development is often unclear to many people. The following are some answers to common questions to help you get started.</p>\n<h3 id=\"how-long-does-it-take-to-be-a-frontend-developer\">How long does it take to be a frontend developer?</h3>\n<p>The time required to <a href=\"https://roadmap.sh/frontend/how-to-become-frontend-developer\" target=\"_blank\">become a frontend developer</a> can vary from person to person. It depends mostly on how fast you learn and how much time you put into learning and practicing. But if you keep at it, you can pick up frontend development skills in just a few months to a year.</p>\n<h3 id=\"how-can-i-stay-up-to-date-with-the-latest-front-end-technologies-and-trends\">How can I stay up-to-date with the latest front-end technologies and trends?</h3>\n<p><a href=\"https://roadmap.sh/frontend\" target=\"_blank\">Visit roadmap.sh</a> to stay up-to-date with the latest front-end technologies and trends. It provides the latest resources to help you build web applications and stay ahead as a front-end developer. Also, you can connect with other developers by <a href=\"https://discord.com/invite/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">joining online communities</a> and attending tech events.</p>\n<h2 id=\"what-is-the-typical-career-path-for-a-frontend-developer\">What is the typical career path for a frontend developer?</h2>\n<p>Frontend development offers a cool career path with vast opportunities for professional development.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/typical-career-path-for-a-front-end-developer-96zb3.png\" alt=\"Typical career path for a frontend developer\"></p>\n<p>The following is a typical career path for a frontend developer:</p>\n<ul>\n<li>\n<p><strong>Entry-level frontend developer</strong>: This is the beginning of your career in frontend development. At this stage, you are learning web basics and the skills needed to become a frontend developer, building projects with HTML, CSS, JavaScript, and libraries like React. This role is also known as a junior frontend developer.</p>\n</li>\n<li>\n<p><strong>Mid-level frontend developer</strong>: At this stage, you have a strong understanding of how the development process of web applications works. You have the skillset to take on complex projects and mentor junior developers.</p>\n</li>\n<li>\n<p><strong>Senior-level frontend developer:</strong> Senior-level frontend developers are experts in the frontend field. At this stage, you are responsible for mentoring junior developers, leading development teams, and much more.</p>\n</li>\n<li>\n<p><strong>Lead frontend developer</strong>: As a senior-level frontend developer, you can switch to either a lead frontend engineer or a product designer role. Lead frontend engineer role requires you to provide technical vision, manage teams, and collaborate with product and design teams. Also, as a product designer, you focus on user experience, interaction design, visual design, and design systems. Both paths need sound technical, leadership, communication, and strategic thinking skills.</p>\n</li>\n</ul>\n<h3 id=\"what-are-the-flexible-work-arrangements-available-to-frontend-developers\">What are the flexible work arrangements available to frontend developers?</h3>\n<p>There are many options for frontend developers when it comes to flexible work schedules. It helps boost productivity, which can lead to many career growth opportunities.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/what-are-the-flexible-work-arrangements-available-to-frontend-developers-vwuyc.png\" alt=\"Flexible work arrangements available to frontend developers\"></p>\n<p>Some of the flexible work arrangements include:</p>\n<ul>\n<li>\n<p><strong>Remote work</strong>: Several companies offer remote work options for frontend developers. Remote work allows you to work from anywhere, anytime, as long as you meet deadlines.</p>\n</li>\n<li>\n<p><strong>Hybrid work:</strong> Hybrid Work combines working from the office with remote work. So you can choose specific days to work from the office and others from home. It allows you to maintain in-person collaboration with your work colleagues.</p>\n</li>\n<li>\n<p><strong>Freelance work</strong>: A freelance frontend developer benefits greatly from the flexibility of freelancing. As a freelance frontend developer, you can choose when you work and which projects you want to take on. This is one of the main advantages of working as a freelance frontend developer. But being a freelance frontend developer doesn’t always come with the stability and perks of a regular job.</p>\n</li>\n</ul>\n<h3 id=\"who-gets-paid-more-backend-or-frontend-web-developer\">Who gets paid more backend or frontend web developer?</h3>\n<p>A backend and a frontend web developer both earn competitive salaries. The difference in pay depends on factors like location, industry, and experience level.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/role-and-average-salary-of-backend-developer-frontend-developer-full-stack-developer-4yebg.png\" alt=\"Role and average salary of a front-end developer\"></p>\n<p>According to Indeed, here are some average salary ranges for both positions:</p>\n<ul>\n<li><strong>Backend developer</strong>: $154,657 per year.</li>\n<li><strong>Frontend web developer</strong>: $113,894 per year.</li>\n<li><strong>Full stack developer (combination of frontend and backend)</strong>: $126,376 per year.</li>\n</ul>\n<h3 id=\"is-frontend-development-and-software-development-the-same\">Is frontend development and software development the same?</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/is-frontend-development-and-software-development-the-same-50pji.png\" alt=\"What is the difference between frontend and software development?\"></p>\n<p>No, frontend development is not the same as software development. Frontend development is like a niche within software development. It focuses on building the user interface and user experience of web applications.</p>\n<p>Software development is more like an umbrella term that includes many specializations, such as:</p>\n<ul>\n<li>Frontend development</li>\n<li>Backend development</li>\n<li>Full stack development</li>\n<li>Mobile app development.</li>\n</ul>\n<p>So, you can call a frontend or backend developer a software developer.</p>\n<h3 id=\"what-is-the-difference-between-frontend-developers-and-backend-web-developers\">What is the difference between frontend developers and backend web developers?</h3>\n<p>The development process of websites and applications requires frontend and backend web developers. However, their areas of expertise and responsibilities are different.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/difference-between-front-end-developers-and-back-end-web-developers-kwa0q.png\" alt=\"Difference between a frontend developer and backend web developer\"></p>\n<p>Frontend developers do the following:</p>\n<ul>\n<li>Build a website or application’s user interface (UI) and user experience (UX). They create the visual elements you interact with on a website, like navigation menus.</li>\n<li>Work with HTML, CSS, JavaScript, frontend frameworks, and libraries like React.</li>\n</ul>\n<p>Back-end web developers do the following:</p>\n<ul>\n<li>Work with Java and Python programming languages and frameworks like Node.js.</li>\n<li>Work on the server side of the web development process. They focus on the parts of the website users cannot interact with. Examples of this include API connectivity and data storage and retrieval.</li>\n</ul>\n<h3 id=\"what-are-the-programming-languages-and-frameworks-used-in-frontend-development\">What are the programming languages and frameworks used in frontend development?</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-frameworks-and-libraries-fyelz.png\" alt=\"Programming languages and frameworks used in frontend development\"></p>\n<p>Frontend developers often use a combination of <a href=\"https://roadmap.sh/frontend/languages\" target=\"_blank\">programming languages</a>, <a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">frameworks</a>, and libraries like:</p>\n<ul>\n<li><strong>HyperText Markup Language (HTML)</strong>: HTML is a standard markup language for creating web pages. It is the foundation of a website, providing its structure and content for the web browser to display.</li>\n<li><strong>Cascading Style Sheet (CSS):</strong> CSS is vital in controlling a website’s visual presentation. It is a styling language that controls the layout and appearance of HTML and XHTML web pages. CSS transforms HTML elements like <code>&#x3C;input></code> into visual UI components like styled form fields. It allows frontend developers to add colors, fonts, icons, and more to websites.</li>\n<li><strong>JavaScript</strong>: Javascript is a fundamental tool for creating user-friendly websites in web development. It is a versatile scripting language that adds interactivity to a web page. Developers can use it to create dynamic elements that respond to user interaction. It makes static websites created with HTML and CSS to be functional.</li>\n<li><strong>JavaScript frameworks</strong>: Examples of popular JavaScript frameworks are Angular and Vue.js.</li>\n<li><strong>JavaScript libraries</strong>: Examples of libraries are React, Anime.js, and Chart.js.</li>\n<li><strong>CSS frameworks</strong>: Examples of popular CSS frameworks are Bootstrap and TailwindCSS.</li>\n<li><strong>CSS libraries</strong>: Examples of CSS libraries are Animate.css and Font Awesome.</li>\n</ul>\n<h2 id=\"what-next\">What next?</h2>\n<p>Hiring a frontend developer requires a grasp of the skills and duties that come with the job. By adhering to the tips in this article, you can pick the perfect candidate for your team. Now that you know what it takes to succeed in this role, it’s time to take the next step.</p>\n<p>Follow the <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend developer roadmap</a> to learn and adapt to new technologies nonstop. Roadmap has resources to help newbies and pros improve and keep up with frontend trends. It also allows you to:</p>\n<ul>\n<li>Create your own personal or <a href=\"https://roadmap.sh/teams\" target=\"_blank\">team roadmap</a> or generate one using AI.</li>\n<li>Keep track of your frontend web developer learning journey.</li>\n<li>Become part of a supportive community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up on</a> <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> <a href=\"https://roadmap.sh/signup\" target=\"_blank\">platform</a>.</li>\n</ul>";

				const frontmatter$J = {"title":"Frontend Developer Job Description [@currentYear@ Template]","description":"Learn how to write the perfect frontend developer job description and get my best tips on how to recruit frontend dev talent effectively.","authorId":"william","excludedBySlug":"/frontend/job-description","seo":{"title":"Frontend Developer Job Description [@currentYear@ Template]","description":"Learn how to write the perfect frontend developer job description and get my best tips on how to recruit frontend dev talent effectively.","ogImageUrl":"https://assets.roadmap.sh/guest/frontend-developer-job-description-5fwzy.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-11-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$J = "/workspace/src/data/guides/frontend-job-description.md";
				const url$J = undefined;
				function rawContent$J() {
					return "   \n                                                                    \n                                                                                                                                                        \n                 \n                                           \n    \n                                                                      \n                                                                                                                                                          \n                                                                                            \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Frontend developer job description example and template.](https://assets.roadmap.sh/guest/frontend-developer-job-description-5fwzy.jpg)\n\nFrontend developers create the interface and experience that people interact with. They develop visually appealing and functional website components, such as buttons. Their work shapes how users see and interact with a company's online presence. However, as a hiring manager, finding the right frontend developer for your team can be tough. It requires a thorough evaluation of a broad range of skills and know-how.\n\nA well-written developer job description is key to finding the right developer. The challenge, however, is writing a developer job description that attracts top talent. A poorly written job description can attract unqualified applicants and overlook top talent. If you want to hire top frontend developers, you must understand what skills and duties come with the job.\n\nIn this guide, I will show you how to create a good front-end developer job description template based on my experience hiring [front-end developers](https://roadmap.sh/frontend). In the following sections, you'll learn about the responsibilities, [skills](https://roadmap.sh/frontend/developer-skills), and what to look for when hiring candidates.\n\n## Frontend developer job description template\n\nFront-end developer job descriptions may differ depending on a company's requirements and needs. Based on my experience as a front-end developer recruiter and an analysis of front-end developer job descriptions on LinkedIn, Indeed, and ZipRecruiter, here is a developer job description template that covers the essential skills and qualifications that hiring managers look for in potential hires:\n\n**Job Title: Frontend Developer.**\n\n**Company**: [Company Name].\n\n**Location**: [Location].\n\n**Job Type**: Full-time.\n\n**About Us**: **[Company Name]** is [give a brief description of the company's history and goals].\n\n**Job Description**\n\n**[Company Name]** seeks experienced frontend developers who are passionate about developing user-friendly designs. This role requires expertise in HTML, CSS, JavaScript, and modern frontend frameworks (React). The ideal candidate will have a strong eye for design and a deep understanding of frontend technologies.\n\n**Responsibilities**\n\n- Translate web design mockups and feature requirements into functional, mobile-friendly websites using HTML, CSS, and JavaScript frameworks such as React, Angular, or Vue.js.\n- Work closely with UI/UX designers to translate design wireframes into reusable code and collaborate with back-end developers to integrate APIs and services.\n- Ensure cross-browser compatibility and optimize applications for maximum speed and scalability.\n- Write clean, maintainable, and reusable code and conduct code reviews to ensure adherence to coding standards and best practices.\n\n**Requirements**\n\n- Professional experience building dynamic frontend web applications and websites.\n- Hands-on experience in HTML, CSS, JavaScript, and modern frontend frameworks.\n- Solid understanding of responsive and adaptive design.\n- Ability to collaborate with product managers, back-end developers, designers, and other team members during project development.\n- Experience optimizing frontend performance for maximum speed and ensuring the technical feasibility of UI/UX designs.\n- Hands-on experience with version control systems such as Git.\n- Experience with tools for debugging and development automation like Chrome DevTools and Webpack.\n- Relevant soft skills like customer service, communication, and problem-solving skills.\n- Practical experience and a strong [web developer portfolio](https://roadmap.sh/frontend/web-developer-portfolio) that shows a broad range of abilities.\n- Bachelor’s degree in computer science or relevant industry experience.\n\n**Nice to Have**\n\n- Experience with web accessibility and SEO best practices.\n- In-depth understanding of UI/UX design principles.\n\n**What We Offer**\n[Insert company's offers, for example, competitive salary and benefits package, etc.].\n\n**How to Apply**\nIf this role excites you, please submit your resume and cover letter to **[contact email or link to application portal]**.\n\n**Note**: From my experience hiring frontend developers, I have seen that a bachelor's degree in computer science is often preferred, but it is not always necessary. A lot of frontend developers are self-taught or go through coding boot camps. Therefore, hands-on experience and a solid portfolio can be as valuable as a formal degree.\n\n## Key frontend developer responsibilities\n\nFrontend developers are essential in the development process of web applications and websites. They ensure that the final product meets the users' and business needs from start to finish. \n\n![Key responsibilities of a frontend developer](https://images.surferseo.art/641302d8-76f9-49b1-94c8-685fa873fc06.jpeg)\n\nBelow are frontend developer responsibilities a hiring manager should look for when hiring:\n\n- Understanding the requirements of the project.\n- Develop a responsive and seamless user experience.\n- Maintain and optimize existing web applications.\n- Collaborate with backend web developers and other teams.\n\n### Understanding the requirements of the project\n\n![Understanding the requirements of the project](https://assets.roadmap.sh/guest/key-front-end-developer-responsibilities-5vttr.png)\n\nHiring frontend developers who understand project requirements is crucial for a hiring manager. The ideal candidate should be able to:\n\n- Communicate effectively with development teams to get a complete understanding of project requirements.\n- Collaborate with designers, QA testers, and product managers to get project feedback.\n\nThis process involves the frontend developer:\n\n- Attending project meetings to understand the project goals and objectives. These meetings can be in person or online with the design team to get all the details needed for the design.\n- Collaborating with teams to clearly define requirements and gather feedback.\n- Creating quality mockups to design and improve UI components like buttons and forms.\n- Writing high-quality code **(HTML, CSS, JavaScript, etc)** that meets industry standards.\n- Translating project requirements into functional user interfaces that incorporate new user-facing features. Examples of these new user-facing features include buttons, menus, and other navigation elements.\n\nHiring frontend developers who can easily understand project requirements is very important. They help increase a development team's performance and guarantee your project's success.\n\n### Develop a responsive and seamless user experience.\nA website thrives on a responsive and seamless user experience. Are users finding what they are searching for fast enough? Is moving around the website accessible for them? Hiring a frontend developer who understands and can answer these questions is essential.\n\n![Develop a responsive and smooth user experience.](https://assets.roadmap.sh/guest/develop-a-responsive-and-seamless-user-experience-hbiki.png)\n\nFrontend developer duties go far beyond designing a website's appearance. They prioritize the experience of every user and ensure a website is:\n\n- **Responsive.** Website content must be viewable on mobile applications, desktops, and several devices.\n- **Easy to use and understand.**\n- **Ensuring cross-browser compatibility.** Users access websites via popular browsers like Chrome. A frontend developer must ensure a website looks and works the same on all browsers. It involves following web standards and debugging compatibility issues with browser developer tools.\n\n### Maintain and optimize existing web applications.\n\n![Maintain and optimize performance of an existing web application.](https://assets.roadmap.sh/guest/maintain-and-optimize-existing-web-applications-7yuvl.png)\n\nFrontend developers aren't just individual who make cool web applications or websites. They also play a critical role in maintaining existing web applications. It is crucial to hire a frontend developer who can:\n\n- **Fix bugs:** Frontend developers help resolve website issues like browser compatibility issues, unclickable buttons, etc.\n\n- **Optimize applications:** Frontend web developers ensure a website works well and loads fast. They are responsible for optimizing website performance, improving load times, and troubleshooting frontend issues. Frontend developers must stay up-to-date with [industry trends](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards#web_best_practices) and [best practices](https://roadmap.sh/best-practices/frontend-performance). This ensures that the websites they work on are accessible, follow web standards, and provide a great user experience.\n\n### Collaborate with backend web developers and other teams\n\nCompleting a web development project isn't something one can do alone–it takes a team effort to get it done right.\n\n![Collaboration between backend, frontend, web designers and other team members](https://assets.roadmap.sh/guest/collaborate-with-back-end-developers-and-other-teams-mt61w.png)\n\nIt is important to hire a frontend developer who can collaborate with various teams, like:\n\n- **Backend web developers**: [Backend developers](https://roadmap.sh/backend) handle a website's server-side logic and data management. They code the website's core functionality, such as user authentication and data processing. Frontend and backend web developers collaborate to make the website functional and secure.\n\n- **UI designers**: UI designers are like the artists who create a website's visual elements. They design the website's layout and appearance, such as the colors, buttons, and images. Frontend developers convert the design into a working website using their technical skills. They also collaborate with the UI designer to understand feature requirements related to the project.\n\n- **Quality assurance testers (QA testers):** QA testers play a critical role in web development. They participate in the application development process from start to finish. Their early involvement helps them spot possible issues as the application develops. The QA tester creates testing plans at each stage, like functional and unit testing. They improve user experience by working with the frontend to identify and fix bugs.\n\n## Essential skills for a frontend developer\n\n![Essential frontend developer skills](https://assets.roadmap.sh/guest/essential-skills-of-a-front-end-developer-970q1.png)\n\nCreating easy-to-use websites and applications requires a broad range of technical skills. When evaluating candidates, look for proficiency in these must-have frontend developer skills:\n\n- Strong foundation in core [web development technologies](https://roadmap.sh/frontend/technologies), like HTML, CSS, and JavaScript.\n- Strong grasp of version control systems, such as Git.\n- Good knowledge of frontend frameworks and libraries, for example, React JS and TailwindCSS.\n- Experience with CSS preprocessors for modular and maintainable styling, such as Sass.\n- Experience with browser testing and debugging tools, like Chrome DevTools.\n- Proficient understanding of web performance optimization techniques, like lazy loading.\n- Experience identifying and fixing performance bottlenecks using tools such as Google PageSpeed Insights.\n- Attention to detail to ensure visually consistent and error-free web applications.\n- Ability to stay up-to-date with emerging technologies like progressive web apps.\n\n## Desirable skills for a frontend developer\n\nDesirable skills set exceptional frontend web developers apart from the rest. They demonstrate a developer's ability to excel and deliver high-quality results.\n\n![Frontend vs Backend Developers](https://assets.roadmap.sh/guest/difference-between-front-end-developers-and-back-end-web-developers-1-vaw6v.png)\n\nHire a frontend web developer who can do more than just the basics by checking for the following skills:\n\n- Excellent knowledge of accessibility.\n- Basic understanding of UI/UX design principles.\n- Proficient in optimization techniques.\n\n### Excellent knowledge of accessibility\n\n[A good understanding of accessibility](https://code.pieces.app/blog/ada-compliance-made-easy-ada-testing-for-websites-and-applications) is a skill that frontend developers should have. It involves creating websites that everyone uses, including users with disabilities.\n\nIt is essential to hire a frontend web developer who has an understanding of the following:\n\n- Accessibility guidelines and regulations, such as [WCAG 2.1](https://www.w3.org/TR/WCAG21/).\n- [Semantic HTML and ARIA attributes](https://css-tricks.com/why-how-and-when-to-use-semantic-html-and-aria/).\n- [Screen readers](https://blog.hubspot.com/website/screen-reader-accessibility) and other assistive technologies.\n\n### Basic understanding of UX and UI design principles\n\nFront-end developers must have a foundational knowledge of UI and UX design principles. This ability allows them to create easy-to-use designs, websites, and applications. Some essential elements of UI/UX design principles are:\n\n- **Visual design principles:**  Understanding this principle is vital for frontend developers. It involves understanding basic design principles like color theory and typography. These principles provide visual consistency and help developers create functional code.\n\n- **User-centered design:** User-centred design **(UCD)** is a more thorough approach to design. This approach prioritizes the user's needs in all design and development decisions. It involves many stages, including user research and testing, design iterations, and more.\n\n### Proficient in optimization techniques\n\nHiring a frontend web developer who possesses excellent performance optimization skills is important. This skill consists of:\n\n- Code optimization techniques (code minification, compression, etc)\n- Resource optimization (image compression, lazy loading, caching, etc.)\n- Rendering optimization (browser, server-side rendering, etc.)\n- Browser optimization (browser caching, HTTP/2, etc.)\n- Tooling optimization (Webpack, code splitting, etc.)\n\nA frontend web developer who is proficient at performance optimization techniques will:\n\n- Use popular tools like Lighthouse and WebPageTest to analyze performance metrics.\n- Identify bottlenecks using performance-enhancing techniques like network requests and DOM manipulation.\n- Implement optimization strategies using techniques like lazy loading.\n- Monitor performance regressions like page load times and response times.\n\nHiring Frontend developers who know optimization techniques is important for the following reasons:\n\n- They help improve search engine rankings\n- Improve user experience and engage users more with the web content.\n- Increase conversation rates.\n- Reduce bounce rates and user frustration.\n\n## Tools used in frontend development\n\nFrontend web developers need tools to implement new features and build interactive websites. These tools help them bring their creative vision to life and ensure a good user experience. \n\n![Tools used by frontend developers](https://assets.roadmap.sh/guest/tools-used-in-front-end-development-qcocc.png)\n\nWhen hiring a frontend developer, prioritize their proficiency in using tools like:\n\n- **Web building blocks**: Examples of web building blocks are HTML, CSS, and [JavaScript](https://roadmap.sh/javascript).\n- **Build tools**: Examples of these tools are Grunt, Gulp, or Webpack.\n- **CSS preprocessors**: Examples of CSS preprocessors are Sass, Less, and Stylus.\n- **Web frameworks**: Examples of popular frameworks are TailwindCSS, [Angular](https://roadmap.sh/angular), and [Vue.js](https://roadmap.sh/vue).\n- **Web libraries**: Examples of libraries are [React](https://roadmap.sh/react), Anime.js, and Chart.js.\n- **Debugging tools**: Examples of debugging tools are Chrome DevTools\n- **Version control systems (VCS):** Git **(e.g., GitHub, GitLab, Bitbucket)** is an example of a VCS.\n\n## Evaluating candidates for a frontend developer job\n\nHiring a frontend developer is not just about evaluating their technical abilities. There's more to it than that! It's about checking their fit with the company culture, soft skills, and more.\n\n![The evaluation process for a front-end developer job](https://assets.roadmap.sh/guest/evaluating-candidates-for-a-front-end-developer-job-ugl1z.png)\n\nThe evaluation process for a frontend developer job involves the following steps:\n\n- Technical interviews\n- Behavioral interviews\n- Practical assessment\n- Reference checks\n\n### Technical interviews\n\nTechnical interviews help ensure qualified candidates have the essential skills for the job. You can conduct technical interviews via online platforms like [HackerRank](https://www.hackerrank.com/) or in-person interviews. It enables you to test their knowledge of frontend tools, ability to explain code, and more.\n\n![Technical interviews](https://assets.roadmap.sh/guest/technical-interviews-358u3.png)\n\nSome examples of technical [interview questions for a frontend developer job](https://roadmap.sh/questions/frontend) include:\n\n- Explain the difference between the undefined and null values in JavaScript\n- Explain the principle of responsive web design and how you implement it.\n- Explain CSS specificity and how it works.\n\n### Behavioral interviews\n\nBehavioral interviews test a candidate's communication, problem-solving, teamwork, and adaptability skills. They give you an understanding of how well the candidate will fit with the team and company culture.\n\n![Behavioral interviews](https://assets.roadmap.sh/guest/behavioral-interviews-pdgyj.png)\n\nSome examples of behavioral interview questions for a frontend developer job include:\n\n- Can you describe a time when you had to collaborate with a designer to implement a complex UI feature?\n- How do you approach debugging coding issues?\n- How do you handle tight deadlines when they all seem important and urgent?\n\n### Practical assessment\n\nA practical assessment is a hands-on test asking the candidates to complete a task or build a project. They include take-home projects, live coding sessions, pair programming, and code review exercises. It gives you a better idea of what the candidates can do beyond what you see on their resumes.\n\n![Practical assessment](https://assets.roadmap.sh/guest/practical-assessment-tumxb.png)\n\nSome examples of practical assessments for a frontend web developer job include:\n\n- Build a basic web application using React or Angular.\n- Debug and fix a broken webpage or web application.\n\nConduct the practical assessment based on the tools mentioned in the job description. This way, you ensure you're testing if the candidates are good at the skills and tools needed for the job.\n\n### Reference checks\n\nReference checks help double-check a candidate's past job history and skills. Types of reference checks include professional, peer, character references, and more. They ensure the candidate fits the company culture and matches the job description.\n\n![Reference checks](https://assets.roadmap.sh/guest/reference-check-k6kpf.png)\n\nSome examples of reference check questions for a frontend web developer job include:\n\n- What do you think about the candidate's work ethic and teamwork skills?\n- Would you hire the candidate again if you had the opportunity?\n\nAsk the above reference questions to people who know the candidate inside and out. People like ex-coworkers who can vouch for their skills and personal qualities. Use phone or video calls, email or online surveys, or in-person meetings to ask these questions.\n\n## Frequently asked questions about frontend web development\n\n![Frequently asked questions](https://assets.roadmap.sh/guest/frequently-asked-questions-about-front-end-web-development-pipia.png)\n\nThe process of getting into frontend development is often unclear to many people. The following are some answers to common questions to help you get started.\n\n### How long does it take to be a frontend developer?\n\nThe time required to [become a frontend developer](https://roadmap.sh/frontend/how-to-become-frontend-developer) can vary from person to person. It depends mostly on how fast you learn and how much time you put into learning and practicing. But if you keep at it, you can pick up frontend development skills in just a few months to a year.\n\n### How can I stay up-to-date with the latest front-end technologies and trends?\n\n[Visit roadmap.sh](https://roadmap.sh/frontend) to stay up-to-date with the latest front-end technologies and trends. It provides the latest resources to help you build web applications and stay ahead as a front-end developer. Also, you can connect with other developers by [joining online communities](https://discord.com/invite/cJpEt5Qbwa) and attending tech events.\n\n## What is the typical career path for a frontend developer?\n\nFrontend development offers a cool career path with vast opportunities for professional development.\n\n![Typical career path for a frontend developer](https://assets.roadmap.sh/guest/typical-career-path-for-a-front-end-developer-96zb3.png)\n\nThe following is a typical career path for a frontend developer:\n\n- **Entry-level frontend developer**: This is the beginning of your career in frontend development. At this stage, you are learning web basics and the skills needed to become a frontend developer, building projects with HTML, CSS, JavaScript, and libraries like React. This role is also known as a junior frontend developer.\n\n- **Mid-level frontend developer**: At this stage, you have a strong understanding of how the development process of web applications works. You have the skillset to take on complex projects and mentor junior developers.\n\n- **Senior-level frontend developer:** Senior-level frontend developers are experts in the frontend field. At this stage, you are responsible for mentoring junior developers, leading development teams, and much more. \n\n- **Lead frontend developer**: As a senior-level frontend developer, you can switch to either a lead frontend engineer or a product designer role. Lead frontend engineer role requires you to provide technical vision, manage teams, and collaborate with product and design teams. Also, as a product designer, you focus on user experience, interaction design, visual design, and design systems. Both paths need sound technical, leadership, communication, and strategic thinking skills.\n\n### What are the flexible work arrangements available to frontend developers?\n\nThere are many options for frontend developers when it comes to flexible work schedules. It helps boost productivity, which can lead to many career growth opportunities.\n\n![Flexible work arrangements available to frontend developers](https://assets.roadmap.sh/guest/what-are-the-flexible-work-arrangements-available-to-frontend-developers-vwuyc.png)\n\nSome of the flexible work arrangements include:\n\n- **Remote work**: Several companies offer remote work options for frontend developers. Remote work allows you to work from anywhere, anytime, as long as you meet deadlines.\n\n- **Hybrid work:** Hybrid Work combines working from the office with remote work. So you can choose specific days to work from the office and others from home. It allows you to maintain in-person collaboration with your work colleagues.\n\n- **Freelance work**: A freelance frontend developer benefits greatly from the flexibility of freelancing. As a freelance frontend developer, you can choose when you work and which projects you want to take on. This is one of the main advantages of working as a freelance frontend developer. But being a freelance frontend developer doesn't always come with the stability and perks of a regular job.\n\n### Who gets paid more backend or frontend web developer?\n\nA backend and a frontend web developer both earn competitive salaries. The difference in pay depends on factors like location, industry, and experience level.\n\n![Role and average salary of a front-end developer](https://assets.roadmap.sh/guest/role-and-average-salary-of-backend-developer-frontend-developer-full-stack-developer-4yebg.png)\n\nAccording to Indeed, here are some average salary ranges for both positions:\n\n- **Backend developer**: $154,657 per year.\n- **Frontend web developer**: $113,894 per year.\n- **Full stack developer (combination of frontend and backend)**: $126,376 per year.\n\n### Is frontend development and software development the same?\n\n![What is the difference between frontend and software development?](https://assets.roadmap.sh/guest/is-frontend-development-and-software-development-the-same-50pji.png)\n\nNo, frontend development is not the same as software development. Frontend development is like a niche within software development. It focuses on building the user interface and user experience of web applications.\n\nSoftware development is more like an umbrella term that includes many specializations, such as:\n\n- Frontend development\n- Backend development\n- Full stack development\n- Mobile app development.\n\nSo, you can call a frontend or backend developer a software developer.\n\n### What is the difference between frontend developers and backend web developers?\n\nThe development process of websites and applications requires frontend and backend web developers. However, their areas of expertise and responsibilities are different.\n\n![Difference between a frontend developer and backend web developer](https://assets.roadmap.sh/guest/difference-between-front-end-developers-and-back-end-web-developers-kwa0q.png)\n\nFrontend developers do the following:\n\n- Build a website or application's user interface (UI) and user experience (UX). They create the visual elements you interact with on a website, like navigation menus.\n- Work with HTML, CSS, JavaScript, frontend frameworks, and libraries like React.\n\nBack-end web developers do the following:\n\n- Work with Java and Python programming languages and frameworks like Node.js.\n- Work on the server side of the web development process. They focus on the parts of the website users cannot interact with. Examples of this include API connectivity and data storage and retrieval.\n\n### What are the programming languages and frameworks used in frontend development?\n\n![Programming languages and frameworks used in frontend development](https://assets.roadmap.sh/guest/frontend-frameworks-and-libraries-fyelz.png)\n\nFrontend developers often use a combination of [programming languages](https://roadmap.sh/frontend/languages), [frameworks](https://roadmap.sh/frontend/frameworks), and libraries like:\n\n- **HyperText Markup Language (HTML)**: HTML is a standard markup language for creating web pages. It is the foundation of a website, providing its structure and content for the web browser to display.\n- **Cascading Style Sheet (CSS):** CSS is vital in controlling a website's visual presentation. It is a styling language that controls the layout and appearance of HTML and XHTML web pages. CSS transforms HTML elements like `<input>` into visual UI components like styled form fields. It allows frontend developers to add colors, fonts, icons, and more to websites.\n- **JavaScript**: Javascript is a fundamental tool for creating user-friendly websites in web development. It is a versatile scripting language that adds interactivity to a web page. Developers can use it to create dynamic elements that respond to user interaction. It makes static websites created with HTML and CSS to be functional.\n- **JavaScript frameworks**: Examples of popular JavaScript frameworks are Angular and Vue.js.\n- **JavaScript libraries**: Examples of libraries are React, Anime.js, and Chart.js.\n- **CSS frameworks**: Examples of popular CSS frameworks are Bootstrap and TailwindCSS.\n- **CSS libraries**: Examples of CSS libraries are Animate.css and Font Awesome.\n\n## What next?\n\nHiring a frontend developer requires a grasp of the skills and duties that come with the job. By adhering to the tips in this article, you can pick the perfect candidate for your team. Now that you know what it takes to succeed in this role, it's time to take the next step. \n\nFollow the [frontend developer roadmap](https://roadmap.sh/frontend) to learn and adapt to new technologies nonstop. Roadmap has resources to help newbies and pros improve and keep up with frontend trends. It also allows you to:\n\n- Create your own personal or [team roadmap](https://roadmap.sh/teams) or generate one using AI.\n- Keep track of your frontend web developer learning journey.\n- Become part of a supportive community by [signing up on](https://roadmap.sh/signup) [roadmap.sh](http://roadmap.sh) [platform](https://roadmap.sh/signup).\n";
				}
				async function compiledContent$J() {
					return await html$J();
				}
				function getHeadings$J() {
					return [{"depth":2,"slug":"frontend-developer-job-description-template","text":"Frontend developer job description template"},{"depth":2,"slug":"key-frontend-developer-responsibilities","text":"Key frontend developer responsibilities"},{"depth":3,"slug":"understanding-the-requirements-of-the-project","text":"Understanding the requirements of the project"},{"depth":3,"slug":"develop-a-responsive-and-seamless-user-experience","text":"Develop a responsive and seamless user experience."},{"depth":3,"slug":"maintain-and-optimize-existing-web-applications","text":"Maintain and optimize existing web applications."},{"depth":3,"slug":"collaborate-with-backend-web-developers-and-other-teams","text":"Collaborate with backend web developers and other teams"},{"depth":2,"slug":"essential-skills-for-a-frontend-developer","text":"Essential skills for a frontend developer"},{"depth":2,"slug":"desirable-skills-for-a-frontend-developer","text":"Desirable skills for a frontend developer"},{"depth":3,"slug":"excellent-knowledge-of-accessibility","text":"Excellent knowledge of accessibility"},{"depth":3,"slug":"basic-understanding-of-ux-and-ui-design-principles","text":"Basic understanding of UX and UI design principles"},{"depth":3,"slug":"proficient-in-optimization-techniques","text":"Proficient in optimization techniques"},{"depth":2,"slug":"tools-used-in-frontend-development","text":"Tools used in frontend development"},{"depth":2,"slug":"evaluating-candidates-for-a-frontend-developer-job","text":"Evaluating candidates for a frontend developer job"},{"depth":3,"slug":"technical-interviews","text":"Technical interviews"},{"depth":3,"slug":"behavioral-interviews","text":"Behavioral interviews"},{"depth":3,"slug":"practical-assessment","text":"Practical assessment"},{"depth":3,"slug":"reference-checks","text":"Reference checks"},{"depth":2,"slug":"frequently-asked-questions-about-frontend-web-development","text":"Frequently asked questions about frontend web development"},{"depth":3,"slug":"how-long-does-it-take-to-be-a-frontend-developer","text":"How long does it take to be a frontend developer?"},{"depth":3,"slug":"how-can-i-stay-up-to-date-with-the-latest-front-end-technologies-and-trends","text":"How can I stay up-to-date with the latest front-end technologies and trends?"},{"depth":2,"slug":"what-is-the-typical-career-path-for-a-frontend-developer","text":"What is the typical career path for a frontend developer?"},{"depth":3,"slug":"what-are-the-flexible-work-arrangements-available-to-frontend-developers","text":"What are the flexible work arrangements available to frontend developers?"},{"depth":3,"slug":"who-gets-paid-more-backend-or-frontend-web-developer","text":"Who gets paid more backend or frontend web developer?"},{"depth":3,"slug":"is-frontend-development-and-software-development-the-same","text":"Is frontend development and software development the same?"},{"depth":3,"slug":"what-is-the-difference-between-frontend-developers-and-backend-web-developers","text":"What is the difference between frontend developers and backend web developers?"},{"depth":3,"slug":"what-are-the-programming-languages-and-frameworks-used-in-frontend-development","text":"What are the programming languages and frameworks used in frontend development?"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$J = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$J;
					content.file = file$J;
					content.url = url$J;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$J())}`;
				});

const __vite_glob_0_53 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$J,
	compiledContent: compiledContent$J,
	default: Content$J,
	file: file$J,
	frontmatter: frontmatter$J,
	getHeadings: getHeadings$J,
	rawContent: rawContent$J,
	url: url$J
}, Symbol.toStringTag, { value: 'Module' }));

const html$I = () => "<p><img src=\"https://assets.roadmap.sh/guest/best-front-end-languages-gzngm.png\" alt=\"The best frontend languages to learn.\"></p>\n<p>Just starting out in web or mobile development? You may feel swamped by all the programming languages, libraries, and frameworks. With new options popping up daily, it’s easy to get overwhelmed. This guide will help you navigate that initial confusion.</p>\n<p>As someone who’s been through this process for over a decade, I’ve made this post to make your learning journey smoother.</p>\n<p>I’ll focus on the essential front-end languages and recommend a few important frameworks and libraries. This will equip you with the knowledge needed to make informed decisions, provide a roadmap to help you focus on the right skills, and help you build a rewarding career in <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end development</a>.</p>\n<h2 id=\"what-are-languages-libraries-and-frameworks\">What are Languages, Libraries, and Frameworks?</h2>\n<p>Before we explore the front end languages, libraries, and frameworks to learn in 2025, it is important to understand what they are and the differences between them.</p>\n<p><strong>Languages</strong> are the core programming languages that developers use to write code. They have defined syntax, semantics, and rules for writing instructions that computers can execute and understand. Examples include:</p>\n<ul>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>Dart</li>\n<li>Kotlin</li>\n</ul>\n<p><strong>Libraries</strong> are collections of pre-written code that developers can use to perform specific tasks. They save time and improve productivity because developers don’t have to write code from scratch. Libraries extend the functionality of a programming language by providing functions, methods, and classes that can be imported and used. Examples include:</p>\n<ul>\n<li>React</li>\n<li>Anime.js</li>\n<li>Chart.js</li>\n<li>JQuery</li>\n</ul>\n<p><strong><a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">Front-end frameworks</a></strong> are more comprehensive than libraries as they provide a structure or skeleton with sets of rules for building applications. They enforce architecture and offer tools, libraries, and components to streamline developments. Examples include:</p>\n<ul>\n<li>Vue</li>\n<li>Angular</li>\n<li>Flutter</li>\n</ul>\n<p>The major differences are that languages are used to write code, libraries provide reusable functions, and frameworks offer a structured approach to developing applications.</p>\n<h2 id=\"top-front-end-languages-to-learn-in-2025\">Top front-end languages to learn in 2025</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/top-frontend-languages-to-learn-pofrf.JPG\" alt=\"frontend languages\"></p>\n<p>These are the best front-end languages you should learn in 2025:</p>\n<p><strong>For web front-end development</strong>:</p>\n<ul>\n<li>HyperText Markup Language (HTML)</li>\n<li>Cascading Style Sheets (CSS)</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n</ul>\n<p><strong>For mobile front-end development</strong>:</p>\n<ul>\n<li>Dart</li>\n<li>Swift</li>\n<li>Kotlin</li>\n</ul>\n<h3 id=\"hypertext-markup-language-html\">HyperText Markup Language (HTML)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/html-bmvj9.png\" alt=\"HTML\"></p>\n<p>HTML is the standard markup language for creating web pages. It defines the structure and layout of content within a web browser, allowing for the display of text, images, videos, and more that users interact with. HTML is beginner-friendly, supported across multiple browsers, and fundamental to web development.</p>\n<p>HTML depends on languages like CSS and JavaScript to achieve full functionality, and it is mostly limited to web-based projects. Beyond being the backbone of web applications, it also plays an integral role in improving application accessibility, enhancing search engine optimization (SEO), and enabling assistive technologies to interpret and present content accurately.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>HTML is the foundational language for creating web pages.</li>\n<li>It defines the structure and content of the web pages.</li>\n<li>It is widely accepted and quick to grasp.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It is the starting point of anything web development.</li>\n<li>It is the foundation for structuring content effectively.</li>\n<li>Required for creating or understanding web content.</li>\n<li>It is easy to test and debug.</li>\n</ul>\n<h3 id=\"cascading-style-sheets-css\">Cascading Style Sheets (CSS)</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/css-logo-u45d6.png\" alt=\"CSS\"></p>\n<p>CSS plays a crucial role in determining the appearance and organization of web content. When used in conjunction with HTML, it enhances the appearance and layout of web pages, enabling the creation of responsive designs that adapt to various screen sizes. CSS handles colors, fonts, spacing, and more, allowing developers to create visually appealing user interfaces.</p>\n<p>Despite advancements in web technologies, CSS remains a powerful styling tool that is easy to start with. It has a robust ecosystem of libraries and frameworks, such as Tailwind CSS, Bootstrap, and Foundation, which facilitate the creation of aesthetically pleasing user interfaces.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>It is crucial for styling and visually enhancing web pages.</li>\n<li>It controls the overall appearance of the web by defining layouts, colors, and fonts.</li>\n<li>It promotes consistency across platforms.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It is an integral skill for front-end developers.</li>\n<li>It helps you improve the application’s user experience (UX).</li>\n<li>It enables the creation of visually appealing applications and websites.</li>\n</ul>\n<h3 id=\"javascript\">JavaScript</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/javascript-logo-vf4vv.png\" alt=\"JavaScript\"></p>\n<p>JavaScript is a versatile front end language used in conjunction with HTML and CSS to enhance the interaction of web pages. With features like excellent speed and cross-browser compatibility, JavaScript enables developers to add dynamic elements such as form validation, animations, 2D/3D graphics, dynamic updates to web pages without requiring a page refresh, and other interactive features to web applications.</p>\n<p>JavaScript is essential for web development and has a vast ecosystem of libraries and frameworks for building applications across multiple platforms.</p>\n<p>JavaScript implementation varies across different browsers, creating vulnerabilities for users. They may face threats such as unauthorized data access and system manipulation by injecting malicious code. Additionally, if JavaScript is disabled in a browser, certain features and functionality might not work, adversely affecting the user experience.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>It is a versatile scripting language for adding interaction and dynamism to web content.</li>\n<li>It is widely supported by all modern web browsers.</li>\n<li>Seamlessly integrate with other languages.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It is essential for creating interactive web pages</li>\n<li>Beyond the web, you can use it for mobile app and server-side development.</li>\n<li>Foundation for various libraries and frameworks across all platforms.</li>\n</ul>\n<p>Want to get started with JavaScript or expand your current skills? <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">You can explore the complete JavaScript roadmap</a>.</p>\n<h3 id=\"typescript\">TypeScript</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/image3-y7ryl.png\" alt=\"TypeScript\"></p>\n<p>TypeScript is a robust and widely used front end language developed by Microsoft, which extends JavaScript by adding static typing and other advanced features. TypeScript code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development.</p>\n<p>Web developers love TypeScript because it enhances their experience by identifying runtime errors during development and providing fixes, speeding up the development process.</p>\n<p>TypeScript has a steeper learning curve than JavaScript, and it reduces development speed because an additional compilation step is required.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>Adds static types to your codebase.</li>\n<li>Makes it easy to write and maintain large-scale applications.</li>\n<li>Improves code quality as errors catch early.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>Increasingly adopted for building enterprise-level applications.</li>\n<li>Enhances JavaScript with type safety and modern features</li>\n</ul>\n<p>Want to get started with TypeScript or expand your current skills? <a href=\"https://roadmap.sh/typescript\" target=\"_blank\">You can explore the complete TypeScript roadmap</a>.</p>\n<h3 id=\"dart\">Dart</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/dart-logo-1yr28.png\" alt=\"Dart\"></p>\n<p>Dart is a powerful, multi-purpose, and modern programming language designed for building high-quality applications on various platforms. It offers features such as sound null safety, object-oriented programming (OOP), pattern matching, and more, enabling developers to build and model robust software.</p>\n<p>Dart is the primary language for <a href=\"https://roadmap.sh/flutter\" target=\"_blank\">Flutter</a>, a cross-platform runtime environment that enables compilation to native code. Flutter provides portability and speed for building applications across web and mobile platforms using a single codebase.</p>\n<p>Dart is strongly integrated with the Flutter framework, which may limit its support and resources outside of the framework. Moreover, Dart has limited adoption compared to other front end languages, restricting its usage in other domains.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>It is optimized for web, mobile, and server applications.</li>\n<li>It has a smooth developer experience and fast performance.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It enables cross-platform development from a single codebase.</li>\n<li>Gaining popularity and is widely adopted due to Flutter (Google’s UI Kit).</li>\n</ul>\n<h3 id=\"swift\">Swift</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/swift-logo-5vk0f.jpg\" alt=\"Swift\"></p>\n<p>Swift is a high-level, multi-paradigm, compiled programming language developed for all Apple platforms. It was released in 2014 to replace Apple’s earlier programming language, Objective-C. Swift is known for its speed, modernity, and safety, making it ideal for building iOS (mobile apps), macOS (desktop), and other Apple platforms.</p>\n<p>Swift is a fast, secure, and versatile language that offers automatic memory management and a smaller memory footprint due to its integrated standard libraries.</p>\n<p>Swift is primarily designed to support Apple’s operating systems and has limited support for cross-platform development.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>It is the main language for iOS development.</li>\n<li>It offers modern features, safety, and performance.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It is essential for developing applications within Apple’s ecosystem.</li>\n<li>Relatively easy to learn and use, yet powerful for professional native development.</li>\n</ul>\n<h3 id=\"kotlin\">Kotlin</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/kotlin-logo-0fbjy.png\" alt=\"Kotlin\"></p>\n<p>Kotlin is a cross-platform, statically typed, general-purpose programming language renowned for building robust and scalable applications. It serves as Google’s preferred language for Android app development. Initially released in July 2011, Kotlin has rapidly expanded its adoption beyond mobile app development. Thanks to its modern syntax and elegant design, it is now employed for server-side, full-stack, and data science applications.</p>\n<p>Kotlin draws inspiration from multiple programming languages, combining the best aspects of each. Based on Java but with enhanced capabilities, reliability, and ease of maintenance, Kotlin is the go-to language for developing modern Android applications and is backed by major organizations.</p>\n<p>However, it’s worth noting that compared to Java, job opportunities and adoption of Kotlin across software development are limited.</p>\n<p><strong>Why is it important</strong></p>\n<ul>\n<li>It is the preferred language for Android app development.</li>\n<li>It offers modern features, safety, and performance.</li>\n</ul>\n<p><strong>Why you should learn it</strong></p>\n<ul>\n<li>It is becoming the standard for Android development.</li>\n<li>It is concise, safe, and compatible with existing Java codes.</li>\n<li>Can be used for both Android and server-side development.</li>\n</ul>\n<p>The table below shows a quick summary of each language’s use cases as a front end language.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/use-cases-qwm5k.JPG\" alt=\"use cases\"></p>\n<h2 id=\"top-front-end-frameworks-and-libraries-to-learn-in-2025\">Top front-end frameworks and libraries to learn in 2025</h2>\n<p>While front end languages are essential for creating robust applications that meet business needs, they can become burdensome when developing medium to large applications. Issues like lack of code reusability, maintainability challenges, time-consuming development, and repetition may arise.</p>\n<p>Frameworks and libraries offer a solution by providing a structured approach to application development. They include pre-written code, reusable functions, coding standards, and architectural patterns that developers can leverage for common tasks, saving time and effort. Additionally, frameworks often have built-in security features that help JavaScript code execute safely on users’ computers. They also enhance scalability and performance optimization, improving overall software quality.</p>\n<p>You should explore these frontend frameworks and libraries in 2025:</p>\n<ul>\n<li>React</li>\n<li>Vue</li>\n<li>Angular</li>\n<li>Svelte</li>\n<li>Solid.js</li>\n<li>Next.js</li>\n<li>Remix</li>\n<li>Nuxt</li>\n<li>Astro</li>\n</ul>\n<h3 id=\"react\">React</h3>\n<p>React is a widely adopted JavaScript library developed by Meta and a vibrant community of individual contributors. It empowers developers to construct interactive user interfaces by assembling individual pieces known as components. React provides a reusable modular architecture through reusable components and a sophisticated rendering engine, facilitating the creation and management of small-to-large applications.</p>\n<p>Over the years, React has undergone technological advancements and has become the foundation for various frameworks such as Next.js, Gatsby, and Remix. These frameworks build upon React’s core capabilities, offering additional features and functionalities to streamline frontend development.</p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/react\" target=\"_blank\">React roadmap</a>.</p>\n<h3 id=\"vue\">Vue</h3>\n<p>Vue is a progressive JavaScript framework designed for developing interactive web applications, leveraging the model-view-view model (MVVM) architecture to separate the user interface from the application’s business logic. Vue extends HTML elements to facilitate the creation of reusable code components. It provides several built-in features, including templating, reactivity, and transitions. Additionally, Vue offers support for various libraries, making it suitable for developing applications like Single-Page Applications (SPAs), desktop and mobile applications of various scales, from small projects to large enterprise applications.</p>\n<p>Vue has also become the foundation of frameworks like Nuxt.js, VuePress, and Vuetify, offering pre-built components, server-side rendering, themes, and much more for building complex websites and applications. Its gentle learning curve makes it a popular choice for beginners starting front-end development.</p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue roadmap</a>.</p>\n<h3 id=\"angular\">Angular</h3>\n<p>Angular is an open source JavaScript framework developed by the Angular team at Google with contributions from individual developers. Built on TypeScript, Angular provides a well-structured framework with features like two-way data binding, reactive programming, dependency injection, and modular architecture. These features enable developers to build enterprise-grade applications.</p>\n<p>Although Angular has a steep learning curve, it has significantly influenced the web development community. Many other frameworks and open-source libraries have drawn inspiration from Angular’s paradigm and architectural patterns, attesting to its influence and popularity.</p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular roadmap</a>.</p>\n<h3 id=\"svelte\">Svelte</h3>\n<p>Svelte is an open-source component-based front-end framework for building web applications. It adheres to the paradigm of existing web frameworks but introduces a unique approach that involves less code, no virtual Document Object Model (DOM), and built-in reactivity. Svelte also serves as the foundation for frameworks like SvelteKit, which is a library for building user interfaces compatible with both legacy and modern web browsers.</p>\n<h3 id=\"solidjs\">Solid.js</h3>\n<p>Solid.js is a declarative JavaScript framework for building UI with maximum control over reactivity; it does not re-render to get updates. It shares similarities with React but doesn’t use the virtual DOM. Instead, it uses a compiler that converts its code to vanilla JavaScript. Solid.js supports all modern library features like fragments, portals, context, suspense, lazy components, etc., for a better developer experience.</p>\n<h3 id=\"nextjs\">Next.js</h3>\n<p>Next.js is an open-source web development framework built on React’s latest features. It has built-in features like dynamic HTML streaming, client and server rendering, server actions, data fetching, middleware, and more. It allows you to build a full-stack web application within a single project.</p>\n<h3 id=\"remix\">Remix</h3>\n<p>Like Next.js, Remix is a full-stack web development framework built on React’s latest features. It utilizes classic and standard web fundamentals for crafting HTML forms and allows you to build your front-end and back-end in an innovative way.</p>\n<h3 id=\"nuxt\">Nuxt</h3>\n<p>Nuxt is an open-source framework for building full-stack web applications powered by Vue. It comes with features like file-based routing, data fetching, server routes, TypeScript support, middleware, and more, making it ideal for building dynamic web pages.</p>\n<h3 id=\"astro\">Astro</h3>\n<p>Astro is an open-source web framework for building content-heavy websites like e-commerce platforms, blogs, and marketing websites. Compared to other frameworks, it reduces JavaScript overhead, loads faster, and has excellent SEO support. Additionally, it features Island, a component-based architecture optimized for content-driven websites. It is UI-agnostic, supporting other UI libraries such as Vue, Svelte, React, web components, etc.</p>\n<h2 id=\"other-innovative-front-end-languages-and-frameworks\">Other innovative front-end languages and frameworks</h2>\n<p>Web and mobile platforms become increasingly powerful as more use cases are unlocked. This trend has led to increased technology actively creating bridges to integrate front-end usage in libraries and frameworks, enhancing user experience.</p>\n<p>These are some of the languages and frameworks bridging the gap to make front-end development even more accessible:</p>\n<h3 id=\"htmx\">HTMX</h3>\n<p>HTMX is a dependency-free UI library for the web, which can replace traditional front-end libraries with the simplicity of HTML. It introduces new attributes to HTML to handle complex requirements of modern UIs, such as AJAX, CSS Transitions, WebSockets, and Server-Sent Events.</p>\n<h3 id=\"react-native\">React Native</h3>\n<p>React Native enables the development of cross-platform mobile applications, such as Android and iOS, using React.js. It compiles to native mobile code, which allows you to “write once and ship everywhere.” Thanks to the complimentary React.js community, React Native also features a rich tooling and plugin ecosystem.</p>\n<p>You can learn more details by exploring the <a href=\"https://roadmap.sh/react-native\" target=\"_blank\">React Native roadmap</a>.</p>\n<h3 id=\"webassembly-and-front-end-development\">WebAssembly and Front-end development</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/webassembly-logo-lugnl.png\" alt=\"WebAssembly\"></p>\n<p>WebAssembly (or Wasm) is a binary instruction format serving as a compilation target for programming languages, enabling them to run efficiently in web browsers. It empowers developers to write high-performance code in languages like C, <a href=\"https://roadmap.sh/cpp\" target=\"_blank\">C++</a>, and <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>, which can then be seamlessly integrated into web applications, enhancing web front-end development capabilities.</p>\n<p>Beyond the web, WebAssembly has also gained adoption in various domains, such as game distribution, server-side applications, hybrid native apps on mobile devices, and symmetric computations.</p>\n<p>Companies like Figma, AutoCAD, and cloud-native companies actively leverage WebAssembly to meet their performance needs and contribute to the WebAssembly ecosystem by building libraries, tools, and packages that enhance its capabilities.</p>\n<h2 id=\"how-do-you-select-the-right-front-end-language\">How do you select the right front-end language?</h2>\n<p>Choosing the right front end language to learn is an important decision. It shouldn’t be taken lightly, as it significantly impacts your career trajectory and success. This section examines some points to help you select a front end language to learn in 2025.</p>\n<p>The points are:</p>\n<ul>\n<li>Project requirement</li>\n<li>Targeted platform</li>\n<li>Career trajectory and opportunity</li>\n<li>Ecosystem and community support</li>\n</ul>\n<h3 id=\"project-requirement\">Project requirement</h3>\n<p>A specific project’s scope, goals, and features play an essential role in selecting the right language to learn, and answering these questions is vital:</p>\n<ul>\n<li>What kind of application are you building?</li>\n<li>How complex is the data flow and logic?</li>\n<li>Is customization and scalability important?</li>\n</ul>\n<p>The answers will help narrow your options and focus on languages that suit the project’s needs. For example, if you are building a dynamic application for data collection, JavaScript or PHP alongside HTML and CSS are excellent choices.</p>\n<h3 id=\"targeted-platform\">Targeted platform</h3>\n<p>The web, mobile, TV, and other screen-enabled electronic devices present users with interfaces they touch, see and interact with. It is important to have a good understanding of the supported languages on such platforms.</p>\n<p>For example, building an application for the Apple platform involves using languages like Swift, Dart (via <a href=\"https://roadmap.sh/flutter\" target=\"_blank\">Flutter</a>), and JavaScript (via <a href=\"https://roadmap.sh/react-native\" target=\"_blank\">React Native</a>). Additionally, it is essential to learn to use the associated frameworks and their application programming interfaces (APIs).</p>\n<h3 id=\"career-trajectory-and-opportunity\">Career trajectory and opportunity</h3>\n<p>It is important to carefully evaluate the stage of your career before making a choice. For example, if you are a beginner in technology, web development languages like HTML, CSS, and JavaScript might be a good entry point because of their gradual learning curve. On the other hand, an experienced developer seeking to expand their knowledge within the web ecosystem might opt for TypeScript, as it is widely adopted for mission-critical applications.</p>\n<p>In addition, if you plan to learn a new language to secure a job, it’s essential to carefully research the location, available job opportunities, and the technologies most companies are adopting, including the programming languages powering them.</p>\n<h3 id=\"ecosystem-and-community-support\">Ecosystem and community support</h3>\n<p>Before selecting a language, assess the size and activity level of the community in terms of available resources. Then, look at the updates, fixes, patches, and innovations surrounding libraries and frameworks in the language. For example, the JavaScript ecosystem constantly releases updates to libraries and frameworks.</p>\n<p>In summary, essential languages to learn in 2025 include HTML for structure, CSS for styling, and JavaScript for interactivity. TypeScript, Dart, Swift, and Kotlin are also significant.</p>\n<p>Furthermore, users’ evolving needs will continue to directly impact the approach to front-end development. This evolution will spur the rise of new technologies, libraries, and frameworks and prompt existing technologies to update their solutions. Business requirements will also play a significant role in determining the <a href=\"https://roadmap.sh/frontend/technologies\" target=\"_blank\">choice of technologies during front-end development</a>.</p>\n<p>Staying informed about these changes is critical, as is knowing the appropriate path to follow when learning or adopting new technology. The <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end roadmap</a> is a reliable source of truth for developers seeking to stay updated and informed about the changes that may arise in front-end development.</p>\n<p>Beyond having access to a reliable roadmap, an essential aspect of learning is monitoring your progress, demonstrating your <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">skills</a> to potential employers, and joining a supportive community. <a href=\"https://roadmap.sh/signup\" target=\"_blank\">Sign up to get started</a> on the frontend roadmap while tracking your progress.</p>";

				const frontmatter$I = {"title":"What Front End Programming Languages Should You Learn?","description":"Get ahead in web development. Discover the essential frontend languages every pro developer uses!","authorId":"william","excludedBySlug":"/frontend/languages","seo":{"title":"What Front End Programming Languages Should You Learn?","description":"Get ahead in web development. Discover the essential frontend languages every pro developer uses!","ogImageUrl":"https://assets.roadmap.sh/guest/best-front-end-languages-gzngm.png"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-05-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$I = "/workspace/src/data/guides/frontend-languages.md";
				const url$I = undefined;
				function rawContent$I() {
					return "   \n                                                               \n                                                                                                                \n                 \n                                     \n    \n                                                                 \n                                                                                                                  \n                                                                                  \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best frontend languages to learn.](https://assets.roadmap.sh/guest/best-front-end-languages-gzngm.png)\n\nJust starting out in web or mobile development? You may feel swamped by all the programming languages, libraries, and frameworks. With new options popping up daily, it's easy to get overwhelmed. This guide will help you navigate that initial confusion.\n\nAs someone who's been through this process for over a decade, I’ve made this post to make your learning journey smoother.\n\nI'll focus on the essential front-end languages and recommend a few important frameworks and libraries. This will equip you with the knowledge needed to make informed decisions, provide a roadmap to help you focus on the right skills, and help you build a rewarding career in [front-end development](https://roadmap.sh/frontend).\n\n## What are Languages, Libraries, and Frameworks?\n\nBefore we explore the front end languages, libraries, and frameworks to learn in 2025, it is important to understand what they are and the differences between them.\n\n**Languages** are the core programming languages that developers use to write code. They have defined syntax, semantics, and rules for writing instructions that computers can execute and understand. Examples include:\n\n- JavaScript\n- TypeScript\n- Dart\n- Kotlin\n\n**Libraries** are collections of pre-written code that developers can use to perform specific tasks. They save time and improve productivity because developers don’t have to write code from scratch. Libraries extend the functionality of a programming language by providing functions, methods, and classes that can be imported and used. Examples include:\n\n- React\n- Anime.js\n- Chart.js\n- JQuery\n\n**[Front-end frameworks](https://roadmap.sh/frontend/frameworks)** are more comprehensive than libraries as they provide a structure or skeleton with sets of rules for building applications. They enforce architecture and offer tools, libraries, and components to streamline developments. Examples include:\n\n- Vue\n- Angular\n- Flutter\n\nThe major differences are that languages are used to write code, libraries provide reusable functions, and frameworks offer a structured approach to developing applications.\n\n## Top front-end languages to learn in 2025\n\n![frontend languages](https://assets.roadmap.sh/guest/top-frontend-languages-to-learn-pofrf.JPG)\n\nThese are the best front-end languages you should learn in 2025: \n\n**For web front-end development**:\n\n- HyperText Markup Language (HTML)\n- Cascading Style Sheets (CSS)\n- JavaScript\n- TypeScript\n\n**For mobile front-end development**:\n\n- Dart\n- Swift\n- Kotlin\n\n### HyperText Markup Language (HTML)\n\n![HTML](https://assets.roadmap.sh/guest/html-bmvj9.png)\n\nHTML is the standard markup language for creating web pages. It defines the structure and layout of content within a web browser, allowing for the display of text, images, videos, and more that users interact with. HTML is beginner-friendly, supported across multiple browsers, and fundamental to web development.\n\nHTML depends on languages like CSS and JavaScript to achieve full functionality, and it is mostly limited to web-based projects. Beyond being the backbone of web applications, it also plays an integral role in improving application accessibility, enhancing search engine optimization (SEO), and enabling assistive technologies to interpret and present content accurately.\n\n**Why is it important**\n\n- HTML is the foundational language for creating web pages. \n- It defines the structure and content of the web pages.\n- It is widely accepted and quick to grasp.\n\n**Why you should learn it**\n\n- It is the starting point of anything web development.\n- It is the foundation for structuring content effectively.\n- Required for creating or understanding web content.\n- It is easy to test and debug.\n\n### Cascading Style Sheets (CSS)\n\n![CSS](https://assets.roadmap.sh/guest/css-logo-u45d6.png)\n\nCSS plays a crucial role in determining the appearance and organization of web content. When used in conjunction with HTML, it enhances the appearance and layout of web pages, enabling the creation of responsive designs that adapt to various screen sizes. CSS handles colors, fonts, spacing, and more, allowing developers to create visually appealing user interfaces.\n\nDespite advancements in web technologies, CSS remains a powerful styling tool that is easy to start with. It has a robust ecosystem of libraries and frameworks, such as Tailwind CSS, Bootstrap, and Foundation, which facilitate the creation of aesthetically pleasing user interfaces.\n\n**Why is it important**\n\n- It is crucial for styling and visually enhancing web pages.\n- It controls the overall appearance of the web by defining layouts, colors, and fonts.\n- It promotes consistency across platforms.\n\n**Why you should learn it**\n\n- It is an integral skill for front-end developers.\n- It helps you improve the application’s user experience (UX).\n- It enables the creation of visually appealing applications and websites.\n\n### JavaScript\n\n![JavaScript](https://assets.roadmap.sh/guest/javascript-logo-vf4vv.png)\n\nJavaScript is a versatile front end language used in conjunction with HTML and CSS to enhance the interaction of web pages. With features like excellent speed and cross-browser compatibility, JavaScript enables developers to add dynamic elements such as form validation, animations, 2D/3D graphics, dynamic updates to web pages without requiring a page refresh, and other interactive features to web applications.\n\nJavaScript is essential for web development and has a vast ecosystem of libraries and frameworks for building applications across multiple platforms.\n\nJavaScript implementation varies across different browsers, creating vulnerabilities for users. They may face threats such as unauthorized data access and system manipulation by injecting malicious code. Additionally, if JavaScript is disabled in a browser, certain features and functionality might not work, adversely affecting the user experience.\n\n**Why is it important**\n\n- It is a versatile scripting language for adding interaction and dynamism to web content.\n- It is widely supported by all modern web browsers.\n- Seamlessly integrate with other languages.\n\n**Why you should learn it**\n\n- It is essential for creating interactive web pages\n- Beyond the web, you can use it for mobile app and server-side development.\n- Foundation for various libraries and frameworks across all platforms.\n\nWant to get started with JavaScript or expand your current skills? [You can explore the complete JavaScript roadmap](https://roadmap.sh/javascript).\n\n### TypeScript\n\n![TypeScript](https://assets.roadmap.sh/guest/image3-y7ryl.png)\n\nTypeScript is a robust and widely used front end language developed by Microsoft, which extends JavaScript by adding static typing and other advanced features. TypeScript code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development.\n\nWeb developers love TypeScript because it enhances their experience by identifying runtime errors during development and providing fixes, speeding up the development process.\n\nTypeScript has a steeper learning curve than JavaScript, and it reduces development speed because an additional compilation step is required. \n\n**Why is it important**\n\n- Adds static types to your codebase.\n- Makes it easy to write and maintain large-scale applications.\n- Improves code quality as errors catch early.\n\n**Why you should learn it**\n\n- Increasingly adopted for building enterprise-level applications.\n- Enhances JavaScript with type safety and modern features\n\nWant to get started with TypeScript or expand your current skills? [You can explore the complete TypeScript roadmap](https://roadmap.sh/typescript).\n\n### Dart\n\n![Dart](https://assets.roadmap.sh/guest/dart-logo-1yr28.png)\n\nDart is a powerful, multi-purpose, and modern programming language designed for building high-quality applications on various platforms. It offers features such as sound null safety, object-oriented programming (OOP), pattern matching, and more, enabling developers to build and model robust software.\n\nDart is the primary language for [Flutter](https://roadmap.sh/flutter), a cross-platform runtime environment that enables compilation to native code. Flutter provides portability and speed for building applications across web and mobile platforms using a single codebase.\n\nDart is strongly integrated with the Flutter framework, which may limit its support and resources outside of the framework. Moreover, Dart has limited adoption compared to other front end languages, restricting its usage in other domains.\n\n**Why is it important**\n\n- It is optimized for web, mobile, and server applications.\n- It has a smooth developer experience and fast performance.\n\n**Why you should learn it**\n\n- It enables cross-platform development from a single codebase.\n- Gaining popularity and is widely adopted due to Flutter (Google’s UI Kit).\n\n### Swift\n\n![Swift](https://assets.roadmap.sh/guest/swift-logo-5vk0f.jpg)\n\nSwift is a high-level, multi-paradigm, compiled programming language developed for all Apple platforms. It was released in 2014 to replace Apple’s earlier programming language, Objective-C. Swift is known for its speed, modernity, and safety, making it ideal for building iOS (mobile apps), macOS (desktop), and other Apple platforms.\n\nSwift is a fast, secure, and versatile language that offers automatic memory management and a smaller memory footprint due to its integrated standard libraries.\n\nSwift is primarily designed to support Apple's operating systems and has limited support for cross-platform development.\n\n**Why is it important**\n\n- It is the main language for iOS development.\n- It offers modern features, safety, and performance.\n\n**Why you should learn it**\n\n- It is essential for developing applications within Apple’s ecosystem.\n- Relatively easy to learn and use, yet powerful for professional native development.\n\n### Kotlin\n\n![Kotlin](https://assets.roadmap.sh/guest/kotlin-logo-0fbjy.png)\n\nKotlin is a cross-platform, statically typed, general-purpose programming language renowned for building robust and scalable applications. It serves as Google’s preferred language for Android app development. Initially released in July 2011, Kotlin has rapidly expanded its adoption beyond mobile app development. Thanks to its modern syntax and elegant design, it is now employed for server-side, full-stack, and data science applications.\n\nKotlin draws inspiration from multiple programming languages, combining the best aspects of each. Based on Java but with enhanced capabilities, reliability, and ease of maintenance, Kotlin is the go-to language for developing modern Android applications and is backed by major organizations.\n\nHowever, it’s worth noting that compared to Java, job opportunities and adoption of Kotlin across software development are limited.\n\n**Why is it important**\n\n- It is the preferred language for Android app development.\n- It offers modern features, safety, and performance.\n\n**Why you should learn it**\n\n- It is becoming the standard for Android development.\n- It is concise, safe, and compatible with existing Java codes.\n- Can be used for both Android and server-side development.\n\nThe table below shows a quick summary of each language’s use cases as a front end language.\n\n![use cases](https://assets.roadmap.sh/guest/use-cases-qwm5k.JPG)\n\n## Top front-end frameworks and libraries to learn in 2025\n\nWhile front end languages are essential for creating robust applications that meet business needs, they can become burdensome when developing medium to large applications. Issues like lack of code reusability, maintainability challenges, time-consuming development, and repetition may arise.\n\nFrameworks and libraries offer a solution by providing a structured approach to application development. They include pre-written code, reusable functions, coding standards, and architectural patterns that developers can leverage for common tasks, saving time and effort. Additionally, frameworks often have built-in security features that help JavaScript code execute safely on users' computers. They also enhance scalability and performance optimization, improving overall software quality.\n\nYou should explore these frontend frameworks and libraries in 2025:\n\n- React\n- Vue\n- Angular\n- Svelte\n- Solid.js\n- Next.js\n- Remix\n- Nuxt\n- Astro\n\n### React\n\nReact is a widely adopted JavaScript library developed by Meta and a vibrant community of individual contributors. It empowers developers to construct interactive user interfaces by assembling individual pieces known as components. React provides a reusable modular architecture through reusable components and a sophisticated rendering engine, facilitating the creation and management of small-to-large applications.\n\nOver the years, React has undergone technological advancements and has become the foundation for various frameworks such as Next.js, Gatsby, and Remix. These frameworks build upon React's core capabilities, offering additional features and functionalities to streamline frontend development.\n\nYou can learn more details by exploring the [React roadmap](https://roadmap.sh/react).\n\n### Vue\n\nVue is a progressive JavaScript framework designed for developing interactive web applications, leveraging the model-view-view model (MVVM) architecture to separate the user interface from the application's business logic. Vue extends HTML elements to facilitate the creation of reusable code components. It provides several built-in features, including templating, reactivity, and transitions. Additionally, Vue offers support for various libraries, making it suitable for developing applications like Single-Page Applications (SPAs), desktop and mobile applications of various scales, from small projects to large enterprise applications. \n\nVue has also become the foundation of frameworks like Nuxt.js, VuePress, and Vuetify, offering pre-built components, server-side rendering, themes, and much more for building complex websites and applications. Its gentle learning curve makes it a popular choice for beginners starting front-end development.\n\nYou can learn more details by exploring the [Vue roadmap](https://roadmap.sh/vue).\n\n### Angular\n\nAngular is an open source JavaScript framework developed by the Angular team at Google with contributions from individual developers. Built on TypeScript, Angular provides a well-structured framework with features like two-way data binding, reactive programming, dependency injection, and modular architecture. These features enable developers to build enterprise-grade applications.\n\nAlthough Angular has a steep learning curve, it has significantly influenced the web development community. Many other frameworks and open-source libraries have drawn inspiration from Angular's paradigm and architectural patterns, attesting to its influence and popularity.\n\nYou can learn more details by exploring the [Angular roadmap](https://roadmap.sh/angular).\n\n### Svelte\n\nSvelte is an open-source component-based front-end framework for building web applications. It adheres to the paradigm of existing web frameworks but introduces a unique approach that involves less code, no virtual Document Object Model (DOM), and built-in reactivity. Svelte also serves as the foundation for frameworks like SvelteKit, which is a library for building user interfaces compatible with both legacy and modern web browsers.\n\n### Solid.js\n\nSolid.js is a declarative JavaScript framework for building UI with maximum control over reactivity; it does not re-render to get updates. It shares similarities with React but doesn't use the virtual DOM. Instead, it uses a compiler that converts its code to vanilla JavaScript. Solid.js supports all modern library features like fragments, portals, context, suspense, lazy components, etc., for a better developer experience.\n\n### Next.js\n\nNext.js is an open-source web development framework built on React's latest features. It has built-in features like dynamic HTML streaming, client and server rendering, server actions, data fetching, middleware, and more. It allows you to build a full-stack web application within a single project.\n\n### Remix\n\nLike Next.js, Remix is a full-stack web development framework built on React’s latest features. It utilizes classic and standard web fundamentals for crafting HTML forms and allows you to build your front-end and back-end in an innovative way.\n\n### Nuxt\n\nNuxt is an open-source framework for building full-stack web applications powered by Vue. It comes with features like file-based routing, data fetching, server routes, TypeScript support, middleware, and more, making it ideal for building dynamic web pages.\n\n### Astro\n\nAstro is an open-source web framework for building content-heavy websites like e-commerce platforms, blogs, and marketing websites. Compared to other frameworks, it reduces JavaScript overhead, loads faster, and has excellent SEO support. Additionally, it features Island, a component-based architecture optimized for content-driven websites. It is UI-agnostic, supporting other UI libraries such as Vue, Svelte, React, web components, etc.\n\n## Other innovative front-end languages and frameworks\n\nWeb and mobile platforms become increasingly powerful as more use cases are unlocked. This trend has led to increased technology actively creating bridges to integrate front-end usage in libraries and frameworks, enhancing user experience.\n\nThese are some of the languages and frameworks bridging the gap to make front-end development even more accessible:\n\n### HTMX\n\nHTMX is a dependency-free UI library for the web, which can replace traditional front-end libraries with the simplicity of HTML. It introduces new attributes to HTML to handle complex requirements of modern UIs, such as AJAX, CSS Transitions, WebSockets, and Server-Sent Events.\n\n### React Native\n\nReact Native enables the development of cross-platform mobile applications, such as Android and iOS, using React.js. It compiles to native mobile code, which allows you to “write once and ship everywhere.” Thanks to the complimentary React.js community, React Native also features a rich tooling and plugin ecosystem.\n\nYou can learn more details by exploring the [React Native roadmap](https://roadmap.sh/react-native).\n\n### WebAssembly and Front-end development\n\n![WebAssembly](https://assets.roadmap.sh/guest/webassembly-logo-lugnl.png)\n\nWebAssembly (or Wasm) is a binary instruction format serving as a compilation target for programming languages, enabling them to run efficiently in web browsers. It empowers developers to write high-performance code in languages like C, [C++](https://roadmap.sh/cpp), and [Rust](https://roadmap.sh/rust), which can then be seamlessly integrated into web applications, enhancing web front-end development capabilities.\n\nBeyond the web, WebAssembly has also gained adoption in various domains, such as game distribution, server-side applications, hybrid native apps on mobile devices, and symmetric computations.\n\nCompanies like Figma, AutoCAD, and cloud-native companies actively leverage WebAssembly to meet their performance needs and contribute to the WebAssembly ecosystem by building libraries, tools, and packages that enhance its capabilities.\n\n## How do you select the right front-end language?\n\nChoosing the right front end language to learn is an important decision. It shouldn’t be taken lightly, as it significantly impacts your career trajectory and success. This section examines some points to help you select a front end language to learn in 2025.\n\nThe points are:\n\n- Project requirement\n- Targeted platform\n- Career trajectory and opportunity\n- Ecosystem and community support\n\n### Project requirement\n\nA specific project's scope, goals, and features play an essential role in selecting the right language to learn, and answering these questions is vital:\n\n- What kind of application are you building?\n- How complex is the data flow and logic?\n- Is customization and scalability important?\n\nThe answers will help narrow your options and focus on languages that suit the project's needs. For example, if you are building a dynamic application for data collection, JavaScript or PHP alongside HTML and CSS are excellent choices.\n\n### Targeted platform\n\nThe web, mobile, TV, and other screen-enabled electronic devices present users with interfaces they touch, see and interact with. It is important to have a good understanding of the supported languages on such platforms.\n\nFor example, building an application for the Apple platform involves using languages like Swift, Dart (via [Flutter](https://roadmap.sh/flutter)), and JavaScript (via [React Native](https://roadmap.sh/react-native)). Additionally, it is essential to learn to use the associated frameworks and their application programming interfaces (APIs).\n\n### Career trajectory and opportunity\n\nIt is important to carefully evaluate the stage of your career before making a choice. For example, if you are a beginner in technology, web development languages like HTML, CSS, and JavaScript might be a good entry point because of their gradual learning curve. On the other hand, an experienced developer seeking to expand their knowledge within the web ecosystem might opt for TypeScript, as it is widely adopted for mission-critical applications.\n\nIn addition, if you plan to learn a new language to secure a job, it's essential to carefully research the location, available job opportunities, and the technologies most companies are adopting, including the programming languages powering them.\n\n### Ecosystem and community support\n\nBefore selecting a language, assess the size and activity level of the community in terms of available resources. Then, look at the updates, fixes, patches, and innovations surrounding libraries and frameworks in the language. For example, the JavaScript ecosystem constantly releases updates to libraries and frameworks.\n\nIn summary, essential languages to learn in 2025 include HTML for structure, CSS for styling, and JavaScript for interactivity. TypeScript, Dart, Swift, and Kotlin are also significant.\n\nFurthermore, users' evolving needs will continue to directly impact the approach to front-end development. This evolution will spur the rise of new technologies, libraries, and frameworks and prompt existing technologies to update their solutions. Business requirements will also play a significant role in determining the [choice of technologies during front-end development](https://roadmap.sh/frontend/technologies).\n\nStaying informed about these changes is critical, as is knowing the appropriate path to follow when learning or adopting new technology. The [front-end roadmap](https://roadmap.sh/frontend) is a reliable source of truth for developers seeking to stay updated and informed about the changes that may arise in front-end development.\n\nBeyond having access to a reliable roadmap, an essential aspect of learning is monitoring your progress, demonstrating your [skills](https://roadmap.sh/frontend/developer-skills) to potential employers, and joining a supportive community. [Sign up to get started](https://roadmap.sh/signup) on the frontend roadmap while tracking your progress.\n";
				}
				async function compiledContent$I() {
					return await html$I();
				}
				function getHeadings$I() {
					return [{"depth":2,"slug":"what-are-languages-libraries-and-frameworks","text":"What are Languages, Libraries, and Frameworks?"},{"depth":2,"slug":"top-front-end-languages-to-learn-in-2025","text":"Top front-end languages to learn in 2025"},{"depth":3,"slug":"hypertext-markup-language-html","text":"HyperText Markup Language (HTML)"},{"depth":3,"slug":"cascading-style-sheets-css","text":"Cascading Style Sheets (CSS)"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":3,"slug":"typescript","text":"TypeScript"},{"depth":3,"slug":"dart","text":"Dart"},{"depth":3,"slug":"swift","text":"Swift"},{"depth":3,"slug":"kotlin","text":"Kotlin"},{"depth":2,"slug":"top-front-end-frameworks-and-libraries-to-learn-in-2025","text":"Top front-end frameworks and libraries to learn in 2025"},{"depth":3,"slug":"react","text":"React"},{"depth":3,"slug":"vue","text":"Vue"},{"depth":3,"slug":"angular","text":"Angular"},{"depth":3,"slug":"svelte","text":"Svelte"},{"depth":3,"slug":"solidjs","text":"Solid.js"},{"depth":3,"slug":"nextjs","text":"Next.js"},{"depth":3,"slug":"remix","text":"Remix"},{"depth":3,"slug":"nuxt","text":"Nuxt"},{"depth":3,"slug":"astro","text":"Astro"},{"depth":2,"slug":"other-innovative-front-end-languages-and-frameworks","text":"Other innovative front-end languages and frameworks"},{"depth":3,"slug":"htmx","text":"HTMX"},{"depth":3,"slug":"react-native","text":"React Native"},{"depth":3,"slug":"webassembly-and-front-end-development","text":"WebAssembly and Front-end development"},{"depth":2,"slug":"how-do-you-select-the-right-front-end-language","text":"How do you select the right front-end language?"},{"depth":3,"slug":"project-requirement","text":"Project requirement"},{"depth":3,"slug":"targeted-platform","text":"Targeted platform"},{"depth":3,"slug":"career-trajectory-and-opportunity","text":"Career trajectory and opportunity"},{"depth":3,"slug":"ecosystem-and-community-support","text":"Ecosystem and community support"}];
				}

				const Content$I = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$I;
					content.file = file$I;
					content.url = url$I;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$I())}`;
				});

const __vite_glob_0_54 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$I,
	compiledContent: compiledContent$I,
	default: Content$I,
	file: file$I,
	frontmatter: frontmatter$I,
	getHeadings: getHeadings$I,
	rawContent: rawContent$I,
	url: url$I
}, Symbol.toStringTag, { value: 'Module' }));

const html$H = () => "<p><img src=\"https://assets.roadmap.sh/guest/frontend-technologies-fan67.jpg\" alt=\"Top frontend technologies to use\"></p>\n<p>While technology is not the sole deciding factor that will make or break your project, it does have the potential to be one of the major contributors to its success.</p>\n<p>The “issue” with that statement, is that the <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend development</a> space is in constant flux. Every day there is a new JavaScript library being released. Every month, a new framework is created, and every couple of years, a new runtime appears (Bun, I’m looking at you!).</p>\n<p>So to stay updated, let’s dive into the top frontend technologies you should consider using in 2025.</p>\n<p>The frontend technologies we’ll be covering are:</p>\n<ul>\n<li><strong>Core Frontend technologies</strong>: HTML/CSS and JavaScript</li>\n<li><a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\"><strong>Frontend frameworks</strong></a>: React, Vue, Angular, Svelte</li>\n<li><strong>Emerging &#x26; Specialized technologies</strong>: Web Components, Astro, htmx</li>\n<li><strong>Mobile-focused frontend technologies</strong>: Flutter, React Native</li>\n</ul>\n<h2 id=\"evaluation-criteria\">Evaluation criteria</h2>\n<p>While I can give you some indicators and point to some interesting technology choices, the final decision on which frontend technologies are best for your project is going to have to come from you and your team (your context).</p>\n<p>Here are the key metrics I’ll use to evaluate each technology:</p>\n<ul>\n<li><strong>Performance</strong>: Optimized for handling complex animations, data processing, and real-time updates efficiently.</li>\n<li><strong>Scalability</strong>: Designed to support large codebases, high traffic, and seamless feature integration.</li>\n<li><strong>Community and Ecosystem</strong>: Backed by an active community, rich third-party libraries, and abundant resources.</li>\n<li><strong>Learning Curve</strong>: Features intuitive syntax, thorough documentation, and resources for quick developer onboarding.</li>\n</ul>\n<p>The following tables summarize the article and the ratings provided for each technology. Since there are so many different technologies covered, let’s split the tables into different categories:</p>\n<h3 id=\"core-frontend-technologies\">Core Frontend technologies:</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/core-frontend-technologies.png\" alt=\"Core frontend technologies\"></p>\n<h3 id=\"frontend-frameworks\">Frontend frameworks:</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-frameworks.png\" alt=\"Frontend frameworks\"></p>\n<h3 id=\"emerging--specialized-technologies\">Emerging &#x26; Specialized technologies:</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/emerging-specialiazed-frontend-technologies.png\" alt=\"Emerging and specialized frontend technologies\"></p>\n<h3 id=\"mobile-focused-frontend-technologies\">Mobile-focused frontend technologies:</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/mobile-focused-frontend-technologies.png\" alt=\"Mobile focused frontend technologies\"></p>\n<h2 id=\"core-frontend-technologies-the-trifecta\">Core Frontend Technologies: The Trifecta</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-core-languages.png\" alt=\"Core Frontend Technologies\"></p>\n<p>Every outstanding web page or web application begins with a strong foundation, and that foundation is built on HTML5, CSS, and JavaScript.</p>\n<h3 id=\"html5\">HTML5</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/html5-w2rf5.png\" alt=\"HTML5\"></p>\n<p>HTML (or Hypertext Markup Language) is the backbone of web development in the sense that it’s the standard all websites are built on and it’s going to be the skeleton of your user interface.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: HTML5 is lightweight and fast when it comes to structuring content. It doesn’t bog down performance, making it the perfect base layer for building web pages.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: HTML5 is foundational for all web projects. With proper planning and structuring, it scales effectively from small personal blogs to large enterprise web applications.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: HTML5 has one of the largest communities, given its universal use. You’ll find endless tutorials, frameworks, and tools that support HTML5, and it’s fully compatible with all frontend technologies.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: The basics of HTML5 are incredibly easy to learn, making it beginner-friendly. However, mastering advanced HTML5 features like multimedia APIs can take some time.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n</ul>\n<h3 id=\"css\"><strong>CSS</strong></h3>\n<p><img src=\"https://assets.roadmap.sh/guest/css-nngn2.png\" alt=\"CSS\"></p>\n<p>CSS (Cascading Style Sheets) is what makes the web beautiful. It’s responsible for the styling, layout, and responsiveness of a webpage (and to some extent, its dynamism).</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Modern CSS techniques like Flexbox and Grid layout have made styling more efficient and less reliant on hacky workarounds, which in turn enhances its performance.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Scalability</strong>: With methodologies like BEM (Block Element Modifier) or SMACSS (Scalable and Modular Architecture for CSS), CSS can scale gracefully, even in large applications.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: CSS enjoys a vast ecosystem of frameworks like Bootstrap and Tailwind, as well as preprocessors like Sass and LESS that make writing CSS faster and more maintainable.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: While learning basic CSS is straightforward, mastering it—especially when it comes to advanced layout techniques, animations, and responsive design—takes time and practice (there is a reason why the “how to center a div” joke is still being used around).<br>\n<strong>Rating</strong>: 3/5 ⭐</li>\n</ul>\n<h3 id=\"javascript\"><strong>JavaScript</strong></h3>\n<p><img src=\"https://assets.roadmap.sh/guest/javascript-qryyu.png\" alt=\"JavaScript\"></p>\n<p>JavaScript brings interactivity to the web. From simple event handling to full-blown web and mobile applications, JavaScript is a key player in frontend development.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Thanks to modern JavaScript engines like V8 and optimizations in browsers, JavaScript is highly performant, capable of handling heavy computational tasks and real-time updates without breaking a sweat.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: JavaScript is perfect for both small and large-scale applications. With the help of frameworks like React or Angular, JavaScript can handle the needs of enterprise-grade applications while still being accessible for small projects.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: JavaScript boasts the largest ecosystem of libraries, frameworks, and tools. With resources like npm and open-source contributions, the possibilities with JavaScript are endless.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: JavaScript itself is relatively easy to learn, but mastering it can take some time. Understanding how to use JavaScript in the context of frameworks like React or Vue adds complexity.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n</ul>\n<h2 id=\"frontend-frameworks-and-libraries\">Frontend Frameworks and Libraries</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-frameworks-libraries-p2gcg.png\" alt=\"Frontend Frameworks Libraries\"></p>\n<p>Progressive Web Apps (PWAs) are revolutionizing the web by delivering seamless, app-like experiences directly in the browser. And no matter what option you pick from this list, they’re perfect choices for both, frontend and backend technologies (with the potential addition of frameworks on top of them).</p>\n<h3 id=\"react\">React</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/react-p4iz4.png\" alt=\"React\"></p>\n<p>React remains a powerhouse in the frontend development world. Its flexibility and robust ecosystem make it a top choice for building dynamic user interfaces. From simple single page web applications to extremely complex web apps, React gives developers the right tools for the job.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: React’s efficient virtual DOM ensures fast rendering and updates, minimizing unnecessary re-renders and enhancing overall application performance.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: With its component-based architecture, React is highly scalable. It allows developers to build reusable components, making it easier to manage and scale large applications.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: React boasts a massive ecosystem with tons of libraries. The extensive community support means abundant resources, tutorials, and third-party tools are available.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: React has a moderate learning curve. The basic concepts are straightforward, however, like with any other good piece of tech, mastering advanced topics like hooks, context API, and state management requires a solid understanding of JavaScript and React itself.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n</ul>\n<h3 id=\"vuejs\">VueJS</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/vuejs-4udv4.png\" alt=\"VueJS\"></p>\n<p>VueJS has steadily gained popularity due to its simplicity and powerful features, making it a great option for many types of projects, such as building user interfaces, SPAs (or Single Page Applications) or even a progressive web app.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Vue is lightweight and highly performant, thanks to its optimized virtual DOM implementation. It efficiently handles rendering and updates, ensuring smooth user experiences.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Scalability</strong>: Vue is suitable for both small projects and large-scale applications. Its flexible architecture allows for incremental adoption, making it easy to scale as project requirements grow.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> Vue has a growing ecosystem with essential tools like Vuex for state management and Nuxt.js for server-side rendering. The supportive community continues to expand, providing valuable resources and plugins.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Vue offers a gentle learning curve with excellent documentation. Its straightforward syntax and clear separation of concerns make it accessible for beginners and efficient for experienced frontend developers.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n</ul>\n<h3 id=\"angular\">Angular</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/angular-k4udy.png\" alt=\"Angular\"></p>\n<p>Angular is a comprehensive framework maintained by Google, designed for building large-scale, enterprise-level applications. It offers a robust set of tools out of the box, making it a complete solution for frontend development.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Angular delivers great performance with Ahead-of-Time (AOT) compilation, which optimizes the application by compiling it during the build process. This results in faster load times and improved runtime performance.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Scalability</strong>: Ideal for large-scale, enterprise-level applications, Angular’s structured framework supports complex and extensive codebases. Its modular architecture and dependency injection system facilitate scalability and maintainability.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: Angular has a comprehensive ecosystem with built-in tools like Angular CLI, Angular Material, and strong community support. The framework is backed by Google, ensuring continuous development.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Angular has a steep learning curve due to its complexity and extensive use of TypeScript. Understanding concepts like decorators, dependency injection, and RxJS can be challenging for newcomers who usually prefer the likes of React or Vue.<br>\n<strong>Rating</strong>: 3.5/5 ⭐</li>\n</ul>\n<h3 id=\"svelte\">Svelte</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/svelte-6llr7.png\" alt=\"Svelte\"></p>\n<p>Svelte is an emerging frontend framework that takes a unique approach by shifting much of the work to compile time. Created by Rich Harris, it’s already on version 5 and constantly evolving.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Svelte offers exceptional performance through compile-time optimizations. By converting components into highly efficient imperative code, it minimizes runtime overhead and ensures fast load times.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: Suitable for both small and medium-sized projects, Svelte’s simplicity and efficient code generation make it easy to scale applications without the complexity often associated with larger frameworks.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: Svelte has an emerging ecosystem with growing community. Tools like SvelteKit enhance its capabilities, and the community is actively contributing to its expansion with plugins and integrations.<br>\n<strong>Rating</strong>: 3.5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: One of the goals of Svelte is to provide the dynamic behavior added by JS without so much boilerplate around the core technologies. Developers already familiar with HTML, CSS, and JavaScript can quickly get up to speed and start building applications.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n</ul>\n<h2 id=\"emerging-and-specialized-frontend-technologies\">Emerging and Specialized Frontend Technologies</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/emerging-frontend-tech-8lj3k.png\" alt=\"Emerging and specialized frontend technologies\"></p>\n<p>As the frontend landscape continues to evolve, new and specialized frontend technologies are emerging to address specific needs and optimize performance.</p>\n<h3 id=\"web-components\">Web Components</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/web-components-1y5lk.png\" alt=\"Web Components\"></p>\n<p>Web Components provide a standardized way to create reusable and encapsulated custom HTML elements (which is what you want, especially when building complex user interfaces).</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Native browser support ensures high performance by reducing the need for additional libraries and minimizing runtime overhead.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Scalability</strong>: Highly scalable due to their reusable and encapsulated nature. Web Components can be easily integrated into large applications without causing conflicts or redundancy.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: While still growing, the ecosystem is expanding with frameworks like Lit enhancing Web Components. Support from major browsers and increasing adoption contribute to a robust community.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Moderate; developers need to understand custom elements, shadow DOM, and the lifecycle of Web Components. Familiarity with modern JavaScript is essential.<br>\n<strong>Rating</strong>: 3.5/5 ⭐</li>\n</ul>\n<h3 id=\"astro\">Astro</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/astro-r8dnu.png\" alt=\"Astro\"></p>\n<p>Astro is a modern site builder that focuses on optimizing performance by delivering minimal JavaScript to the client and focusing on static site generation.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Astro has an incredible performance with features like partial hydration and server-side rendering. Astro minimizes JavaScript payloads, resulting in faster load times and improved user experiences.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: Ideal for content-heavy and performance-critical websites. Astro’s architecture supports scaling by efficiently managing resources and optimizing build processes.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: As a newer technology, Astro’s ecosystem is still developing. However, it supports multiple frameworks (React, Vue, Svelte), and its flexibility attracts a growing community of frontend developers.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Moderate; familiarity with multiple frontend frameworks can be beneficial. Developers need to understand Astro’s unique concepts and how it integrates with existing tools.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n</ul>\n<h3 id=\"htmx\">HTMX</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/htmx-7zeaa.png\" alt=\"\"></p>\n<p>HTMX is a lightweight library that allows frontend developers to add dynamic behavior to their web pages using HTML attributes. It emphasizes simplicity and minimal client-side JavaScript, enabling fast and responsive interactions.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Offers excellent performance by minimizing JavaScript overhead. htmx leverages server-side rendering for fast interactions, reducing the need for complex client-side logic.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Scalability</strong>: Best suited for projects prioritizing simplicity and minimal client-side logic. While it can handle moderately complex applications, extremely large-scale projects might require additional tooling.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: htmx has a growing community with increasing adoption. It complements existing frontend technologies by enhancing HTML with dynamic capabilities without introducing significant complexity.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Low; htmx is easy to integrate into existing HTML without extensive JavaScript knowledge. Developers familiar with HTML and server-side rendering can quickly adopt htmx.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n</ul>\n<h2 id=\"mobile-focused-frontend-technologies-1\">Mobile-Focused Frontend Technologies</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/mobile-focused-tech-qr5ei.png\" alt=\"Mobile-focused frontend technologies\"></p>\n<p>With the surge in mobile device usage, frontend technologies that cater specifically to mobile development have become essential. Here, we explore two of the top mobile-focused frontend technologies for 2024: Flutter and React Native.</p>\n<h3 id=\"flutter\">Flutter</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/flutter-febon.png\" alt=\"Flutter\"></p>\n<p>Flutter, developed by Google, has quickly become a favorite for building cross-platform mobile applications. Its ability to deliver apps into multiple platforms through a single codebase makes it a very attractive choice for developers aiming to target both iOS and Android platforms.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: Flutter achieves high performance through native compilation and its own rendering engine, Skia. This allows for smooth animations and quick load times, providing a user experience that rivals native apps.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Scalability</strong>: Flutter is highly scalable, making it suitable for both mobile and web applications. Its single codebase approach simplifies the development workflow, allowing teams to maintain and expand applications efficiently as user demands grow.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: The Flutter ecosystem is rapidly growing, supported by a rich set of widgets and plugins that extend its functionality. The community contributes to an ever-growing repository of packages and tools, enabling faster development and problem-solving.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: Flutter uses the Dart programming language, which may require developers to learn new syntax and concepts. However, Flutter’s comprehensive documentation and the growing number of learning resources help mitigate the learning curve, making it accessible to developers with a background in object-oriented programming.<br>\n<strong>Rating</strong>: 3.5/5 ⭐</li>\n</ul>\n<h3 id=\"react-native\">React Native</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/react-native-mhkim.png\" alt=\"React Native\"></p>\n<p>Originally backed by Facebook, allows developers to build mobile applications using JavaScript and React. Its ability to provide near-native performance through a bridge architecture has made it a popular choice for many large-scale applications.</p>\n<p>Evaluation:</p>\n<ul>\n<li><strong>Performance</strong>: This framework delivers near-native performance by leveraging a bridge between JavaScript and native modules. While it may not match the raw performance of fully native apps, it offers a balance between performance and development efficiency, suitable for most applications.<br>\n<strong>Rating</strong>: 4.5/5 ⭐</li>\n<li><strong>Scalability</strong>: React Native is well-suited for large-scale mobile applications. Its modular architecture allows for the development of complex applications that can be easily maintained and scaled. Additionally, the ability to reuse code across different platforms enhances scalability.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Community and Ecosystem</strong>: It has a vast ecosystem with numerous libraries and tools that streamline development. The strong community ensures that developers have access to extensive resources, third-party plugins, and continuous updates, making it easier to find solutions and integrate new features.<br>\n<strong>Rating</strong>: 5/5 ⭐</li>\n<li><strong>Learning Curve</strong>: For developers already familiar with React, the learning curve is relatively moderate. Understanding the bridge architecture and native modules may require additional learning, but the foundational knowledge of React significantly eases the transition. If on the other hand, you’re not already familiar with React, then the learning curve will be a bit more steep.<br>\n<strong>Rating</strong>: 4/5 ⭐</li>\n</ul>\n<h2 id=\"expert-recommendations\">Expert Recommendations</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/extra-recommendations-97fr0.png\" alt=\"Extra Recommendations\"></p>\n<p>After meticulously evaluating each frontend technology across key categories, it’s time to offer expert recommendations tailored to different project needs within the space of web development.</p>\n<p>Here are our top picks for various scenarios in 2025:</p>\n<h3 id=\"best-for-beginners\">Best for Beginners</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/winner-vue-ml5sq.png\" alt=\"Vue Best for Beginners\"></p>\n<p><strong>Recommendation</strong>: Vue.js</p>\n<p><strong>Why Vue.js?</strong></p>\n<p>Vue.js stands out as the ideal choice for beginners thanks to its gentle learning curve and excellent documentation. Its intuitive syntax and clear separation of concerns make it accessible for those new to frontend development.</p>\n<ul>\n<li><strong>Performance:</strong> 4.5/5 ⭐</li>\n<li><strong>Scalability:</strong> 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4.5/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 5/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-large-scale-applications\">Best for Large-Scale Applications</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/angular-best-for-scale-hp0nv.png\" alt=\"Angular Best for Scale\"></p>\n<p><strong>Recommendation</strong>: Angular</p>\n<p><strong>Why Angular?</strong></p>\n<p>Angular is the heavyweight champion when it comes to building large-scale, enterprise-level applications. Its comprehensive framework includes everything you need out of the box, from robust state management to powerful CLI tools.</p>\n<ul>\n<li><strong>Performance:</strong> 4.5/5 ⭐</li>\n<li><strong>Scalability:</strong> 5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4.5/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 3.5/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-high-performance-needs\">Best for High-Performance Needs</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/best-performance-felipe-12yzc.png\" alt=\"Scala - Best for High Performance\"></p>\n<p><strong>Recommendation</strong>:  Svelte</p>\n<p><strong>Why Svelte?</strong></p>\n<p>If performance is your top priority, Svelte is the way to go. By shifting much of the work to compile time, Svelte generates highly efficient imperative code that ensures exceptional runtime performance.</p>\n<ul>\n<li><strong>Performance:</strong> 5/5 ⭐</li>\n<li><strong>Scalability:</strong> 4/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 3.5/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 5/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-mobile-integration\">Best for Mobile Integration</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/flutter-best-mobile-framework-0xm1g.png\" alt=\"Flutter - Best for Mobile\"></p>\n<p><strong>Recommendation</strong>: Flutter</p>\n<p><strong>Why Flutter?</strong></p>\n<p>Flutter is the perfect choice for developers looking to build cross-platform mobile apps without having to duplicate their source code.</p>\n<ul>\n<li><strong>Performance:</strong> 5/5 ⭐</li>\n<li><strong>Scalability:</strong> 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4.5/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 4/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-static-site-generation\">Best for Static Site Generation</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/astro-best-static-site-generator-hpn65.png\" alt=\"Astro - Best Static Site Generator\"></p>\n<p><strong>Recommendation</strong>:  Astro</p>\n<p><strong>Why Astro?</strong></p>\n<p>Astro is a cutting-edge static site generator that excels in optimizing performance and flexibility. Astro minimizes the amount of JavaScript sent to the client by utilizing partial hydration and server-side rendering.</p>\n<p>If you haven’t yet, you gotta try it!.</p>\n<ul>\n<li><strong>Performance:</strong> 5/5 ⭐.</li>\n<li><strong>Scalability:</strong> 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 4/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-flexibility-and-framework-agnostic-projects\">Best for Flexibility and Framework-Agnostic Projects</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/web-components-most-flexible-min-30d5h.png\" alt=\"Web-Components - Most Flexible\"></p>\n<p><strong>Recommendation</strong>: Web Components</p>\n<p><strong>Why Web Components?</strong></p>\n<p>For projects that demand flexibility and the ability to work seamlessly across different frameworks, Web Components are unbeatable.</p>\n<p>They provide a standardized way to create reusable and encapsulated custom HTML elements for your web application.</p>\n<ul>\n<li><strong>Performance:</strong> 4.5/5 ⭐</li>\n<li><strong>Scalability:</strong> 4.5/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 3.5/5 ⭐</li>\n</ul>\n<h3 id=\"best-for-minimal-javascript-and-server-driven-ui\">Best for Minimal JavaScript and Server-Driven UI</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/htmx-most-minimalistic-qu73o.png\" alt=\"htmx - Most Minimalistic\"></p>\n<p><strong>Recommendation</strong>:  htmx</p>\n<p><strong>Why htmx?</strong></p>\n<p>If your project prioritizes simplicity and minimal client-side JavaScript, htmx is the perfect fit. It allows you to add dynamic behavior to your web pages using simple HTML attributes, leveraging server-side rendering for fast and responsive interactions.</p>\n<ul>\n<li><strong>Performance:</strong> 4.5/5 ⭐</li>\n<li><strong>Scalability:</strong> 4/5 ⭐</li>\n<li><strong>Community and Ecosystem:</strong> 4/5 ⭐</li>\n<li><strong>Learning Curve:</strong> 5/5 ⭐</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In 2024, the frontend development landscape is richer than ever giving developers an almost crippling amount of tech alternatives to pick from. Each with its unique strengths tailored to different project needs.</p>\n<p>Selecting the right frontend technologies is a strategic decision that goes beyond merely following trends (in fact, that’s exactly what you <strong>don’t</strong> want to do). It requires a careful alignment with your project’s specific requirements, the expertise of your development team, and your long-term goals.</p>\n<p>Check out our <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">comprehensive Frontend Roadmap</a> to navigate through essential frontend technologies, tools, and best practices for 2024 and beyond. This roadmap is designed to equip you with the knowledge and <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">frontend development skills</a> needed to build exceptional, high-performing web applications.</p>";

				const frontmatter$H = {"title":"Top 12 Frontend Technologies to Use in @currentYear@: Expert Advice","description":"Master the frontend landscape with our curated list of 12 essential technologies. Expert tips on selecting the best tools for your web projects.","authorId":"fernando","excludedBySlug":"/frontend/technologies","seo":{"title":"Top 12 Frontend Technologies to Use in @currentYear@: Expert Advice","description":"Master the frontend landscape with our curated list of 12 essential technologies. Expert tips on selecting the best tools for your web projects.","ogImageUrl":"https://assets.roadmap.sh/guest/frontend-technologies-fan67.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-11-29T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$H = "/workspace/src/data/guides/frontend-technologies.md";
				const url$H = undefined;
				function rawContent$H() {
					return "   \n                                                                            \n                                                                                                                                                               \n                  \n                                        \n    \n                                                                              \n                                                                                                                                                                 \n                                                                               \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Top frontend technologies to use](https://assets.roadmap.sh/guest/frontend-technologies-fan67.jpg)\n\nWhile technology is not the sole deciding factor that will make or break your project, it does have the potential to be one of the major contributors to its success.\n\nThe “issue” with that statement, is that the [frontend development](https://roadmap.sh/frontend) space is in constant flux. Every day there is a new JavaScript library being released. Every month, a new framework is created, and every couple of years, a new runtime appears (Bun, I’m looking at you\\!).\n\nSo to stay updated, let's dive into the top frontend technologies you should consider using in 2025\\.\n\nThe frontend technologies we’ll be covering are:\n\n* **Core Frontend technologies**: HTML/CSS and JavaScript\n* [**Frontend frameworks**](https://roadmap.sh/frontend/frameworks): React, Vue, Angular, Svelte\n* **Emerging & Specialized technologies**: Web Components, Astro, htmx\n* **Mobile-focused frontend technologies**: Flutter, React Native\n\n## Evaluation criteria\n\nWhile I can give you some indicators and point to some interesting technology choices, the final decision on which frontend technologies are best for your project is going to have to come from you and your team (your context).\n\nHere are the key metrics I’ll use to evaluate each technology:\n\n* **Performance**: Optimized for handling complex animations, data processing, and real-time updates efficiently.\n* **Scalability**: Designed to support large codebases, high traffic, and seamless feature integration.\n* **Community and Ecosystem**: Backed by an active community, rich third-party libraries, and abundant resources.\n* **Learning Curve**: Features intuitive syntax, thorough documentation, and resources for quick developer onboarding.\n\nThe following tables summarize the article and the ratings provided for each technology. Since there are so many different technologies covered, let’s split the tables into different categories:\n\n### Core Frontend technologies:\n\n![Core frontend technologies](https://assets.roadmap.sh/guest/core-frontend-technologies.png)\n\n### Frontend frameworks:\n\n![Frontend frameworks](https://assets.roadmap.sh/guest/frontend-frameworks.png)\n\n### Emerging & Specialized technologies:\n\n![Emerging and specialized frontend technologies](https://assets.roadmap.sh/guest/emerging-specialiazed-frontend-technologies.png)\n\n### Mobile-focused frontend technologies:\n\n![Mobile focused frontend technologies](https://assets.roadmap.sh/guest/mobile-focused-frontend-technologies.png)\n\n## Core Frontend Technologies: The Trifecta\n\n![Core Frontend Technologies](https://assets.roadmap.sh/guest/frontend-core-languages.png)\n\nEvery outstanding web page or web application begins with a strong foundation, and that foundation is built on HTML5, CSS, and JavaScript.\n\n### HTML5\n\n![HTML5](https://assets.roadmap.sh/guest/html5-w2rf5.png)\n\nHTML (or Hypertext Markup Language) is the backbone of web development in the sense that it’s the standard all websites are built on and it’s going to be the skeleton of your user interface.\n\nEvaluation:\n\n* **Performance**: HTML5 is lightweight and fast when it comes to structuring content. It doesn't bog down performance, making it the perfect base layer for building web pages.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: HTML5 is foundational for all web projects. With proper planning and structuring, it scales effectively from small personal blogs to large enterprise web applications.  \n  **Rating**: 5/5 ⭐\n* **Community and Ecosystem**: HTML5 has one of the largest communities, given its universal use. You’ll find endless tutorials, frameworks, and tools that support HTML5, and it’s fully compatible with all frontend technologies.  \n  **Rating**: 5/5 ⭐\n* **Learning Curve**: The basics of HTML5 are incredibly easy to learn, making it beginner-friendly. However, mastering advanced HTML5 features like multimedia APIs can take some time.  \n  **Rating**: 4/5 ⭐\n\n### **CSS**\n\n![CSS](https://assets.roadmap.sh/guest/css-nngn2.png)\n\nCSS (Cascading Style Sheets) is what makes the web beautiful. It's responsible for the styling, layout, and responsiveness of a webpage (and to some extent, its dynamism).\n\nEvaluation:\n\n* **Performance**: Modern CSS techniques like Flexbox and Grid layout have made styling more efficient and less reliant on hacky workarounds, which in turn enhances its performance.  \n  **Rating**: 4/5 ⭐\n* **Scalability**: With methodologies like BEM (Block Element Modifier) or SMACSS (Scalable and Modular Architecture for CSS), CSS can scale gracefully, even in large applications.  \n  **Rating**: 4/5 ⭐\n* **Community and Ecosystem**: CSS enjoys a vast ecosystem of frameworks like Bootstrap and Tailwind, as well as preprocessors like Sass and LESS that make writing CSS faster and more maintainable.  \n  **Rating**: 5/5 ⭐\n* **Learning Curve**: While learning basic CSS is straightforward, mastering it—especially when it comes to advanced layout techniques, animations, and responsive design—takes time and practice (there is a reason why the “how to center a div” joke is still being used around).  \n  **Rating**: 3/5 ⭐\n\n### **JavaScript**\n\n![JavaScript](https://assets.roadmap.sh/guest/javascript-qryyu.png)\n\nJavaScript brings interactivity to the web. From simple event handling to full-blown web and mobile applications, JavaScript is a key player in frontend development.\n\nEvaluation:\n\n* **Performance**: Thanks to modern JavaScript engines like V8 and optimizations in browsers, JavaScript is highly performant, capable of handling heavy computational tasks and real-time updates without breaking a sweat.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: JavaScript is perfect for both small and large-scale applications. With the help of frameworks like React or Angular, JavaScript can handle the needs of enterprise-grade applications while still being accessible for small projects.  \n  **Rating**: 5/5 ⭐\n* **Community and Ecosystem**: JavaScript boasts the largest ecosystem of libraries, frameworks, and tools. With resources like npm and open-source contributions, the possibilities with JavaScript are endless.  \n  **Rating**: 5/5 ⭐\n* **Learning Curve**: JavaScript itself is relatively easy to learn, but mastering it can take some time. Understanding how to use JavaScript in the context of frameworks like React or Vue adds complexity.  \n  **Rating**: 4/5 ⭐\n\n## Frontend Frameworks and Libraries\n\n![Frontend Frameworks Libraries](https://assets.roadmap.sh/guest/frontend-frameworks-libraries-p2gcg.png)\n\nProgressive Web Apps (PWAs) are revolutionizing the web by delivering seamless, app-like experiences directly in the browser. And no matter what option you pick from this list, they’re perfect choices for both, frontend and backend technologies (with the potential addition of frameworks on top of them).\n\n### React\n\n![React](https://assets.roadmap.sh/guest/react-p4iz4.png)\n\nReact remains a powerhouse in the frontend development world. Its flexibility and robust ecosystem make it a top choice for building dynamic user interfaces. From simple single page web applications to extremely complex web apps, React gives developers the right tools for the job.\n\nEvaluation:\n\n* **Performance**: React's efficient virtual DOM ensures fast rendering and updates, minimizing unnecessary re-renders and enhancing overall application performance.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: With its component-based architecture, React is highly scalable. It allows developers to build reusable components, making it easier to manage and scale large applications.  \n  **Rating**: 5/5 ⭐\n* **Community and Ecosystem**: React boasts a massive ecosystem with tons of libraries. The extensive community support means abundant resources, tutorials, and third-party tools are available.  \n  **Rating**: 5/5 ⭐\n* **Learning Curve**: React has a moderate learning curve. The basic concepts are straightforward, however, like with any other good piece of tech, mastering advanced topics like hooks, context API, and state management requires a solid understanding of JavaScript and React itself.  \n  **Rating**: 4/5 ⭐\n\n### VueJS\n\n![VueJS](https://assets.roadmap.sh/guest/vuejs-4udv4.png)\n\nVueJS has steadily gained popularity due to its simplicity and powerful features, making it a great option for many types of projects, such as building user interfaces, SPAs (or Single Page Applications) or even a progressive web app.\n\nEvaluation:\n\n* **Performance**: Vue is lightweight and highly performant, thanks to its optimized virtual DOM implementation. It efficiently handles rendering and updates, ensuring smooth user experiences.  \n  **Rating**: 4.5/5 ⭐\n* **Scalability**: Vue is suitable for both small projects and large-scale applications. Its flexible architecture allows for incremental adoption, making it easy to scale as project requirements grow.  \n  **Rating**: 4.5/5 ⭐\n* **Community and Ecosystem:** Vue has a growing ecosystem with essential tools like Vuex for state management and Nuxt.js for server-side rendering. The supportive community continues to expand, providing valuable resources and plugins.  \n  **Rating**: 4.5/5 ⭐\n* **Learning Curve**: Vue offers a gentle learning curve with excellent documentation. Its straightforward syntax and clear separation of concerns make it accessible for beginners and efficient for experienced frontend developers.  \n  **Rating**: 5/5 ⭐\n\n### Angular\n\n![Angular](https://assets.roadmap.sh/guest/angular-k4udy.png)\n\nAngular is a comprehensive framework maintained by Google, designed for building large-scale, enterprise-level applications. It offers a robust set of tools out of the box, making it a complete solution for frontend development.\n\nEvaluation:\n\n* **Performance**: Angular delivers great performance with Ahead-of-Time (AOT) compilation, which optimizes the application by compiling it during the build process. This results in faster load times and improved runtime performance.  \n  **Rating**: 4.5/5 ⭐\n* **Scalability**: Ideal for large-scale, enterprise-level applications, Angular's structured framework supports complex and extensive codebases. Its modular architecture and dependency injection system facilitate scalability and maintainability.  \n  **Rating**: 5/5 ⭐\n* **Community and Ecosystem**: Angular has a comprehensive ecosystem with built-in tools like Angular CLI, Angular Material, and strong community support. The framework is backed by Google, ensuring continuous development.  \n  **Rating**: 4.5/5 ⭐\n* **Learning Curve**: Angular has a steep learning curve due to its complexity and extensive use of TypeScript. Understanding concepts like decorators, dependency injection, and RxJS can be challenging for newcomers who usually prefer the likes of React or Vue.  \n  **Rating**: 3.5/5 ⭐\n\n### Svelte\n\n![Svelte](https://assets.roadmap.sh/guest/svelte-6llr7.png)\n\nSvelte is an emerging frontend framework that takes a unique approach by shifting much of the work to compile time. Created by Rich Harris, it’s already on version 5 and constantly evolving.\n\nEvaluation:\n\n* **Performance**: Svelte offers exceptional performance through compile-time optimizations. By converting components into highly efficient imperative code, it minimizes runtime overhead and ensures fast load times.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: Suitable for both small and medium-sized projects, Svelte's simplicity and efficient code generation make it easy to scale applications without the complexity often associated with larger frameworks.  \n  **Rating**: 4/5 ⭐\n* **Community and Ecosystem**: Svelte has an emerging ecosystem with growing community. Tools like SvelteKit enhance its capabilities, and the community is actively contributing to its expansion with plugins and integrations.  \n  **Rating**: 3.5/5 ⭐\n* **Learning Curve**: One of the goals of Svelte is to provide the dynamic behavior added by JS without so much boilerplate around the core technologies. Developers already familiar with HTML, CSS, and JavaScript can quickly get up to speed and start building applications.  \n  **Rating**: 5/5 ⭐\n\n## Emerging and Specialized Frontend Technologies\n\n![Emerging and specialized frontend technologies](https://assets.roadmap.sh/guest/emerging-frontend-tech-8lj3k.png)\n\nAs the frontend landscape continues to evolve, new and specialized frontend technologies are emerging to address specific needs and optimize performance.\n\n### Web Components\n\n![Web Components](https://assets.roadmap.sh/guest/web-components-1y5lk.png)\n\nWeb Components provide a standardized way to create reusable and encapsulated custom HTML elements (which is what you want, especially when building complex user interfaces).\n\nEvaluation:\n\n* **Performance**: Native browser support ensures high performance by reducing the need for additional libraries and minimizing runtime overhead.  \n  **Rating**: 4.5/5 ⭐\n* **Scalability**: Highly scalable due to their reusable and encapsulated nature. Web Components can be easily integrated into large applications without causing conflicts or redundancy.  \n  **Rating**: 4.5/5 ⭐\n* **Community and Ecosystem**: While still growing, the ecosystem is expanding with frameworks like Lit enhancing Web Components. Support from major browsers and increasing adoption contribute to a robust community.  \n  **Rating**: 4/5 ⭐\n* **Learning Curve**: Moderate; developers need to understand custom elements, shadow DOM, and the lifecycle of Web Components. Familiarity with modern JavaScript is essential.  \n  **Rating**: 3.5/5 ⭐\n\n### Astro\n\n![Astro](https://assets.roadmap.sh/guest/astro-r8dnu.png)\n\nAstro is a modern site builder that focuses on optimizing performance by delivering minimal JavaScript to the client and focusing on static site generation.\n\nEvaluation:\n\n* **Performance**: Astro has an incredible performance with features like partial hydration and server-side rendering. Astro minimizes JavaScript payloads, resulting in faster load times and improved user experiences.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: Ideal for content-heavy and performance-critical websites. Astro's architecture supports scaling by efficiently managing resources and optimizing build processes.  \n  **Rating**: 4.5/5 ⭐\n* **Community and Ecosystem**: As a newer technology, Astro's ecosystem is still developing. However, it supports multiple frameworks (React, Vue, Svelte), and its flexibility attracts a growing community of frontend developers.  \n  **Rating**: 4/5 ⭐\n* **Learning Curve**: Moderate; familiarity with multiple frontend frameworks can be beneficial. Developers need to understand Astro's unique concepts and how it integrates with existing tools.  \n  **Rating**: 4/5 ⭐\n\n### HTMX\n\n![](https://assets.roadmap.sh/guest/htmx-7zeaa.png)\n\nHTMX is a lightweight library that allows frontend developers to add dynamic behavior to their web pages using HTML attributes. It emphasizes simplicity and minimal client-side JavaScript, enabling fast and responsive interactions.\n\nEvaluation:\n\n* **Performance**: Offers excellent performance by minimizing JavaScript overhead. htmx leverages server-side rendering for fast interactions, reducing the need for complex client-side logic.  \n  **Rating**: 4.5/5 ⭐\n* **Scalability**: Best suited for projects prioritizing simplicity and minimal client-side logic. While it can handle moderately complex applications, extremely large-scale projects might require additional tooling.  \n  **Rating**: 4/5 ⭐\n* **Community and Ecosystem**: htmx has a growing community with increasing adoption. It complements existing frontend technologies by enhancing HTML with dynamic capabilities without introducing significant complexity.  \n  **Rating**: 4/5 ⭐\n* **Learning Curve**: Low; htmx is easy to integrate into existing HTML without extensive JavaScript knowledge. Developers familiar with HTML and server-side rendering can quickly adopt htmx.  \n  **Rating**: 5/5 ⭐\n\n## Mobile-Focused Frontend Technologies\n\n![Mobile-focused frontend technologies](https://assets.roadmap.sh/guest/mobile-focused-tech-qr5ei.png)\n\nWith the surge in mobile device usage, frontend technologies that cater specifically to mobile development have become essential. Here, we explore two of the top mobile-focused frontend technologies for 2024: Flutter and React Native.\n\n### Flutter\n\n![Flutter](https://assets.roadmap.sh/guest/flutter-febon.png)\n\nFlutter, developed by Google, has quickly become a favorite for building cross-platform mobile applications. Its ability to deliver apps into multiple platforms through a single codebase makes it a very attractive choice for developers aiming to target both iOS and Android platforms.\n\nEvaluation:\n\n* **Performance**: Flutter achieves high performance through native compilation and its own rendering engine, Skia. This allows for smooth animations and quick load times, providing a user experience that rivals native apps.  \n  **Rating**: 5/5 ⭐\n* **Scalability**: Flutter is highly scalable, making it suitable for both mobile and web applications. Its single codebase approach simplifies the development workflow, allowing teams to maintain and expand applications efficiently as user demands grow.  \n  **Rating**: 4.5/5 ⭐\n* **Community and Ecosystem**: The Flutter ecosystem is rapidly growing, supported by a rich set of widgets and plugins that extend its functionality. The community contributes to an ever-growing repository of packages and tools, enabling faster development and problem-solving.  \n  **Rating**: 4.5/5 ⭐\n* **Learning Curve**: Flutter uses the Dart programming language, which may require developers to learn new syntax and concepts. However, Flutter's comprehensive documentation and the growing number of learning resources help mitigate the learning curve, making it accessible to developers with a background in object-oriented programming.  \n  **Rating**: 3.5/5 ⭐\n\n### React Native\n\n![React Native](https://assets.roadmap.sh/guest/react-native-mhkim.png)\n\nOriginally backed by Facebook, allows developers to build mobile applications using JavaScript and React. Its ability to provide near-native performance through a bridge architecture has made it a popular choice for many large-scale applications.\n\nEvaluation:\n\n* **Performance**: This framework delivers near-native performance by leveraging a bridge between JavaScript and native modules. While it may not match the raw performance of fully native apps, it offers a balance between performance and development efficiency, suitable for most applications.  \n  **Rating**: 4.5/5 ⭐\n* **Scalability**: React Native is well-suited for large-scale mobile applications. Its modular architecture allows for the development of complex applications that can be easily maintained and scaled. Additionally, the ability to reuse code across different platforms enhances scalability.  \n  **Rating**: 5/5 ⭐\n* **Community and Ecosystem**: It has a vast ecosystem with numerous libraries and tools that streamline development. The strong community ensures that developers have access to extensive resources, third-party plugins, and continuous updates, making it easier to find solutions and integrate new features.  \n  **Rating**: 5/5 ⭐\n* **Learning Curve**: For developers already familiar with React, the learning curve is relatively moderate. Understanding the bridge architecture and native modules may require additional learning, but the foundational knowledge of React significantly eases the transition. If on the other hand, you’re not already familiar with React, then the learning curve will be a bit more steep.  \n  **Rating**: 4/5 ⭐\n\n## Expert Recommendations\n\n![Extra Recommendations](https://assets.roadmap.sh/guest/extra-recommendations-97fr0.png)\n\nAfter meticulously evaluating each frontend technology across key categories, it's time to offer expert recommendations tailored to different project needs within the space of web development.\n\nHere are our top picks for various scenarios in 2025:\n\n### Best for Beginners\n\n![Vue Best for Beginners](https://assets.roadmap.sh/guest/winner-vue-ml5sq.png)\n\n**Recommendation**: Vue.js\n\n**Why Vue.js?**\n\nVue.js stands out as the ideal choice for beginners thanks to its gentle learning curve and excellent documentation. Its intuitive syntax and clear separation of concerns make it accessible for those new to frontend development.\n\n* **Performance:** 4.5/5 ⭐\n* **Scalability:** 4.5/5 ⭐\n* **Community and Ecosystem:** 4.5/5 ⭐\n* **Learning Curve:** 5/5 ⭐\n\n### Best for Large-Scale Applications\n\n![Angular Best for Scale](https://assets.roadmap.sh/guest/angular-best-for-scale-hp0nv.png)\n\n**Recommendation**: Angular\n\n**Why Angular?**\n\nAngular is the heavyweight champion when it comes to building large-scale, enterprise-level applications. Its comprehensive framework includes everything you need out of the box, from robust state management to powerful CLI tools.\n\n* **Performance:** 4.5/5 ⭐\n* **Scalability:** 5/5 ⭐\n* **Community and Ecosystem:** 4.5/5 ⭐\n* **Learning Curve:** 3.5/5 ⭐\n\n### Best for High-Performance Needs\n\n![Scala - Best for High Performance](https://assets.roadmap.sh/guest/best-performance-felipe-12yzc.png)\n\n**Recommendation**:  Svelte\n\n**Why Svelte?**\n\nIf performance is your top priority, Svelte is the way to go. By shifting much of the work to compile time, Svelte generates highly efficient imperative code that ensures exceptional runtime performance.\n\n* **Performance:** 5/5 ⭐\n* **Scalability:** 4/5 ⭐\n* **Community and Ecosystem:** 3.5/5 ⭐\n* **Learning Curve:** 5/5 ⭐\n\n### Best for Mobile Integration\n\n![Flutter - Best for Mobile](https://assets.roadmap.sh/guest/flutter-best-mobile-framework-0xm1g.png)\n\n**Recommendation**: Flutter\n\n**Why Flutter?**\n\nFlutter is the perfect choice for developers looking to build cross-platform mobile apps without having to duplicate their source code.\n\n* **Performance:** 5/5 ⭐\n* **Scalability:** 4.5/5 ⭐\n* **Community and Ecosystem:** 4.5/5 ⭐\n* **Learning Curve:** 4/5 ⭐\n\n### Best for Static Site Generation\n\n![Astro - Best Static Site Generator](https://assets.roadmap.sh/guest/astro-best-static-site-generator-hpn65.png)\n\n**Recommendation**:  Astro\n\n**Why Astro?**\n\nAstro is a cutting-edge static site generator that excels in optimizing performance and flexibility. Astro minimizes the amount of JavaScript sent to the client by utilizing partial hydration and server-side rendering.\n\nIf you haven’t yet, you gotta try it\\!.\n\n* **Performance:** 5/5 ⭐.\n* **Scalability:** 4.5/5 ⭐\n* **Community and Ecosystem:** 4/5 ⭐\n* **Learning Curve:** 4/5 ⭐\n\n### Best for Flexibility and Framework-Agnostic Projects\n\n![Web-Components - Most Flexible](https://assets.roadmap.sh/guest/web-components-most-flexible-min-30d5h.png)\n\n**Recommendation**: Web Components\n\n**Why Web Components?**\n\nFor projects that demand flexibility and the ability to work seamlessly across different frameworks, Web Components are unbeatable.\n\nThey provide a standardized way to create reusable and encapsulated custom HTML elements for your web application.\n\n* **Performance:** 4.5/5 ⭐\n* **Scalability:** 4.5/5 ⭐\n* **Community and Ecosystem:** 4/5 ⭐\n* **Learning Curve:** 3.5/5 ⭐\n\n### Best for Minimal JavaScript and Server-Driven UI\n\n![htmx - Most Minimalistic](https://assets.roadmap.sh/guest/htmx-most-minimalistic-qu73o.png)\n\n**Recommendation**:  htmx\n\n**Why htmx?**\n\nIf your project prioritizes simplicity and minimal client-side JavaScript, htmx is the perfect fit. It allows you to add dynamic behavior to your web pages using simple HTML attributes, leveraging server-side rendering for fast and responsive interactions.\n\n* **Performance:** 4.5/5 ⭐\n* **Scalability:** 4/5 ⭐\n* **Community and Ecosystem:** 4/5 ⭐\n* **Learning Curve:** 5/5 ⭐\n\n## Conclusion\n\nIn 2024, the frontend development landscape is richer than ever giving developers an almost crippling amount of tech alternatives to pick from. Each with its unique strengths tailored to different project needs.\n\nSelecting the right frontend technologies is a strategic decision that goes beyond merely following trends (in fact, that’s exactly what you **don’t** want to do). It requires a careful alignment with your project's specific requirements, the expertise of your development team, and your long-term goals.\n\nCheck out our [comprehensive Frontend Roadmap](https://roadmap.sh/frontend) to navigate through essential frontend technologies, tools, and best practices for 2024 and beyond. This roadmap is designed to equip you with the knowledge and [frontend development skills](https://roadmap.sh/frontend/developer-skills) needed to build exceptional, high-performing web applications.\n";
				}
				async function compiledContent$H() {
					return await html$H();
				}
				function getHeadings$H() {
					return [{"depth":2,"slug":"evaluation-criteria","text":"Evaluation criteria"},{"depth":3,"slug":"core-frontend-technologies","text":"Core Frontend technologies:"},{"depth":3,"slug":"frontend-frameworks","text":"Frontend frameworks:"},{"depth":3,"slug":"emerging--specialized-technologies","text":"Emerging & Specialized technologies:"},{"depth":3,"slug":"mobile-focused-frontend-technologies","text":"Mobile-focused frontend technologies:"},{"depth":2,"slug":"core-frontend-technologies-the-trifecta","text":"Core Frontend Technologies: The Trifecta"},{"depth":3,"slug":"html5","text":"HTML5"},{"depth":3,"slug":"css","text":"CSS"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":2,"slug":"frontend-frameworks-and-libraries","text":"Frontend Frameworks and Libraries"},{"depth":3,"slug":"react","text":"React"},{"depth":3,"slug":"vuejs","text":"VueJS"},{"depth":3,"slug":"angular","text":"Angular"},{"depth":3,"slug":"svelte","text":"Svelte"},{"depth":2,"slug":"emerging-and-specialized-frontend-technologies","text":"Emerging and Specialized Frontend Technologies"},{"depth":3,"slug":"web-components","text":"Web Components"},{"depth":3,"slug":"astro","text":"Astro"},{"depth":3,"slug":"htmx","text":"HTMX"},{"depth":2,"slug":"mobile-focused-frontend-technologies-1","text":"Mobile-Focused Frontend Technologies"},{"depth":3,"slug":"flutter","text":"Flutter"},{"depth":3,"slug":"react-native","text":"React Native"},{"depth":2,"slug":"expert-recommendations","text":"Expert Recommendations"},{"depth":3,"slug":"best-for-beginners","text":"Best for Beginners"},{"depth":3,"slug":"best-for-large-scale-applications","text":"Best for Large-Scale Applications"},{"depth":3,"slug":"best-for-high-performance-needs","text":"Best for High-Performance Needs"},{"depth":3,"slug":"best-for-mobile-integration","text":"Best for Mobile Integration"},{"depth":3,"slug":"best-for-static-site-generation","text":"Best for Static Site Generation"},{"depth":3,"slug":"best-for-flexibility-and-framework-agnostic-projects","text":"Best for Flexibility and Framework-Agnostic Projects"},{"depth":3,"slug":"best-for-minimal-javascript-and-server-driven-ui","text":"Best for Minimal JavaScript and Server-Driven UI"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$H = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$H;
					content.file = file$H;
					content.url = url$H;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$H())}`;
				});

const __vite_glob_0_55 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$H,
	compiledContent: compiledContent$H,
	default: Content$H,
	file: file$H,
	frontmatter: frontmatter$H,
	getHeadings: getHeadings$H,
	rawContent: rawContent$H,
	url: url$H
}, Symbol.toStringTag, { value: 'Module' }));

const html$G = () => "<p><img src=\"https://assets.roadmap.sh/guest/roammap-18-xvyn0.jpg\" alt=\"Web developer portfolio templates and examples\"></p>\n<p>As the popular saying goes, “There aren’t too many chances to make a second first impression.” This is particularly important for web developers, as hiring managers and potential employers form an initial opinion of you when they see your portfolio.</p>\n<p>Given the competitive job market, web developer portfolios are even more crucial now. Beyond possessing the necessary technical and soft skills, web developers need every tool to build a strong brand perception and leave a lasting impression on recruiters.</p>\n<p>I’ll focus on some unique web developer portfolio templates and discuss what made them distinctive and a great choice for your next inspiration. This will equip you with the knowledge needed to make informed decisions about the importance of a portfolio, the features to include, and ultimately, how to choose the right template.</p>\n<h2 id=\"top-web-developer-portfolio-examples-to-inspire-you\">Top web developer portfolio examples to inspire you</h2>\n<p>To save time and get started quickly, below are some carefully curated web developer portfolio examples you can adopt and customize to suit your personal brand:</p>\n<ul>\n<li>Minimau</li>\n<li>Stimulus</li>\n<li>Lendex</li>\n<li>Nichol</li>\n<li>Mikon</li>\n<li>Noah</li>\n<li>Zyan</li>\n<li>iPortfolio</li>\n<li>Ethereal</li>\n<li>Steve</li>\n</ul>\n<h3 id=\"minimau-premium\">Minimau (Premium)</h3>\n<p>Minimau is a <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>-based portfolio template that is extensible, customizable, and well-documented. It is compatible with the latest version of React and Bootstrap, ensuring that your portfolio remains up-to-date with current web development practices.</p>\n<p>Here’s why you should consider Minimau as a template for your portfolio:</p>\n<ul>\n<li>A grid layout with Google font and FontAwesome icon integrated.</li>\n<li>Support for social media profiles.</li>\n<li><strong>World Wide Web Consortium (W3c)</strong>-validated with clean code and cross-browser compatibility.</li>\n<li>Support for theme-switching (light theme and dark theme).</li>\n</ul>\n<p><a href=\"https://preview.themeforest.net/item/minimau-react-minimal-portfolio-template/full_screen_preview/26303041\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/minimau-pghii.png\" alt=\"minimau preview\"></p>\n<h3 id=\"stimulus-free\">Stimulus (Free)</h3>\n<p>Stimulus is a great example of a well-designed HTML resume template with a metro-style block of content. Its mixture of gold, orange, and red colors is extensible and customizable. Additionally, its design is both extensible and customizable, which makes it easy for you to tailor the template to fit your personal branding and unique style.</p>\n<p>Here’s why Stimulus is a great template for your portfolio:</p>\n<ul>\n<li>A grid layout with unique blocks of content that you can easily use to showcase your work.</li>\n<li>Fast and lightweight because of minimal dependencies.</li>\n<li>Support for social media integration.</li>\n</ul>\n<p><a href=\"https://templatemo.com/tm-498-stimulus\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/stimulus1-n4srr.png\" alt=\"Stimulus preview\"></p>\n<h3 id=\"lendex-premium\">Lendex (Premium)</h3>\n<p>Lendex is a unique design portfolio template with an elegant and creative design. It uses the latest version of BootStrap, which is responsive and cross-browser compatible.</p>\n<p>The structure and in-build features make it a compatible portfolio template for a front end developer, visual artist, freelance web designer, content creator, and other creatives.</p>\n<p>Here’s why you should consider Lendex as a template for your portfolio:</p>\n<ul>\n<li>Support for Google Fonts and Icofont.</li>\n<li>W3c-validated HTML files and cross-browser compatibility.</li>\n<li>Out-of-the-box support for blogging functionality.</li>\n<li>Support for embedded video player.</li>\n</ul>\n<p><a href=\"https://preview.themeforest.net/item/lendex-personal-portfolio-bootstrap-5-template/full_screen_preview/31542002\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/lendex1-jivuj.png\" alt=\"lendex preview\"></p>\n<h3 id=\"nichol-premium\">Nichol (Premium)</h3>\n<p>Nichol is a well-documented portfolio built with <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, TailwindCSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>. The design is clean, modern, and fully responsive and includes NPM support to integrate desired packages.</p>\n<p>Here’s why Nichol could be the ideal template for your portfolio:</p>\n<ul>\n<li>Fully customizable in terms of page layout and theme switching.</li>\n<li>Support for Google font, Fonts, Icofont.</li>\n<li>W3c-validated HTML files and cross-browser compatibility.</li>\n<li>Support for animations to enhance user experience.</li>\n<li>Timeline view of education and experience.</li>\n</ul>\n<p><a href=\"https://nichol-vuejs.vercel.app/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/nicho-vc283.png\" alt=\"Nichol preview\"></p>\n<h3 id=\"mikon-premium\">Mikon (Premium)</h3>\n<p>Mikon is a creative, modern, and responsive portfolio template built with <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, CSS, SCSS, and BootStrap. It is minimal, single-paged, and distinctly sectioned to show essential details at each glance.</p>\n<p>Here’s why Mikon makes a great template for your portfolio:</p>\n<ul>\n<li>Fully customizable with scroll spy enabled (updates navigation link based on current scroll position).</li>\n<li>Support for Google font, Fonts, and Icofont.</li>\n<li>W3c-validated HTML files and cross-browser compatibility.</li>\n<li>Support for animations to enhance user experience.</li>\n</ul>\n<p><a href=\"https://preview.themeforest.net/item/mikon-angular-personal-portfolio-template/full_screen_preview/47436527\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/mikon-aqk09.png\" alt=\"Mikon preview\"></p>\n<h3 id=\"noah-free\">Noah (Free)</h3>\n<p>Noah is a unique and elegant template suitable for personal web developer portfolios, personal blogs, and personal resume websites. It has an artistic look and a simple, minimal design.</p>\n<p>Here’s why you should consider Noah as a template for your portfolio:</p>\n<ul>\n<li>Support for multi-page template and image slideshow.</li>\n<li>Load on scroll animation.</li>\n<li>Off-canvas side navigation.</li>\n<li>Newsletter subscription form UI.</li>\n</ul>\n<p><a href=\"https://themewagon.com/themes/free-html5-personal-landing-page-template-noah/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/noah-qyycw.png\" alt=\"Noah preview\"></p>\n<h3 id=\"zyan-premium\">Zyan (Premium)</h3>\n<p>Zyan is a template specifically suited for creative developers looking to showcase their web development skills. It has a sleek, modern design and is fully responsive on all screens.</p>\n<p>Here’s why Zyan is worth considering as a template for your portfolio:</p>\n<ul>\n<li>Custom cursor to enhance experience.</li>\n<li>Load on scroll animation for an enhanced experience.</li>\n<li>Support for embedded video player.</li>\n<li>Uses modern tools like GSAP, Slick Slider, FontAwesome, etc.</li>\n</ul>\n<p><a href=\"https://codeefly.net/wp/zyan/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a></p>\n<p><img src=\"https://assets.roadmap.sh/guest/zyan-k0g1e.png\" alt=\"Zyan preview\"></p>\n<h3 id=\"iportfolio-free\">iPortfolio (Free)</h3>\n<p>iPortfolio is a unique template that took a different approach of using a dashboard-like layout to structure the menu. Instead of the traditional approach of having the navigation menu at the top, iPortfolio puts the menu on the left side of the screen. This sidebar navigation provides a modern, streamlined look and enhances the user experience by making it easy to access different sections of your portfolio.</p>\n<p>Here’s why iPortfolio is worth considering as a template for your portfolio:</p>\n<ul>\n<li>The unique sidebar layout makes the portfolio stand out.</li>\n<li>Support for animation and micro-interaction to enhance the user experience.</li>\n<li>Cross-browser compatibility and responsive to various screen sizes.</li>\n</ul>\n<p><a href=\"https://bootstrapmade.com/demo/iPortfolio/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a></p>\n<p><img src=\"https://assets.roadmap.sh/guest/iportfolio1-hb7mf.png\" alt=\"iPortolio preview\"></p>\n<h3 id=\"ethereal-free\">Ethereal (Free)</h3>\n<p>Ethereal is a portfolio template crafted with creative developers in mind. It features a distinctive horizontal layout you can use to present your projects, case studies, and personal stories in a visually engaging and unconventional way. This layout is perfect for showcasing your work with a narrative flow.</p>\n<p>Here’s why you should consider Ethereal as a template for your portfolio:</p>\n<ul>\n<li>The horizontal layout makes the portfolio stand out.</li>\n<li>Dedicated sections to showcase various projects, case studies, personal stories, and other <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">front end development skills</a>.</li>\n<li>Designed to be easily customized and extended.</li>\n</ul>\n<p><a href=\"https://html5up.net/ethereal\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a></p>\n<p><img src=\"https://assets.roadmap.sh/guest/ethereal1-6x21l.png\" alt=\"Ethereal preview\"></p>\n<h3 id=\"steve-free\">Steve (Free)</h3>\n<p>Steve is a portfolio template with a neat and clean design that is ideal for web designers, web developers, graphics designers, or similar professions. This portfolio showcases a minimalist approach that ensures that your work and skills take center stage, which provides you with a polished and professional platform to showcase your projects, experience, and personal brand.</p>\n<p>Here’s why you should consider Steve as a template for your portfolio:</p>\n<ul>\n<li>A distinct call to action to capture potential employers’ attention.</li>\n<li>Contact form with custom validation.</li>\n<li>Testimonial carousel to showcase proof of work.</li>\n<li>Dedicated blog section.</li>\n</ul>\n<p><a href=\"https://technext.github.io/steve/index.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a></p>\n<p><img src=\"https://assets.roadmap.sh/guest/steve1-agtae.png\" alt=\"Steve preview\"></p>\n<h3 id=\"bonus-astro-themes\">Bonus: Astro themes</h3>\n<p>Astro themes offer a collection of free and premium templates that you can use for your next portfolio website. They provide a wide range of options to help you build <strong>portfolios</strong>, landing pages, e-commerce sites, and more.</p>\n<p>Here’s why you should consider Astro themes when choosing a template for your portfolio:</p>\n<ul>\n<li>Flexible option to select a template based on your preferred styling libraries or frameworks (such as TailwindCSS, PostCC, and UnoCSS)</li>\n<li>A wide selection of free and premium templates to help you get started quickly</li>\n<li>The ability to choose templates based on your favorite development technologies (like React, Vue, or Svelte)</li>\n</ul>\n<p><a href=\"https://astro.build/themes/?search=&#x26;categories%5B%5D=portfolio\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Live demo link</a></p>\n<p><img src=\"https://assets.roadmap.sh/guest/astro-m2r6h.png\" alt=\"Astro theme\"></p>\n<p>Now that you have seen some of the best templates you can adopt for your portfolio, let’s take a look at some of the reasons why the selected templates stood out among thousands of options.</p>\n<h2 id=\"what-do-top-web-development-portfolios-have-in-common\">What do top web development portfolios have in common</h2>\n<p>Having a well-structured web development portfolio is crucial for showcasing your technical and web design skills to potential employers. While the template you choose may depend on factors like your intended role and work experience, all portfolios share some common elements to showcase:</p>\n<ul>\n<li>Personal brand</li>\n<li>Showcase skills and expertise</li>\n<li>Highlight live projects and contribution</li>\n<li>Build credibility</li>\n<li>Networking and opportunities</li>\n</ul>\n<ol>\n<li>\n<p><strong>Personal brand</strong>: The portfolio should have a personal bio or summary that gives a clear representation of who the developer is.</p>\n</li>\n<li>\n<p><strong>Showcase skills and expertise</strong>: The portfolio should highlight the owner’s competencies. Demonstrates proficiency in various <a href=\"https://roadmap.sh/frontend/technologies\" target=\"_blank\">technologies</a>, frameworks, libraries, and tools used in <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend</a> or <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a> development. In addition, consider showcasing your professional certifications, companies worked for, and years of experience.</p>\n</li>\n<li>\n<p><strong>Highlight project and contribution</strong>: The portfolio should contain work or project sections to demonstrate real-world impact. It can also include community engagement, like open source projects, technical writing, and public speaking.</p>\n</li>\n<li>\n<p><strong>Build credibility</strong>: Web developer portfolios are one of the best ways to build brand and credibility. They allow you to showcase your professional image, provide proof of your work, and share testimonials from colleagues or previous clients.</p>\n</li>\n<li>\n<p><strong>Networking and opportunities</strong>: Portfolios are a great marketing tool for crafting a unique online presence and increasing visibility. They are useful during your job applications because they help you stand out to potential employers and are also ideal for showcasing the latest personal projects on professional networks like LinkedIn.</p>\n</li>\n</ol>\n<p>With the opportunities offered by a portfolio, it can sometimes become overwhelming to decide what to add and how to structure it, especially if you have extensive experience in frontend development, backend, and other web development areas. Let’s look at these aspects in detail.</p>\n<h2 id=\"what-makes-a-developers-portfolio-stand-out-from-the-rest\">What makes a developer’s portfolio stand out from the rest?</h2>\n<p>A well-crafted developer’s portfolio is important for showcasing your technical skills and experience. We can narrow it down to essential features that every portfolio must have, and optional features that can help you stand out when applying for jobs or bidding on projects.</p>\n<h3 id=\"essential-features\">Essential features</h3>\n<ul>\n<li>\n<p><strong>Introductory and About Me section</strong>: This section should include a brief introduction about yourself, your background, and your expertise. It’s also a great place to include your name, location, and any other interesting details about yourself.</p>\n</li>\n<li>\n<p><strong>Skills and technologies section</strong>: This section shows the different skills and proficiencies, such as crafting responsive designs, enhancing user experience, building APIs, and managing databases. It can also include <a href=\"https://roadmap.sh/frontend/languages\" target=\"_blank\">front end programming languages</a>, <a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">frameworks</a>, databases, and other specialized skills.</p>\n</li>\n<li>\n<p><strong>Project section</strong>: This section highlights your best work and can include demo links, GitHub links, screenshots, project overview, technologies used, and any other essential details.</p>\n</li>\n<li>\n<p><strong>Experience section</strong>: This section shows your work history and highlights what you have done, including the timeline.</p>\n</li>\n<li>\n<p><strong>Contact section:</strong> One of the main goals of having a portfolio is to attract potential clients or employers. It is crucial for anyone looking at your portfolio to easily contact you using any of the mediums like contact forms, email addresses, or social media links (like GitHub profiles, LinkedIn, or any other relevant links).</p>\n</li>\n</ul>\n<h3 id=\"optional-features\">Optional features</h3>\n<ul>\n<li>\n<p><strong>Theming</strong>: Your portfolio can contain a theme switcher (dark and light modes) and color schemes to further personalize the visitors’ experience.</p>\n</li>\n<li>\n<p><strong>Engaging animations</strong> and engaging design can further enhance the visitor’s experience, making your own portfolio stand out.</p>\n</li>\n<li>\n<p><strong>Testimonials</strong>: References and appraisals from clients, colleagues, or managers that validate your skills and work ethic might be a valuable addition to your portfolio.</p>\n</li>\n<li>\n<p><strong>Blog</strong>: Including guides, articles, blog posts, and other written content can help establish you as a thought leader and demonstrate your expertise and passion for the field, which can then boost your portfolio.</p>\n</li>\n</ul>\n<h2 id=\"what-are-the-criteria-for-choosing-a-web-developer-portfolio-template\">What are the criteria for choosing a web developer portfolio template?</h2>\n<p>The number of templates available can be overwhelming, especially considering that more developers are open-sourcing their work. Questions like “<strong>Should I clone a template and modify it?”</strong>, <strong>“Is accessibility and Search Engine Optimization (SEO) support available?”</strong> <strong>“Should I use a website builder?”</strong> and many more may arise.</p>\n<p>In this section, we will look at best practices and tips that will help you make the right decision. Here are the points to consider:</p>\n<ul>\n<li>Design and aesthetics</li>\n<li>Content layout</li>\n<li>Technical features</li>\n<li>Compatibility</li>\n<li>Cost and licensing</li>\n<li>User experience</li>\n</ul>\n<h3 id=\"design-and-aesthetics\">Design and aesthetics</h3>\n<p>The template should have a clean, modern, and professional design that captures your brand with consistent elements across all pages. Additionally, visual elements, such as colors, fonts, layouts, images, etc., should be customizable.</p>\n<h3 id=\"content-layout\">Content layout</h3>\n<p>The portfolio template should have a dedicated section to easily access contact information, learn more about you, and showcase your work experience.</p>\n<h3 id=\"technical-features\">Technical features</h3>\n<p>The template should have good SEO support, follow accessibility guidelines, be compatible with all major browsers, and support Open Graph tags (information previews) when shared on social media.</p>\n<h3 id=\"compatibility\">Compatibility</h3>\n<p>If you intend to manage your portfolio content with a <strong>Content Management System (CMS)</strong>, leverage web development-specific libraries, or use cloud-based media storage to optimize media, choosing a template compatible with and supports desired tools and technologies is important.</p>\n<h3 id=\"cost-and-licensing\">Cost and licensing</h3>\n<p>Ensure that the template you intend to use allows you to use it freely as you wish. Additionally, consider your budget, as templates range from free to premium.</p>\n<h3 id=\"user-experience\">User experience</h3>\n<p>The template should be well-structured with a good sitemap, excellent information architecture, and intuitive navigation. It should also be responsive (like mobile devices) and have good loading speed.</p>\n<p>Your personal portfolio usually crafts the first impression for potential employers and clients. Investing time in creating a well-designed, structured, and user-friendly portfolio that captures your experience is important.</p>\n<p>Additionally, web developer portfolios are not a one-time effort. They require constant updates on your latest projects. The <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a>’s <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend development roadmap</a> is a valuable resource to keep your skills up to date, and our <a href=\"https://roadmap.sh/questions/frontend\" target=\"_blank\">frontend developer questions</a> guide can help you to ace your next interview. Additionally, you can track your learning paths and connect with a vibrant community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up</a> on the roadmap.sh platform.</p>";

				const frontmatter$G = {"title":"Top 10 Web Developer Portfolio Templates - A Pro’s Pick","description":"Build an impressive online presence with these 10 handpicked web developer portfolio templates.","authorId":"ekene","excludedBySlug":"/frontend/web-developer-portfolio","seo":{"title":"Top 10 Web Developer Portfolio Templates - A Pro’s Pick","description":"Build an impressive online presence with these 10 handpicked web developer portfolio templates.","ogImageUrl":"https://assets.roadmap.sh/guest/roammap-18-xvyn0.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-10-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$G = "/workspace/src/data/guides/frontend-web-developer-portfolio.md";
				const url$G = undefined;
				function rawContent$G() {
					return "   \n                                                                \n                                                                                                              \n               \n                                                   \n    \n                                                                  \n                                                                                                                \n                                                                    \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Web developer portfolio templates and examples](https://assets.roadmap.sh/guest/roammap-18-xvyn0.jpg)\n\nAs the popular saying goes, “There aren’t too many chances to make a second first impression.\" This is particularly important for web developers, as hiring managers and potential employers form an initial opinion of you when they see your portfolio.\n\nGiven the competitive job market, web developer portfolios are even more crucial now. Beyond possessing the necessary technical and soft skills, web developers need every tool to build a strong brand perception and leave a lasting impression on recruiters.\n\nI’ll focus on some unique web developer portfolio templates and discuss what made them distinctive and a great choice for your next inspiration. This will equip you with the knowledge needed to make informed decisions about the importance of a portfolio, the features to include, and ultimately, how to choose the right template.\n\n## Top web developer portfolio examples to inspire you\n\nTo save time and get started quickly, below are some carefully curated web developer portfolio examples you can adopt and customize to suit your personal brand:\n\n- Minimau\n- Stimulus\n- Lendex\n- Nichol\n- Mikon\n- Noah\n- Zyan\n- iPortfolio\n- Ethereal\n- Steve\n\n### Minimau (Premium)\n\nMinimau is a [React](https://roadmap.sh/react)-based portfolio template that is extensible, customizable, and well-documented. It is compatible with the latest version of React and Bootstrap, ensuring that your portfolio remains up-to-date with current web development practices.\n\nHere’s why you should consider Minimau as a template for your portfolio:\n\n- A grid layout with Google font and FontAwesome icon integrated.\n- Support for social media profiles.\n- **World Wide Web Consortium (W3c)**-validated with clean code and cross-browser compatibility.\n- Support for theme-switching (light theme and dark theme).\n\n[Live demo link](https://preview.themeforest.net/item/minimau-react-minimal-portfolio-template/full_screen_preview/26303041).\n\n![minimau preview](https://assets.roadmap.sh/guest/minimau-pghii.png)\n\n### Stimulus (Free)\n\nStimulus is a great example of a well-designed HTML resume template with a metro-style block of content. Its mixture of gold, orange, and red colors is extensible and customizable. Additionally, its design is both extensible and customizable, which makes it easy for you to tailor the template to fit your personal branding and unique style.\n\nHere's why Stimulus is a great template for your portfolio:\n\n- A grid layout with unique blocks of content that you can easily use to showcase your work.\n- Fast and lightweight because of minimal dependencies.\n- Support for social media integration.\n\n[Live demo link](https://templatemo.com/tm-498-stimulus).\n\n![Stimulus preview](https://assets.roadmap.sh/guest/stimulus1-n4srr.png)\n\n### Lendex (Premium)\n\nLendex is a unique design portfolio template with an elegant and creative design. It uses the latest version of BootStrap, which is responsive and cross-browser compatible.\n\nThe structure and in-build features make it a compatible portfolio template for a front end developer, visual artist, freelance web designer, content creator, and other creatives.\n\nHere’s why you should consider Lendex as a template for your portfolio:\n\n- Support for Google Fonts and Icofont.\n- W3c-validated HTML files and cross-browser compatibility.\n- Out-of-the-box support for blogging functionality.\n- Support for embedded video player.\n\n[Live demo link](https://preview.themeforest.net/item/lendex-personal-portfolio-bootstrap-5-template/full_screen_preview/31542002).\n\n![lendex preview](https://assets.roadmap.sh/guest/lendex1-jivuj.png)\n\n### Nichol (Premium)\n\nNichol is a well-documented portfolio built with [Vue](https://roadmap.sh/vue), TailwindCSS, and [JavaScript](https://roadmap.sh/javascript). The design is clean, modern, and fully responsive and includes NPM support to integrate desired packages.\n\nHere's why Nichol could be the ideal template for your portfolio:\n\n- Fully customizable in terms of page layout and theme switching.\n- Support for Google font, Fonts, Icofont.\n- W3c-validated HTML files and cross-browser compatibility.\n- Support for animations to enhance user experience.\n- Timeline view of education and experience.\n\n[Live demo link](https://nichol-vuejs.vercel.app/).\n\n![Nichol preview](https://assets.roadmap.sh/guest/nicho-vc283.png)\n\n### Mikon (Premium)\n\nMikon is a creative, modern, and responsive portfolio template built with [Angular](https://roadmap.sh/angular), CSS, SCSS, and BootStrap. It is minimal, single-paged, and distinctly sectioned to show essential details at each glance.\n\nHere's why Mikon makes a great template for your portfolio:\n\n- Fully customizable with scroll spy enabled (updates navigation link based on current scroll position).\n- Support for Google font, Fonts, and Icofont.\n- W3c-validated HTML files and cross-browser compatibility.\n- Support for animations to enhance user experience.\n\n[Live demo link](https://preview.themeforest.net/item/mikon-angular-personal-portfolio-template/full_screen_preview/47436527).\n\n![Mikon preview](https://assets.roadmap.sh/guest/mikon-aqk09.png)\n\n### Noah (Free)\n\nNoah is a unique and elegant template suitable for personal web developer portfolios, personal blogs, and personal resume websites. It has an artistic look and a simple, minimal design.\n\nHere’s why you should consider Noah as a template for your portfolio:\n\n- Support for multi-page template and image slideshow.\n- Load on scroll animation.\n- Off-canvas side navigation.\n- Newsletter subscription form UI.\n\n[Live demo link](https://themewagon.com/themes/free-html5-personal-landing-page-template-noah/).\n\n![Noah preview](https://assets.roadmap.sh/guest/noah-qyycw.png)\n\n### Zyan (Premium)\n\nZyan is a template specifically suited for creative developers looking to showcase their web development skills. It has a sleek, modern design and is fully responsive on all screens.\n\nHere’s why Zyan is worth considering as a template for your portfolio:\n\n- Custom cursor to enhance experience. \n- Load on scroll animation for an enhanced experience.\n- Support for embedded video player.\n- Uses modern tools like GSAP, Slick Slider, FontAwesome, etc.\n\n[Live demo link](https://codeefly.net/wp/zyan/)\n\n![Zyan preview](https://assets.roadmap.sh/guest/zyan-k0g1e.png)\n\n### iPortfolio (Free)\n\niPortfolio is a unique template that took a different approach of using a dashboard-like layout to structure the menu. Instead of the traditional approach of having the navigation menu at the top, iPortfolio puts the menu on the left side of the screen. This sidebar navigation provides a modern, streamlined look and enhances the user experience by making it easy to access different sections of your portfolio.\n\nHere’s why iPortfolio is worth considering as a template for your portfolio:\n\n- The unique sidebar layout makes the portfolio stand out.\n- Support for animation and micro-interaction to enhance the user experience.\n- Cross-browser compatibility and responsive to various screen sizes.\n\n[Live demo link](https://bootstrapmade.com/demo/iPortfolio/)\n\n![iPortolio preview](https://assets.roadmap.sh/guest/iportfolio1-hb7mf.png)\n\n### Ethereal (Free)\n\nEthereal is a portfolio template crafted with creative developers in mind. It features a distinctive horizontal layout you can use to present your projects, case studies, and personal stories in a visually engaging and unconventional way. This layout is perfect for showcasing your work with a narrative flow.\n\nHere’s why you should consider Ethereal as a template for your portfolio:\n\n- The horizontal layout makes the portfolio stand out.\n- Dedicated sections to showcase various projects, case studies, personal stories, and other [front end development skills](https://roadmap.sh/frontend/developer-skills).\n- Designed to be easily customized and extended.\n\n[Live demo link](https://html5up.net/ethereal)\n\n![Ethereal preview](https://assets.roadmap.sh/guest/ethereal1-6x21l.png)\n\n### Steve (Free)\n\nSteve is a portfolio template with a neat and clean design that is ideal for web designers, web developers, graphics designers, or similar professions. This portfolio showcases a minimalist approach that ensures that your work and skills take center stage, which provides you with a polished and professional platform to showcase your projects, experience, and personal brand.\n\nHere’s why you should consider Steve as a template for your portfolio:\n\n- A distinct call to action to capture potential employers' attention.\n- Contact form with custom validation.\n- Testimonial carousel to showcase proof of work.\n- Dedicated blog section.\n\n[Live demo link](https://technext.github.io/steve/index.html)\n\n![Steve preview](https://assets.roadmap.sh/guest/steve1-agtae.png)\n\n### Bonus: Astro themes\n\nAstro themes offer a collection of free and premium templates that you can use for your next portfolio website. They provide a wide range of options to help you build **portfolios**, landing pages, e-commerce sites, and more.\n\nHere’s why you should consider Astro themes when choosing a template for your portfolio:\n\n- Flexible option to select a template based on your preferred styling libraries or frameworks (such as TailwindCSS, PostCC, and UnoCSS)\n- A wide selection of free and premium templates to help you get started quickly\n- The ability to choose templates based on your favorite development technologies (like React, Vue, or Svelte)\n\n[Live demo link](https://astro.build/themes/?search=&categories%5B%5D=portfolio)\n\n![Astro theme](https://assets.roadmap.sh/guest/astro-m2r6h.png)\n\nNow that you have seen some of the best templates you can adopt for your portfolio, let's take a look at some of the reasons why the selected templates stood out among thousands of options.\n\n## What do top web development portfolios have in common\n\nHaving a well-structured web development portfolio is crucial for showcasing your technical and web design skills to potential employers. While the template you choose may depend on factors like your intended role and work experience, all portfolios share some common elements to showcase:\n\n- Personal brand\n- Showcase skills and expertise\n- Highlight live projects and contribution\n- Build credibility\n- Networking and opportunities\n\n1. **Personal brand**: The portfolio should have a personal bio or summary that gives a clear representation of who the developer is.\n\n2. **Showcase skills and expertise**: The portfolio should highlight the owner's competencies. Demonstrates proficiency in various [technologies](https://roadmap.sh/frontend/technologies), frameworks, libraries, and tools used in [frontend](https://roadmap.sh/frontend) or [backend](https://roadmap.sh/backend) development. In addition, consider showcasing your professional certifications, companies worked for, and years of experience.\n\n3. **Highlight project and contribution**: The portfolio should contain work or project sections to demonstrate real-world impact. It can also include community engagement, like open source projects, technical writing, and public speaking.\n\n4. **Build credibility**: Web developer portfolios are one of the best ways to build brand and credibility. They allow you to showcase your professional image, provide proof of your work, and share testimonials from colleagues or previous clients.\n\n5. **Networking and opportunities**: Portfolios are a great marketing tool for crafting a unique online presence and increasing visibility. They are useful during your job applications because they help you stand out to potential employers and are also ideal for showcasing the latest personal projects on professional networks like LinkedIn.\n\nWith the opportunities offered by a portfolio, it can sometimes become overwhelming to decide what to add and how to structure it, especially if you have extensive experience in frontend development, backend, and other web development areas. Let’s look at these aspects in detail.\n\n## What makes a developer’s portfolio stand out from the rest?\n\nA well-crafted developer’s portfolio is important for showcasing your technical skills and experience. We can narrow it down to essential features that every portfolio must have, and optional features that can help you stand out when applying for jobs or bidding on projects.\n\n### Essential features\n\n- **Introductory and About Me section**: This section should include a brief introduction about yourself, your background, and your expertise. It’s also a great place to include your name, location, and any other interesting details about yourself.\n\n- **Skills and technologies section**: This section shows the different skills and proficiencies, such as crafting responsive designs, enhancing user experience, building APIs, and managing databases. It can also include [front end programming languages](https://roadmap.sh/frontend/languages), [frameworks](https://roadmap.sh/frontend/frameworks), databases, and other specialized skills.\n\n- **Project section**: This section highlights your best work and can include demo links, GitHub links, screenshots, project overview, technologies used, and any other essential details.\n\n- **Experience section**: This section shows your work history and highlights what you have done, including the timeline.\n\n- **Contact section:** One of the main goals of having a portfolio is to attract potential clients or employers. It is crucial for anyone looking at your portfolio to easily contact you using any of the mediums like contact forms, email addresses, or social media links (like GitHub profiles, LinkedIn, or any other relevant links).\n\n### Optional features\n\n- **Theming**: Your portfolio can contain a theme switcher (dark and light modes) and color schemes to further personalize the visitors' experience.\n\n- **Engaging animations** and engaging design can further enhance the visitor's experience, making your own portfolio stand out.\n\n- **Testimonials**: References and appraisals from clients, colleagues, or managers that validate your skills and work ethic might be a valuable addition to your portfolio.\n\n- **Blog**: Including guides, articles, blog posts, and other written content can help establish you as a thought leader and demonstrate your expertise and passion for the field, which can then boost your portfolio.\n\n## What are the criteria for choosing a web developer portfolio template?\n\nThe number of templates available can be overwhelming, especially considering that more developers are open-sourcing their work. Questions like \"**Should I clone a template and modify it?\"**, **\"Is accessibility and Search Engine Optimization (SEO) support available?\"** **\"Should I use a website builder?\"** and many more may arise.\n\nIn this section, we will look at best practices and tips that will help you make the right decision. Here are the points to consider:\n\n- Design and aesthetics\n- Content layout\n- Technical features\n- Compatibility\n- Cost and licensing\n- User experience\n\n### Design and aesthetics\n\nThe template should have a clean, modern, and professional design that captures your brand with consistent elements across all pages. Additionally, visual elements, such as colors, fonts, layouts, images, etc., should be customizable.\n\n### Content layout\n\nThe portfolio template should have a dedicated section to easily access contact information, learn more about you, and showcase your work experience.\n\n### Technical features\n\nThe template should have good SEO support, follow accessibility guidelines, be compatible with all major browsers, and support Open Graph tags (information previews) when shared on social media.\n\n### Compatibility\n\nIf you intend to manage your portfolio content with a **Content Management System (CMS)**, leverage web development-specific libraries, or use cloud-based media storage to optimize media, choosing a template compatible with and supports desired tools and technologies is important.\n\n### Cost and licensing\n\nEnsure that the template you intend to use allows you to use it freely as you wish. Additionally, consider your budget, as templates range from free to premium.\n\n### User experience\n\nThe template should be well-structured with a good sitemap, excellent information architecture, and intuitive navigation. It should also be responsive (like mobile devices) and have good loading speed.\n\nYour personal portfolio usually crafts the first impression for potential employers and clients. Investing time in creating a well-designed, structured, and user-friendly portfolio that captures your experience is important.\n\nAdditionally, web developer portfolios are not a one-time effort. They require constant updates on your latest projects. The [roadmap.sh](https://roadmap.sh)’s [frontend development roadmap](https://roadmap.sh/frontend) is a valuable resource to keep your skills up to date, and our [frontend developer questions](https://roadmap.sh/questions/frontend) guide can help you to ace your next interview. Additionally, you can track your learning paths and connect with a vibrant community by [signing up](https://roadmap.sh/signup) on the roadmap.sh platform.\n";
				}
				async function compiledContent$G() {
					return await html$G();
				}
				function getHeadings$G() {
					return [{"depth":2,"slug":"top-web-developer-portfolio-examples-to-inspire-you","text":"Top web developer portfolio examples to inspire you"},{"depth":3,"slug":"minimau-premium","text":"Minimau (Premium)"},{"depth":3,"slug":"stimulus-free","text":"Stimulus (Free)"},{"depth":3,"slug":"lendex-premium","text":"Lendex (Premium)"},{"depth":3,"slug":"nichol-premium","text":"Nichol (Premium)"},{"depth":3,"slug":"mikon-premium","text":"Mikon (Premium)"},{"depth":3,"slug":"noah-free","text":"Noah (Free)"},{"depth":3,"slug":"zyan-premium","text":"Zyan (Premium)"},{"depth":3,"slug":"iportfolio-free","text":"iPortfolio (Free)"},{"depth":3,"slug":"ethereal-free","text":"Ethereal (Free)"},{"depth":3,"slug":"steve-free","text":"Steve (Free)"},{"depth":3,"slug":"bonus-astro-themes","text":"Bonus: Astro themes"},{"depth":2,"slug":"what-do-top-web-development-portfolios-have-in-common","text":"What do top web development portfolios have in common"},{"depth":2,"slug":"what-makes-a-developers-portfolio-stand-out-from-the-rest","text":"What makes a developer’s portfolio stand out from the rest?"},{"depth":3,"slug":"essential-features","text":"Essential features"},{"depth":3,"slug":"optional-features","text":"Optional features"},{"depth":2,"slug":"what-are-the-criteria-for-choosing-a-web-developer-portfolio-template","text":"What are the criteria for choosing a web developer portfolio template?"},{"depth":3,"slug":"design-and-aesthetics","text":"Design and aesthetics"},{"depth":3,"slug":"content-layout","text":"Content layout"},{"depth":3,"slug":"technical-features","text":"Technical features"},{"depth":3,"slug":"compatibility","text":"Compatibility"},{"depth":3,"slug":"cost-and-licensing","text":"Cost and licensing"},{"depth":3,"slug":"user-experience","text":"User experience"}];
				}

				const Content$G = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$G;
					content.file = file$G;
					content.url = url$G;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$G())}`;
				});

const __vite_glob_0_56 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$G,
	compiledContent: compiledContent$G,
	default: Content$G,
	file: file$G,
	frontmatter: frontmatter$G,
	getHeadings: getHeadings$G,
	rawContent: rawContent$G,
	url: url$G
}, Symbol.toStringTag, { value: 'Module' }));

const html$F = () => "<p><img src=\"https://assets.roadmap.sh/guest/full-stack-developer-skills-abb38.jpg\" alt=\"The best full stack developer skills to learn.\"></p>\n<p>It should be no surprise to anyone that given the fast pace of the web development industry, every type of developer, especially full stack developers, must stay ahead of the curve by continuously updating their skills.</p>\n<p>Full-stack web developers share a unique blend of expertise that allows them to independently build and maintain entire web applications. However, this mix of skills is a double-edged sword because it makes staying up-to-date harder for them.\nIn this article, we will explore the 8 essential full stack developer skills that you need to master and thrive in your career.</p>\n<p>Remember that you have more details about the different technologies and topics to cover in our <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer roadmap</a>.</p>\n<h2 id=\"understanding-full-stack-development\">Understanding full-stack development</h2>\n<p>Full stack development involves both frontend and backend work. It means you’re not just limited to designing the parts of a website or application that users interact with (frontend), but also managing the server, database, and application logic that power those interactions (backend).</p>\n<p>Plus, full-stack developers need to be proficient in working with both relational and non-relational databases, setting up and maintaining infrastructure, and ensuring that their applications are scalable and secure. In other words, if they need to, full-stack developers can be the equivalent of a one-man army. Is this an ideal situation? No, it isn’t. In fact, a better way to look at a full stack developer is to think of them as a wildcard that can be placed in any team, and they’ll consistently add value to it, with minimum ramp-up time needed.</p>\n<p>With that foundation in mind, let’s dive into the specific skills you need to master.</p>\n<h2 id=\"1-basic-understanding-of-http\">1. Basic understanding of HTTP</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/understanding-http-pct23.png\" alt=\"basic understand of HTTP\"></p>\n<p>Let’s start with the basics: understanding HTTP. HTTP, or HyperText Transfer Protocol, is the foundation of any interaction on the web. It’s what allows clients (like your web browser) and servers to communicate with each other. As a full-stack developer, having a solid grasp of HTTP is crucial for building, debugging, and maintaining web applications. It’s your bread and butter, and you’ll need to internalize it if you hope to become great at your job.</p>\n<h3 id=\"why-http-matters-for-full-stack-developers\">Why HTTP Matters for Full Stack Developers?</h3>\n<p>Without HTTP, the internet as we know it wouldn’t function, it’s that simple. For a full-stack developer, understanding HTTP means you can effectively manage how your frontend communicates with your backend.</p>\n<h3 id=\"key-concepts-to-understand-in-http\">Key Concepts to understand in HTTP</h3>\n<ul>\n<li><strong>HTTP Methods</strong>: These are the actions that can be performed on a resource. The most common methods are GET (to retrieve data), POST (to send data to the server), PUT (to update data), and DELETE (to remove data). Each method has a specific purpose and knowing when to use each one is essential for building efficient APIs. You can read the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full list of verbs here</a>.</li>\n<li><strong>Status Codes</strong>: HTTP status codes are responses from the server to the client’s request. They indicate whether the request was successful, if there was an error, or if further action is needed. Common status codes include 200 (OK), 404 (Not Found), 500 (Internal Server Error), and 403 (Forbidden). Understanding these codes helps in debugging and improving user experience. Here’s the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full list of status codes</a> in case you’re wondering.</li>\n<li><strong>Headers</strong>: HTTP headers are key-value pairs sent between the client and server. They carry essential information like content type, authorization information (in some cases even credentials), and cache control. Familiarity with headers allows you to manage security, content negotiation, and request-response flow more effectively. While you can create your own, here’s a list of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">standard set of HTTP headers</a>.</li>\n</ul>\n<h2 id=\"2-htmlcssjavascript\">2. HTML/CSS/JavaScript</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/html-css-javascript-layers-7agjb.png\" alt=\"html, css &#x26; javascript\"></p>\n<p>For full-stack developers, a solid grasp of HTML, CSS, and JavaScript is essential. These technologies are the building blocks of the visual side of the web, enabling you to create an engaging and functional user interface. While you’ll need many other coding skills, mastering these three should be your first priority.</p>\n<h3 id=\"html-hypertext-markup-language\">HTML (HyperText Markup Language)</h3>\n<p>HTML forms the backbone of any web page, providing structure and content. It defines elements like headings, paragraphs, links, images, and multimedia components.</p>\n<p><strong>Key Features</strong>:</p>\n<ul>\n<li><strong>Semantic Elements</strong>: Elements like <code>&#x3C;header></code>, <code>&#x3C;footer></code>, <code>&#x3C;article></code>, and <code>&#x3C;section></code> enhance accessibility and SEO. Properly using these elements makes your content more understandable for users, search engines, and accessibility devices like screen readers.</li>\n<li><strong>Foundational</strong>: Understanding HTML is crucial for laying the foundation of any web application, making it an essential skill for full stack developers.</li>\n</ul>\n<h3 id=\"css-cascading-style-sheets\">CSS (Cascading Style Sheets)</h3>\n<p>CSS is responsible for the visual presentation of a web page. It controls layout, colors, fonts, and overall style, making your web pages visually appealing.</p>\n<p><strong>Key Features</strong>:</p>\n<ul>\n<li><strong>Rich visual elements</strong>: Features like Flexbox, Grid Layout, animations, and transitions allow you to create complex designs with minimal code.</li>\n<li><strong>Responsive Design</strong>: Media queries, Flexbox, and Grid are vital for creating web pages that look great on all devices, from desktops to smartphones.</li>\n</ul>\n<h3 id=\"javascript\">JavaScript</h3>\n<p>JavaScript adds interactivity and dynamic behavior to web pages. In other words, it makes the webpage come to life.</p>\n<p><strong>Key Features</strong>:</p>\n<ul>\n<li><strong>Modern JavaScript</strong>: Features like arrow functions, template literals, destructuring, modules, and promises make your code more concise and readable.</li>\n<li><strong>Interactive Elements</strong>: JavaScript makes your web pages interactive, responding to user actions in real time.</li>\n</ul>\n<h2 id=\"3-writing-modern-javascript\">3. Writing Modern JavaScript</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/modern-javascript-js84y.jpg\" alt=\"Modern Javascript\"></p>\n<p>Modern JavaScript is a key element for full stack development, bringing not just new syntax but powerful tools that make development more efficient and scalable. Mastering this involves understanding how to stay up-to-date with the latest developments in the JS-world, and it also involves technologies such as: npm, build-tools, and bundlers that streamline the development process.</p>\n<h3 id=\"what-is-modern-javascript\">What is “modern JavaScript”?</h3>\n<p>The term “Modern JavaScript” can be a bit ambiguous, considering how every new feature or syntax update will directly affect your experience as a developer.\nSome of those “key modern features” are:</p>\n<ul>\n<li><strong>Arrow Functions</strong>: Offer a shorthand for writing functions and lexical scoping of the this keyword.</li>\n<li><strong>Template Literals</strong>: Provide an easier way to create strings with embedded expressions.</li>\n<li><strong>Destructuring</strong>: Simplifies the extraction of values from arrays or properties from objects.</li>\n<li><strong>Modules</strong>: Enable better code organization and reuse.</li>\n<li><strong>Promises and Async/Await</strong>: Facilitate asynchronous programming by providing cleaner and more intuitive ways to handle async operations.</li>\n</ul>\n<h3 id=\"npm-node-package-manager\">npm (Node Package Manager)</h3>\n<p>For those who don’t yet know, <a href=\"https://www.npmjs.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">npm</a> is a critical tool for managing JavaScript libraries and dependencies. It allows you to easily install, update, and manage packages, ensuring your projects stay up-to-date with the latest versions and features.</p>\n<h3 id=\"build-tools-and-bundlers\">Build Tools and Bundlers</h3>\n<p>Build tools and bundlers to automate many repetitive tasks, optimize performance, and ensure code is production-ready. Let’s take a look at some key tools:</p>\n<ul>\n<li><strong>Webpack</strong>: <a href=\"https://webpack.js.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Webpack</a> is a robust module bundler that processes and bundles JavaScript files along with assets like images and stylesheets. It has an ecosystem of plugins and loaders, making it highly configurable and suitable for complex applications.</li>\n<li><strong>Parcel 2</strong>: <a href=\"https://parceljs.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Parcel</a> simplifies the bundling process with zero configuration out of the box. It automatically handles code splitting hot module replacement and supports a variety of file types.</li>\n<li><strong>Vite</strong>: <a href=\"https://vitejs.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Vite</a> is designed for speed, leveraging native ES modules to deliver lightning-fast development builds and optimized production builds using Rollup. It’s particularly ideal for modern frameworks like Vue, React, and Svelte. Vite’s configuration is straightforward, and it supports an extensive plugin system for additional functionality.</li>\n</ul>\n<h2 id=\"4-at-least-one-frontend-framework-react-vue-angular\">4. At least One Frontend Framework (React, Vue, Angular)</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png\" alt=\"React, Angular &#x26; Vue\"></p>\n<p>Although HTML, CSS, and JavaScript form the core of front-end development, there are many frameworks and libraries that can significantly enhance your development workflow. Among the most popular front-end frameworks and libraries are React, Vue, and Angular.</p>\n<p>Mind you, there are quite a lot of other options out there. However, React, Vue, and Angular remain the primary choices for most developers due to their widespread use and strong community support.</p>\n<h3 id=\"react\">React</h3>\n<p>Developed by Facebook, React is a powerful JavaScript library for building user interfaces, especially for single-page applications.</p>\n<ul>\n<li><strong>Component-Based Architecture</strong>: React’s structure is built around components that encapsulate their own logic, styles, and behaviors. This modular approach promotes reusability and maintainability, making it easier to manage complex applications.</li>\n<li><strong>Virtual DOM</strong>: React uses a virtual DOM to optimize performance. This technique reduces the need for direct DOM manipulation, which translates into faster updates and a smoother user experience.</li>\n<li><strong>Large Ecosystem and Community</strong>: With a large ecosystem of libraries and tools, plus a strong community, React provides lots of resources for problem-solving and third-party integrations.</li>\n</ul>\n<h3 id=\"angular\">Angular</h3>\n<p>Developed and maintained by Google, Angular is a full framework for building dynamic web applications</p>\n<ul>\n<li><strong>Full-Featured Framework</strong>: Angular offers a “complete” solution with built-in support for routing, state management, form handling, and HTTP requests. This approach minimizes the need for additional third-party libraries.</li>\n<li><strong>Two-Way Data Binding</strong>: Angular’s two-way data binding simplifies the synchronization between the model and the view (the data and its representation), making updates more efficient.</li>\n<li><strong>Extensive Documentation and Community Support</strong>: Angular has excellent documentation and a very active community, providing a wealth of resources for learning and troubleshooting.</li>\n</ul>\n<h3 id=\"vue\">Vue</h3>\n<p>Vue.js, created by Evan You after working for Google, is known for its progressive framework design, making it easy to integrate into projects incrementally.</p>\n<ul>\n<li><strong>Progressive Framework</strong>: Vue is designed to be incrementally adoptable, allowing developers to start with a small part of their application and gradually integrate more features as needed.</li>\n<li><strong>Simplicity and Ease of Learning</strong>: Vue’s straightforward syntax and design make it easier for new developers to learn and start building applications quickly.</li>\n<li><strong>Flexibility</strong>: Vue offers extensive customization options and can be easily integrated with other projects or libraries. It combines a simple core library with advanced features suitable for larger applications.</li>\n</ul>\n<p>Each of these frameworks has its own set of strengths and use cases. The right choice depends on your specific project requirements and personal preference.</p>\n<h2 id=\"5-backend-programming-language\">5. Backend Programming Language</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/ruby-python-javascript-java-code-h3wyj.jpg\" alt=\"backend programming languages\"></p>\n<p>Choosing the right backend programming language is crucial for building robust and efficient server-side applications. Here are some of the most popular languages used in backend development, each with its own unique features and benefits. You can read this detailed guide for more options and a complete description of each one: <a href=\"https://roadmap.sh/backend/languages\" target=\"_blank\">The best backend languages to master</a>.</p>\n<p><strong>JavaScript (Node.js)</strong>: JavaScript, primarily known for front-end development, extends to the backend through Node.js. Node.js allows for server-side scripting, enabling full stack developers to use the same language for both client-side and server-side development. When it comes to picking a single language for full stack development, JavaScript definitely takes the lead.</p>\n<p><strong>Python</strong>: Python is well known for its simplicity and readability, making it a favorite among developers. Its vast ecosystem of libraries and frameworks, such as Django and Flask, streamlines backend development and makes full stack web development very straightforward. Python’s versatility and ease of use make it suitable for both beginners and experienced developers.</p>\n<p><strong>Java</strong>: Java is a highly popular, class-based, object-oriented programming language that’s designed to have as few implementation dependencies as possible. Java is commonly used in large-scale enterprise applications. Frameworks like Spring and Hibernate further enhance its capabilities.</p>\n<p><strong>Ruby</strong>: Ruby is known for its elegant syntax that is natural to read and easy to write. Ruby on Rails, a powerful web application framework, simplifies the process of building web applications by providing default structures for a database, a web service, and web pages. Its convention-over-configuration approach makes development faster and easier.</p>\n<p>There are many more options, and as a full stack developer, you’ll need to understand the type of technologies you feel more comfortable with, before choosing the language for your backend.</p>\n<h2 id=\"6-consuming-and-creating-restful-apis\">6. Consuming and Creating RESTful APIs</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/restful-apis-q1gvl.png\" alt=\"restful apis\"></p>\n<p>For full stack developers, working with RESTful APIs is a fundamental skill that bridges the front-end and back-end of web applications. APIs (Application Programming Interfaces) allow different software systems to communicate with each other, enabling your front-end to interact seamlessly with server-side logic and data.</p>\n<h3 id=\"consuming-restful-apis\">Consuming RESTful APIs</h3>\n<p>Consuming APIs involves making HTTP requests from your front-end application to retrieve or send data to the server. Here are the key concepts:</p>\n<ul>\n<li><strong>HTTP Methods</strong>: Understanding the different HTTP methods is crucial. We’ve already mentioned them above when describing HTTP itself, so make sure to check out the links listed there for more details.</li>\n<li><strong>Endpoints and Routes</strong>: An API endpoint is a specific path where your API can be accessed by a client. Each endpoint corresponds to a route in your back-end server, handling specific requests. In the case of RESTful APIs, these routes refer to resources in your system.</li>\n<li><strong>Request and Response</strong>: When consuming an API, the front-end sends a request to the server and receives a response. The request typically includes headers (metadata about the request) and a body (data sent to the server), while the response contains the status code, headers, and data.</li>\n<li><strong>Fetching Data</strong>: In JavaScript, you can use the native fetch API or libraries like Axios to make HTTP requests.</li>\n</ul>\n<h3 id=\"creating-restful-apis\">Creating RESTful APIs</h3>\n<p>Creating APIs involves setting up server-side routes and handling requests. Here’s how to get started:</p>\n<ul>\n<li><strong>Define Routes</strong>: In your back-end framework (like Express for Node.js or Django for Python), define routes that correspond to different endpoints. Each route should handle a specific HTTP method.</li>\n<li><strong>Handle Requests and Responses</strong>: For each route, write logic to handle incoming requests and send appropriate responses. Use status codes to indicate the outcome of the request (e.g., 200 for success, 404 for not found, 500 for server errors).</li>\n<li><strong>Middleware</strong>: Middleware functions in frameworks like Express can process requests before they reach the endpoint handlers. They’re useful for tasks like authentication, logging, and data validation.</li>\n<li><strong>Database Integration</strong>: Often, your API will interact with a database. Use an ORM (Object-Relational Mapping) tool like Sequelize for SQL databases or Mongoose for MongoDB to manage database operations.</li>\n<li><strong>REST Principles</strong>: Ensure your API follows REST principles, such as statelessness (each request is independent), resource-based URLs (use nouns for endpoints), and appropriate use of HTTP methods. You can <a href=\"https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">read here</a> the full details about REST from the paper that defined the concept.</li>\n</ul>\n<h2 id=\"7-databases\">7. Databases</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/relational-cb-vs-non-relational-db-9r4m5.png\" alt=\"relational databases\"></p>\n<p>Understanding both relational and non-relational databases is crucial for managing and storing data effectively in your applications. Each type of database has its own strengths and use cases, and knowing when to use each is essential for building robust and scalable applications.</p>\n<h3 id=\"relational-databases\">Relational Databases</h3>\n<p>Relational databases store data in structured tables with predefined schemas. They use SQL (Structured Query Language) for querying and managing data. Here are some key relational databases:</p>\n<ul>\n<li><strong>MySQL</strong>: MySQL is one of the most popular open-source relational databases. It’s known for its ease of use (a common choice for new developers) and performance.</li>\n<li><strong>PostgreSQL</strong>: PostgreSQL is a powerful, open-source relational database system known for its advanced features and compliance with SQL standards. It supports complex queries, transactions, and extensibility, making it suitable for a wide range of applications.</li>\n<li><strong>SQLite</strong>: SQLite is a lightweight, disk-based database that’s easy to set up and use. It’s often used in embedded systems and applications that require a simple, self-contained database engine. You’re not going to see big systems using SQLite for its main database, but it’s very common in small projects.</li>\n</ul>\n<h3 id=\"non-relational-databases\">Non-Relational Databases</h3>\n<p>Non-relational databases, also known as NoSQL databases, store data in various formats such as documents, key-value pairs, graphs, or wide-column stores. They are designed to handle large volumes of unstructured or semi-structured data. Here are some popular non-relational databases:</p>\n<ul>\n<li><strong>MongoDB</strong>: MongoDB is a document-oriented database that stores data in JSON-like documents. It’s highly flexible and scalable, making it ideal for applications that require quick iterations and schema flexibility.</li>\n<li><strong>Redis</strong>: Redis is an in-memory key-value store known for its high performance and speed. It’s commonly used for caching, real-time analytics, and as a message broker.</li>\n<li><strong>Cassandra</strong>: Cassandra is a distributed, wide-column store designed for handling large amounts of data across many commodity servers without any single point of failure. It’s highly scalable and suitable for applications that require high availability and performance.</li>\n</ul>\n<p>In the end, like with many other technologies, there is not one single option that’s better than the others. It’s more about your particular needs and the features of each database. When having to decide on a specific database option, try to understand their capabilities and try to match them to your particular context.</p>\n<h2 id=\"8-hosting-and-infrastructure\">8. Hosting and Infrastructure</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/deployment-infrastructures-jrvr9.png\" alt=\"deployment infrastructure\"></p>\n<p>For full stack developers, understanding hosting and infrastructure is essential for deploying and managing their web applications. This involves knowing where to host your applications, how to set up servers, and how to ensure your application runs smoothly and efficiently. Here’s a breakdown of key concepts and services in this area:</p>\n<h3 id=\"cloud-hosting-providers\">Cloud Hosting Providers</h3>\n<p>Cloud hosting providers offer scalable and flexible solutions for hosting web applications. They provide various services including virtual machines, storage, databases, and more. Some of the most popular providers are:</p>\n<ul>\n<li><strong>Amazon Web Services (AWS)</strong>: AWS offers a comprehensive suite of cloud services, including EC2 for virtual servers, S3 for storage, and RDS for managed databases. Its scalability and range of services make it a go-to choice for many developers.</li>\n<li><strong>Google Cloud Platform (GCP)</strong>: GCP provides robust cloud computing services, including Compute Engine for virtual machines, Cloud Storage, and Cloud SQL for managed databases.</li>\n<li><strong>Microsoft Azure</strong>: Azure offers a wide range of cloud services similar to AWS and GCP. It includes Azure Virtual Machines, Blob Storage, and Azure SQL Database. Azure integrates well with Microsoft’s other products, making it ideal for enterprise applications.</li>\n</ul>\n<h3 id=\"web-hosting-services\">Web Hosting Services</h3>\n<p>For simpler or smaller-scale projects, traditional web hosting services might be more than enough. These services typically offer easy setup and management for hosting websites and web applications:</p>\n<ul>\n<li><strong>Heroku</strong>: Heroku is a platform-as-a-service (PaaS) that makes it easy to deploy, manage, and scale applications. It supports several programming languages and provides a straightforward way to deploy applications directly from your code repository.</li>\n<li><strong>Netlify</strong>: Netlify specializes in hosting static websites and front-end applications. It provides continuous deployment from Git repositories, built-in SSL, and a global CDN, making it a popular choice for modern web development workflows.</li>\n<li><strong>Vercel</strong>: Vercel is optimized for Next.js. It offers seamless deployment, serverless functions, and a global CDN, ensuring fast and reliable performance for web applications.</li>\n</ul>\n<h3 id=\"containers-and-orchestration\">Containers and Orchestration</h3>\n<p>Containers allow developers to package applications with all their dependencies, ensuring consistency across different environments (this simplifies deployment processes by ensuring your app always gets deployed into the same system). Orchestration tools manage and scale these containers:</p>\n<ul>\n<li><strong>Docker</strong>: Docker is a platform that allows developers to create, deploy, and run applications in containers. Containers are lightweight and portable, making it easier to manage application dependencies and environments.</li>\n<li><strong>Kubernetes</strong>: Kubernetes is an open-source orchestration tool for managing containerized applications at scale. It automates deployment, scaling, and operations of application containers, providing a solid infrastructure for large-scale applications.</li>\n</ul>\n<h3 id=\"serverless-architecture\">Serverless Architecture</h3>\n<p>If you just don’t want to think about the server, at all (configuration, specs, resource requirements, etc), then you probably want a serverless architecture.</p>\n<p>Serverless architecture allows developers to build and run applications without managing server infrastructure (the servers are there, you just don’t interact directly with them). Key benefits include automatic scaling and pay-per-use billing.</p>\n<ul>\n<li><strong>AWS Lambda</strong>: AWS Lambda lets you run code without provisioning or managing servers. It executes code in response to events and automatically scales based on the number of requests, making it ideal for microservices and real-time data processing.</li>\n<li><strong>Google Cloud Functions</strong>: Google Cloud Functions is a serverless execution environment for building and connecting cloud services. It allows you to write simple, single-purpose functions that are triggered by events.</li>\n<li><strong>Azure Functions</strong>: Azure Functions provides a serverless compute service that enables you to run event-triggered code. It integrates with other Azure services, offering a seamless development and deployment experience.</li>\n</ul>\n<h3 id=\"infrastructure-as-code-iac\">Infrastructure as Code (IaC)</h3>\n<p>IaC allows developers to manage and provision computing infrastructure through machine-readable configuration files rather than physical hardware configuration or interactive configuration tools. This is a great option if you’re looking to version your infrastructure configuration.</p>\n<ul>\n<li><strong>Terraform</strong>: Terraform is an IaC tool that allows you to define and provision data center infrastructure using a high-level configuration language. It supports multiple cloud providers, making it a versatile choice for managing infrastructure. While not fully open-source, Terraform offers a paid version called Terraform Cloud. If you’re looking for a fully open-source version, you can look into OpenTofu, which is an open-source fork from Terraform under the Mozilla Public License 2.0.</li>\n<li><strong>Ansible</strong>: Ansible is an open-source automation tool for configuration management, application deployment, and task automation. It uses YAML and doesn’t require agent software on the target nodes, making it easy to use and manage.</li>\n</ul>\n<p>##Conclusion\nKeeping up-to-date with the full set of skills any full stack web developer will need for their job is not easy, given how varied their work might be. That said, the 8 full stack developer skills listed here are more than enough to get you started, and you can keep adding more as you see the need for them.</p>\n<p>Remember that if you want more details about the roadmap to become a great full stack developer, you have a great resource here: <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">Full stack developer roadmap</a>.</p>";

				const frontmatter$F = {"title":"8 In-Demand Full Stack Developer Skills to Master","description":"Master these 8 in-demand full stack developer skills and become a standout candidate for your next job application.","authorId":"fernando","excludedBySlug":"/full-stack/developer-skills","seo":{"title":"8 In-Demand Full Stack Developer Skills to Master","description":"Master these 8 in-demand full stack developer skills and become a standout candidate for your next job application.","ogImageUrl":"https://assets.roadmap.sh/guest/full-stack-developer-skills-abb38.jpg"},"isNew":false,"type":"textual","date":"2024-07-05T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$F = "/workspace/src/data/guides/full-stack-developer-skills.md";
				const url$F = undefined;
				function rawContent$F() {
					return "   \n                                                          \n                                                                                                                                  \n                  \n                                              \n    \n                                                            \n                                                                                                                                    \n                                                                                     \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best full stack developer skills to learn.](https://assets.roadmap.sh/guest/full-stack-developer-skills-abb38.jpg)\n\nIt should be no surprise to anyone that given the fast pace of the web development industry, every type of developer, especially full stack developers, must stay ahead of the curve by continuously updating their skills.\n\nFull-stack web developers share a unique blend of expertise that allows them to independently build and maintain entire web applications. However, this mix of skills is a double-edged sword because it makes staying up-to-date harder for them.\nIn this article, we will explore the 8 essential full stack developer skills that you need to master and thrive in your career.\n\nRemember that you have more details about the different technologies and topics to cover in our [full stack developer roadmap](https://roadmap.sh/full-stack).\n\n## Understanding full-stack development\n\nFull stack development involves both frontend and backend work. It means you're not just limited to designing the parts of a website or application that users interact with (frontend), but also managing the server, database, and application logic that power those interactions (backend).\n\nPlus, full-stack developers need to be proficient in working with both relational and non-relational databases, setting up and maintaining infrastructure, and ensuring that their applications are scalable and secure. In other words, if they need to, full-stack developers can be the equivalent of a one-man army. Is this an ideal situation? No, it isn’t. In fact, a better way to look at a full stack developer is to think of them as a wildcard that can be placed in any team, and they’ll consistently add value to it, with minimum ramp-up time needed.\n\nWith that foundation in mind, let's dive into the specific skills you need to master.\n\n## 1. Basic understanding of HTTP\n\n![basic understand of HTTP](https://assets.roadmap.sh/guest/understanding-http-pct23.png)\n\nLet’s start with the basics: understanding HTTP. HTTP, or HyperText Transfer Protocol, is the foundation of any interaction on the web. It’s what allows clients (like your web browser) and servers to communicate with each other. As a full-stack developer, having a solid grasp of HTTP is crucial for building, debugging, and maintaining web applications. It’s your bread and butter, and you’ll need to internalize it if you hope to become great at your job.\n\n### Why HTTP Matters for Full Stack Developers?\n\nWithout HTTP, the internet as we know it wouldn’t function, it’s that simple. For a full-stack developer, understanding HTTP means you can effectively manage how your frontend communicates with your backend.\n\n### Key Concepts to understand in HTTP\n\n- **HTTP Methods**: These are the actions that can be performed on a resource. The most common methods are GET (to retrieve data), POST (to send data to the server), PUT (to update data), and DELETE (to remove data). Each method has a specific purpose and knowing when to use each one is essential for building efficient APIs. You can read the [full list of verbs here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).\n- **Status Codes**: HTTP status codes are responses from the server to the client's request. They indicate whether the request was successful, if there was an error, or if further action is needed. Common status codes include 200 (OK), 404 (Not Found), 500 (Internal Server Error), and 403 (Forbidden). Understanding these codes helps in debugging and improving user experience. Here’s the [full list of status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) in case you’re wondering.\n- **Headers**: HTTP headers are key-value pairs sent between the client and server. They carry essential information like content type, authorization information (in some cases even credentials), and cache control. Familiarity with headers allows you to manage security, content negotiation, and request-response flow more effectively. While you can create your own, here’s a list of the [standard set of HTTP headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers).\n\n## 2. HTML/CSS/JavaScript\n\n![html, css & javascript](https://assets.roadmap.sh/guest/html-css-javascript-layers-7agjb.png)\n\nFor full-stack developers, a solid grasp of HTML, CSS, and JavaScript is essential. These technologies are the building blocks of the visual side of the web, enabling you to create an engaging and functional user interface. While you'll need many other coding skills, mastering these three should be your first priority.\n\n### HTML (HyperText Markup Language)\n\nHTML forms the backbone of any web page, providing structure and content. It defines elements like headings, paragraphs, links, images, and multimedia components.\n\n**Key Features**:\n\n- **Semantic Elements**: Elements like `<header>`, `<footer>`, `<article>`, and `<section>` enhance accessibility and SEO. Properly using these elements makes your content more understandable for users, search engines, and accessibility devices like screen readers.\n- **Foundational**: Understanding HTML is crucial for laying the foundation of any web application, making it an essential skill for full stack developers.\n\n### CSS (Cascading Style Sheets)\n\nCSS is responsible for the visual presentation of a web page. It controls layout, colors, fonts, and overall style, making your web pages visually appealing.\n\n**Key Features**:\n\n- **Rich visual elements**: Features like Flexbox, Grid Layout, animations, and transitions allow you to create complex designs with minimal code.\n- **Responsive Design**: Media queries, Flexbox, and Grid are vital for creating web pages that look great on all devices, from desktops to smartphones.\n\n### JavaScript\n\nJavaScript adds interactivity and dynamic behavior to web pages. In other words, it makes the webpage come to life.\n\n**Key Features**:\n\n- **Modern JavaScript**: Features like arrow functions, template literals, destructuring, modules, and promises make your code more concise and readable.\n- **Interactive Elements**: JavaScript makes your web pages interactive, responding to user actions in real time.\n\n## 3. Writing Modern JavaScript\n\n![Modern Javascript](https://assets.roadmap.sh/guest/modern-javascript-js84y.jpg)\n\nModern JavaScript is a key element for full stack development, bringing not just new syntax but powerful tools that make development more efficient and scalable. Mastering this involves understanding how to stay up-to-date with the latest developments in the JS-world, and it also involves technologies such as: npm, build-tools, and bundlers that streamline the development process.\n\n### What is “modern JavaScript”?\n\nThe term “Modern JavaScript” can be a bit ambiguous, considering how every new feature or syntax update will directly affect your experience as a developer.\nSome of those “key modern features” are:\n\n- **Arrow Functions**: Offer a shorthand for writing functions and lexical scoping of the this keyword.\n- **Template Literals**: Provide an easier way to create strings with embedded expressions.\n- **Destructuring**: Simplifies the extraction of values from arrays or properties from objects.\n- **Modules**: Enable better code organization and reuse.\n- **Promises and Async/Await**: Facilitate asynchronous programming by providing cleaner and more intuitive ways to handle async operations.\n\n### npm (Node Package Manager)\n\nFor those who don’t yet know, [npm](https://www.npmjs.com/) is a critical tool for managing JavaScript libraries and dependencies. It allows you to easily install, update, and manage packages, ensuring your projects stay up-to-date with the latest versions and features.\n\n### Build Tools and Bundlers\n\nBuild tools and bundlers to automate many repetitive tasks, optimize performance, and ensure code is production-ready. Let’s take a look at some key tools:\n\n- **Webpack**: [Webpack](https://webpack.js.org/) is a robust module bundler that processes and bundles JavaScript files along with assets like images and stylesheets. It has an ecosystem of plugins and loaders, making it highly configurable and suitable for complex applications. \n- **Parcel 2**: [Parcel](https://parceljs.org/) simplifies the bundling process with zero configuration out of the box. It automatically handles code splitting hot module replacement and supports a variety of file types.\n- **Vite**: [Vite](https://vitejs.dev/) is designed for speed, leveraging native ES modules to deliver lightning-fast development builds and optimized production builds using Rollup. It’s particularly ideal for modern frameworks like Vue, React, and Svelte. Vite’s configuration is straightforward, and it supports an extensive plugin system for additional functionality.\n\n## 4. At least One Frontend Framework (React, Vue, Angular)\n\n![React, Angular & Vue](https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png)\n\nAlthough HTML, CSS, and JavaScript form the core of front-end development, there are many frameworks and libraries that can significantly enhance your development workflow. Among the most popular front-end frameworks and libraries are React, Vue, and Angular.\n\nMind you, there are quite a lot of other options out there. However, React, Vue, and Angular remain the primary choices for most developers due to their widespread use and strong community support. \n\n### React\n\nDeveloped by Facebook, React is a powerful JavaScript library for building user interfaces, especially for single-page applications.\n\n- **Component-Based Architecture**: React’s structure is built around components that encapsulate their own logic, styles, and behaviors. This modular approach promotes reusability and maintainability, making it easier to manage complex applications.\n- **Virtual DOM**: React uses a virtual DOM to optimize performance. This technique reduces the need for direct DOM manipulation, which translates into faster updates and a smoother user experience.\n- **Large Ecosystem and Community**: With a large ecosystem of libraries and tools, plus a strong community, React provides lots of resources for problem-solving and third-party integrations.\n\n### Angular\n\nDeveloped and maintained by Google, Angular is a full framework for building dynamic web applications\n\n- **Full-Featured Framework**: Angular offers a “complete” solution with built-in support for routing, state management, form handling, and HTTP requests. This approach minimizes the need for additional third-party libraries.\n- **Two-Way Data Binding**: Angular’s two-way data binding simplifies the synchronization between the model and the view (the data and its representation), making updates more efficient.\n- **Extensive Documentation and Community Support**: Angular has excellent documentation and a very active community, providing a wealth of resources for learning and troubleshooting.\n\n### Vue\n\nVue.js, created by Evan You after working for Google, is known for its progressive framework design, making it easy to integrate into projects incrementally.\n\n- **Progressive Framework**: Vue is designed to be incrementally adoptable, allowing developers to start with a small part of their application and gradually integrate more features as needed.\n- **Simplicity and Ease of Learning**: Vue’s straightforward syntax and design make it easier for new developers to learn and start building applications quickly.\n- **Flexibility**: Vue offers extensive customization options and can be easily integrated with other projects or libraries. It combines a simple core library with advanced features suitable for larger applications.\n\nEach of these frameworks has its own set of strengths and use cases. The right choice depends on your specific project requirements and personal preference.\n\n## 5. Backend Programming Language\n\n![backend programming languages](https://assets.roadmap.sh/guest/ruby-python-javascript-java-code-h3wyj.jpg)\n\nChoosing the right backend programming language is crucial for building robust and efficient server-side applications. Here are some of the most popular languages used in backend development, each with its own unique features and benefits. You can read this detailed guide for more options and a complete description of each one: [The best backend languages to master](https://roadmap.sh/backend/languages).\n\n**JavaScript (Node.js)**: JavaScript, primarily known for front-end development, extends to the backend through Node.js. Node.js allows for server-side scripting, enabling full stack developers to use the same language for both client-side and server-side development. When it comes to picking a single language for full stack development, JavaScript definitely takes the lead.\n\n**Python**: Python is well known for its simplicity and readability, making it a favorite among developers. Its vast ecosystem of libraries and frameworks, such as Django and Flask, streamlines backend development and makes full stack web development very straightforward. Python's versatility and ease of use make it suitable for both beginners and experienced developers.\n\n**Java**: Java is a highly popular, class-based, object-oriented programming language that’s designed to have as few implementation dependencies as possible. Java is commonly used in large-scale enterprise applications. Frameworks like Spring and Hibernate further enhance its capabilities.\n\n**Ruby**: Ruby is known for its elegant syntax that is natural to read and easy to write. Ruby on Rails, a powerful web application framework, simplifies the process of building web applications by providing default structures for a database, a web service, and web pages. Its convention-over-configuration approach makes development faster and easier.\n\nThere are many more options, and as a full stack developer, you’ll need to understand the type of technologies you feel more comfortable with, before choosing the language for your backend.\n\n## 6. Consuming and Creating RESTful APIs\n\n![restful apis](https://assets.roadmap.sh/guest/restful-apis-q1gvl.png)\n\nFor full stack developers, working with RESTful APIs is a fundamental skill that bridges the front-end and back-end of web applications. APIs (Application Programming Interfaces) allow different software systems to communicate with each other, enabling your front-end to interact seamlessly with server-side logic and data.\n\n### Consuming RESTful APIs\n\nConsuming APIs involves making HTTP requests from your front-end application to retrieve or send data to the server. Here are the key concepts:\n\n- **HTTP Methods**: Understanding the different HTTP methods is crucial. We’ve already mentioned them above when describing HTTP itself, so make sure to check out the links listed there for more details.\n- **Endpoints and Routes**: An API endpoint is a specific path where your API can be accessed by a client. Each endpoint corresponds to a route in your back-end server, handling specific requests. In the case of RESTful APIs, these routes refer to resources in your system.\n- **Request and Response**: When consuming an API, the front-end sends a request to the server and receives a response. The request typically includes headers (metadata about the request) and a body (data sent to the server), while the response contains the status code, headers, and data.\n- **Fetching Data**: In JavaScript, you can use the native fetch API or libraries like Axios to make HTTP requests.\n\n### Creating RESTful APIs\n\nCreating APIs involves setting up server-side routes and handling requests. Here’s how to get started:\n\n- **Define Routes**: In your back-end framework (like Express for Node.js or Django for Python), define routes that correspond to different endpoints. Each route should handle a specific HTTP method.\n- **Handle Requests and Responses**: For each route, write logic to handle incoming requests and send appropriate responses. Use status codes to indicate the outcome of the request (e.g., 200 for success, 404 for not found, 500 for server errors).\n- **Middleware**: Middleware functions in frameworks like Express can process requests before they reach the endpoint handlers. They’re useful for tasks like authentication, logging, and data validation.\n- **Database Integration**: Often, your API will interact with a database. Use an ORM (Object-Relational Mapping) tool like Sequelize for SQL databases or Mongoose for MongoDB to manage database operations.\n- **REST Principles**: Ensure your API follows REST principles, such as statelessness (each request is independent), resource-based URLs (use nouns for endpoints), and appropriate use of HTTP methods. You can [read here](https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm) the full details about REST from the paper that defined the concept.\n\n## 7. Databases\n\n![relational databases](https://assets.roadmap.sh/guest/relational-cb-vs-non-relational-db-9r4m5.png)\n\nUnderstanding both relational and non-relational databases is crucial for managing and storing data effectively in your applications. Each type of database has its own strengths and use cases, and knowing when to use each is essential for building robust and scalable applications.\n\n### Relational Databases\n\nRelational databases store data in structured tables with predefined schemas. They use SQL (Structured Query Language) for querying and managing data. Here are some key relational databases:\n\n- **MySQL**: MySQL is one of the most popular open-source relational databases. It's known for its ease of use (a common choice for new developers) and performance.\n- **PostgreSQL**: PostgreSQL is a powerful, open-source relational database system known for its advanced features and compliance with SQL standards. It supports complex queries, transactions, and extensibility, making it suitable for a wide range of applications.\n- **SQLite**: SQLite is a lightweight, disk-based database that's easy to set up and use. It's often used in embedded systems and applications that require a simple, self-contained database engine. You’re not going to see big systems using SQLite for its main database, but it’s very common in small projects.\n\n### Non-Relational Databases\n\nNon-relational databases, also known as NoSQL databases, store data in various formats such as documents, key-value pairs, graphs, or wide-column stores. They are designed to handle large volumes of unstructured or semi-structured data. Here are some popular non-relational databases:\n\n- **MongoDB**: MongoDB is a document-oriented database that stores data in JSON-like documents. It’s highly flexible and scalable, making it ideal for applications that require quick iterations and schema flexibility.\n- **Redis**: Redis is an in-memory key-value store known for its high performance and speed. It’s commonly used for caching, real-time analytics, and as a message broker.\n- **Cassandra**: Cassandra is a distributed, wide-column store designed for handling large amounts of data across many commodity servers without any single point of failure. It's highly scalable and suitable for applications that require high availability and performance.\n\nIn the end, like with many other technologies, there is not one single option that’s better than the others. It’s more about your particular needs and the features of each database. When having to decide on a specific database option, try to understand their capabilities and try to match them to your particular context.\n\n## 8. Hosting and Infrastructure\n\n![deployment infrastructure](https://assets.roadmap.sh/guest/deployment-infrastructures-jrvr9.png)\n\nFor full stack developers, understanding hosting and infrastructure is essential for deploying and managing their web applications. This involves knowing where to host your applications, how to set up servers, and how to ensure your application runs smoothly and efficiently. Here’s a breakdown of key concepts and services in this area:\n\n### Cloud Hosting Providers\n\nCloud hosting providers offer scalable and flexible solutions for hosting web applications. They provide various services including virtual machines, storage, databases, and more. Some of the most popular providers are:\n\n- **Amazon Web Services (AWS)**: AWS offers a comprehensive suite of cloud services, including EC2 for virtual servers, S3 for storage, and RDS for managed databases. Its scalability and range of services make it a go-to choice for many developers.\n- **Google Cloud Platform (GCP)**: GCP provides robust cloud computing services, including Compute Engine for virtual machines, Cloud Storage, and Cloud SQL for managed databases. \n- **Microsoft Azure**: Azure offers a wide range of cloud services similar to AWS and GCP. It includes Azure Virtual Machines, Blob Storage, and Azure SQL Database. Azure integrates well with Microsoft’s other products, making it ideal for enterprise applications.\n\n### Web Hosting Services\n\nFor simpler or smaller-scale projects, traditional web hosting services might be more than enough. These services typically offer easy setup and management for hosting websites and web applications:\n\n- **Heroku**: Heroku is a platform-as-a-service (PaaS) that makes it easy to deploy, manage, and scale applications. It supports several programming languages and provides a straightforward way to deploy applications directly from your code repository.\n- **Netlify**: Netlify specializes in hosting static websites and front-end applications. It provides continuous deployment from Git repositories, built-in SSL, and a global CDN, making it a popular choice for modern web development workflows.\n- **Vercel**: Vercel is optimized for Next.js. It offers seamless deployment, serverless functions, and a global CDN, ensuring fast and reliable performance for web applications.\n\n### Containers and Orchestration\n\nContainers allow developers to package applications with all their dependencies, ensuring consistency across different environments (this simplifies deployment processes by ensuring your app always gets deployed into the same system). Orchestration tools manage and scale these containers:\n\n- **Docker**: Docker is a platform that allows developers to create, deploy, and run applications in containers. Containers are lightweight and portable, making it easier to manage application dependencies and environments.\n- **Kubernetes**: Kubernetes is an open-source orchestration tool for managing containerized applications at scale. It automates deployment, scaling, and operations of application containers, providing a solid infrastructure for large-scale applications.\n\n### Serverless Architecture\n\nIf you just don’t want to think about the server, at all (configuration, specs, resource requirements, etc), then you probably want a serverless architecture.\n\nServerless architecture allows developers to build and run applications without managing server infrastructure (the servers are there, you just don’t interact directly with them). Key benefits include automatic scaling and pay-per-use billing.\n\n- **AWS Lambda**: AWS Lambda lets you run code without provisioning or managing servers. It executes code in response to events and automatically scales based on the number of requests, making it ideal for microservices and real-time data processing.\n- **Google Cloud Functions**: Google Cloud Functions is a serverless execution environment for building and connecting cloud services. It allows you to write simple, single-purpose functions that are triggered by events.\n- **Azure Functions**: Azure Functions provides a serverless compute service that enables you to run event-triggered code. It integrates with other Azure services, offering a seamless development and deployment experience.\n\n### Infrastructure as Code (IaC)\n\nIaC allows developers to manage and provision computing infrastructure through machine-readable configuration files rather than physical hardware configuration or interactive configuration tools. This is a great option if you’re looking to version your infrastructure configuration.\n\n- **Terraform**: Terraform is an IaC tool that allows you to define and provision data center infrastructure using a high-level configuration language. It supports multiple cloud providers, making it a versatile choice for managing infrastructure. While not fully open-source, Terraform offers a paid version called Terraform Cloud. If you’re looking for a fully open-source version, you can look into OpenTofu, which is an open-source fork from Terraform under the Mozilla Public License 2.0.\n- **Ansible**: Ansible is an open-source automation tool for configuration management, application deployment, and task automation. It uses YAML and doesn’t require agent software on the target nodes, making it easy to use and manage.\n\n##Conclusion \nKeeping up-to-date with the full set of skills any full stack web developer will need for their job is not easy, given how varied their work might be. That said, the 8 full stack developer skills listed here are more than enough to get you started, and you can keep adding more as you see the need for them.\n\nRemember that if you want more details about the roadmap to become a great full stack developer, you have a great resource here: [Full stack developer roadmap](https://roadmap.sh/full-stack).\n";
				}
				async function compiledContent$F() {
					return await html$F();
				}
				function getHeadings$F() {
					return [{"depth":2,"slug":"understanding-full-stack-development","text":"Understanding full-stack development"},{"depth":2,"slug":"1-basic-understanding-of-http","text":"1. Basic understanding of HTTP"},{"depth":3,"slug":"why-http-matters-for-full-stack-developers","text":"Why HTTP Matters for Full Stack Developers?"},{"depth":3,"slug":"key-concepts-to-understand-in-http","text":"Key Concepts to understand in HTTP"},{"depth":2,"slug":"2-htmlcssjavascript","text":"2. HTML/CSS/JavaScript"},{"depth":3,"slug":"html-hypertext-markup-language","text":"HTML (HyperText Markup Language)"},{"depth":3,"slug":"css-cascading-style-sheets","text":"CSS (Cascading Style Sheets)"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":2,"slug":"3-writing-modern-javascript","text":"3. Writing Modern JavaScript"},{"depth":3,"slug":"what-is-modern-javascript","text":"What is “modern JavaScript”?"},{"depth":3,"slug":"npm-node-package-manager","text":"npm (Node Package Manager)"},{"depth":3,"slug":"build-tools-and-bundlers","text":"Build Tools and Bundlers"},{"depth":2,"slug":"4-at-least-one-frontend-framework-react-vue-angular","text":"4. At least One Frontend Framework (React, Vue, Angular)"},{"depth":3,"slug":"react","text":"React"},{"depth":3,"slug":"angular","text":"Angular"},{"depth":3,"slug":"vue","text":"Vue"},{"depth":2,"slug":"5-backend-programming-language","text":"5. Backend Programming Language"},{"depth":2,"slug":"6-consuming-and-creating-restful-apis","text":"6. Consuming and Creating RESTful APIs"},{"depth":3,"slug":"consuming-restful-apis","text":"Consuming RESTful APIs"},{"depth":3,"slug":"creating-restful-apis","text":"Creating RESTful APIs"},{"depth":2,"slug":"7-databases","text":"7. Databases"},{"depth":3,"slug":"relational-databases","text":"Relational Databases"},{"depth":3,"slug":"non-relational-databases","text":"Non-Relational Databases"},{"depth":2,"slug":"8-hosting-and-infrastructure","text":"8. Hosting and Infrastructure"},{"depth":3,"slug":"cloud-hosting-providers","text":"Cloud Hosting Providers"},{"depth":3,"slug":"web-hosting-services","text":"Web Hosting Services"},{"depth":3,"slug":"containers-and-orchestration","text":"Containers and Orchestration"},{"depth":3,"slug":"serverless-architecture","text":"Serverless Architecture"},{"depth":3,"slug":"infrastructure-as-code-iac","text":"Infrastructure as Code (IaC)"}];
				}

				const Content$F = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$F;
					content.file = file$F;
					content.url = url$F;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$F())}`;
				});

const __vite_glob_0_57 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$F,
	compiledContent: compiledContent$F,
	default: Content$F,
	file: file$F,
	frontmatter: frontmatter$F,
	getHeadings: getHeadings$F,
	rawContent: rawContent$F,
	url: url$F
}, Symbol.toStringTag, { value: 'Module' }));

const html$E = () => "<p><img src=\"https://assets.roadmap.sh/guest/become-a-full-stack-developer-54s51.jpg\" alt=\"How to become a full stack developer\"></p>\n<p>To become a full stack developer, you must learn HTML, CSS, and JavaScript to build interactive interfaces, then move on to backend skills like Node.js and databases like MySQL. Build real projects, use Git for version control, learn deployment tools like AWS, and create a portfolio that showcases your skills.</p>\n<p>A full stack developer is a generalist in software engineering. They are good at both the frontend and backend development of web projects. This dual skill set means they have a strong foundation in all areas of the web development process.</p>\n<p>However, becoming a full stack developer is not always as easy as expected. It involves a lot of coding practice and effort to learn all the needed tools. You will run into roadblocks, get annoyed, and sometimes question yourself. But, with dedication and the right resources, anyone can become a full stack developer.</p>\n<p><strong>TL;DR: A step-by-step guide on how to become a full stack developer.</strong></p>\n<ul>\n<li><strong>Step 1</strong>: Learn the basics of frontend development.</li>\n<li><strong>Step 2</strong>: Learn frontend web development frameworks and libraries.</li>\n<li><strong>Step 3:</strong> Understand version control systems.</li>\n<li><strong>Step 4</strong>: Learn backend web development.</li>\n<li><strong>Step 5</strong>: Learn DevOps and deployment basics.</li>\n<li><strong>Step 6:</strong> Network and consistently learn more.</li>\n<li><strong>Step 7:</strong> Build a portfolio and apply for jobs.</li>\n</ul>\n<p>Following the above steps will help you become a successful full stack developer. In this guide, I will take you through the step-by-step process of becoming a full Stack developer. I will also cover the basics of web development, frontend and backend frameworks, and more.</p>\n<h2 id=\"a-step-by-step-guide-on-how-to-become-a-full-stack-developer\">A step-by-step guide on how to become a full stack developer</h2>\n<p>Learning full stack development can be a lot to handle. There is so much material—tutorials, blogs, videos—that it can be hard to find where to begin and what resources to rely on. Thankfully, you can make use of the step-by-step <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack development</a> roadmap to learn and track your progress.</p>\n<p>The full stack development guide provides clear explanations of all the necessary concepts. The steps below present a concise explanation of the full stack developer roadmap.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/a-step-by-step-guide-on-how-to-become-a-full-stack-developer-nd2r3.png\" alt=\"A step-by-step guide on how to become a full stack developer\"></p>\n<p><strong>Step 1: Learn the basics of frontend development.</strong>\n<a href=\"https://roadmap.sh/frontend\" target=\"_blank\">Learning frontend development</a> basics is important to becoming a successful full stack developer. Frontend development involves making a website look good, responsive, and user-friendly. It is the client side of web development, focusing on how web elements (forms, buttons, etc.) appear on a screen.</p>\n<p>Frontend developers depend on three important languages to create interactive websites and applications:</p>\n<ul>\n<li>Hypertext markup languages <strong>(HTML)</strong>.</li>\n<li>Cascading style sheets <strong>(CSS)</strong>.</li>\n<li>JavaScript.</li>\n</ul>\n<p>HTML and CSS go hand in hand when it comes to web development. HTML serves as the foundation for building web pages. It helps structure and organize the web elements of websites and applications. Examples of these web elements include images, headings, texts, links, and videos. CSS improves the visual appeal of the web elements. It allows you to control the user interface, add colors and spaces, and more using CSS selectors and IDs.</p>\n<p>If you want to improve at HTML and CSS, use them to build projects. Do not only focus on studying; build and practice simultaneously. This approach will help you understand\nHTML and CSS well. Some project ideas include:</p>\n<ul>\n<li>Create and design a resume that shows off your work experience.</li>\n<li>Create a responsive landing page for any product.</li>\n<li>Create a personal website or a blog.</li>\n</ul>\n<p><a href=\"https://roadmap.sh/javascript\" target=\"_blank\"><strong>JavaScript</strong></a> is a programming language used to make your website functional and interactive. It makes web elements like buttons, forms, and animations on your website work. To practice JavaScript, try building:</p>\n<ul>\n<li>A simple calculator.</li>\n<li>An interactive quiz application.</li>\n<li>A to-do list application.</li>\n</ul>\n<p>Learning HTML, CSS, and JavaScript is important to becoming a full stack developer. They work together to create static, interactive web pages that users engage with.</p>\n<p><strong>Step 2: Learn frontend web development frameworks and libraries.</strong>\nLearning frameworks and libraries are the next step to becoming a full stack developer. Frontend web frameworks and libraries make it easier to create web interfaces.</p>\n<p><a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">Frontend frameworks</a> allow users to create websites and applications in a structured manner. They offer pre-written codes and templates to make the development process easier. This way, you won’t have to start from scratch and can focus on making your application stand out. <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, Tailwind CSS, Svelte, and <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue.js</a> are a few examples of popular frontend web frameworks.</p>\n<p>In contrast, frontend libraries are pre-written codes that perform specific functionalities. They help expand on what frameworks can do, or you can use them alone for particular tasks. Some examples of these tasks include form validation, animation, and data visualization. Animate.css, Chart.js, and <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a> are a few examples of popular frontend libraries.</p>\n<p>Frameworks and libraries work together to make development easier in different ways. For example, the <strong>Tailwind CSS</strong> framework helps with responsive web design and layout. But if you want to spice things up with fancy animations, you can use a library like <strong>Animate.css</strong>. They work together to help you make web designs that are useful and look good at the same time.</p>\n<p>Try building your own projects to understand how these frameworks and libraries work. It doesn’t matter how simple these projects are; study and build projects. Some examples of projects to build include:</p>\n<ul>\n<li>Single-page applications <strong>(SPAs)</strong> like game applications.</li>\n<li>Responsive personal portfolio website.</li>\n</ul>\n<p>These projects will help you understand and get better at different concepts. You must practice often and work on real projects to get good at using frameworks.</p>\n<p><strong>Step 3: Understand version control systems</strong>\nThe knowledge of version control systems <strong>(VCS)</strong> is important for full stack developers. VCS records every change made to your codebase, so you know who changed what, when, and why. Being able to do this is vital when working with experienced developers on the same project.</p>\n<p>Some popular examples of VCS include Git <strong>(GitHub, GitLab, and Bitbucket)</strong>. <a href=\"https://roadmap.sh/git-github\" target=\"_blank\">GitHub</a> lets you collaborate, store, and share your code using Git repositories. VCS has many advantages:</p>\n<ul>\n<li>It helps full stack developers collaborate without facing difficulties.</li>\n<li>It helps full stack developers try new ideas without fear of ruining the code.</li>\n<li>It saves a copy of your code so you can return to an earlier version if you have to.</li>\n<li>It provides access control and authentication. You can control who can edit, review, or manage your code. It keeps your code safe and tidy when working with other professional developers.</li>\n</ul>\n<p>Knowing how to use VCS is important to become a full stack developer. It improves collaboration and helps organize difficult projects. This documentation contains everything you need to know about <a href=\"https://github.com/git-guides\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><strong>Git</strong></a>.</p>\n<p><strong>Step 4: Learn backend web development</strong>\nNow that you know frontend concepts, it is time to <a href=\"https://roadmap.sh/backend\" target=\"_blank\">learn backend web development</a>. Backend development is the process of building the server side of web applications. It is where the behind-the-scenes operations that make the frontend interface work happen. This part of server-side development focuses on:</p>\n<ul>\n<li>Management of databases.</li>\n<li>Application programming interfaces <strong>(APIs)</strong> development.</li>\n<li>Server-side logic and more.</li>\n</ul>\n<p>Backend developers create applications using different backend programming languages and frameworks like:</p>\n<ul>\n<li><a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">Node.js</a></li>\n<li><a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a></li>\n<li>C#</li>\n<li>Ruby</li>\n<li><a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a></li>\n</ul>\n<p>These backend programming languages have specific strengths and weaknesses. Choosing a language comes down to what the project needs, what your team is good at, and what you like.</p>\n<p>If you are looking to start backend development, I recommend learning Node.js. Node.js runs on JavaScript, which is the primary language for backend development. Since you already know JavaScript from the frontend, it will be easy to learn. Node.js allows you to build dynamic backend applications using JavaScript. So, you can work across the whole tech stack <strong>(both the frontend and backend)</strong> using one language.</p>\n<p>Node.js has many cool packages and libraries; you can get them through the Node Package Manager <strong>(NPM)</strong>. These resources provide existing solutions like authentication with OAuth for everyday tasks. You can also use Node.js on any operating system, such as Windows, macOS, and Linux.</p>\n<p>It is important to practice as you learn to understand how it works better. Think about working on projects that combine your frontend abilities with backend features. Practice Node.js by building basic CRUD <strong>(Create, Read, Update, Delete)</strong> applications, like:</p>\n<ul>\n<li>Social media applications, e.g., Twitter.</li>\n<li>Project management applications, e.g., Jira.</li>\n<li>Online shopping websites, e.g., Amazon.</li>\n</ul>\n<p>Building CRUD applications will teach you how to handle and work with databases. As you continue learning, build more complex applications that combine different functionalities. For example, you can create a project with user authentication to log in and sign up for an application.</p>\n<p>The following are some of the most important concepts to focus on when learning Node.js:</p>\n<ul>\n<li><strong>Database interactions</strong>: <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>, PostgreSQL, MySQL, CRUD operations.</li>\n<li><strong>File and module system</strong>: Reading and writing files, local vs. global modules, NPM.</li>\n<li><strong>Asynchronous programming</strong>: Callbacks, Promises, Async/Await syntax, event emitters, etc.</li>\n<li><strong>Event loop</strong>: Task queues, event listeners, handling of I/O operations.</li>\n<li><strong>Express.js framework</strong>: routing, middleware, HTTP methods (GET, POST, PUT, DELETE), RESTful APIs.</li>\n<li><strong>Authentication and security</strong>: JSON Web Tokens (JWT), OAuth implementation, Security best practices, etc.</li>\n</ul>\n<p>After learning Node.js and its ecosystem, you can move on to <a href=\"https://roadmap.sh/java\" target=\"_blank\"><strong>Java</strong></a>, <a href=\"https://roadmap.sh/python\" target=\"_blank\"><strong>Python</strong></a>, C#, <a href=\"https://roadmap.sh/golang\" target=\"_blank\"><strong>Go</strong></a>, Ruby or <a href=\"https://roadmap.sh/rust\" target=\"_blank\"><strong>Rust</strong></a><strong>.</strong> Understanding the differences between these languages will help you choose the best tool.</p>\n<p><strong>Note</strong>: As you keep learning more tools, you will realize there is too much to learn, and you can never know everything. I advise you to get very good at using one tool <strong>(such as Node.js)</strong> and have a basic understanding of others. Keep improving using that one tool, and you will be good to go.</p>\n<p><strong>Step 5: Learn DevOps and deployment basics</strong>\nTo be a skilled full stack developer, you must know your way around DevOps and deployment. DevOps combines software development and IT operations to improve software delivery. It makes developing, managing, and deploying applications a whole lot easier.</p>\n<p>The first step in <a href=\"https://roadmap.sh/devops\" target=\"_blank\">learning DevOps</a> is to learn about Linux basics, cloud services, and CI/CD pipelines. These skills are important for deploying and managing software applications. The following are areas you should focus on when learning:</p>\n<ul>\n<li><strong>Linux basics</strong>: Learn Linux, file systems, networking, and security.</li>\n<li><strong>Version control systems</strong>: Learn to use <a href=\"https://roadmap.sh/git-github\" target=\"_blank\">Git</a> to manage code and collaborate.</li>\n<li><strong>Cloud services</strong>: Learn about <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, or Google Cloud.</li>\n<li><strong>CI/CD pipelines</strong>: Learn testing and deployment using tools like Jenkins and GitLab CI/CD.</li>\n<li><strong>Infrastructure as Code (IaC)</strong>: Learn tools like Terraform for infrastructure automation.</li>\n</ul>\n<p>As soon as you have an understanding of these basics, it’s time to put your new skills into practice. First, try deploying your full stack applications to cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a> or Heroku. This will help you get real experience managing and maintaining live applications. You can start with easy applications and work up to harder ones.</p>\n<p>Next, you will learn about automation and monitoring when working on your projects. GitHub Actions and Ansible are useful tools for this purpose. They assist in automating development, deployment, and configuration tasks. Knowing these DevOps concepts will help you handle the demands of full stack development.</p>\n<p><strong>Step 6: Network and consistently learn more.</strong>\nBuilding your full stack developer skills requires consistent learning and networking. It involves spending time self-learning, building friendships, and growing skill sets. The tips below will help you learn and network better:</p>\n<ul>\n<li>Take online courses and watch online tutorials to understand full stack development concepts better.</li>\n<li>Read books and articles about web development, programming languages, and software engineering.</li>\n<li>Contribute to open-source projects to gain experience and develop relationships with full stack professionals.</li>\n<li>Join communities like the <a href=\"https://discord.com/invite/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap community</a> to learn from other professional developers.</li>\n<li>Attend conferences, meetups, and online forums to learn from industry professionals.</li>\n<li>Take part in coding challenges and hackathons to practice and learn.</li>\n</ul>\n<p>Consistent learning and networking will help you become a better full stack developer. It will help you succeed, keep up with the latest technologies, and solve coding problems.</p>\n<p><strong>Step 7: Build a portfolio and apply for jobs</strong>\nAs a developer, you work on projects to improve your skill set and get a full stack developer job. But to show off these projects to a hiring manager, you must have them all in one place. For this reason, it is important to have a portfolio if you want to become a full stack developer.</p>\n<p>Portfolios are compilations of your best work that showcase your skills and experiences. It is like a resume, but instead of bullet points listing your coding skills, it shows you pictures and more work details. Among the many benefits of owning a portfolio are:</p>\n<ul>\n<li>It shows a hiring manager that you can do the job, not just talk about it.</li>\n<li>It shows your full stack developer skills across both old and new technologies.</li>\n<li>It sets you apart from other developers who have similar qualifications.</li>\n</ul>\n<p>When creating your portfolio, include projects that show your skills with different tools. The following are some project ideas to add to your portfolio:</p>\n<ul>\n<li><strong>Personal projects</strong>: Examples of these applications can be budgeting or recipe applications.</li>\n<li><strong>Open-source contributions</strong>: Add links to your open-source contributions.</li>\n<li><strong>Full</strong> <strong>**</strong>stack applications**: Create applications that show off your frontend and backend development skills. An example of this application is an online shopping website with user authentication.</li>\n<li><strong>API development</strong>: Build and include RESTFUL APIs in your portfolio. It will show off your skills in the back-end, working with Node.js and other programming languages.</li>\n</ul>\n<p>After you have built a portfolio, it is time to start job hunting for full stack development jobs. This involves creating a resume and cover letter and prepping for interviews.</p>\n<p><strong>Note:</strong> To become a full stack developer, you must create the habit of always learning. So, if you get the job or not, it doesn’t matter; you have to keep learning and improving your coding skills.</p>\n<p>While a portfolio is not always required when applying for full stack development jobs, it’s a good idea to start building one. However, when you first start applying for jobs, a GitHub profile with your key projects may be enough; you can use pinned repositories to display your best work. With time, you can create your full stack developer portfolio to display your projects.</p>\n<h2 id=\"responsibilities-of-a-full-stack-developer\">Responsibilities of a full stack developer</h2>\n<p>As a full stack developer, you must be able to solve problems, think outside the box, and have good tech skills. Doing this means you will be in charge of a range of responsibilities, like:</p>\n<ul>\n<li>Designing and creating frontend and backend elements.</li>\n<li>Collaborating with different teams.</li>\n<li>Writing clean, efficient, and well-documented code.</li>\n<li>Troubleshooting and debugging issues.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/responsibilities-of-a-full-stack-developer-13tf5.png\" alt=\"Responsibilities of a full stack developer\"></p>\n<p><strong>Design and create frontend and backend elements</strong>\nCreating and designing frontend and backend elements are important duties of full stack development. This involves combining different skill sets to make cool applications.</p>\n<p>The responsibilities of full stack developers when creating these elements include the following:</p>\n<ul>\n<li>Creating easy-to-use user interfaces with tools like HTML, CSS, and JavaScript.</li>\n<li>Creating layouts that look good and are responsive on all devices, e.g., mobile phones, computers, etc.</li>\n<li>Writing back-end code in programming languages like Node.js, Java, or Python.</li>\n<li>Building RESTful APIs to make communication easier for the frontend and backend.</li>\n</ul>\n<p><strong>Collaborate with different teams</strong>\nFull stack development demands a wide array of skills to complete a project. A full stack developer can work on a project’s frontend and backend. But, completing the project alone is often not the norm. It requires teamwork, with everyone pitching in to get the job done. As a full stack web developer, you will work with different teams, such as:</p>\n<ul>\n<li>UI/UX designers to make interfaces easy for people to use.</li>\n<li>Product managers to understand the goals and objectives of the project.</li>\n<li>QA <strong>(Quality assurance)</strong> team to fix issues and make sure the application works well.</li>\n<li>DevOps team to fix any deployment issues.</li>\n<li>Business stakeholders to ensure the project meets the business needs.</li>\n</ul>\n<p><strong>Write clean, efficient, and well-documented code</strong>\nFull stack developers are responsible for writing clean, efficient, and well-documented code. It involves following best practices to write easy-to-read, maintain, and scalable codes so everyone on the team can understand the code and help with the project when needed.</p>\n<p>Full stack developers follow these best practices to do this:</p>\n<ul>\n<li>Using consistent naming conventions to make the code readable and understandable.</li>\n<li>Breaking codes into smaller reusable elements. It helps to make the code easier to find and fix errors when testing.</li>\n<li>Improving performance by cutting out any unnecessary operations. It helps the application run quicker and does not use up much resources.</li>\n<li>Writing easy-to-understand comments that explain the logic of the code.</li>\n</ul>\n<p>Writing clean, efficient, well-documented code leads to good teamwork and a successful project. It helps new developers get up to speed quicker and reduces the time spent on future updates or fixing bugs.</p>\n<p><strong>Troubleshoot and debug issues</strong>\nAs a full stack developer, your job is not just to build applications but also to make sure they work well. This involves finding and fixing errors that arise before or after creating applications.</p>\n<p>The following are tips full stack developers use to troubleshoot and debug issues:</p>\n<ul>\n<li>Identifying issues through user feedback and more.</li>\n<li>Studying the code using debugging tools like Chrome DevTools.</li>\n<li>Testing fixes in different systems to make sure they work. Examples of these tests can be unit or integration tests.</li>\n<li>Collaborating with other team members, like the QA engineer, to fix difficult issues.</li>\n<li>Documenting how you fixed the problem so you can refer back to it next time it happens.</li>\n</ul>\n<h2 id=\"essential-skills-for-a-full-stack-developer\">Essential skills for a full stack developer</h2>\n<p>The following are some of the important full stack developer skills:</p>\n<ul>\n<li>Solid foundation in basic web technologies like HTML, CSS, and JavaScript.</li>\n<li>Practical experience with frontend frameworks and libraries like React, Angular, or Vue.js.</li>\n<li>Strong foundation in back-end technologies like Node.js, Python, and Java.</li>\n<li>Experience in database management systems like MongoDB, MySQL, or <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>.</li>\n<li>Knowledge of required skills such as designing and building RESTful APIs.</li>\n<li>A good understanding of server management, Linux commands, and CI/CD pipelines.</li>\n<li>Hands-on experience with version controls like Git for managing code.</li>\n<li>Knowledge of testing strategies like unit, integration, and end-to-end testing.</li>\n<li>Good soft skills like teamwork, communication, and time management.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/sssential-skills-for-a-full-stack-developer-r1h6a.png\" alt=\"Essential skills for a full stack developer\"></p>\n<h2 id=\"frequently-asked-questions-faq-how-to-become-a-full-stack-developer\">Frequently asked questions (FAQ): How to become a full stack developer</h2>\n<p>Becoming a full stack developer might make you wonder about a few things. The following are some answers to common questions to make the process easier for you:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frequently-asked-questions-faq-how-to-become-a-full-stack-developer-70kjn.png\" alt=\"Frequently asked questions FAQ how to become a full stack developer\"></p>\n<p><strong>Is a bachelor’s degree in Computer Science necessary to become a full stack developer?</strong>\nNo! You do not need a computer science or computer engineering bachelor’s degree. A computer science degree can give you a strong start in topics like data structures, but that is not the only way to become a full stack developer. You can learn via online resources, coding boot camps, and more. The key is to have a good understanding of coding concepts and be very good at building projects.</p>\n<p><strong>Do I need any prior knowledge to start learning full stack development?</strong>\nNo! You do not have to know anything about programming to learn full stack development. Having basic computer skills and knowing how to browse the web is good but unnecessary. <strong>roadmap.sh</strong> provides a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer roadmap</a> to help you get started. It covers everything you need to know about learning programming languages and more.</p>\n<p><strong>Can I learn full stack development in 3 months?</strong>\nLearning the basics of full stack development in just three months is possible. But, it is unlikely for you to become a good full stack developer or be ready for a job in that short amount of time.</p>\n<p><strong>How long does it take to become a full stack developer?</strong>\nHow long it takes to become a full stack developer depends on the person. A lot depends on how dedicated you are to learning and practicing and how fast you learn. If you practice often, you will pick up the basics in a few months and master the more advanced skills in a few years.</p>\n<p><strong>What are the advantages of becoming a full stack developer?</strong>\nThe advantages of becoming a full stack developer are endless. Working on both ends of the web development process makes them useful for any team. They help small businesses save money by eliminating the need to hire separate frontend and backend developers.</p>\n<p>Also, you get to do what you love and get paid well—earning an average salary between $80,000 and over $200,000, depending on your experience, company size, and location.</p>\n<p><strong>What can I expect during a full stack development interview?</strong>\nExpect a combination of behavioral and technical questions on frontend and backend topics. The behavioral interview will test your ability to solve problems and work experience. The technical portion often covers your understanding of full stack development concepts.</p>\n<p><strong>What is the difference between MERN and full stack?</strong>\nThe MERN stack is a part of full stack development. It is a specialized toolset that includes MongoDB, Express.js, React, and Node.js for building apps. Full stack is a broader term that includes various technologies beyond the MERN stack. It is a more complete toolset that handles both backend and frontend development. So, all MERN developers are full stack developers. Not all full stack developers focus on MERN development.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>Using the steps in this guide will put you on the right track to becoming a good full stack developer. Take your time to get to know the full stack concepts instead of trying to speed through them. Remember, the key to becoming a full stack developer is always to practice!</p>\n<p><a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> offers a detailed <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack development guide</a> to help you get started. Also, it provides beginner and advanced project ideas in its full stack projects guide. To start, visit the full stack roadmap page, sign up, and study. You can also share this roadmap with your study developer friends.</p>";

				const frontmatter$E = {"title":"How to Become a Full Stack Developer: Career Guide","description":"Want to become a full stack developer? Discover essential skills, tools, and practical steps to kickstart your career in web development.","authorId":"ekene","excludedBySlug":"/full-stack/how-to-become","seo":{"title":"How to Become a Full Stack Developer: Career Guide","description":"Want to become a full stack developer? Discover essential skills, tools, and practical steps to kickstart your career in web development.","ogImageUrl":"https://assets.roadmap.sh/guest/become-a-full-stack-developer-54s51.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"full-stack","isNew":false,"type":"textual","date":"2025-02-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$E = "/workspace/src/data/guides/full-stack-how-to-become.md";
				const url$E = undefined;
				function rawContent$E() {
					return "   \n                                                           \n                                                                                                                                                        \n               \n                                           \n    \n                                                             \n                                                                                                                                                          \n                                                                                       \n                            \n                           \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How to become a full stack developer](https://assets.roadmap.sh/guest/become-a-full-stack-developer-54s51.jpg)\n\nTo become a full stack developer, you must learn HTML, CSS, and JavaScript to build interactive interfaces, then move on to backend skills like Node.js and databases like MySQL. Build real projects, use Git for version control, learn deployment tools like AWS, and create a portfolio that showcases your skills.\n\nA full stack developer is a generalist in software engineering. They are good at both the frontend and backend development of web projects. This dual skill set means they have a strong foundation in all areas of the web development process.\n\nHowever, becoming a full stack developer is not always as easy as expected. It involves a lot of coding practice and effort to learn all the needed tools. You will run into roadblocks, get annoyed, and sometimes question yourself. But, with dedication and the right resources, anyone can become a full stack developer.\n\n**TL;DR: A step-by-step guide on how to become a full stack developer.**\n\n- **Step 1**: Learn the basics of frontend development.\n- **Step 2**: Learn frontend web development frameworks and libraries.\n- **Step 3:** Understand version control systems.\n- **Step 4**: Learn backend web development.\n- **Step 5**: Learn DevOps and deployment basics.\n- **Step 6:** Network and consistently learn more.\n- **Step 7:** Build a portfolio and apply for jobs.\n\nFollowing the above steps will help you become a successful full stack developer. In this guide, I will take you through the step-by-step process of becoming a full Stack developer. I will also cover the basics of web development, frontend and backend frameworks, and more.\n\n## A step-by-step guide on how to become a full stack developer\n\nLearning full stack development can be a lot to handle. There is so much material—tutorials, blogs, videos—that it can be hard to find where to begin and what resources to rely on. Thankfully, you can make use of the step-by-step [full stack development](https://roadmap.sh/full-stack) roadmap to learn and track your progress.\n\nThe full stack development guide provides clear explanations of all the necessary concepts. The steps below present a concise explanation of the full stack developer roadmap.\n\n![A step-by-step guide on how to become a full stack developer](https://assets.roadmap.sh/guest/a-step-by-step-guide-on-how-to-become-a-full-stack-developer-nd2r3.png)\n\n**Step 1: Learn the basics of frontend development.**\n[Learning frontend development](https://roadmap.sh/frontend) basics is important to becoming a successful full stack developer. Frontend development involves making a website look good, responsive, and user-friendly. It is the client side of web development, focusing on how web elements (forms, buttons, etc.) appear on a screen.\n\nFrontend developers depend on three important languages to create interactive websites and applications:\n\n- Hypertext markup languages **(HTML)**.\n- Cascading style sheets **(CSS)**.\n- JavaScript.\n\nHTML and CSS go hand in hand when it comes to web development. HTML serves as the foundation for building web pages. It helps structure and organize the web elements of websites and applications. Examples of these web elements include images, headings, texts, links, and videos. CSS improves the visual appeal of the web elements. It allows you to control the user interface, add colors and spaces, and more using CSS selectors and IDs.\n\nIf you want to improve at HTML and CSS, use them to build projects. Do not only focus on studying; build and practice simultaneously. This approach will help you understand\nHTML and CSS well. Some project ideas include:\n\n- Create and design a resume that shows off your work experience.\n- Create a responsive landing page for any product.\n- Create a personal website or a blog.\n\n[**JavaScript**](https://roadmap.sh/javascript) is a programming language used to make your website functional and interactive. It makes web elements like buttons, forms, and animations on your website work. To practice JavaScript, try building:\n\n- A simple calculator.\n- An interactive quiz application.\n- A to-do list application.\n\nLearning HTML, CSS, and JavaScript is important to becoming a full stack developer. They work together to create static, interactive web pages that users engage with.\n\n**Step 2: Learn frontend web development frameworks and libraries.**\nLearning frameworks and libraries are the next step to becoming a full stack developer. Frontend web frameworks and libraries make it easier to create web interfaces.\n\n[Frontend frameworks](https://roadmap.sh/frontend/frameworks) allow users to create websites and applications in a structured manner. They offer pre-written codes and templates to make the development process easier. This way, you won't have to start from scratch and can focus on making your application stand out. [Angular](https://roadmap.sh/angular), Tailwind CSS, Svelte, and [Vue.js](https://roadmap.sh/vue) are a few examples of popular frontend web frameworks.\n\nIn contrast, frontend libraries are pre-written codes that perform specific functionalities. They help expand on what frameworks can do, or you can use them alone for particular tasks. Some examples of these tasks include form validation, animation, and data visualization. Animate.css, Chart.js, and [React](https://roadmap.sh/react) are a few examples of popular frontend libraries.\n\nFrameworks and libraries work together to make development easier in different ways. For example, the **Tailwind CSS** framework helps with responsive web design and layout. But if you want to spice things up with fancy animations, you can use a library like **Animate.css**. They work together to help you make web designs that are useful and look good at the same time.\n\nTry building your own projects to understand how these frameworks and libraries work. It doesn't matter how simple these projects are; study and build projects. Some examples of projects to build include:\n\n- Single-page applications **(SPAs)** like game applications.\n- Responsive personal portfolio website.\n\nThese projects will help you understand and get better at different concepts. You must practice often and work on real projects to get good at using frameworks.\n\n**Step 3: Understand version control systems**\nThe knowledge of version control systems **(VCS)** is important for full stack developers. VCS records every change made to your codebase, so you know who changed what, when, and why. Being able to do this is vital when working with experienced developers on the same project.\n\nSome popular examples of VCS include Git **(GitHub, GitLab, and Bitbucket)**. [GitHub](https://roadmap.sh/git-github) lets you collaborate, store, and share your code using Git repositories. VCS has many advantages:\n\n- It helps full stack developers collaborate without facing difficulties.\n- It helps full stack developers try new ideas without fear of ruining the code.\n- It saves a copy of your code so you can return to an earlier version if you have to.\n- It provides access control and authentication. You can control who can edit, review, or manage your code. It keeps your code safe and tidy when working with other professional developers.\n\nKnowing how to use VCS is important to become a full stack developer. It improves collaboration and helps organize difficult projects. This documentation contains everything you need to know about [**Git**](https://github.com/git-guides).\n\n**Step 4: Learn backend web development**\nNow that you know frontend concepts, it is time to [learn backend web development](https://roadmap.sh/backend). Backend development is the process of building the server side of web applications. It is where the behind-the-scenes operations that make the frontend interface work happen. This part of server-side development focuses on:\n\n- Management of databases.\n- Application programming interfaces **(APIs)** development.\n- Server-side logic and more.\n\nBackend developers create applications using different backend programming languages and frameworks like:\n\n- [Node.js](https://roadmap.sh/nodejs)\n- [Python](https://roadmap.sh/python)\n- C#\n- Ruby\n- [Java](https://roadmap.sh/java)\n\nThese backend programming languages have specific strengths and weaknesses. Choosing a language comes down to what the project needs, what your team is good at, and what you like.\n\nIf you are looking to start backend development, I recommend learning Node.js. Node.js runs on JavaScript, which is the primary language for backend development. Since you already know JavaScript from the frontend, it will be easy to learn. Node.js allows you to build dynamic backend applications using JavaScript. So, you can work across the whole tech stack **(both the frontend and backend)** using one language.\n\nNode.js has many cool packages and libraries; you can get them through the Node Package Manager **(NPM)**. These resources provide existing solutions like authentication with OAuth for everyday tasks. You can also use Node.js on any operating system, such as Windows, macOS, and Linux.\n\nIt is important to practice as you learn to understand how it works better. Think about working on projects that combine your frontend abilities with backend features. Practice Node.js by building basic CRUD **(Create, Read, Update, Delete)** applications, like:\n\n- Social media applications, e.g., Twitter.\n- Project management applications, e.g., Jira.\n- Online shopping websites, e.g., Amazon.\n\nBuilding CRUD applications will teach you how to handle and work with databases. As you continue learning, build more complex applications that combine different functionalities. For example, you can create a project with user authentication to log in and sign up for an application.\n\nThe following are some of the most important concepts to focus on when learning Node.js:\n\n- **Database interactions**: [MongoDB](https://roadmap.sh/mongodb), PostgreSQL, MySQL, CRUD operations.\n- **File and module system**: Reading and writing files, local vs. global modules, NPM.\n- **Asynchronous programming**: Callbacks, Promises, Async/Await syntax, event emitters, etc.\n- **Event loop**: Task queues, event listeners, handling of I/O operations.\n- **Express.js framework**: routing, middleware, HTTP methods (GET, POST, PUT, DELETE), RESTful APIs.\n- **Authentication and security**: JSON Web Tokens (JWT), OAuth implementation, Security best practices, etc.\n\nAfter learning Node.js and its ecosystem, you can move on to [**Java**](https://roadmap.sh/java), [**Python**](https://roadmap.sh/python), C#, [**Go**](https://roadmap.sh/golang), Ruby or [**Rust**](https://roadmap.sh/rust)**.** Understanding the differences between these languages will help you choose the best tool.\n\n**Note**: As you keep learning more tools, you will realize there is too much to learn, and you can never know everything. I advise you to get very good at using one tool **(such as Node.js)** and have a basic understanding of others. Keep improving using that one tool, and you will be good to go.\n\n**Step 5: Learn DevOps and deployment basics**\nTo be a skilled full stack developer, you must know your way around DevOps and deployment. DevOps combines software development and IT operations to improve software delivery. It makes developing, managing, and deploying applications a whole lot easier.\n\nThe first step in [learning DevOps](https://roadmap.sh/devops) is to learn about Linux basics, cloud services, and CI/CD pipelines. These skills are important for deploying and managing software applications. The following are areas you should focus on when learning:\n\n- **Linux basics**: Learn Linux, file systems, networking, and security.\n- **Version control systems**: Learn to use [Git](https://roadmap.sh/git-github) to manage code and collaborate.\n- **Cloud services**: Learn about [AWS](https://roadmap.sh/aws), Azure, or Google Cloud.\n- **CI/CD pipelines**: Learn testing and deployment using tools like Jenkins and GitLab CI/CD.\n- **Infrastructure as Code (IaC)**: Learn tools like Terraform for infrastructure automation.\n\nAs soon as you have an understanding of these basics, it's time to put your new skills into practice. First, try deploying your full stack applications to cloud platforms like [AWS](https://roadmap.sh/aws) or Heroku. This will help you get real experience managing and maintaining live applications. You can start with easy applications and work up to harder ones.\n\nNext, you will learn about automation and monitoring when working on your projects. GitHub Actions and Ansible are useful tools for this purpose. They assist in automating development, deployment, and configuration tasks. Knowing these DevOps concepts will help you handle the demands of full stack development.\n\n**Step 6: Network and consistently learn more.**\nBuilding your full stack developer skills requires consistent learning and networking. It involves spending time self-learning, building friendships, and growing skill sets. The tips below will help you learn and network better:\n\n- Take online courses and watch online tutorials to understand full stack development concepts better.\n- Read books and articles about web development, programming languages, and software engineering.\n- Contribute to open-source projects to gain experience and develop relationships with full stack professionals.\n- Join communities like the [roadmap community](https://discord.com/invite/cJpEt5Qbwa) to learn from other professional developers.\n- Attend conferences, meetups, and online forums to learn from industry professionals.\n- Take part in coding challenges and hackathons to practice and learn.\n\nConsistent learning and networking will help you become a better full stack developer. It will help you succeed, keep up with the latest technologies, and solve coding problems.\n\n**Step 7: Build a portfolio and apply for jobs**\nAs a developer, you work on projects to improve your skill set and get a full stack developer job. But to show off these projects to a hiring manager, you must have them all in one place. For this reason, it is important to have a portfolio if you want to become a full stack developer.\n\nPortfolios are compilations of your best work that showcase your skills and experiences. It is like a resume, but instead of bullet points listing your coding skills, it shows you pictures and more work details. Among the many benefits of owning a portfolio are:\n\n- It shows a hiring manager that you can do the job, not just talk about it.\n- It shows your full stack developer skills across both old and new technologies.\n- It sets you apart from other developers who have similar qualifications.\n\nWhen creating your portfolio, include projects that show your skills with different tools. The following are some project ideas to add to your portfolio:\n\n- **Personal projects**: Examples of these applications can be budgeting or recipe applications.\n- **Open-source contributions**: Add links to your open-source contributions.\n- **Full** **\\*\\***stack applications\\*\\*: Create applications that show off your frontend and backend development skills. An example of this application is an online shopping website with user authentication.\n- **API development**: Build and include RESTFUL APIs in your portfolio. It will show off your skills in the back-end, working with Node.js and other programming languages.\n\nAfter you have built a portfolio, it is time to start job hunting for full stack development jobs. This involves creating a resume and cover letter and prepping for interviews.\n\n**Note:** To become a full stack developer, you must create the habit of always learning. So, if you get the job or not, it doesn't matter; you have to keep learning and improving your coding skills.\n\nWhile a portfolio is not always required when applying for full stack development jobs, it's a good idea to start building one. However, when you first start applying for jobs, a GitHub profile with your key projects may be enough; you can use pinned repositories to display your best work. With time, you can create your full stack developer portfolio to display your projects.\n\n## Responsibilities of a full stack developer\n\nAs a full stack developer, you must be able to solve problems, think outside the box, and have good tech skills. Doing this means you will be in charge of a range of responsibilities, like:\n\n- Designing and creating frontend and backend elements.\n- Collaborating with different teams.\n- Writing clean, efficient, and well-documented code.\n- Troubleshooting and debugging issues.\n\n![Responsibilities of a full stack developer](https://assets.roadmap.sh/guest/responsibilities-of-a-full-stack-developer-13tf5.png)\n\n**Design and create frontend and backend elements**\nCreating and designing frontend and backend elements are important duties of full stack development. This involves combining different skill sets to make cool applications.\n\nThe responsibilities of full stack developers when creating these elements include the following:\n\n- Creating easy-to-use user interfaces with tools like HTML, CSS, and JavaScript.\n- Creating layouts that look good and are responsive on all devices, e.g., mobile phones, computers, etc.\n- Writing back-end code in programming languages like Node.js, Java, or Python.\n- Building RESTful APIs to make communication easier for the frontend and backend.\n\n**Collaborate with different teams**\nFull stack development demands a wide array of skills to complete a project. A full stack developer can work on a project's frontend and backend. But, completing the project alone is often not the norm. It requires teamwork, with everyone pitching in to get the job done. As a full stack web developer, you will work with different teams, such as:\n\n- UI/UX designers to make interfaces easy for people to use.\n- Product managers to understand the goals and objectives of the project.\n- QA **(Quality assurance)** team to fix issues and make sure the application works well.\n- DevOps team to fix any deployment issues.\n- Business stakeholders to ensure the project meets the business needs.\n\n**Write clean, efficient, and well-documented code**\nFull stack developers are responsible for writing clean, efficient, and well-documented code. It involves following best practices to write easy-to-read, maintain, and scalable codes so everyone on the team can understand the code and help with the project when needed.\n\nFull stack developers follow these best practices to do this:\n\n- Using consistent naming conventions to make the code readable and understandable.\n- Breaking codes into smaller reusable elements. It helps to make the code easier to find and fix errors when testing.\n- Improving performance by cutting out any unnecessary operations. It helps the application run quicker and does not use up much resources.\n- Writing easy-to-understand comments that explain the logic of the code.\n\nWriting clean, efficient, well-documented code leads to good teamwork and a successful project. It helps new developers get up to speed quicker and reduces the time spent on future updates or fixing bugs.\n\n**Troubleshoot and debug issues**\nAs a full stack developer, your job is not just to build applications but also to make sure they work well. This involves finding and fixing errors that arise before or after creating applications.\n\nThe following are tips full stack developers use to troubleshoot and debug issues:\n\n- Identifying issues through user feedback and more.\n- Studying the code using debugging tools like Chrome DevTools.\n- Testing fixes in different systems to make sure they work. Examples of these tests can be unit or integration tests.\n- Collaborating with other team members, like the QA engineer, to fix difficult issues.\n- Documenting how you fixed the problem so you can refer back to it next time it happens.\n\n## Essential skills for a full stack developer\n\nThe following are some of the important full stack developer skills:\n\n- Solid foundation in basic web technologies like HTML, CSS, and JavaScript.\n- Practical experience with frontend frameworks and libraries like React, Angular, or Vue.js.\n- Strong foundation in back-end technologies like Node.js, Python, and Java.\n- Experience in database management systems like MongoDB, MySQL, or [PostgreSQL](https://roadmap.sh/postgresql-dba).\n- Knowledge of required skills such as designing and building RESTful APIs.\n- A good understanding of server management, Linux commands, and CI/CD pipelines.\n- Hands-on experience with version controls like Git for managing code.\n- Knowledge of testing strategies like unit, integration, and end-to-end testing.\n- Good soft skills like teamwork, communication, and time management.\n\n![Essential skills for a full stack developer](https://assets.roadmap.sh/guest/sssential-skills-for-a-full-stack-developer-r1h6a.png)\n\n## Frequently asked questions (FAQ): How to become a full stack developer\n\nBecoming a full stack developer might make you wonder about a few things. The following are some answers to common questions to make the process easier for you:\n\n![Frequently asked questions FAQ how to become a full stack developer](https://assets.roadmap.sh/guest/frequently-asked-questions-faq-how-to-become-a-full-stack-developer-70kjn.png)\n\n**Is a bachelor's degree in Computer Science necessary to become a full stack developer?**\nNo! You do not need a computer science or computer engineering bachelor's degree. A computer science degree can give you a strong start in topics like data structures, but that is not the only way to become a full stack developer. You can learn via online resources, coding boot camps, and more. The key is to have a good understanding of coding concepts and be very good at building projects.\n\n**Do I need any prior knowledge to start learning full stack development?**\nNo! You do not have to know anything about programming to learn full stack development. Having basic computer skills and knowing how to browse the web is good but unnecessary. **roadmap.sh** provides a [full stack developer roadmap](https://roadmap.sh/full-stack) to help you get started. It covers everything you need to know about learning programming languages and more.\n\n**Can I learn full stack development in 3 months?**\nLearning the basics of full stack development in just three months is possible. But, it is unlikely for you to become a good full stack developer or be ready for a job in that short amount of time.\n\n**How long does it take to become a full stack developer?**\nHow long it takes to become a full stack developer depends on the person. A lot depends on how dedicated you are to learning and practicing and how fast you learn. If you practice often, you will pick up the basics in a few months and master the more advanced skills in a few years.\n\n**What are the advantages of becoming a full stack developer?**\nThe advantages of becoming a full stack developer are endless. Working on both ends of the web development process makes them useful for any team. They help small businesses save money by eliminating the need to hire separate frontend and backend developers.\n\nAlso, you get to do what you love and get paid well—earning an average salary between $80,000 and over $200,000, depending on your experience, company size, and location.\n\n**What can I expect during a full stack development interview?**\nExpect a combination of behavioral and technical questions on frontend and backend topics. The behavioral interview will test your ability to solve problems and work experience. The technical portion often covers your understanding of full stack development concepts.\n\n**What is the difference between MERN and full stack?**\nThe MERN stack is a part of full stack development. It is a specialized toolset that includes MongoDB, Express.js, React, and Node.js for building apps. Full stack is a broader term that includes various technologies beyond the MERN stack. It is a more complete toolset that handles both backend and frontend development. So, all MERN developers are full stack developers. Not all full stack developers focus on MERN development.\n\n## What next?\n\nUsing the steps in this guide will put you on the right track to becoming a good full stack developer. Take your time to get to know the full stack concepts instead of trying to speed through them. Remember, the key to becoming a full stack developer is always to practice!\n\n[roadmap.sh](http://roadmap.sh) offers a detailed [full stack development guide](https://roadmap.sh/full-stack) to help you get started. Also, it provides beginner and advanced project ideas in its full stack projects guide. To start, visit the full stack roadmap page, sign up, and study. You can also share this roadmap with your study developer friends.\n";
				}
				async function compiledContent$E() {
					return await html$E();
				}
				function getHeadings$E() {
					return [{"depth":2,"slug":"a-step-by-step-guide-on-how-to-become-a-full-stack-developer","text":"A step-by-step guide on how to become a full stack developer"},{"depth":2,"slug":"responsibilities-of-a-full-stack-developer","text":"Responsibilities of a full stack developer"},{"depth":2,"slug":"essential-skills-for-a-full-stack-developer","text":"Essential skills for a full stack developer"},{"depth":2,"slug":"frequently-asked-questions-faq-how-to-become-a-full-stack-developer","text":"Frequently asked questions (FAQ): How to become a full stack developer"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$E = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$E;
					content.file = file$E;
					content.url = url$E;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$E())}`;
				});

const __vite_glob_0_58 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$E,
	compiledContent: compiledContent$E,
	default: Content$E,
	file: file$E,
	frontmatter: frontmatter$E,
	getHeadings: getHeadings$E,
	rawContent: rawContent$E,
	url: url$E
}, Symbol.toStringTag, { value: 'Module' }));

const html$D = () => "<p><img src=\"https://assets.roadmap.sh/guest/fullstack-job-h15x6.jpg\" alt=\"Full Stack developer job description example and template.\"></p>\n<p>One of the main challenges I face as a hiring manager looking for a full stack engineer is assessing the versatility of potential candidates. With tons of applications to review, I need to make decisions about potential hires and ascertain that they are knowledgeable in both front-end and back-end languages, frameworks, and tools.</p>\n<p>This guide will discuss who a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack engineer</a> is, their job description, roles, and objectives. It will also cover the essential skills and qualifications I look out for when hiring candidates for a full stack developer role.</p>\n<p>Here is a summary of the full stack developer job description:</p>\n<ul>\n<li>\n<p>Design and develop the user interface of the application using technologies such as HTML, CSS, and JavaScript.</p>\n</li>\n<li>\n<p>Build and manage server-side logic, databases, and application programming interfaces (APIs) using technologies such as JavaScript, Python, Java, Go, and Rust.</p>\n</li>\n<li>\n<p>Connect the frontend application to the backend services and ensure a seamless data flow from the client to the server.</p>\n</li>\n<li>\n<p>Solve business problems by writing clean, maintainable, and reusable code.</p>\n</li>\n<li>\n<p>Collaborate with other stakeholders in the project to ensure the go-live of the project.</p>\n</li>\n</ul>\n<h2 id=\"full-stack-engineer-job-description-template\">Full stack engineer job description template</h2>\n<p>The complexity of a project, the technology adopted, and the domain knowledge are some factors that might influence the job description of a full stack engineer. Based on my experience as a full stack engineer recruiter and an analysis of full stack engineer job descriptions on popular platforms like LinkedIn and Indeed, here is a template of a full stack developer job description you can adopt during your hiring process:</p>\n<p><strong>Job title: Full stack engineer.</strong></p>\n<p><strong>Company</strong>: [Company Name].</p>\n<p><strong>Location</strong>: [Supported location, region, hybrid, or remote].</p>\n<p><strong>Job Type</strong>: [Full-time, Part-time, or Contract].</p>\n<p><strong>About Us</strong>: [Company Name] is [give a brief description of the company’s history and goals].</p>\n<p><strong>Job Description</strong></p>\n<p>[<strong>Company Name</strong>] is looking for an experienced full stack engineer. As a full stack engineer, you will develop and manage [<strong>company products and features</strong>] and collaborate closely with [<strong>company teams</strong>]. The ideal candidate will have a solid understanding of frontend and backend technologies.</p>\n<p><strong>Responsibilities</strong></p>\n<ul>\n<li>Development of new business applications based on detailed specifications.</li>\n<li>Working with project stakeholders to shape project scope, approach, and structure.</li>\n<li>Identify and fix bugs on both frontend and backend codebases.</li>\n<li>Designing project specifications and translating them into implementation details.</li>\n<li>Write clean, maintainable, and reusable code based on <a href=\"https://roadmap.sh/best-practices/backend-performance\" target=\"_blank\">best practices</a>.</li>\n<li>Performing code reviews and mentoring junior frontend, backend, and full stack developers to support the organization’s growth.</li>\n</ul>\n<p><strong>Requirements</strong></p>\n<ul>\n<li>Professional experience in full stack engineering.</li>\n<li>Built APIs and microservices with Python.</li>\n<li>Strong proficiency in frontend technologies like HTML, CSS, JavaScript, and modern frameworks like React.</li>\n<li>Good understanding of databases and data management systems.</li>\n<li>Basic knowledge of CI/CD pipelines.</li>\n<li>Experience with debugging and automation tools like Jenkins and Ansible.</li>\n<li>Bachelor’s degree in computer science, computer engineering, or a related field (or equivalent experience).</li>\n</ul>\n<p><strong>Nice to have</strong></p>\n<ul>\n<li>Experience with Docker.</li>\n<li>Familiarity with server-side events and streaming services.</li>\n<li>Prior experience in a similar role within a distributed team.</li>\n</ul>\n<p><strong>What we offer</strong>: [Company’s offer like workspace setup allowance, training, and other pecks].</p>\n<p><strong>How to apply</strong>: [Mode of application (email or job portal), resumes, cover letters, and any other required information].</p>\n<h2 id=\"what-skills-should-i-look-for-in-a-full-stack-engineer\">What skills should I look for in a full stack engineer?</h2>\n<p>A full stack engineer requires a diverse set of skills spanning across technical knowledge and other complementary skills. These are some required skills I look out for when hiring:</p>\n<ul>\n<li>Frontend development skills.</li>\n<li>Backend development skills.</li>\n<li>Basic DevOps skills.</li>\n<li>Testing and caching skills.</li>\n<li>Soft skills.</li>\n</ul>\n<h3 id=\"frontend-development-skills\">Frontend development skills</h3>\n<p>Full stack engineers must have a good understanding of <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">frontend development skills</a>. These include proficiency in languages like HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>, which are essential for creating structure, responsive design, and implementing interactive web functionalities. Additionally, they should be skilled in leading JavaScript libraries and frameworks like <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, which can be used to develop medium to large applications.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-development-common-languages-o88e3.png\" alt=\"frontend skills\"></p>\n<h3 id=\"backend-development-skills\">Backend development skills</h3>\n<p>A full stack engineer must possess strong <a href=\"https://roadmap.sh/backend/developer-skills\" target=\"_blank\">backend developer skills</a>. These include a deep understanding of <a href=\"https://roadmap.sh/api-design\" target=\"_blank\">API design and development</a>, database management, and <a href=\"https://roadmap.sh/best-practices/api-security\" target=\"_blank\">security best practices</a>. Additionally, proficiency in server-side programming languages such as <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>, <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, C#, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, and <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a> is important.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-programming-common-languages-gzcyd.png\" alt=\"Backend skills\"></p>\n<h3 id=\"devops-skills\">DevOps skills</h3>\n<p>In full stack development, [<strong>DevOps skills</strong>] are highly valuable. A basic understanding of how to package software using Docker or Kubernetes, deploy and automate software delivery, and familiarity with cloud providers such as <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Google Cloud Platform, and Azure will come in handy.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/devops-p4c0y.png\" alt=\"DevOps\"></p>\n<h3 id=\"testing-and-performance-improvement-skills\">Testing and performance improvement skills</h3>\n<p>In full stack development, proficiency in automated testing and debugging is essential for identifying and resolving bugs in both frontend and backend code. Moreover, a strong grasp of caching techniques and technologies such as Redis can significantly enhance application performance and improve the overall user experience.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/testing-and-performance-improvement-skills-1z2hm.png\" alt=\"Testing and Performance\"></p>\n<h3 id=\"soft-skills\">Soft skills</h3>\n<p>While technical skills are essential, full stack engineers must also possess a strong soft skill set. Full stack developers must have good communication skills (written and spoken), organization skills, and the ability to collaborate effectively with other team members to ensure the project’s success.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/soft-skills-qnz1f.png\" alt=\"Soft Skills\"></p>\n<h2 id=\"additional-skills-to-consider-when-hiring-full-stack-engineers\">Additional skills to consider when hiring full stack engineers</h2>\n<p>As a hiring manager in the current job market, you will get to review multiple CVs and profiles when hiring a full stack engineer. It is important to identify additional skills to help narrow the search and pick the right candidate for the role. Below are some additional skills to look for:</p>\n<ul>\n<li>Problem-solving</li>\n<li>Stakeholder communication</li>\n<li>Adaptability</li>\n<li>Project management</li>\n<li>Community and networking</li>\n</ul>\n<h3 id=\"problem-solving\">Problem-solving</h3>\n<p>A full stack engineer should be able to tackle complex problems spanning both the client and server sides of applications. They must demonstrate a solid problem-solving mindset and creative solutions through projects, open-source contributions, and other endeavors.</p>\n<h3 id=\"stakeholder-communication\">Stakeholder communication</h3>\n<p>Beyond collaborating with other teams to ensure a smooth software development process, it is even more important for full stack engineer to articulate technical concepts to non-technical stakeholders, as the success or failure of the project depends on them.</p>\n<h3 id=\"adaptability\">Adaptability</h3>\n<p>Frameworks, libraries, design principles, and so on will continue to evolve. Full stack engineer candidates must demonstrate a track record of quickly acquiring new skills and technologies.</p>\n<h3 id=\"project-management-skills\">Project management skills</h3>\n<p>Working on multiple projects simultaneously is inevitable. Full stack engineer candidates should have a basic understanding of project management principles and methodologies like Agile and Scrum. Additionally, they should be able to manage their time, prioritize tasks, and meet deadlines.</p>\n<h2 id=\"community-and-networking\">Community and networking</h2>\n<p>As a hiring manager looking for a full stack developer, you should seek candidates who actively participate in developer communities, attend meetups, contribute to open-source projects, and join hackathons. This shows that they have a growth mindset, can easily unblock themselves by leveraging community engagement, and can increase their skills.</p>\n<h2 id=\"common-interview-questions-when-hiring-for-full-stack-engineer-role\">Common interview questions when hiring for full stack engineer role</h2>\n<p>While CVs, resumes, and portfolios give you an idea of what a potential candidate is capable of, you still need to conduct interviews to determine if the candidate fits the role. Check out these interview questions that can help you check if they’re a good fit:</p>\n<h3 id=\"what-programming-languages-and-frameworks-are-you-most-comfortable-with\">What programming languages and frameworks are you most comfortable with?</h3>\n<p>Look for proficiency in languages and frameworks related to your company’s current tech stack.</p>\n<h3 id=\"what-types-of-databases-have-you-worked-with\">What types of databases have you worked with?</h3>\n<p>Assess the candidate’s understanding of SQL and NoSQL databases, ability to explain pros and cons, and what influences their decision to use a particular database.</p>\n<h3 id=\"whats-your-approach-to-ensuring-responsive-design-across-different-devices\">What’s your approach to ensuring responsive design across different devices?</h3>\n<p>Look for knowledge of design principles, mobile-first approach, and familiarity with CSS frameworks.</p>\n<h3 id=\"how-do-you-handle-api-security-and-authentication-in-your-projects\">How do you handle API security and authentication in your projects?</h3>\n<p>Look for proficiency in authentication methods (like JWT and OAuth) and security best practices.</p>\n<h3 id=\"how-do-you-collaborate-with-non-technical-team-members\">How do you collaborate with non-technical team members?</h3>\n<p>Look for strong communication skills, ability to explain technical concepts in simple terms, and empathy.</p>\n<h3 id=\"ask-scenario-based-questions-like-if-our-main-application-went-down-what-steps-would-you-take-to-diagnose-and-resolve-the-issue\">Ask scenario-based questions like “If our main application went down, what steps would you take to diagnose and resolve the issue?”</h3>\n<p>Look for their approach to troubleshooting, ability to remain calm under pressure, and knowledge of debugging.</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>The possibilities offered by the web will continue to evolve, and the role of software engineers building for it will also change. While the internet is filled with resources such as courses, articles, and blogs on front-end, back-end, and full stack engineering skills and job descriptions, these often become outdated quickly. Therefore, a reliable source of truth is needed. <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">The full stack developer roadmap</a> is a source of truth for hiring managers looking for full stack engineers.</p>\n<p>Additionally, roadmap.sh has a <a href=\"https://roadmap.sh/discord\" target=\"_blank\">supportive community</a>, a goldmine for connecting with full stack engineers and spotting potential employees.</p>";

				const frontmatter$D = {"title":"Full Stack Developer Job Description [@currentYear@ Template]","description":"Looking to hire a Fullstack Engineer? Get the complete job description, skills, and responsibilities right here!","authorId":"william","excludedBySlug":"/full-stack/job-description","seo":{"title":"Full Stack Developer Job Description [@currentYear@ Template]","description":"Looking to hire a Fullstack Engineer? Get the complete job description, skills, and responsibilities right here!","ogImageUrl":"https://assets.roadmap.sh/guest/fullstack-job-h15x6.jpg"},"isNew":false,"type":"textual","date":"2024-11-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$D = "/workspace/src/data/guides/full-stack-job-description.md";
				const url$D = undefined;
				function rawContent$D() {
					return "   \n                                                                      \n                                                                                                                               \n                 \n                                             \n    \n                                                                        \n                                                                                                                                 \n                                                                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Full Stack developer job description example and template.](https://assets.roadmap.sh/guest/fullstack-job-h15x6.jpg)\n\nOne of the main challenges I face as a hiring manager looking for a full stack engineer is assessing the versatility of potential candidates. With tons of applications to review, I need to make decisions about potential hires and ascertain that they are knowledgeable in both front-end and back-end languages, frameworks, and tools.\n\nThis guide will discuss who a [full stack engineer](https://roadmap.sh/full-stack) is, their job description, roles, and objectives. It will also cover the essential skills and qualifications I look out for when hiring candidates for a full stack developer role.\n\nHere is a summary of the full stack developer job description:\n\n- Design and develop the user interface of the application using technologies such as HTML, CSS, and JavaScript.\n\n- Build and manage server-side logic, databases, and application programming interfaces (APIs) using technologies such as JavaScript, Python, Java, Go, and Rust.\n\n- Connect the frontend application to the backend services and ensure a seamless data flow from the client to the server.\n\n- Solve business problems by writing clean, maintainable, and reusable code.\n\n- Collaborate with other stakeholders in the project to ensure the go-live of the project.\n\n## Full stack engineer job description template\n\nThe complexity of a project, the technology adopted, and the domain knowledge are some factors that might influence the job description of a full stack engineer. Based on my experience as a full stack engineer recruiter and an analysis of full stack engineer job descriptions on popular platforms like LinkedIn and Indeed, here is a template of a full stack developer job description you can adopt during your hiring process:\n\n**Job title: Full stack engineer.**\n\n**Company**: [Company Name].\n\n**Location**: [Supported location, region, hybrid, or remote].\n\n**Job Type**: [Full-time, Part-time, or Contract].\n\n**About Us**: [Company Name] is [give a brief description of the company’s history and goals].\n\n**Job Description**\n\n[**Company Name**] is looking for an experienced full stack engineer. As a full stack engineer, you will develop and manage [**company products and features**] and collaborate closely with [**company teams**]. The ideal candidate will have a solid understanding of frontend and backend technologies.\n\n**Responsibilities**\n\n- Development of new business applications based on detailed specifications.\n- Working with project stakeholders to shape project scope, approach, and structure.\n- Identify and fix bugs on both frontend and backend codebases.\n- Designing project specifications and translating them into implementation details.\n- Write clean, maintainable, and reusable code based on [best practices](https://roadmap.sh/best-practices/backend-performance).\n- Performing code reviews and mentoring junior frontend, backend, and full stack developers to support the organization's growth.\n\n**Requirements**\n\n- Professional experience in full stack engineering.\n- Built APIs and microservices with Python.\n- Strong proficiency in frontend technologies like HTML, CSS, JavaScript, and modern frameworks like React.\n- Good understanding of databases and data management systems.\n- Basic knowledge of CI/CD pipelines.\n- Experience with debugging and automation tools like Jenkins and Ansible.\n- Bachelor’s degree in computer science, computer engineering, or a related field (or equivalent experience).\n\n**Nice to have**\n\n- Experience with Docker.\n- Familiarity with server-side events and streaming services.\n- Prior experience in a similar role within a distributed team.\n\n**What we offer**: [Company’s offer like workspace setup allowance, training, and other pecks].\n\n**How to apply**: [Mode of application (email or job portal), resumes, cover letters, and any other required information].\n\n\n## What skills should I look for in a full stack engineer?\n\nA full stack engineer requires a diverse set of skills spanning across technical knowledge and other complementary skills. These are some required skills I look out for when hiring:\n\n- Frontend development skills.\n- Backend development skills.\n- Basic DevOps skills.\n- Testing and caching skills.\n- Soft skills.\n\n### Frontend development skills\n\nFull stack engineers must have a good understanding of [frontend development skills](https://roadmap.sh/frontend/developer-skills). These include proficiency in languages like HTML, CSS, and [JavaScript](https://roadmap.sh/javascript), which are essential for creating structure, responsive design, and implementing interactive web functionalities. Additionally, they should be skilled in leading JavaScript libraries and frameworks like [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular), which can be used to develop medium to large applications.\n\n![frontend skills](https://assets.roadmap.sh/guest/frontend-development-common-languages-o88e3.png)\n\n### Backend development skills\n\nA full stack engineer must possess strong [backend developer skills](https://roadmap.sh/backend/developer-skills). These include a deep understanding of [API design and development](https://roadmap.sh/api-design), database management, and [security best practices](https://roadmap.sh/best-practices/api-security). Additionally, proficiency in server-side programming languages such as [JavaScript](https://roadmap.sh/javascript), [Java](https://roadmap.sh/java), [Python](https://roadmap.sh/python), C#, [Go](https://roadmap.sh/golang), and [Rust](https://roadmap.sh/rust) is important.\n\n![Backend skills](https://assets.roadmap.sh/guest/backend-programming-common-languages-gzcyd.png)\n\n### DevOps skills\n\nIn full stack development, [**DevOps skills**] are highly valuable. A basic understanding of how to package software using Docker or Kubernetes, deploy and automate software delivery, and familiarity with cloud providers such as [AWS](https://roadmap.sh/aws), Google Cloud Platform, and Azure will come in handy.\n\n![DevOps](https://assets.roadmap.sh/guest/devops-p4c0y.png)\n\n### Testing and performance improvement skills\n\nIn full stack development, proficiency in automated testing and debugging is essential for identifying and resolving bugs in both frontend and backend code. Moreover, a strong grasp of caching techniques and technologies such as Redis can significantly enhance application performance and improve the overall user experience.\n\n![Testing and Performance](https://assets.roadmap.sh/guest/testing-and-performance-improvement-skills-1z2hm.png)\n\n### Soft skills\n\nWhile technical skills are essential, full stack engineers must also possess a strong soft skill set. Full stack developers must have good communication skills (written and spoken), organization skills, and the ability to collaborate effectively with other team members to ensure the project's success.\n\n![Soft Skills](https://assets.roadmap.sh/guest/soft-skills-qnz1f.png)\n\n## Additional skills to consider when hiring full stack engineers\n\nAs a hiring manager in the current job market, you will get to review multiple CVs and profiles when hiring a full stack engineer. It is important to identify additional skills to help narrow the search and pick the right candidate for the role. Below are some additional skills to look for:\n\n- Problem-solving\n- Stakeholder communication\n- Adaptability\n- Project management\n- Community and networking\n\n### Problem-solving\n\nA full stack engineer should be able to tackle complex problems spanning both the client and server sides of applications. They must demonstrate a solid problem-solving mindset and creative solutions through projects, open-source contributions, and other endeavors.\n\n### Stakeholder communication\n\nBeyond collaborating with other teams to ensure a smooth software development process, it is even more important for full stack engineer to articulate technical concepts to non-technical stakeholders, as the success or failure of the project depends on them.\n\n### Adaptability\n\nFrameworks, libraries, design principles, and so on will continue to evolve. Full stack engineer candidates must demonstrate a track record of quickly acquiring new skills and technologies.\n\n### Project management skills\n\nWorking on multiple projects simultaneously is inevitable. Full stack engineer candidates should have a basic understanding of project management principles and methodologies like Agile and Scrum. Additionally, they should be able to manage their time, prioritize tasks, and meet deadlines.\n\n## Community and networking\n\nAs a hiring manager looking for a full stack developer, you should seek candidates who actively participate in developer communities, attend meetups, contribute to open-source projects, and join hackathons. This shows that they have a growth mindset, can easily unblock themselves by leveraging community engagement, and can increase their skills.\n\n## Common interview questions when hiring for full stack engineer role\n\nWhile CVs, resumes, and portfolios give you an idea of what a potential candidate is capable of, you still need to conduct interviews to determine if the candidate fits the role. Check out these interview questions that can help you check if they're a good fit:\n\n### What programming languages and frameworks are you most comfortable with?\n\nLook for proficiency in languages and frameworks related to your company’s current tech stack.\n\n### What types of databases have you worked with?\n\nAssess the candidate's understanding of SQL and NoSQL databases, ability to explain pros and cons, and what influences their decision to use a particular database.\n\n### What's your approach to ensuring responsive design across different devices?\n\nLook for knowledge of design principles, mobile-first approach, and familiarity with CSS frameworks.\n\n### How do you handle API security and authentication in your projects?\n\nLook for proficiency in authentication methods (like JWT and OAuth) and security best practices.\n\n### How do you collaborate with non-technical team members?\n\nLook for strong communication skills, ability to explain technical concepts in simple terms, and empathy.\n\n### Ask scenario-based questions like “If our main application went down, what steps would you take to diagnose and resolve the issue?”\n\nLook for their approach to troubleshooting, ability to remain calm under pressure, and knowledge of debugging.\n\n## Wrapping up\n\nThe possibilities offered by the web will continue to evolve, and the role of software engineers building for it will also change. While the internet is filled with resources such as courses, articles, and blogs on front-end, back-end, and full stack engineering skills and job descriptions, these often become outdated quickly. Therefore, a reliable source of truth is needed. [The full stack developer roadmap](https://roadmap.sh/full-stack) is a source of truth for hiring managers looking for full stack engineers.\n\nAdditionally, roadmap.sh has a [supportive community](https://roadmap.sh/discord), a goldmine for connecting with full stack engineers and spotting potential employees.\n";
				}
				async function compiledContent$D() {
					return await html$D();
				}
				function getHeadings$D() {
					return [{"depth":2,"slug":"full-stack-engineer-job-description-template","text":"Full stack engineer job description template"},{"depth":2,"slug":"what-skills-should-i-look-for-in-a-full-stack-engineer","text":"What skills should I look for in a full stack engineer?"},{"depth":3,"slug":"frontend-development-skills","text":"Frontend development skills"},{"depth":3,"slug":"backend-development-skills","text":"Backend development skills"},{"depth":3,"slug":"devops-skills","text":"DevOps skills"},{"depth":3,"slug":"testing-and-performance-improvement-skills","text":"Testing and performance improvement skills"},{"depth":3,"slug":"soft-skills","text":"Soft skills"},{"depth":2,"slug":"additional-skills-to-consider-when-hiring-full-stack-engineers","text":"Additional skills to consider when hiring full stack engineers"},{"depth":3,"slug":"problem-solving","text":"Problem-solving"},{"depth":3,"slug":"stakeholder-communication","text":"Stakeholder communication"},{"depth":3,"slug":"adaptability","text":"Adaptability"},{"depth":3,"slug":"project-management-skills","text":"Project management skills"},{"depth":2,"slug":"community-and-networking","text":"Community and networking"},{"depth":2,"slug":"common-interview-questions-when-hiring-for-full-stack-engineer-role","text":"Common interview questions when hiring for full stack engineer role"},{"depth":3,"slug":"what-programming-languages-and-frameworks-are-you-most-comfortable-with","text":"What programming languages and frameworks are you most comfortable with?"},{"depth":3,"slug":"what-types-of-databases-have-you-worked-with","text":"What types of databases have you worked with?"},{"depth":3,"slug":"whats-your-approach-to-ensuring-responsive-design-across-different-devices","text":"What’s your approach to ensuring responsive design across different devices?"},{"depth":3,"slug":"how-do-you-handle-api-security-and-authentication-in-your-projects","text":"How do you handle API security and authentication in your projects?"},{"depth":3,"slug":"how-do-you-collaborate-with-non-technical-team-members","text":"How do you collaborate with non-technical team members?"},{"depth":3,"slug":"ask-scenario-based-questions-like-if-our-main-application-went-down-what-steps-would-you-take-to-diagnose-and-resolve-the-issue","text":"Ask scenario-based questions like “If our main application went down, what steps would you take to diagnose and resolve the issue?”"},{"depth":2,"slug":"wrapping-up","text":"Wrapping up"}];
				}

				const Content$D = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$D;
					content.file = file$D;
					content.url = url$D;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$D())}`;
				});

const __vite_glob_0_59 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$D,
	compiledContent: compiledContent$D,
	default: Content$D,
	file: file$D,
	frontmatter: frontmatter$D,
	getHeadings: getHeadings$D,
	rawContent: rawContent$D,
	url: url$D
}, Symbol.toStringTag, { value: 'Module' }));

const html$C = () => "<p><img src=\"https://assets.roadmap.sh/guest/full-stack-vs-backend-y0i1g.jpg\" alt=\"Key differences between full stack vs backend developers\"></p>\n<p>Thinking about getting into web development? You’ve probably heard job titles like full stack developer, backend developer, frontend developer, design engineer, and many more.</p>\n<p>Let’s focus on two great options: <strong>full stack</strong> and <strong>backend development</strong>. Both are rewarding paths if you want to build websites and apps. These roles work together to create the websites and apps you use every day on the internet.</p>\n<p>While each role works towards the common goal of creating an application that users can access from anywhere via the Internet, they differ in their responsibilities. Understanding these differences is important, whether your goal is to pick up a new skill, change career path, or secure a job.</p>\n<p>This guide provides an in-depth discussion of the key differences between <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack</a> and <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a> development, what they entail, their similarities, and the web ecosystem changes. Finally, it offers roadmaps for your full stack or backend journey.</p>\n<p>The table below summarizes the major differences:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Full stack Development</th><th>Back end Development</th></tr></thead><tbody><tr><td>Build both the client-side (frontend) and server-side (backend) of the application.</td><td>Specializes only on the server-side of the application.</td></tr><tr><td>Uses frontend and backend languages such as HTML, CSS, JavaScript, Java, PHP, etc.</td><td>Proficient only in backend programming languages like Python, C++, Java, etc.</td></tr><tr><td>Responsible for frontend web development tasks such as crafting responsive web design, enhancing user experience, and ensuring accessibility, as well as backend development tasks like managing databases, implementing security measures, caching, and writing APIs.</td><td>Responsible for only the server-side logic like managing database, security, caching, and writing APIs.</td></tr><tr><td>Have the highest earning potential.</td><td>Lower earning potential as compared to full stack development.</td></tr><tr><td>Uses libraries and frameworks that work on the client or server, or both.</td><td>Uses libraries and frameworks that work only on the server.</td></tr><tr><td>Most challenging to learn as it involves combining frontend and backend development</td><td>Relatively easier to learn as compared to Full stack as it focuses only on the backend development</td></tr><tr><td>Highest number of jobs available</td><td>Lower number of jobs as compared to full stack development</td></tr></tbody></table>\n<p>Let’s look at the differences in detail.</p>\n<h2 id=\"differences-between-full-stack-and-backend-development\">Differences between Full stack and Backend development</h2>\n<p>These are the key differences between full stack and backend discussed under the following criteria:</p>\n<ul>\n<li>Focus</li>\n<li>Roles and ownership</li>\n<li>Technologies</li>\n<li>Skill sets</li>\n<li>Salary and job opening</li>\n<li>Learning curve</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/differences-between-full-stack-and-back-end-development-ms2vk.png\" alt=\"full stack vs backend\"></p>\n<h2 id=\"focus\">Focus</h2>\n<p>The primary focus of a full stack developer is to develop both the client-side and the server side of a web application, while backend development focuses solely on the server side.</p>\n<h2 id=\"roles-and-ownership\">Roles and ownership</h2>\n<p>Full stack development entails broader ownership and responsibility, covering both frontend and backend technological aspects of the application. In contrast, backend development’s ownership and responsibilities are confined to the server side.</p>\n<h2 id=\"technologies\">Technologies</h2>\n<p>A Full stack web developer has a broader skill set covering both frontend and backend technologies. This includes markup languages like HTML and CSS, and scripting languages such as JavaScript, Python, and Java, and frameworks like React, Vue, Django, <a href=\"https://roadmap.sh/spring-boot\" target=\"_blank\">Spring Boot</a>, and Laravel.</p>\n<p>Similarly, backend development utilizes server-side programming languages like Python, Ruby, Java, JavaScript (Node.js), and Go, along with frameworks such as Django, Ruby on Rails, Express.js, and Gin-gonic.</p>\n<h2 id=\"skill-sets\">Skill sets</h2>\n<p>A full stack developer has a wide range of skills that encompass both frontend and backend principles. They can work on user interface design, human-computer interaction, and client-side security, caching, queues, and system design. While full stack developers can touch all elements of an application, backend developers typically have deeper expertise in backend principles due to their focused specialization.</p>\n<h2 id=\"salary-and-job-opening\">Salary and job opening</h2>\n<p>Based on reviews of popular job posting platforms like LinkedIn, Indeed, and Glassdoor, Full stack developers have more job openings and higher average salaries as compared to backend developers.</p>\n<h2 id=\"learning-curve\">Learning curve</h2>\n<p>Backend development is relatively easier to learn because its core focus is on backend languages, libraries, frameworks, and other server-side development. In contrast,  full stack development combines both frontend and backend development, making it more challenging to learn.</p>\n<p>While the points above cover the fundamental differences between full stack and backend development, it’s worth noting that their roles and responsibilities can also vary depending on factors such as the organization, industry, and project scope.</p>\n<p>Understanding each role and its responsibility is important. Let’s look at those next.</p>\n<h2 id=\"what-is-full-stack-development\">What is Full stack development?</h2>\n<p>The term “Full stack” refers to a developer who knows both the frontend and the backend of a web application. Full stack developers are versatile enough to handle all aspects of a web project, from constructing dynamic user interfaces that users can see and interact with to managing the server-side logic, database, and server management.</p>\n<p>The following are some of the key aspects of full stack development:</p>\n<ul>\n<li>Frontend technologies</li>\n<li>Backend technologies</li>\n<li>Application Programming Interfaces (API) design</li>\n<li>Database</li>\n<li>Deployment</li>\n<li>Security</li>\n<li>Adaptability</li>\n</ul>\n<h2 id=\"frontend-technologies\">Frontend technologies</h2>\n<p>A deep understanding of frontend popular languages like HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> is fundamental for building robust and scalable applications. Additionally, as a frontend developer, expertise in determining when and how to utilize frontend development frameworks and libraries like <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, and others is crucial for crafting dynamic applications that are responsive, accessible, and compatible across various browsers.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-development-common-languages-25kzq.png\" alt=\"html css and javascript\"></p>\n<h2 id=\"backend-technologies\">Backend technologies</h2>\n<p>Proficiency in server-side languages such as <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, <a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">JavaScript (Node.js)</a>, <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>, C#, <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a>, <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>, and their respective frameworks and libraries is essential for constructing scalable and robust services. Backend developers work behind the scenes, building the software required for the website and application user interface to be fully functional.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-programming-common-languages-oyd3s.png\" alt=\"Back end technologies\"></p>\n<h2 id=\"application-programming-interfaces-api-design\">Application Programming Interfaces (API) design</h2>\n<p>A <a href=\"https://roadmap.sh/api-design\" target=\"_blank\">solid understanding</a> of designing, building, and implementing APIs is essential in full stack development. Additionally, knowing when to adopt different API protocols like REST, <a href=\"https://roadmap.sh/graphql\" target=\"_blank\">GraphQL</a>, WebSocket, and gRPC (<a href=\"https://grpc.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Google Remote Procedure Call</a>) is also important.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/application-programming-interfaces-design-dybns.png\" alt=\"API design\"></p>\n<h2 id=\"database\">Database</h2>\n<p>Determining whether to utilize a relational database management system like <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a> or a non-relational database like <a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>, opt for stored procedures, or an object-relational mapping (ORM) for data management are important decisions a full stack developer must address. Additionally, a good understanding of designing schemas and optimizing queries is also important.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/relational-vs-non-relational-database-k4mwi.png\" alt=\"Relational vs Non-Relational Database\"></p>\n<h2 id=\"deployment\">Deployment</h2>\n<p>The essence of building an application is to ensure that the target users can access it without restrictions and utilize it as intended. Full stack developers should understand deployment strategies and cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, and Google Cloud.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/clouds-deployment-nhvx3.png\" alt=\"Clouds deployment — AWS vs Azure vs GCP\"></p>\n<h2 id=\"security\">Security</h2>\n<p>Exposing the application to the internet makes it susceptible to attacks. Therefore, familiarity with <a href=\"https://roadmap.sh/best-practices/api-security\" target=\"_blank\">security best practices</a> and vulnerabilities is crucial to ensuring the integrity and safety of these applications.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/web-security-6r9gg.png\" alt=\"Web Security\"></p>\n<h2 id=\"adaptability\">Adaptability</h2>\n<p>Open-source and research activities have constantly changed the web development ecosystem. Full stack developers must be willing to learn new technologies, know when to build from scratch or use third-party solutions, and adapt to changing project requirements.</p>\n<h2 id=\"what-is-backend-development\">What is Backend development?</h2>\n<p>Unlike full stack development, which combines the roles of frontend developers and backend developers to build applications, backend web development focuses solely on the server side. Backend developers handle tasks that occur behind the scenes and are not directly visible to users, including managing data, executing complex logic, and managing databases.</p>\n<p>Backend development is divided into the presentation layer(which handles requests and responses), the business layer(which handles logic like calculation and data processing), and the data access layer (which handles database interactions). It uses server-side technologies similar to a full stack developer.</p>\n<h2 id=\"similarities-between-full-stack-and-backend-development\">Similarities between Full stack and Backend development</h2>\n<p>Full stack and backend development share several similarities as they both work on the server side of the application. Below are some key similarities in the web development process between full stack and backend:</p>\n<ul>\n<li>Both work on server-side functionality, such as business logic, database interaction, and data processing.</li>\n<li>Design and implement APIs to facilitate communication between software components.</li>\n<li>Both ensure the security and integrity of user data.</li>\n<li>Collaborate with other team members and business stakeholders to ensure project success.</li>\n<li>Both handle errors, edge cases, and other difficult technical aspects of the application.</li>\n<li>Both are involved in designing and architecting scalable systems.</li>\n</ul>\n<h2 id=\"web-development-in-the-modern-era-full-stack-vs-backend\">Web development in the modern era: Full stack vs Backend</h2>\n<p>While the web’s possibilities are exciting and fascinating, they have also changed the roles and responsibilities of developers building applications for it. Let’s consider the points below as a case study of how these changes might affect full stack and backend development:</p>\n<h2 id=\"collaboration\">Collaboration</h2>\n<p>While full stack development’s role and responsibilities are collaborative in nature compared to the specialized focus of backend development, the current innovative trend will further heighten the demand for collaboration. Full stack developers will increasingly collaborate with various stakeholders to build performant and dynamic applications. This may also require backend developers to expand their role beyond their traditional domain.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/collaboration-7sg14.png\" alt=\"Collaboration\"></p>\n<h2 id=\"versatility\">Versatility</h2>\n<p>As the web offers more opportunities, organizations will migrate their core applications from native platforms to web-based solutions, necessitating developers to embrace versatility and acquire new skills.</p>\n<p>For full stack web developers who already navigate both frontend and backend development fields, they are well-positioned to adapt to changing demands by acquiring additional skills to meet business needs and project requirements. Similarly, backend developers may need to adjust their roles and embrace expanded responsibilities that extend beyond their domain-specific tasks to leverage the possibilities presented by this transition fully.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/versatility-surv2.png\" alt=\"Versatility\"></p>\n<h2 id=\"job-role\">Job role</h2>\n<p>The new possibilities offered by the web will undoubtedly reshape job descriptions and shift the required skills of developers building for the web. Full stack and backend developer in the tech industry may need to evaluate their career goals, upskill, and embrace these changes to remain competitive and build dynamic solutions.</p>\n<p>The possibilities offered by the web, coupled with evolving business requirements, require developers to upskill and stay updated continuously with the latest changes. A reliable source of truth is important for this journey. The <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full</a> <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\"></a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">stack development</a> and <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development</a> roadmap are valuable resources for experienced and beginner developers looking to explore a career in web development.</p>\n<p>Additionally, these roadmaps allow you to track your progress, showcase your skills to potential employers, and become <a href=\"https://discord.com/invite/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">part of a supportive community</a></p>";

				const frontmatter$C = {"title":"Full stack vs Back end: What are the differences?","description":"Full-stack vs Back-end: Learn the key differences in skills, roles, and technologies and find the right development path for you.","authorId":"william","excludedBySlug":"/full-stack/vs-backend","seo":{"title":"Full stack vs Back end: What are the differences?","description":"Full-stack vs Back-end: Learn the key differences in skills, roles, and technologies and find the right development path for you.","ogImageUrl":"https://assets.roadmap.sh/guest/full-stack-vs-backend-y0i1g.jpg"},"isNew":false,"type":"textual","date":"2024-10-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$C = "/workspace/src/data/guides/full-stack-vs-backend.md";
				const url$C = undefined;
				function rawContent$C() {
					return "   \n                                                          \n                                                                                                                                                \n                 \n                                        \n    \n                                                            \n                                                                                                                                                  \n                                                                               \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Key differences between full stack vs backend developers](https://assets.roadmap.sh/guest/full-stack-vs-backend-y0i1g.jpg)\n\nThinking about getting into web development? You've probably heard job titles like full stack developer, backend developer, frontend developer, design engineer, and many more.\n\nLet's focus on two great options: **full stack** and **backend development**. Both are rewarding paths if you want to build websites and apps. These roles work together to create the websites and apps you use every day on the internet.\n\nWhile each role works towards the common goal of creating an application that users can access from anywhere via the Internet, they differ in their responsibilities. Understanding these differences is important, whether your goal is to pick up a new skill, change career path, or secure a job.\n\nThis guide provides an in-depth discussion of the key differences between [full stack](https://roadmap.sh/full-stack) and [backend](https://roadmap.sh/backend) development, what they entail, their similarities, and the web ecosystem changes. Finally, it offers roadmaps for your full stack or backend journey.\n\nThe table below summarizes the major differences:\n\n| Full stack Development | Back end Development |\n|------------------------|----------------------|\n| Build both the client-side (frontend) and server-side (backend) of the application. | Specializes only on the server-side of the application. |\n| Uses frontend and backend languages such as HTML, CSS, JavaScript, Java, PHP, etc. | Proficient only in backend programming languages like Python, C++, Java, etc. |\n| Responsible for frontend web development tasks such as crafting responsive web design, enhancing user experience, and ensuring accessibility, as well as backend development tasks like managing databases, implementing security measures, caching, and writing APIs. | Responsible for only the server-side logic like managing database, security, caching, and writing APIs. |\n| Have the highest earning potential. | Lower earning potential as compared to full stack development. |\n| Uses libraries and frameworks that work on the client or server, or both. | Uses libraries and frameworks that work only on the server. |\n| Most challenging to learn as it involves combining frontend and backend development | Relatively easier to learn as compared to Full stack as it focuses only on the backend development |\n| Highest number of jobs available | Lower number of jobs as compared to full stack development |\n\nLet's look at the differences in detail.\n\n## Differences between Full stack and Backend development\n\nThese are the key differences between full stack and backend discussed under the following criteria:\n\n- Focus\n- Roles and ownership\n- Technologies\n- Skill sets\n- Salary and job opening\n- Learning curve\n\n![full stack vs backend](https://assets.roadmap.sh/guest/differences-between-full-stack-and-back-end-development-ms2vk.png)\n\n## Focus\n\nThe primary focus of a full stack developer is to develop both the client-side and the server side of a web application, while backend development focuses solely on the server side.\n\n## Roles and ownership\n\nFull stack development entails broader ownership and responsibility, covering both frontend and backend technological aspects of the application. In contrast, backend development's ownership and responsibilities are confined to the server side.\n\n## Technologies\n\nA Full stack web developer has a broader skill set covering both frontend and backend technologies. This includes markup languages like HTML and CSS, and scripting languages such as JavaScript, Python, and Java, and frameworks like React, Vue, Django, [Spring Boot](https://roadmap.sh/spring-boot), and Laravel.\n\nSimilarly, backend development utilizes server-side programming languages like Python, Ruby, Java, JavaScript (Node.js), and Go, along with frameworks such as Django, Ruby on Rails, Express.js, and Gin-gonic.\n\n## Skill sets\n\nA full stack developer has a wide range of skills that encompass both frontend and backend principles. They can work on user interface design, human-computer interaction, and client-side security, caching, queues, and system design. While full stack developers can touch all elements of an application, backend developers typically have deeper expertise in backend principles due to their focused specialization.\n\n## Salary and job opening\n\nBased on reviews of popular job posting platforms like LinkedIn, Indeed, and Glassdoor, Full stack developers have more job openings and higher average salaries as compared to backend developers.\n\n## Learning curve\n\nBackend development is relatively easier to learn because its core focus is on backend languages, libraries, frameworks, and other server-side development. In contrast,  full stack development combines both frontend and backend development, making it more challenging to learn.\n\nWhile the points above cover the fundamental differences between full stack and backend development, it's worth noting that their roles and responsibilities can also vary depending on factors such as the organization, industry, and project scope.\n\nUnderstanding each role and its responsibility is important. Let's look at those next.\n\n## What is Full stack development?\n\nThe term \"Full stack\" refers to a developer who knows both the frontend and the backend of a web application. Full stack developers are versatile enough to handle all aspects of a web project, from constructing dynamic user interfaces that users can see and interact with to managing the server-side logic, database, and server management.\n\nThe following are some of the key aspects of full stack development:\n\n- Frontend technologies\n- Backend technologies\n- Application Programming Interfaces (API) design\n- Database\n- Deployment\n- Security\n- Adaptability\n\n## Frontend technologies\n\nA deep understanding of frontend popular languages like HTML, CSS, and [JavaScript](https://roadmap.sh/javascript) is fundamental for building robust and scalable applications. Additionally, as a frontend developer, expertise in determining when and how to utilize frontend development frameworks and libraries like [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular), and others is crucial for crafting dynamic applications that are responsive, accessible, and compatible across various browsers.\n\n![html css and javascript](https://assets.roadmap.sh/guest/frontend-development-common-languages-25kzq.png)\n\n## Backend technologies\n\nProficiency in server-side languages such as [Java](https://roadmap.sh/java), [JavaScript (Node.js)](https://roadmap.sh/nodejs), [Python](https://roadmap.sh/python), C#, [Go](https://roadmap.sh/golang), [Rust](https://roadmap.sh/rust), and their respective frameworks and libraries is essential for constructing scalable and robust services. Backend developers work behind the scenes, building the software required for the website and application user interface to be fully functional.\n\n![Back end technologies](https://assets.roadmap.sh/guest/backend-programming-common-languages-oyd3s.png)\n\n## Application Programming Interfaces (API) design\n\nA [solid understanding](https://roadmap.sh/api-design) of designing, building, and implementing APIs is essential in full stack development. Additionally, knowing when to adopt different API protocols like REST, [GraphQL](https://roadmap.sh/graphql), WebSocket, and gRPC ([Google Remote Procedure Call](https://grpc.io/)) is also important.\n\n![API design](https://assets.roadmap.sh/guest/application-programming-interfaces-design-dybns.png)\n\n## Database\n\nDetermining whether to utilize a relational database management system like [PostgreSQL](https://roadmap.sh/postgresql-dba) or a non-relational database like [MongoDB](https://roadmap.sh/mongodb), opt for stored procedures, or an object-relational mapping (ORM) for data management are important decisions a full stack developer must address. Additionally, a good understanding of designing schemas and optimizing queries is also important.\n\n![Relational vs Non-Relational Database](https://assets.roadmap.sh/guest/relational-vs-non-relational-database-k4mwi.png)\n\n## Deployment\n\nThe essence of building an application is to ensure that the target users can access it without restrictions and utilize it as intended. Full stack developers should understand deployment strategies and cloud platforms like [AWS](https://roadmap.sh/aws), Azure, and Google Cloud.\n\n![Clouds deployment — AWS vs Azure vs GCP](https://assets.roadmap.sh/guest/clouds-deployment-nhvx3.png)\n\n## Security\n\nExposing the application to the internet makes it susceptible to attacks. Therefore, familiarity with [security best practices](https://roadmap.sh/best-practices/api-security) and vulnerabilities is crucial to ensuring the integrity and safety of these applications.\n\n![Web Security](https://assets.roadmap.sh/guest/web-security-6r9gg.png)\n\n## Adaptability\n\nOpen-source and research activities have constantly changed the web development ecosystem. Full stack developers must be willing to learn new technologies, know when to build from scratch or use third-party solutions, and adapt to changing project requirements.\n\n## What is Backend development?\n\nUnlike full stack development, which combines the roles of frontend developers and backend developers to build applications, backend web development focuses solely on the server side. Backend developers handle tasks that occur behind the scenes and are not directly visible to users, including managing data, executing complex logic, and managing databases.\n\nBackend development is divided into the presentation layer(which handles requests and responses), the business layer(which handles logic like calculation and data processing), and the data access layer (which handles database interactions). It uses server-side technologies similar to a full stack developer.\n\n## Similarities between Full stack and Backend development\n\nFull stack and backend development share several similarities as they both work on the server side of the application. Below are some key similarities in the web development process between full stack and backend:\n\n- Both work on server-side functionality, such as business logic, database interaction, and data processing.\n- Design and implement APIs to facilitate communication between software components.\n- Both ensure the security and integrity of user data.\n- Collaborate with other team members and business stakeholders to ensure project success.\n- Both handle errors, edge cases, and other difficult technical aspects of the application.\n- Both are involved in designing and architecting scalable systems.\n\n## Web development in the modern era: Full stack vs Backend\n\nWhile the web's possibilities are exciting and fascinating, they have also changed the roles and responsibilities of developers building applications for it. Let's consider the points below as a case study of how these changes might affect full stack and backend development:\n\n## Collaboration\n\nWhile full stack development's role and responsibilities are collaborative in nature compared to the specialized focus of backend development, the current innovative trend will further heighten the demand for collaboration. Full stack developers will increasingly collaborate with various stakeholders to build performant and dynamic applications. This may also require backend developers to expand their role beyond their traditional domain.\n\n![Collaboration](https://assets.roadmap.sh/guest/collaboration-7sg14.png)\n\n## Versatility\n\nAs the web offers more opportunities, organizations will migrate their core applications from native platforms to web-based solutions, necessitating developers to embrace versatility and acquire new skills.\n\nFor full stack web developers who already navigate both frontend and backend development fields, they are well-positioned to adapt to changing demands by acquiring additional skills to meet business needs and project requirements. Similarly, backend developers may need to adjust their roles and embrace expanded responsibilities that extend beyond their domain-specific tasks to leverage the possibilities presented by this transition fully.\n\n![Versatility](https://assets.roadmap.sh/guest/versatility-surv2.png)\n\n## Job role\n\nThe new possibilities offered by the web will undoubtedly reshape job descriptions and shift the required skills of developers building for the web. Full stack and backend developer in the tech industry may need to evaluate their career goals, upskill, and embrace these changes to remain competitive and build dynamic solutions.\n\nThe possibilities offered by the web, coupled with evolving business requirements, require developers to upskill and stay updated continuously with the latest changes. A reliable source of truth is important for this journey. The [full](https://roadmap.sh/full-stack) [](https://roadmap.sh/full-stack)[stack development](https://roadmap.sh/full-stack) and [backend development](https://roadmap.sh/backend) roadmap are valuable resources for experienced and beginner developers looking to explore a career in web development.\n\nAdditionally, these roadmaps allow you to track your progress, showcase your skills to potential employers, and become [part of a supportive community](https://discord.com/invite/cJpEt5Qbwa)\n";
				}
				async function compiledContent$C() {
					return await html$C();
				}
				function getHeadings$C() {
					return [{"depth":2,"slug":"differences-between-full-stack-and-backend-development","text":"Differences between Full stack and Backend development"},{"depth":2,"slug":"focus","text":"Focus"},{"depth":2,"slug":"roles-and-ownership","text":"Roles and ownership"},{"depth":2,"slug":"technologies","text":"Technologies"},{"depth":2,"slug":"skill-sets","text":"Skill sets"},{"depth":2,"slug":"salary-and-job-opening","text":"Salary and job opening"},{"depth":2,"slug":"learning-curve","text":"Learning curve"},{"depth":2,"slug":"what-is-full-stack-development","text":"What is Full stack development?"},{"depth":2,"slug":"frontend-technologies","text":"Frontend technologies"},{"depth":2,"slug":"backend-technologies","text":"Backend technologies"},{"depth":2,"slug":"application-programming-interfaces-api-design","text":"Application Programming Interfaces (API) design"},{"depth":2,"slug":"database","text":"Database"},{"depth":2,"slug":"deployment","text":"Deployment"},{"depth":2,"slug":"security","text":"Security"},{"depth":2,"slug":"adaptability","text":"Adaptability"},{"depth":2,"slug":"what-is-backend-development","text":"What is Backend development?"},{"depth":2,"slug":"similarities-between-full-stack-and-backend-development","text":"Similarities between Full stack and Backend development"},{"depth":2,"slug":"web-development-in-the-modern-era-full-stack-vs-backend","text":"Web development in the modern era: Full stack vs Backend"},{"depth":2,"slug":"collaboration","text":"Collaboration"},{"depth":2,"slug":"versatility","text":"Versatility"},{"depth":2,"slug":"job-role","text":"Job role"}];
				}

				const Content$C = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$C;
					content.file = file$C;
					content.url = url$C;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$C())}`;
				});

const __vite_glob_0_60 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$C,
	compiledContent: compiledContent$C,
	default: Content$C,
	file: file$C,
	frontmatter: frontmatter$C,
	getHeadings: getHeadings$C,
	rawContent: rawContent$C,
	url: url$C
}, Symbol.toStringTag, { value: 'Module' }));

const html$B = () => "<p><img src=\"https://assets.roadmap.sh/guest/full-stack-developer-vs-software-engineer-ol28u.png\" alt=\"Choosing between full stack developer or software engineer.\"></p>\n<p>Have you ever heard the saying that <strong>all full stack developers are software engineers, but not all software engineers are full stack developers</strong>?</p>\n<p>A full stack developer is responsible for the user-facing side of web applications, user interfaces, and the behind-the-scenes logic and web architecture that makes everything work, while a software engineer may specialize in just one of these areas.</p>\n<p>Despite the differences between full stack developers and software engineers, both roles require similar problem-solving skills, even though their toolkits may vary.</p>\n<p>This guide provides a detailed explanation of the following:</p>\n<ul>\n<li>Full stack development and software engineering roles.</li>\n<li>Skills required to be a full stack developer and a software engineer.</li>\n<li>Similarities and differences between a full stack developer and a software engineer.</li>\n<li>Growth opportunities in full stack development and software engineering.</li>\n<li>Average salary of a full stack developer and software engineer.</li>\n<li>Guidance if you should go for full stack development or software engineering.</li>\n<li>Provide full stack developer and software engineer roadmaps.</li>\n</ul>\n<p>The table below summarizes a full stack developer vs software engineer roles.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Full Stack Developer</strong></th><th><strong>Software Engineer</strong></th></tr></thead><tbody><tr><td>Full stack web developer also known as a full stack engineer work on end-to-end web development side of applications (both front-end and back-end web programming)</td><td>A software engineer specializes in new technologies and practices in one domain  or a particular project and has a deep knowledge of it.</td></tr><tr><td>A full stack developer role is mostly limited to just front-end(web design elements) and back-end</td><td>A software engineer has a broader range of domain options to choose from. e.g front-end, back-end, web apps, mobile, desktop, embedded systems, native apps, web development</td></tr></tbody></table>\n<p><img src=\"https://assets.roadmap.sh/guest/full-stack-vs-software-engineer-e3ozc.jpg\" alt=\"Full stack developer vs Software engineer\"></p>\n<p>Let me take you through each role so you see what they’re like and I’ll help you decide which is best suited to your ambitions and interest.</p>\n<h2 id=\"who-is-a-full-stack-developer\">Who is a full stack developer?</h2>\n<p>A <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer</a> also known as a full stack programmer possesses the knowledge and technical skill sets to work proficiently in a software application’s front-end and back-end.</p>\n<p>An application’s front-end encompasses everything the user can see while interacting with it, i.e., the user interface. The back-end of a web application consists of the server-side programming, the database, and the server.  Full stack developers typically are responsible for building the front-end and back-end of software applications.</p>\n<p>Let’s take a look at both the front-end and back-end in greater detail.</p>\n<h3 id=\"front-end-development\">Front-end development</h3>\n<p>It refers to everything a user can see and interact with. It is also known as the client side of an application. It is concerned primarily with the client-side development, user interface (UI) and user experience (UX).</p>\n<p>The common programming languages used in front-end development by a full stack developer include HTML, Cascading Style Sheets (CSS), and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for front-end development and adds logic to your web page. You’ll find an excellent guide and roadmap to learning <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> on our platform.</p>\n<p>There are quite a few front-end web development frameworks out there used by full stack developers. Some of the common ones are <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>. You can look at the <a href=\"https://roadmap.sh/frontend?r=frontend-beginner\" target=\"_blank\">front-end beginners roadmap</a> or the <a href=\"https://roadmap.sh/frontend?r=frontend\" target=\"_blank\">advanced front-end roadmap</a> for a more detailed guide.</p>\n<h3 id=\"back-end-development\">Back-end development</h3>\n<p>It includes everything the user <em>cannot</em> see. It is sometimes referred to as the server side of an application. It focuses on the application’s functionality and <em>business logic</em>. Examples of back-end components include data storage, security, and handling of business logic.</p>\n<p>Back end development mainly involves creating API endpoints consumed by the application’s front-end. Backend developers usually work with languages such as Python , Java , or Ruby , along with frameworks like Node.js , Django , or Ruby on Rails. Check out the <a href=\"https://roadmap.sh/backend\" target=\"_blank\">back-end developer</a> roadmap.</p>\n<h3 id=\"full-stack-developers-skills\">Full stack developers’ skills</h3>\n<p>The necessary technical skills to be a full stack developer include:</p>\n<ul>\n<li>Knowledge of HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>/<a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a>.</li>\n<li>Knowledge of at least one JavaScript framework e.g. <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue js</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>.</li>\n<li>Knowledge of at least one of the back-end programming languages. You can transfer your knowledge of JavaScript to the back-end with Node JS.</li>\n<li>Solid understanding of server-side rendering and web security.</li>\n<li>Knowledge of APIs.</li>\n<li>Understanding of database management systems and database architecture.</li>\n<li>Knowledge of data structures and algorithm</li>\n<li>Basic knowledge of <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a>.</li>\n<li>Project management skills.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/fullstack-developer-skills-gbnoy.jpg\" alt=\"Full stack developer skills\"></p>\n<h2 id=\"who-is-a-software-engineer\">Who is a software engineer?</h2>\n<p>A software engineer is a specialist with a deep understanding of software development, computer systems, and programming languages. A software engineer designs and creates software programs and web applications that solve real-world problems.</p>\n<p>Software engineers are specialists who focus on a specific aspect of software development. A software engineer produces high quality software solutions and ensures high software performance. They can specialize in parts of development such as database management, web development, mobile development and more.</p>\n<p>There are two primary types of software engineers: applications and systems software engineers.</p>\n<h3 id=\"application-software-engineers\">Application software engineers</h3>\n<p>An application software engineer is also known as s client-focused software engineer. These software engineers design and develop software applications users interact with.</p>\n<p>An application software engineer could be a front-end engineer, a back-end engineer, or full-stack software engineer. They also develop applications for operating systems such as iOS, Android, Windows, Linux, and many more.</p>\n<h3 id=\"systems-software-engineers\">Systems software engineers</h3>\n<p>These software engineers develop systems and networks that drive the user-facing applications developed by the application software engineers. A system software engineer is a specialist in either hardware or software engineering or both.</p>\n<p>System software engineers can also integrate different software products into a single platform; for example, <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> engineers can use tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> to deploy and orchestrate applications.</p>\n<p>System software engineers often serve as IT or system architects or backend software developers who design, test software and enforce industry tech standards. A system software engineer is an expert in software design and mostly design back-end systems and operating system that users do not directly interact with.</p>\n<p>Software systems are complex, and much thought goes into building them. Software engineers use their broad knowledge of coding languages and engineering principles to break down these complex systems and build software.</p>\n<p>The usual software project development and management life cycle looks like the following:</p>\n<ul>\n<li>\n<p>They design the whole system, typically employing the principles of <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a> and <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">software design architecture</a>. They decide on the software architecture to use for the application by weighing the pros and cons of different system architectures that might be suitable. Some standard architectures are monolith architecture, micro-services architecture, event-driven architecture, etc.</p>\n</li>\n<li>\n<p>After deciding on the system architecture, the next step is defining the tools. The tools include programming languages, database management, version control, and cloud systems (Google Cloud, Microsoft Azure, or <a href=\"https://roadmap.sh/aws\" target=\"_blank\">Amazon AWS</a>). Several factors affect the choice of the tools: existing knowledge and expertise, cost, suitability of the tools to the application, and so on.</p>\n</li>\n<li>\n<p>After choosing the tools, the next step is to define the different entities and their relationships. This is usually done with an expert experienced in the domain where the application to be built will be used.</p>\n</li>\n<li>\n<p>Building the system involves several iterations. Still, the target is usually to produce the minimum viable product (MVP), the application’s basic functionalities. A lot of software testing is done by quality assurance personnel and the application’s users.</p>\n</li>\n</ul>\n<p><strong>It is important to note that this entire process is iterative.</strong></p>\n<h3 id=\"software-engineers-skills\">Software engineers skills</h3>\n<p>The following core technical skills and soft skills are required for the software engineering role:</p>\n<ul>\n<li>Knowledge of <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science fundamentals</a>, software development, and <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a>.</li>\n<li>Knowledge of at least one of the common programming languages</li>\n<li>Strong analytical and problem-solving skills</li>\n<li>Knowledge of operating systems</li>\n<li>Understanding of networks and security</li>\n<li>Knowledge of cloud platforms and DevOps systems</li>\n<li>Knowledge of testing e.g. unit testing, integration test, end-to-end test</li>\n<li>Well-versed in debugging processes/systems</li>\n<li>Project management skills</li>\n<li>Technical support skills</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/software-engineer-skills.jpg\" alt=\"Software engineer skills\"></p>\n<h2 id=\"full-stack-developer-vs-software-engineer-key-differences-to-consider\">Full Stack Developer vs Software Engineer: Key differences to consider</h2>\n<p>You might be wondering which specialization you should pursue, either being a full stack developer or a software engineer. When choosing a path, consider the following points:</p>\n<ul>\n<li>Focus and expertise</li>\n<li>Accessibility and entry point</li>\n</ul>\n<h3 id=\"focus-and-expertise\">Focus and expertise</h3>\n<p>Full-stack developers have broad expertise. Full-stack developers are experts in both front-end and back end development. The opposite is the case for software engineers in practice. Software engineers specialize in a particular field and thus typically have a deeper, more specialized knowledge.</p>\n<p>A software engineer could focus on only front-end development and have extensive knowledge of that aspect while a full-stack developer focuses on the overall software lifecycle.</p>\n<h3 id=\"accessibility-and-entry-point\">Accessibility and entry point</h3>\n<p>Two major pathways exist to becoming a full-stack developer or software engineer: self-taught and a formal education with a degree.</p>\n<p>For the formal pathway, you will be taught and develop a strong computer science background, which is the core of software development and web development. Self-taught full stack developers and software engineers learn specific, industry-relevant skills on their own time.</p>\n<p>One advantage of the formal education path is gaining hands-on full stack development and software engineering experience while studying through internships.</p>\n<h2 id=\"common-full-stack-developer-and-software-engineer-skills\">Common full stack developer and software engineer skills</h2>\n<p>Despite the differences between full-stack developers and software engineers, they share some common grounds and skills as they are both crucial in the software development lifecycle. They include:</p>\n<ul>\n<li>Collaboration and teamwork</li>\n<li>Technical knowledge</li>\n<li>Lifelong learning</li>\n<li>Job description</li>\n</ul>\n<h3 id=\"collaboration-and-teamwork\">Collaboration and teamwork</h3>\n<p>Full-stack developers and software engineers primarily work in collaborative environments. They work with a tech team comprising other developers and engineers, designers, product managers, QA testers, business analysts, etc. They must collaborate with other team members to achieve a goal.</p>\n<h3 id=\"technical-knowledge\">Technical knowledge</h3>\n<p>A full stack developer and software engineer require a good understanding of core programming principles such as object-oriented programming (OOP), separation of concerns, clean code, SOLID principles, etc. They also require strong problem-solving and analytical skills, which are critical in the roles and in getting the job done.</p>\n<h3 id=\"lifelong-learning\">Lifelong learning</h3>\n<p>This is a common ground shared amongst all fields in tech. As tech continually and rapidly evolves, a software engineer and full stack developer must stay up to date, which involves continuous learning to stay ahead. They continually update their technical and soft skills to remain relevant in the tech industry.</p>\n<h3 id=\"job-description\">Job description</h3>\n<p>Full-stack developers and software engineers share some common responsibilities, which can be reflected in their job descriptions. Some of these responsibilities include:</p>\n<ul>\n<li>They both collaborate with front-end, back-end, full stack engineers and other team members to improve efficiency and identify and resolve blockers.</li>\n<li>Full stack developers and software engineers collaborate with cross-functional teams.</li>\n<li>Full stack developers and software engineers implement new software features.</li>\n<li>A full stack developer and software developer conceptualizes and designs software architecture for the front-end and back-end.</li>\n<li>A full stack developer and software engineer document the software development process.</li>\n<li>A full stack developer and software engineer troubleshoots, debugs, and upgrades existing systems.</li>\n<li>Full stack developers and software engineers comply with project plans and industry standards.</li>\n</ul>\n<h2 id=\"full-stack-developer-vs-software-engineer-salaries\">Full stack developer vs software engineer salaries</h2>\n<p>Full-stack software developers and software engineers are in high demand in various sectors. According to the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">U.S. Bureau of Labor Statistics</a>, jobs in software development are expected to grow by 25% between 2022 and 2032.</p>\n<p>According to <a href=\"https://www.statista.com/statistics/1367003/in-demand-it-roles/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, full-stack software developers and software developers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average software engineer’s annual salary is $105,624, and that of a <a href=\"https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full-stack software developer</a> is $124,120.</p>\n<p>Experience and expertise are key factors that determine the salaries of full stack developers and software engineers. The table below shows the difference in average salaries of <a href=\"https://www.payscale.com/research/US/Job=Full_Stack_Software_Developer/Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full stack developers</a> and <a href=\"https://www.payscale.com/research/US/Job=Software_Engineer/Salary\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">software engineers</a> based on their years of experience.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/full-stack-salaries-04wtl.jpg\" alt=\"Full stack developer vs Software engineer salaries\"></p>\n<h2 id=\"how-do-i-become-a-full-stack-developer-or-software-engineer\">How do I become a full stack developer or software engineer?</h2>\n<p>As you’ve seen, becoming a full stack developer requires various skill sets. roadmap.sh provides a step-by-step guide on how to become a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full-stack programmer or developer</a>, and by signing up, you will be able to:</p>\n<ul>\n<li>Keep track of your learning progress and share it on your public roadmap.sh profile.</li>\n<li>Draw your roadmap, either as an individual learner or for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">Dev teams</a>.</li>\n<li><a href=\"https://roadmap.sh/ai\" target=\"_blank\">Generate new roadmaps with AI</a>.</li>\n<li>Collaborate on official roadmaps.</li>\n</ul>\n<p>Recall that a software engineer, as defined above, specializes in different areas in the software development cycle and possesses a thorough knowledge of coding languages and engineering principles. roadmap.sh provides learning paths for various software engineering specializations. You can also sign up for <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science</a>, <a href=\"https://roadmap.sh/datastructures-and-algorithms\" target=\"_blank\">data structures and algorithms,</a> <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">software design and architecture</a>, and <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a> roadmaps.</p>";

				const frontmatter$B = {"title":"Full Stack Developer or Software Engineer – Which Way to Go?","description":"Unsure about your dev career path? Compare full stack developer and software engineer roles to make an informed decision.","authorId":"william","excludedBySlug":"/full-stack/vs-software-engineer","seo":{"title":"Full Stack Developer or Software Engineer – Which Way to Go?","description":"Unsure about your dev career path? Compare full stack developer and software engineer roles to make an informed decision.","ogImageUrl":"https://assets.roadmap.sh/guest/full-stack-developer-vs-software-engineer-ol28u.png"},"isNew":false,"type":"textual","date":"2024-05-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$B = "/workspace/src/data/guides/full-stack-vs-software-engineer.md";
				const url$B = undefined;
				function rawContent$B() {
					return "   \n                                                                     \n                                                                                                                                        \n                 \n                                                  \n    \n                                                                       \n                                                                                                                                          \n                                                                                                   \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Choosing between full stack developer or software engineer.](https://assets.roadmap.sh/guest/full-stack-developer-vs-software-engineer-ol28u.png)\n\nHave you ever heard the saying that **all full stack developers are software engineers, but not all software engineers are full stack developers**?\n\nA full stack developer is responsible for the user-facing side of web applications, user interfaces, and the behind-the-scenes logic and web architecture that makes everything work, while a software engineer may specialize in just one of these areas.\n\nDespite the differences between full stack developers and software engineers, both roles require similar problem-solving skills, even though their toolkits may vary.\n\nThis guide provides a detailed explanation of the following:\n\n- Full stack development and software engineering roles.\n- Skills required to be a full stack developer and a software engineer.\n- Similarities and differences between a full stack developer and a software engineer.\n- Growth opportunities in full stack development and software engineering.\n- Average salary of a full stack developer and software engineer.\n- Guidance if you should go for full stack development or software engineering.\n- Provide full stack developer and software engineer roadmaps.\n\nThe table below summarizes a full stack developer vs software engineer roles.\n\n| **Full Stack Developer**                                                                                                                                   | **Software Engineer**                                                                                                                                                        |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Full stack web developer also known as a full stack engineer work on end-to-end web development side of applications (both front-end and back-end web programming) | A software engineer specializes in new technologies and practices in one domain  or a particular project and has a deep knowledge of it.                                     |\n| A full stack developer role is mostly limited to just front-end(web design elements) and back-end                                                                  | A software engineer has a broader range of domain options to choose from. e.g front-end, back-end, web apps, mobile, desktop, embedded systems, native apps, web development |\n\n![Full stack developer vs Software engineer](https://assets.roadmap.sh/guest/full-stack-vs-software-engineer-e3ozc.jpg)\n\nLet me take you through each role so you see what they’re like and I’ll help you decide which is best suited to your ambitions and interest.\n\n## Who is a full stack developer?\n\nA [full stack developer](https://roadmap.sh/full-stack) also known as a full stack programmer possesses the knowledge and technical skill sets to work proficiently in a software application's front-end and back-end.\n\nAn application's front-end encompasses everything the user can see while interacting with it, i.e., the user interface. The back-end of a web application consists of the server-side programming, the database, and the server.  Full stack developers typically are responsible for building the front-end and back-end of software applications.\n\nLet's take a look at both the front-end and back-end in greater detail.\n\n### Front-end development\n\nIt refers to everything a user can see and interact with. It is also known as the client side of an application. It is concerned primarily with the client-side development, user interface (UI) and user experience (UX).\n\nThe common programming languages used in front-end development by a full stack developer include HTML, Cascading Style Sheets (CSS), and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for front-end development and adds logic to your web page. You’ll find an excellent guide and roadmap to learning [JavaScript](https://roadmap.sh/javascript) on our platform.\n\nThere are quite a few front-end web development frameworks out there used by full stack developers. Some of the common ones are [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular). You can look at the [front-end beginners roadmap](https://roadmap.sh/frontend?r=frontend-beginner) or the [advanced front-end roadmap](https://roadmap.sh/frontend?r=frontend) for a more detailed guide.\n\n### Back-end development\n\nIt includes everything the user *cannot* see. It is sometimes referred to as the server side of an application. It focuses on the application's functionality and *business logic*. Examples of back-end components include data storage, security, and handling of business logic.\n\nBack end development mainly involves creating API endpoints consumed by the application's front-end. Backend developers usually work with languages such as Python , Java , or Ruby , along with frameworks like Node.js , Django , or Ruby on Rails. Check out the [back-end developer](https://roadmap.sh/backend) roadmap.\n\n### Full stack developers' skills\n\nThe necessary technical skills to be a full stack developer include:\n\n- Knowledge of HTML, CSS, and [JavaScript](https://roadmap.sh/javascript)/[TypeScript](https://roadmap.sh/typescript).\n- Knowledge of at least one JavaScript framework e.g. [React](https://roadmap.sh/react), [Vue js](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular).\n- Knowledge of at least one of the back-end programming languages. You can transfer your knowledge of JavaScript to the back-end with Node JS.\n- Solid understanding of server-side rendering and web security.\n- Knowledge of APIs.\n- Understanding of database management systems and database architecture.\n- Knowledge of data structures and algorithm\n- Basic knowledge of [DevOps](https://roadmap.sh/devops).\n- Project management skills.\n\n![Full stack developer skills](https://assets.roadmap.sh/guest/fullstack-developer-skills-gbnoy.jpg)\n\n## Who is a software engineer?\n\nA software engineer is a specialist with a deep understanding of software development, computer systems, and programming languages. A software engineer designs and creates software programs and web applications that solve real-world problems.\n\nSoftware engineers are specialists who focus on a specific aspect of software development. A software engineer produces high quality software solutions and ensures high software performance. They can specialize in parts of development such as database management, web development, mobile development and more.\n\nThere are two primary types of software engineers: applications and systems software engineers.\n\n### Application software engineers\n\nAn application software engineer is also known as s client-focused software engineer. These software engineers design and develop software applications users interact with. \n\nAn application software engineer could be a front-end engineer, a back-end engineer, or full-stack software engineer. They also develop applications for operating systems such as iOS, Android, Windows, Linux, and many more. \n\n### Systems software engineers\n\nThese software engineers develop systems and networks that drive the user-facing applications developed by the application software engineers. A system software engineer is a specialist in either hardware or software engineering or both.\n\nSystem software engineers can also integrate different software products into a single platform; for example, [DevOps](https://roadmap.sh/devops) engineers can use tools like [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes) to deploy and orchestrate applications.\n\nSystem software engineers often serve as IT or system architects or backend software developers who design, test software and enforce industry tech standards. A system software engineer is an expert in software design and mostly design back-end systems and operating system that users do not directly interact with.\n \nSoftware systems are complex, and much thought goes into building them. Software engineers use their broad knowledge of coding languages and engineering principles to break down these complex systems and build software.\n\nThe usual software project development and management life cycle looks like the following:\n\n- They design the whole system, typically employing the principles of [system design](https://roadmap.sh/system-design) and [software design architecture](https://roadmap.sh/software-design-architecture). They decide on the software architecture to use for the application by weighing the pros and cons of different system architectures that might be suitable. Some standard architectures are monolith architecture, micro-services architecture, event-driven architecture, etc.\n\n- After deciding on the system architecture, the next step is defining the tools. The tools include programming languages, database management, version control, and cloud systems (Google Cloud, Microsoft Azure, or [Amazon AWS](https://roadmap.sh/aws)). Several factors affect the choice of the tools: existing knowledge and expertise, cost, suitability of the tools to the application, and so on.\n\n- After choosing the tools, the next step is to define the different entities and their relationships. This is usually done with an expert experienced in the domain where the application to be built will be used.\n\n- Building the system involves several iterations. Still, the target is usually to produce the minimum viable product (MVP), the application's basic functionalities. A lot of software testing is done by quality assurance personnel and the application's users.\n\n**It is important to note that this entire process is iterative.**\n\n### Software engineers skills\n\nThe following core technical skills and soft skills are required for the software engineering role:\n\n- Knowledge of [computer science fundamentals](https://roadmap.sh/computer-science), software development, and [system design](https://roadmap.sh/system-design).\n- Knowledge of at least one of the common programming languages\n- Strong analytical and problem-solving skills\n- Knowledge of operating systems\n- Understanding of networks and security\n- Knowledge of cloud platforms and DevOps systems\n- Knowledge of testing e.g. unit testing, integration test, end-to-end test\n- Well-versed in debugging processes/systems\n- Project management skills\n- Technical support skills\n\n![Software engineer skills](https://assets.roadmap.sh/guest/software-engineer-skills.jpg)\n\n## Full Stack Developer vs Software Engineer: Key differences to consider\n\nYou might be wondering which specialization you should pursue, either being a full stack developer or a software engineer. When choosing a path, consider the following points:\n\n- Focus and expertise\n- Accessibility and entry point\n\n### Focus and expertise\n\nFull-stack developers have broad expertise. Full-stack developers are experts in both front-end and back end development. The opposite is the case for software engineers in practice. Software engineers specialize in a particular field and thus typically have a deeper, more specialized knowledge.\n\nA software engineer could focus on only front-end development and have extensive knowledge of that aspect while a full-stack developer focuses on the overall software lifecycle.\n\n### Accessibility and entry point\n\nTwo major pathways exist to becoming a full-stack developer or software engineer: self-taught and a formal education with a degree.\n\nFor the formal pathway, you will be taught and develop a strong computer science background, which is the core of software development and web development. Self-taught full stack developers and software engineers learn specific, industry-relevant skills on their own time.\n\nOne advantage of the formal education path is gaining hands-on full stack development and software engineering experience while studying through internships.\n\n## Common full stack developer and software engineer skills\n\nDespite the differences between full-stack developers and software engineers, they share some common grounds and skills as they are both crucial in the software development lifecycle. They include:\n\n- Collaboration and teamwork\n- Technical knowledge\n- Lifelong learning\n- Job description\n\n### Collaboration and teamwork\n\nFull-stack developers and software engineers primarily work in collaborative environments. They work with a tech team comprising other developers and engineers, designers, product managers, QA testers, business analysts, etc. They must collaborate with other team members to achieve a goal.\n\n### Technical knowledge\n\nA full stack developer and software engineer require a good understanding of core programming principles such as object-oriented programming (OOP), separation of concerns, clean code, SOLID principles, etc. They also require strong problem-solving and analytical skills, which are critical in the roles and in getting the job done.\n\n### Lifelong learning\n\nThis is a common ground shared amongst all fields in tech. As tech continually and rapidly evolves, a software engineer and full stack developer must stay up to date, which involves continuous learning to stay ahead. They continually update their technical and soft skills to remain relevant in the tech industry.\n\n### Job description\n\nFull-stack developers and software engineers share some common responsibilities, which can be reflected in their job descriptions. Some of these responsibilities include:\n\n- They both collaborate with front-end, back-end, full stack engineers and other team members to improve efficiency and identify and resolve blockers.\n- Full stack developers and software engineers collaborate with cross-functional teams.\n- Full stack developers and software engineers implement new software features.\n- A full stack developer and software developer conceptualizes and designs software architecture for the front-end and back-end.\n- A full stack developer and software engineer document the software development process.\n- A full stack developer and software engineer troubleshoots, debugs, and upgrades existing systems.\n- Full stack developers and software engineers comply with project plans and industry standards.\n\n## Full stack developer vs software engineer salaries\n\nFull-stack software developers and software engineers are in high demand in various sectors. According to the [U.S. Bureau of Labor Statistics](https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm), jobs in software development are expected to grow by 25% between 2022 and 2032.\n\nAccording to [Statista](https://www.statista.com/statistics/1367003/in-demand-it-roles/), full-stack software developers and software developers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average software engineer's annual salary is $105,624, and that of a [full-stack software developer](https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb) is $124,120.\n\nExperience and expertise are key factors that determine the salaries of full stack developers and software engineers. The table below shows the difference in average salaries of [full stack developers](https://www.payscale.com/research/US/Job=Full_Stack_Software_Developer/Salary) and [software engineers](https://www.payscale.com/research/US/Job=Software_Engineer/Salary) based on their years of experience.\n\n![Full stack developer vs Software engineer salaries](https://assets.roadmap.sh/guest/full-stack-salaries-04wtl.jpg)\n\n## How do I become a full stack developer or software engineer?\n\nAs you’ve seen, becoming a full stack developer requires various skill sets. roadmap.sh provides a step-by-step guide on how to become a [full-stack programmer or developer](https://roadmap.sh/full-stack), and by signing up, you will be able to:\n\n- Keep track of your learning progress and share it on your public roadmap.sh profile.\n- Draw your roadmap, either as an individual learner or for [Dev teams](https://roadmap.sh/teams).\n- [Generate new roadmaps with AI](https://roadmap.sh/ai).\n- Collaborate on official roadmaps.\n\nRecall that a software engineer, as defined above, specializes in different areas in the software development cycle and possesses a thorough knowledge of coding languages and engineering principles. roadmap.sh provides learning paths for various software engineering specializations. You can also sign up for [computer science](https://roadmap.sh/computer-science), [data structures and algorithms,](https://roadmap.sh/datastructures-and-algorithms) [software design and architecture](https://roadmap.sh/software-design-architecture), and [system design](https://roadmap.sh/system-design) roadmaps.\n";
				}
				async function compiledContent$B() {
					return await html$B();
				}
				function getHeadings$B() {
					return [{"depth":2,"slug":"who-is-a-full-stack-developer","text":"Who is a full stack developer?"},{"depth":3,"slug":"front-end-development","text":"Front-end development"},{"depth":3,"slug":"back-end-development","text":"Back-end development"},{"depth":3,"slug":"full-stack-developers-skills","text":"Full stack developers’ skills"},{"depth":2,"slug":"who-is-a-software-engineer","text":"Who is a software engineer?"},{"depth":3,"slug":"application-software-engineers","text":"Application software engineers"},{"depth":3,"slug":"systems-software-engineers","text":"Systems software engineers"},{"depth":3,"slug":"software-engineers-skills","text":"Software engineers skills"},{"depth":2,"slug":"full-stack-developer-vs-software-engineer-key-differences-to-consider","text":"Full Stack Developer vs Software Engineer: Key differences to consider"},{"depth":3,"slug":"focus-and-expertise","text":"Focus and expertise"},{"depth":3,"slug":"accessibility-and-entry-point","text":"Accessibility and entry point"},{"depth":2,"slug":"common-full-stack-developer-and-software-engineer-skills","text":"Common full stack developer and software engineer skills"},{"depth":3,"slug":"collaboration-and-teamwork","text":"Collaboration and teamwork"},{"depth":3,"slug":"technical-knowledge","text":"Technical knowledge"},{"depth":3,"slug":"lifelong-learning","text":"Lifelong learning"},{"depth":3,"slug":"job-description","text":"Job description"},{"depth":2,"slug":"full-stack-developer-vs-software-engineer-salaries","text":"Full stack developer vs software engineer salaries"},{"depth":2,"slug":"how-do-i-become-a-full-stack-developer-or-software-engineer","text":"How do I become a full stack developer or software engineer?"}];
				}

				const Content$B = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$B;
					content.file = file$B;
					content.url = url$B;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$B())}`;
				});

const __vite_glob_0_61 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$B,
	compiledContent: compiledContent$B,
	default: Content$B,
	file: file$B,
	frontmatter: frontmatter$B,
	getHeadings: getHeadings$B,
	rawContent: rawContent$B,
	url: url$B
}, Symbol.toStringTag, { value: 'Module' }));

const html$A = () => "<p><img src=\"https://assets.roadmap.sh/guest/go-vs-java-fo08l.jpg\" alt=\"Go vs Java comparison guide\"></p>\n<p>Which is better for enterprise-grade systems, Go or Java? Which technology accelerates productivity in large-scale development? Which frameworks provide the most adaptability when tackling modern software challenges? These are the questions developers and tech leads often wrestle with, drawing on personal experiences, industry trends, and the need to keep up with ever-changing application demands.</p>\n<p>As someone with experience building high-performance systems and working extensively with both <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a> and <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a>, I understand the debate developers often face when choosing between these two powerful languages. Java has long been the go-to choice for robust, enterprise-level applications, and it is known for its maturity and extensive ecosystem. Meanwhile, Go has steadily risen in popularity and is celebrated for its simplicity, speed, and ability to handle scalable, high-performance systems easily.</p>\n<p>In this guide, I’ll walk you through the key features of both Go and Java, including their performance, memory management, and adoption rates. I’ll also offer guidance on when to choose Go or Java for your next project.</p>\n<p>The table below summarizes the key features of Go and Java:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Go</strong></th><th><strong>Java</strong></th></tr></thead><tbody><tr><td><strong>Type</strong></td><td>Compiled language to native code</td><td>Compiled to bytecode, runs on the JVM</td></tr><tr><td><strong>Concurrency Model</strong></td><td>Goroutines (lightweight threads, managed by Go runtime)</td><td>Threads (OS-level, managed by JVM)</td></tr><tr><td><strong>Memory Management</strong></td><td>Garbage collection, with manual memory management options</td><td>Automatic garbage collection (JVM)</td></tr><tr><td><strong>Syntax</strong></td><td>Simple, concise, inspired by C</td><td>Verbose, object oriented language</td></tr><tr><td><strong>Performance</strong></td><td>High due to direct compilation to machine code</td><td>Good, but can be slower due to the JVM layer</td></tr><tr><td><strong>Cross-Platform</strong></td><td>Compiles to native binaries, runs on multiple platforms</td><td>JVM provides cross-platform compatibility</td></tr><tr><td><strong>Error Handling</strong></td><td>Explicit error handling via return values</td><td>Exceptions (try-catch mechanism)</td></tr><tr><td><strong>Learning Curve</strong></td><td>Lower due to simpler syntax and fewer features</td><td>Steeper, especially for new developers due to verbosity</td></tr><tr><td><strong>Use Cases</strong></td><td>System programming, microservices, cloud-native apps, DevOps</td><td>Enterprise applications, Android development, large-scale apps</td></tr><tr><td><strong>Community &#x26; Libraries</strong></td><td>Growing, especially for cloud-native and system tools</td><td>Mature, large ecosystem with extensive libraries and frameworks</td></tr><tr><td><strong>Scalability</strong></td><td>Excellent for highly concurrent and lightweight applications</td><td>Scalable, but can be more resource-intensive</td></tr></tbody></table>\n<p>Before looking at these features in detail, let’s take a closer look at these two programming languages.</p>\n<h2 id=\"go\">Go</h2>\n<p><a href=\"https://go.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Go</a>, also known as Golang, is an open-source programming language developed by Google. Since its release in 2009, Go has gained massive adoption in building REST APIs, system programming, cloud computing, and microservices architecture, thanks to its focus on simplicity, efficiency, and reliability.</p>\n<p>As a statically typed language, Go allows you to catch errors early and build software faster. It also has a garbage collector that automatically manages memory allocation and deallocation.</p>\n<p>Go comes with extensive tools and libraries for building small to large-scale applications.</p>\n<h2 id=\"java\">Java</h2>\n<p><a href=\"https://www.java.com/en/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java</a> is a high-level, object-oriented programming language owned and maintained by the Oracle Corporation. It is known for scalability, extensibility, and portability, which has made it a leading choice for building enterprise-grade applications, Android app development, and web applications.</p>\n<p>James Gosling first developed Java at Sun Microsystems in the 1990s, and it introduced the “Write Once, Run Anywhere” (WORA) principle. This means Java code can be compiled and run on any device with a Java Virtual Machine (JVM) installed, irrespective of the underlying operating system.</p>\n<p>Java also has robust tools and libraries that make writing code easy and help you build small to large-scale applications.</p>\n<p>Both Go and Java are server-side programming languages for building high-performance applications. You may wonder which language is superior and what considerations should guide your choice. Let’s dive deep into the side-by-side comparison of these two languages.</p>\n<h2 id=\"performance\">Performance</h2>\n<p>Golang outperforms Java and is often compared to high-performance programming languages like C or C++ because it compiles into native machine code. For high-intensive operations like I/O bound and CPU-heavy tasks, Go outperforms Java because it doesn’t have the JVM overhead.</p>\n<p>Java’s performance has also improved over the years when used in mission-critical applications and can be competitive with Go, but the major drawback is the JVM layer. It uses more memory, which can impact performance when used in a constrained environment like containers and microservices.</p>\n<h2 id=\"cross-platform-development\">Cross-platform development</h2>\n<p>Go compiles binary files separately for each platform, which means you can run it directly on platforms like Linux and macOS without requiring additional software. Java is also platform-independent because any application written in Java can run on any system with JVM installed and supports bytecode portability.</p>\n<p>While both Go and Java enable cross-compilation and can run on multiple platforms, Java offers more comprehensive coverage. Java has massive support on desktop (Windows, macOS, Linux), mobile (Android and iOS via frameworks), servers, and embedded systems via Java ME. Go, on the other hand, has limited compatibility with mobile and embedded systems.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/go-vs-java-in-cross-platform-development-q5eff.png\" alt=\"Go vs. Java in Cross-platform development\"></p>\n<h2 id=\"community-and-ecosystem\">Community and ecosystem</h2>\n<p>Java has a more mature and established community with many tools, libraries, and frameworks. It powers a significant portion of enterprise applications and has battle-tested frameworks like Spring, Apache Kafka, and much more.</p>\n<p>In comparison, Go’s community is relatively young but also growing. It has made significant progress in the cloud-native space with projects like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>, and <a href=\"https://roadmap.sh/terraform\" target=\"_blank\">Terrafoam</a> powering enterprise applications.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/go-vs-java-ecosystem-support-115mf.png\" alt=\"Go vs Java ecosystem support\"></p>\n<h2 id=\"memory-management\">Memory management</h2>\n<p>One of the unique features of Go is not just the in-built garbage collection (GC) that automatically frees up unused memory. Additionally, Go provides more control by allowing developers to manually manage memory allocation and deallocation. However, manual memory management comes at a cost, as you have to take care of edge cases and handle potential memory leaks.</p>\n<p>Java on the other hand, also has automatic GC without the option of manually managing memory. The GC in Java has seen massive improvement, especially for large enterprise systems, but it can still show some lags when building low-latency systems like trading platforms.</p>\n<h2 id=\"type-and-compilation\">Type and compilation</h2>\n<p>Go and Java are statically typed languages, which means their data types are determined at compile time before the program executes. So, when you develop your application in either of these languages, you detect errors early and improve code readability and reliability.</p>\n<p>Go compiles directly into machine code that can be executed by the operating system, which makes it faster as there’s no intermediate layer. In contrast, Java compiles to bytecode that uses a JVM as an intermediary, which introduces an overhead, as compared to Go’s native compilation.</p>\n<h2 id=\"error-handling\">Error handling</h2>\n<p>Go and Java are powerful languages with distinct approaches to handling errors. Go favors explicit error handling, where you have to think about error handling at each step, which can be verbose, repetitive, and missing some benefits of a structured approach to error handling.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">a</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">b</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> b </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">, errors.</span><span style=\"color:#50FA7B\">New</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">division by zero</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> a </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> b, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">result, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>In contrast, Java handles errors through the try-catch and exception mechanism, which centralizes error management. While Java’s error handling can be powerful and help you build robust products, you have to be careful of performance issues.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#FF79C6\">public</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\"> a, </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\"> b) throws ArithmeticException {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> (b </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        throw</span><span style=\"color:#FF79C6;font-weight:bold\"> new</span><span style=\"color:#50FA7B\"> ArithmeticException</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">division by zero</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> a </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">try</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">    int</span><span style=\"color:#F8F8F2\"> result </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">} </span><span style=\"color:#FF79C6\">catch</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD;font-style:italic\">ArithmeticException</span><span style=\"color:#FFB86C;font-style:italic\"> e</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    System.err.</span><span style=\"color:#50FA7B\">println</span><span style=\"color:#F8F8F2\">(e.</span><span style=\"color:#50FA7B\">getMessage</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h2 id=\"learning-curve\">Learning curve</h2>\n<p>Go has a relatively low learning curve compared to Java due to its simple syntax, standard library, and fewer language features. It is easy for beginners to pick up due to the language’s conciseness and limited ways to perform tasks. However, Go lacks some robust features like operator overloading and inheritance found in other languages, which can limit your expressiveness when building applications.</p>\n<p>Java, on the other hand, has a steeper learning curve. It can be difficult for beginners to pick up because of its verbosity and comprehensive features. While Java’s syntax is evolving and introducing improvements (like Lambda and functional paradigm) to address some of the concerns, beginners still need to learn design principles like object-oriented programming (OOP) and many more.</p>\n<h2 id=\"use-cases\">Use cases</h2>\n<p>Go’s efficiency, simplicity, and concurrent pattern make it an ideal choice for building cloud-native applications, network programming, and DevOps tools (like automation scripts and command line tools). Some notable companies actively using Go include:</p>\n<ul>\n<li>Google uses Go extensively for <a href=\"https://cloud.google.com/go\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">infrastructure</a>, data processing, and various internal projects.</li>\n<li>Docker uses Go to build its containerization platform.</li>\n<li>Dropbox uses Go to build its infrastructure and <a href=\"https://dropbox.tech/infrastructure/open-sourcing-our-go-libraries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">file synchronization feature.</a></li>\n</ul>\n<p>Java is also widely used for developing enterprise applications, Android development, data processing, and large-scale web applications. Its stable and mature ecosystem makes it an ideal choice for enterprise solutions. Some notable companies actively using Java include:</p>\n<ul>\n<li>Netflix uses Java for its <a href=\"https://www.infoq.com/presentations/netflix-java/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">streaming platform</a>.</li>\n<li>Airbnb leverages Java for its core platform and data processing platforms.</li>\n<li>Spotify builds its <a href=\"https://spotify.github.io/apollo/#:~:text=Apollo%20is%20a%20set%20of,work%20to%20release%20version%201.0.\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">microservices with Java</a>.</li>\n</ul>\n<p>While the points above cover some notable features of both Go and Java, highlighting the strengths and weaknesses of each language, you may still be wondering which one to choose for your next project. Not to worry, that question will be addressed in the next section.</p>\n<h2 id=\"which-one-should-you-choose\">Which one should you choose?</h2>\n<p>Well, as any diplomatic developer might say, ‘It depends.’ Both Go and Java are excellent programming languages, and your choice between them depends on the type of project you want to build, ecosystem support, and other important factors. Let’s explore these factors in detail.</p>\n<p><strong>Project Requirements</strong></p>\n<p>Go is a great choice for projects that handle multiple users or require background tasks without interrupting the user experience. Its high concurrency and performance make it ideal for such scenarios. However, if your project needs complex functionalities and a broad ecosystem of tools, Java may be a better option.</p>\n<p><strong>Career and Opportunity</strong></p>\n<p>It’s important to carefully evaluate your end goal. If you aim to build a project to demonstrate proof of work, showcase your experience, or secure a job, consider the industry you’re targeting and decide based on the opportunities there. For example, if you want to work in corporate sectors like fintech, insurance, or banking, Java might be an ideal choice because of its capability to build enterprise-grade applications. However, if you’re aiming for industries focused on cloud infrastructure, Go is often a better choice than Java.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/average-java-developer-salary-in-the-us-goqr1.png\" alt=\"Average Java developer salary in the US\"></p>\n<p><strong>Target Platform</strong></p>\n<p>If you’re building for mobile and web platforms, Java offers strong support for applications ranging from small-scale projects to large enterprise solutions, thanks to its proven tools, libraries, and frameworks that you can easily leverage. However, if your target platform is cloud and cloud-native environments, Go might be a better choice due to its extensive ecosystem and robust features.</p>\n<p>Choosing between Go and Java largely depends on the factors mentioned above. However, you might also wonder if there are similarities between these languages and whether there’s an intersection where using both could be beneficial. Well, you guessed right. Let’s explore that next.</p>\n<h2 id=\"when-to-use-both-go-and-java\">When to use both Go and Java</h2>\n<p>Both Java and Go are popular programming languages that share similarities like static typing, concurrent handling, GC, platform independence, strong ecosystems, and standard libraries, which make them powerful languages that can be combined for building applications. Below are some scenarios where you can combine the strengths of both Go and Java to build applications:</p>\n<ul>\n<li>Microservices architecture.</li>\n<li>Web development with high-performance requirements.</li>\n<li>Data processing pipelines.</li>\n<li>Cloud-native applications with diverse microservices.</li>\n<li>Cross-platform mobile and desktop full stack applications.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/when-to-use-both-go-and-java-wr4rs.png\" alt=\"Go and Java combination\"></p>\n<p><strong>Microservices architecture</strong></p>\n<p>If you’re building a high-performance microservices system for an e-commerce platform, you can leverage Java’s maturity and enterprise-grade ecosystem to build the core backend processes handling complex business logic, such as payment transactions, inventory management, and order processing.</p>\n<p>Then, use Go to build services that require high performance and fast execution, like a real-time recommendation system, caching mechanism, and notifications.</p>\n<p><strong>Web development with high-performance requirements</strong></p>\n<p>A real-time social media analytic platform and a stock exchange trading platform are examples of web applications that require high performance because they handle a massive amount of data. You can use Go for real-time data collection and event-driven activities that capture user engagement data, shares, and likes.</p>\n<p>Then, Java can be used to manage the backend workflow, such as storing and aggregating data.</p>\n<p><strong>Data processing pipelines</strong></p>\n<p>If you’re building a real-time analytic platform that involves processing and analyzing large volumes of data, then you can use Go to process data ingestion and transformation. Go’s goroutines make it an ideal language for data ingestion and preprocessing.</p>\n<p>Use Java-based data-intensive frameworks like Apache Hadoop or Apache Spark for data processing and analytics.</p>\n<p><strong>Cloud-native applications with diverse microservices</strong></p>\n<p>If you’re building a Software as a Service (SaaS) cloud monitoring tool for cloud infrastructure, you can use Go to build your application microservices that handle real-time monitoring, metric collection, and data scraping from different cloud services. Java, on the other hand, can be used to power the backend features like billing, user management, and data reporting.</p>\n<p><strong>Cross-platform mobile and desktop full stack application</strong></p>\n<p>An example of cross-platform mobile and desktop full stack application is a platform for visualizing financial data with a backend analytic engine. In such cases, you can use Java to build the desktop and mobile application logic and user interface due to its cross-platform capabilities.</p>\n<p>Use Go to build the backend analytic engine with real-time data processing and expose the services using REST APIs to the Java mobile and desktop client.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>Go is an excellent choice for building high-performance, lightweight applications that require concurrency, such as cloud-native applications and microservices. Java, on the other hand, has a mature ecosystem with battle-tested tools, libraries, and frameworks, which makes it a powerful option for building large-scale enterprise applications where scalability and robustness are essential.</p>\n<p>Choosing between Go and Java depends on the type of project you want to build, the platform you’re targeting, and the ecosystem you want to adopt for your project. Regardless of your choice, you can use the <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go roadmap</a> and <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java roadmap</a> to stay up to date with the latest changes in each language.</p>";

				const frontmatter$A = {"title":"Go vs Java: Choosing the Right Language for Your Projects","description":"Comparing Go vs Java for your projects? Explore features like concurrency, memory management, and learning curves to find the right fit for your needs.","authorId":"ekene","excludedBySlug":"/golang/vs-java","seo":{"title":"Go vs Java: Choosing the Right Language for Your Projects","description":"Comparing Go vs Java for your projects? Explore features like concurrency, memory management, and learning curves to find the right fit for your needs.","ogImageUrl":"https://assets.roadmap.sh/guest/go-vs-java-fo08l.jpg"},"relatedGuidesTitle":"Other Guides","isNew":false,"type":"textual","date":"2025-02-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$A = "/workspace/src/data/guides/go-vs-java.md";
				const url$A = undefined;
				function rawContent$A() {
					return "   \n                                                                  \n                                                                                                                                                                      \n               \n                                 \n    \n                                                                    \n                                                                                                                                                                        \n                                                                    \n                                  \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Go vs Java comparison guide](https://assets.roadmap.sh/guest/go-vs-java-fo08l.jpg)\n\nWhich is better for enterprise-grade systems, Go or Java? Which technology accelerates productivity in large-scale development? Which frameworks provide the most adaptability when tackling modern software challenges? These are the questions developers and tech leads often wrestle with, drawing on personal experiences, industry trends, and the need to keep up with ever-changing application demands.\n\nAs someone with experience building high-performance systems and working extensively with both [Go](https://roadmap.sh/golang) and [Java](https://roadmap.sh/java), I understand the debate developers often face when choosing between these two powerful languages. Java has long been the go-to choice for robust, enterprise-level applications, and it is known for its maturity and extensive ecosystem. Meanwhile, Go has steadily risen in popularity and is celebrated for its simplicity, speed, and ability to handle scalable, high-performance systems easily.\n\nIn this guide, I'll walk you through the key features of both Go and Java, including their performance, memory management, and adoption rates. I'll also offer guidance on when to choose Go or Java for your next project.\n\nThe table below summarizes the key features of Go and Java:\n\n| **Feature**               | **Go**                                                       | **Java**                                                        |\n| ------------------------- | ------------------------------------------------------------ | --------------------------------------------------------------- |\n| **Type**                  | Compiled language to native code                             | Compiled to bytecode, runs on the JVM                           |\n| **Concurrency Model**     | Goroutines (lightweight threads, managed by Go runtime)      | Threads (OS-level, managed by JVM)                              |\n| **Memory Management**     | Garbage collection, with manual memory management options    | Automatic garbage collection (JVM)                              |\n| **Syntax**                | Simple, concise, inspired by C                               | Verbose, object oriented language                               |\n| **Performance**           | High due to direct compilation to machine code               | Good, but can be slower due to the JVM layer                    |\n| **Cross-Platform**        | Compiles to native binaries, runs on multiple platforms      | JVM provides cross-platform compatibility                       |\n| **Error Handling**        | Explicit error handling via return values                    | Exceptions (try-catch mechanism)                                |\n| **Learning Curve**        | Lower due to simpler syntax and fewer features               | Steeper, especially for new developers due to verbosity         |\n| **Use Cases**             | System programming, microservices, cloud-native apps, DevOps | Enterprise applications, Android development, large-scale apps  |\n| **Community & Libraries** | Growing, especially for cloud-native and system tools        | Mature, large ecosystem with extensive libraries and frameworks |\n| **Scalability**           | Excellent for highly concurrent and lightweight applications | Scalable, but can be more resource-intensive                    |\n\nBefore looking at these features in detail, let's take a closer look at these two programming languages.\n\n## Go\n\n[Go](https://go.dev/), also known as Golang, is an open-source programming language developed by Google. Since its release in 2009, Go has gained massive adoption in building REST APIs, system programming, cloud computing, and microservices architecture, thanks to its focus on simplicity, efficiency, and reliability.\n\nAs a statically typed language, Go allows you to catch errors early and build software faster. It also has a garbage collector that automatically manages memory allocation and deallocation.\n\nGo comes with extensive tools and libraries for building small to large-scale applications.\n\n## Java\n\n[Java](https://www.java.com/en/) is a high-level, object-oriented programming language owned and maintained by the Oracle Corporation. It is known for scalability, extensibility, and portability, which has made it a leading choice for building enterprise-grade applications, Android app development, and web applications.\n\nJames Gosling first developed Java at Sun Microsystems in the 1990s, and it introduced the \"Write Once, Run Anywhere\" (WORA) principle. This means Java code can be compiled and run on any device with a Java Virtual Machine (JVM) installed, irrespective of the underlying operating system.\n\nJava also has robust tools and libraries that make writing code easy and help you build small to large-scale applications.\n\nBoth Go and Java are server-side programming languages for building high-performance applications. You may wonder which language is superior and what considerations should guide your choice. Let's dive deep into the side-by-side comparison of these two languages.\n\n## Performance\n\nGolang outperforms Java and is often compared to high-performance programming languages like C or C++ because it compiles into native machine code. For high-intensive operations like I/O bound and CPU-heavy tasks, Go outperforms Java because it doesn't have the JVM overhead.\n\nJava's performance has also improved over the years when used in mission-critical applications and can be competitive with Go, but the major drawback is the JVM layer. It uses more memory, which can impact performance when used in a constrained environment like containers and microservices.\n\n## Cross-platform development\n\nGo compiles binary files separately for each platform, which means you can run it directly on platforms like Linux and macOS without requiring additional software. Java is also platform-independent because any application written in Java can run on any system with JVM installed and supports bytecode portability.\n\nWhile both Go and Java enable cross-compilation and can run on multiple platforms, Java offers more comprehensive coverage. Java has massive support on desktop (Windows, macOS, Linux), mobile (Android and iOS via frameworks), servers, and embedded systems via Java ME. Go, on the other hand, has limited compatibility with mobile and embedded systems.\n\n![Go vs. Java in Cross-platform development](https://assets.roadmap.sh/guest/go-vs-java-in-cross-platform-development-q5eff.png)\n\n## Community and ecosystem\n\nJava has a more mature and established community with many tools, libraries, and frameworks. It powers a significant portion of enterprise applications and has battle-tested frameworks like Spring, Apache Kafka, and much more.\n\nIn comparison, Go's community is relatively young but also growing. It has made significant progress in the cloud-native space with projects like [Docker](https://roadmap.sh/docker), [Kubernetes](https://roadmap.sh/kubernetes), and [Terrafoam](https://roadmap.sh/terraform) powering enterprise applications.\n\n![Go vs Java ecosystem support](https://assets.roadmap.sh/guest/go-vs-java-ecosystem-support-115mf.png)\n\n## Memory management\n\nOne of the unique features of Go is not just the in-built garbage collection (GC) that automatically frees up unused memory. Additionally, Go provides more control by allowing developers to manually manage memory allocation and deallocation. However, manual memory management comes at a cost, as you have to take care of edge cases and handle potential memory leaks.\n\nJava on the other hand, also has automatic GC without the option of manually managing memory. The GC in Java has seen massive improvement, especially for large enterprise systems, but it can still show some lags when building low-latency systems like trading platforms.\n\n## Type and compilation\n\nGo and Java are statically typed languages, which means their data types are determined at compile time before the program executes. So, when you develop your application in either of these languages, you detect errors early and improve code readability and reliability.\n\nGo compiles directly into machine code that can be executed by the operating system, which makes it faster as there's no intermediate layer. In contrast, Java compiles to bytecode that uses a JVM as an intermediary, which introduces an overhead, as compared to Go's native compilation.\n\n## Error handling\n\nGo and Java are powerful languages with distinct approaches to handling errors. Go favors explicit error handling, where you have to think about error handling at each step, which can be verbose, repetitive, and missing some benefits of a structured approach to error handling.\n\n```go\nfunc divide(a, b int) (int, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero\")\n\t}\n\treturn a / b, nil\n}\n\n// Usage\nresult, err := divide(10, 0)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\nIn contrast, Java handles errors through the try-catch and exception mechanism, which centralizes error management. While Java's error handling can be powerful and help you build robust products, you have to be careful of performance issues.\n\n```java\npublic int divide(int a, int b) throws ArithmeticException {\n    if (b == 0) {\n        throw new ArithmeticException(\"division by zero\");\n    }\n    return a / b;\n}\n\n// Usage\ntry {\n    int result = divide(10, 0);\n} catch (ArithmeticException e) {\n    System.err.println(e.getMessage());\n}\n```\n\n## Learning curve\n\nGo has a relatively low learning curve compared to Java due to its simple syntax, standard library, and fewer language features. It is easy for beginners to pick up due to the language's conciseness and limited ways to perform tasks. However, Go lacks some robust features like operator overloading and inheritance found in other languages, which can limit your expressiveness when building applications.\n\nJava, on the other hand, has a steeper learning curve. It can be difficult for beginners to pick up because of its verbosity and comprehensive features. While Java's syntax is evolving and introducing improvements (like Lambda and functional paradigm) to address some of the concerns, beginners still need to learn design principles like object-oriented programming (OOP) and many more.\n\n## Use cases\n\nGo's efficiency, simplicity, and concurrent pattern make it an ideal choice for building cloud-native applications, network programming, and DevOps tools (like automation scripts and command line tools). Some notable companies actively using Go include:\n\n- Google uses Go extensively for [infrastructure](https://cloud.google.com/go), data processing, and various internal projects.\n- Docker uses Go to build its containerization platform.\n- Dropbox uses Go to build its infrastructure and [file synchronization feature.](https://dropbox.tech/infrastructure/open-sourcing-our-go-libraries)\n\nJava is also widely used for developing enterprise applications, Android development, data processing, and large-scale web applications. Its stable and mature ecosystem makes it an ideal choice for enterprise solutions. Some notable companies actively using Java include:\n\n- Netflix uses Java for its [streaming platform](https://www.infoq.com/presentations/netflix-java/).\n- Airbnb leverages Java for its core platform and data processing platforms.\n- Spotify builds its [microservices with Java](https://spotify.github.io/apollo/#:~:text=Apollo%20is%20a%20set%20of,work%20to%20release%20version%201.0.).\n\nWhile the points above cover some notable features of both Go and Java, highlighting the strengths and weaknesses of each language, you may still be wondering which one to choose for your next project. Not to worry, that question will be addressed in the next section.\n\n## Which one should you choose?\n\nWell, as any diplomatic developer might say, 'It depends.' Both Go and Java are excellent programming languages, and your choice between them depends on the type of project you want to build, ecosystem support, and other important factors. Let's explore these factors in detail.\n\n**Project Requirements**\n\nGo is a great choice for projects that handle multiple users or require background tasks without interrupting the user experience. Its high concurrency and performance make it ideal for such scenarios. However, if your project needs complex functionalities and a broad ecosystem of tools, Java may be a better option.\n\n**Career and Opportunity**\n\nIt's important to carefully evaluate your end goal. If you aim to build a project to demonstrate proof of work, showcase your experience, or secure a job, consider the industry you're targeting and decide based on the opportunities there. For example, if you want to work in corporate sectors like fintech, insurance, or banking, Java might be an ideal choice because of its capability to build enterprise-grade applications. However, if you're aiming for industries focused on cloud infrastructure, Go is often a better choice than Java.\n\n![Average Java developer salary in the US](https://assets.roadmap.sh/guest/average-java-developer-salary-in-the-us-goqr1.png)\n\n**Target Platform**\n\nIf you're building for mobile and web platforms, Java offers strong support for applications ranging from small-scale projects to large enterprise solutions, thanks to its proven tools, libraries, and frameworks that you can easily leverage. However, if your target platform is cloud and cloud-native environments, Go might be a better choice due to its extensive ecosystem and robust features.\n\nChoosing between Go and Java largely depends on the factors mentioned above. However, you might also wonder if there are similarities between these languages and whether there's an intersection where using both could be beneficial. Well, you guessed right. Let's explore that next.\n\n## When to use both Go and Java\n\nBoth Java and Go are popular programming languages that share similarities like static typing, concurrent handling, GC, platform independence, strong ecosystems, and standard libraries, which make them powerful languages that can be combined for building applications. Below are some scenarios where you can combine the strengths of both Go and Java to build applications:\n\n- Microservices architecture.\n- Web development with high-performance requirements.\n- Data processing pipelines.\n- Cloud-native applications with diverse microservices.\n- Cross-platform mobile and desktop full stack applications.\n\n![Go and Java combination](https://assets.roadmap.sh/guest/when-to-use-both-go-and-java-wr4rs.png)\n\n**Microservices architecture**\n\nIf you're building a high-performance microservices system for an e-commerce platform, you can leverage Java's maturity and enterprise-grade ecosystem to build the core backend processes handling complex business logic, such as payment transactions, inventory management, and order processing.\n\nThen, use Go to build services that require high performance and fast execution, like a real-time recommendation system, caching mechanism, and notifications.\n\n**Web development with high-performance requirements**\n\nA real-time social media analytic platform and a stock exchange trading platform are examples of web applications that require high performance because they handle a massive amount of data. You can use Go for real-time data collection and event-driven activities that capture user engagement data, shares, and likes.\n\nThen, Java can be used to manage the backend workflow, such as storing and aggregating data.\n\n**Data processing pipelines**\n\nIf you're building a real-time analytic platform that involves processing and analyzing large volumes of data, then you can use Go to process data ingestion and transformation. Go's goroutines make it an ideal language for data ingestion and preprocessing.\n\nUse Java-based data-intensive frameworks like Apache Hadoop or Apache Spark for data processing and analytics.\n\n**Cloud-native applications with diverse microservices**\n\nIf you're building a Software as a Service (SaaS) cloud monitoring tool for cloud infrastructure, you can use Go to build your application microservices that handle real-time monitoring, metric collection, and data scraping from different cloud services. Java, on the other hand, can be used to power the backend features like billing, user management, and data reporting.\n\n**Cross-platform mobile and desktop full stack application**\n\nAn example of cross-platform mobile and desktop full stack application is a platform for visualizing financial data with a backend analytic engine. In such cases, you can use Java to build the desktop and mobile application logic and user interface due to its cross-platform capabilities.\n\nUse Go to build the backend analytic engine with real-time data processing and expose the services using REST APIs to the Java mobile and desktop client.\n\n## Next steps\n\nGo is an excellent choice for building high-performance, lightweight applications that require concurrency, such as cloud-native applications and microservices. Java, on the other hand, has a mature ecosystem with battle-tested tools, libraries, and frameworks, which makes it a powerful option for building large-scale enterprise applications where scalability and robustness are essential.\n\nChoosing between Go and Java depends on the type of project you want to build, the platform you're targeting, and the ecosystem you want to adopt for your project. Regardless of your choice, you can use the [Go roadmap](https://roadmap.sh/golang) and [Java roadmap](https://roadmap.sh/java) to stay up to date with the latest changes in each language.\n";
				}
				async function compiledContent$A() {
					return await html$A();
				}
				function getHeadings$A() {
					return [{"depth":2,"slug":"go","text":"Go"},{"depth":2,"slug":"java","text":"Java"},{"depth":2,"slug":"performance","text":"Performance"},{"depth":2,"slug":"cross-platform-development","text":"Cross-platform development"},{"depth":2,"slug":"community-and-ecosystem","text":"Community and ecosystem"},{"depth":2,"slug":"memory-management","text":"Memory management"},{"depth":2,"slug":"type-and-compilation","text":"Type and compilation"},{"depth":2,"slug":"error-handling","text":"Error handling"},{"depth":2,"slug":"learning-curve","text":"Learning curve"},{"depth":2,"slug":"use-cases","text":"Use cases"},{"depth":2,"slug":"which-one-should-you-choose","text":"Which one should you choose?"},{"depth":2,"slug":"when-to-use-both-go-and-java","text":"When to use both Go and Java"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$A = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$A;
					content.file = file$A;
					content.url = url$A;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$A())}`;
				});

const __vite_glob_0_62 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$A,
	compiledContent: compiledContent$A,
	default: Content$A,
	file: file$A,
	frontmatter: frontmatter$A,
	getHeadings: getHeadings$A,
	rawContent: rawContent$A,
	url: url$A
}, Symbol.toStringTag, { value: 'Module' }));

const html$z = () => "<p><img src=\"https://assets.roadmap.sh/guest/build-a-rest-api-in-golang-k3zuq.jpg\" alt=\"How to Build a Rest API in Golang\"></p>\n<p>Building a REST API in <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go</a> offers a blend of high performance, ease of deployment, and scalability. Go’s efficient runtime and built-in concurrency model make it an ideal choice for building applications that handle large volumes of requests while still maintaining low latency. With a robust standard library and supportive ecosystem, you can quickly implement REST functionality into your applications.</p>\n<p>Since its official release in 2009, Go has gained massive adoption and is gradually becoming the go-to technology for building applications, from small-scale to mission-critical systems. Its adoption surged even further when industry leaders used it to power containerization and orchestration tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>. Whether you’re building a small service or a mission-critical application, Go provides a powerful foundation for REST API development.</p>\n<p>Given these advantages, let’s put Go’s capabilities into practice. In this guide, you will build a basic bookkeeping management API that supports create, read, update, and delete (CRUD) functionalities. You’ll also write unit tests for these functionalities to ensure they work as intended, implement authentication to secure the APIs, and create comprehensive documentation.</p>\n<p>Let’s get started building the application.</p>\n<h2 id=\"step-1-project-set-up\">Step 1: Project set up</h2>\n<p>To get started, use your terminal to create a project directory.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">mkdir</span><span style=\"color:#F1FA8C\"> go_book_api</span><span style=\"color:#F8F8F2\"> &#x26;&#x26; </span><span style=\"color:#8BE9FD\">cd</span><span style=\"color:#F1FA8C\"> go_book_api</span></span></code></pre>\n<p>These commands create a directory called <code>go_book_api</code> and navigate into it.</p>\n<p>Next, initialize a <a href=\"https://go.dev/doc/tutorial/create-module\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Go module</a> within the project.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> mod</span><span style=\"color:#F1FA8C\"> init</span><span style=\"color:#F1FA8C\"> go_book_api</span></span></code></pre>\n<p>This command creates a <code>go.mod</code> file for tracking the project dependencies.</p>\n<p>Finally, install the required dependencies.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> github.com/gin-gonic/gin</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> gorm.io/gorm</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> gorm.io/driver/postgres</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> gorm.io/driver/sqlite</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> github.com/joho/godotenv</span></span></code></pre>\n<p>Let’s look at what these dependencies are and what they are used for:</p>\n<p><a href=\"https://gin-gonic.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Gin</a> is a framework for building web applications.</p>\n<p><a href=\"https://gorm.io/docs/index.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Gorm</a> is a Go-based Object Relational Mapper (ORM). ORMs make it easy to query and manipulate data from a database. The installation also includes both <a href=\"https://github.com/go-gorm/postgres\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Postgres</a> and <a href=\"https://github.com/go-gorm/sqlite\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SQLite</a> drivers. You’ll use the Postgres driver to interact with your application data, while SQLite will mock your database interaction when writing unit tests.</p>\n<p><a href=\"https://github.com/joho/godotenv\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">godotenv</a> is a library for loading environment variables.</p>\n<p><strong>Set up the project database</strong>\nTo save your API data, you need to set up your project database on <a href=\"https://console.neon.tech/realms/prod-realm/protocol/openid-connect/registrations?client_id=neon-console&#x26;redirect_uri=https%3A%2F%2Fconsole.neon.tech%2Fauth%2Fkeycloak%2Fcallback&#x26;response_type=code&#x26;scope=openid+profile+email&#x26;state=FB3kotT4P_2z1eLKxJJvkA%3D%3D%2C%2C%2C\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Neon</a>. Neon is a fully managed serverless PostgreSQL database with a generous free tier you can start with.</p>\n<p>To set up your database, log into your <a href=\"https://console.neon.tech/app/projects\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Neon console</a> and create a project.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/neon-create-project-i4u20.png\" alt=\"Set up a project\"></p>\n<p>On successful creation of the project, copy the database URL.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/neon-successful-project-r4jiw.png\" alt=\"Copy database URL\"></p>\n<blockquote>\n<p>Alternatively, you can use any managed Postgres service or a local Postgres instance.</p>\n</blockquote>\n<p>Lastly, create <code>.env</code> in your project directly and add the copied database URL.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#BD93F9\">DB_URL</span><span style=\"color:#FF79C6\">=&#x3C;</span><span style=\"color:#F1FA8C\">REPLACE</span><span style=\"color:#50FA7B\"> THIS</span><span style=\"color:#F1FA8C\"> WITH</span><span style=\"color:#F1FA8C\"> YOUR</span><span style=\"color:#F1FA8C\"> DATABASE</span><span style=\"color:#F1FA8C\"> UR</span><span style=\"color:#F8F8F2\">L</span><span style=\"color:#FF79C6\">></span></span></code></pre>\n<h2 id=\"step-2-structuring-the-project\">Step 2: Structuring the project</h2>\n<p>While Go doesn’t enforce how you should structure your project, it is essential you have a good structure when building an application with Go. It makes your codebase easy to maintain and clear for others to understand.</p>\n<p>To structure your project, create an <code>api</code>, <code>cmd</code>, and <code>tests</code> folders.</p>\n<p><code>api</code> is for organizing API development-related files.\n<code>cmd</code> is used to organize the application entry point. This is a convention within the Go community.\n<code>tests</code> are for organizing unit tests.</p>\n<h2 id=\"step-3-implement-crud-operations-for-the-bookkeeping-application\">Step 3: Implement CRUD operations for the bookkeeping application</h2>\n<p>Create an <code>api/model.go</code> file to structure the application’s data and response.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Book</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tID     </span><span style=\"color:#8BE9FD;font-style:italic\">uint</span><span style=\"color:#E9F284\">   `</span><span style=\"color:#F1FA8C\">json:\"id\" gorm:\"primaryKey\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tTitle  </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">json:\"title\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tAuthor </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">json:\"author\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tYear   </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">json:\"year\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> JsonResponse</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tStatus  </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">json:\"status\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tMessage </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">json:\"message\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tData    </span><span style=\"color:#8BE9FD;font-style:italic\">any</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">json:\"data\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> ResponseJSON</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">status</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">message</span><span style=\"color:#8BE9FD;font-style:italic\"> string</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">data</span><span style=\"color:#8BE9FD;font-style:italic\"> any</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tresponse </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> JsonResponse</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tStatus:  status,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tMessage: message,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tData:    data,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tc.</span><span style=\"color:#50FA7B\">JSON</span><span style=\"color:#F8F8F2\">(status, response)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The code snippet above creates a <code>Book</code> and <code>JsonResponse</code> structs with the required properties using struct tags (e.g., <code>json:\"title\"</code>) and a helper function <code>ResponseJSON</code> to manage API responses.</p>\n<blockquote>\n<p>The struct tag lets you send responses that fit into the JSON naming convention.</p>\n</blockquote>\n<h3 id=\"create-a-new-book\">Create a new book</h3>\n<p>To create a new book handler function, create an <code>api/handlers.go</code> file that will contain the application business logic. It’s important to separate the business logic from the data model, as it helps deliver scalable, maintainable, and testable code.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/joho/godotenv</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/driver/postgres</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/gorm</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">log</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">net/http</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">os</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">var</span><span style=\"color:#F8F8F2\"> DB </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">gorm</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">DB</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> InitDB</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> godotenv.</span><span style=\"color:#50FA7B\">Load</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to connect to database:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tdsn </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.</span><span style=\"color:#50FA7B\">Getenv</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">DB_URL</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB, err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> gorm.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(postgres.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(dsn), </span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">gorm</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Config</span><span style=\"color:#F8F8F2\">{})</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to connect to database:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// migrate the schema</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> DB.</span><span style=\"color:#50FA7B\">AutoMigrate</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{}); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to migrate schema:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> CreateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> book </span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t//bind the request body</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">ShouldBindJSON</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusBadRequest, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid input</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB.</span><span style=\"color:#50FA7B\">Create</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusCreated, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book created successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, book)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The code snippet declares a global variable <code>DB</code> that holds the database connection and is then initialized inside the <code>InitDB</code> function. The <code>InitDB</code> function loads the environment variable to connect to the database and performs automatic schema migration. Finally, create a <code>CreateBook</code> handler that uses the <code>DB</code> variable to create a new book, handle errors, and return the appropriate response using the <code>ResponseJSON</code> helper.</p>\n<blockquote>\n<p>When a function, type, or variable is declared with an initial capital letter, it is <strong>exported</strong>. This means it is visible and can be accessed by other packages.</p>\n</blockquote>\n<h3 id=\"getting-the-list-of-books\">Getting the list of books</h3>\n<p>To retrieve the list of books, create a <code>GetBooks</code> handler that uses the <code>DB</code> variable to get the list of available books inside the database.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> GetBooks</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> books []</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB.</span><span style=\"color:#50FA7B\">Find</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">books)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Books retrieved successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, books)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"get-a-single-book\">Get a single book</h3>\n<p>To retrieve a book, create a <code>GetBook</code> handler that uses the <code>DB</code> variable to get a book matching the specified ID and returns the appropriate response.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> GetBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> book </span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> DB.</span><span style=\"color:#50FA7B\">First</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book, c.</span><span style=\"color:#50FA7B\">Param</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)).Error; err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusNotFound, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book not found</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book retrieved successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, book)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"update-a-book\">Update a book</h3>\n<p>To update a book, create an <code>UpdateBook</code> handler that uses the <code>DB</code> variable to get a book matching the specified ID, updates it, and returns the appropriate response.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> UpdateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> book </span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> DB.</span><span style=\"color:#50FA7B\">First</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book, c.</span><span style=\"color:#50FA7B\">Param</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)).Error; err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusNotFound, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book not found</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// bind the request body</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">ShouldBindJSON</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusBadRequest, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid input</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB.</span><span style=\"color:#50FA7B\">Save</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book updated successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, book)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"delete-a-book\">Delete a book</h3>\n<p>To delete a book, create a <code>DeleteBook</code> handler that uses the <code>DB</code> variable to get a book matching the specified ID, deletes it, and returns the appropriate response.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> DeleteBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> book </span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> DB.</span><span style=\"color:#50FA7B\">Delete</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book, c.</span><span style=\"color:#50FA7B\">Param</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)).Error; err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusNotFound, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book not found</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book deleted successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"putting-it-all-together\">Putting it all together</h3>\n<p>With the handlers set up, you need to create the application entry point and specify the application routes. To do this, create a <code>cmd/main.go</code> file and add the code snippet below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">go_book_api/api</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tapi.</span><span style=\"color:#50FA7B\">InitDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t//routes</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.CreateBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/books</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBooks)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">PUT</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.UpdateBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">DELETE</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.DeleteBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">Run</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">:8080</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The snippet above creates a <code>main</code> function that initializes the database, specifies the routes with the associated handlers, and runs the application on port <code>8080</code>.</p>\n<h2 id=\"step-4-testing-the-rest-apis\">Step 4: Testing the REST APIs</h2>\n<p>To test the APIs, you need a <a href=\"https://www.postman.com/downloads/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Postman</a> or any API testing application of your choice.</p>\n<p>In your terminal, start the development server by running the command.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#F1FA8C\"> cmd/main.go</span></span></code></pre>\n<p>Then, use the API testing client of your choice to test out the endpoints as shown below:</p>\n<h3 id=\"create-a-book-endpoint\">Create a book endpoint</h3>\n<p>Use the <code>POST</code> method and pass in the required data to create a new book.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/book</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">     --header</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Content-Type: application/json</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">     --data</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">{</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">       \"title\": \"Go by Example: Programmer</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\">\\'</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">s guide to idiomatic and testable code\",</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">       \"author\": \"Inanc Gumus\",</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">       \"year\": 2021</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">     }</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-create-book-558ii.png\" alt=\"Create a book\"></p>\n<h3 id=\"get-the-list-of-books\">Get the list of books</h3>\n<p>Use the <code>GET</code> method to get the list of existing books in the database.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/books</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-list-books-7y7qi.png\" alt=\"List of books\"></p>\n<h3 id=\"get-a-book-endpoint\">Get a book endpoint</h3>\n<p>Use the <code>GET</code> method and add the ID to get the details of an existing book.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/book/3</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-get-book-mhlxj.png\" alt=\"Get a book\"></p>\n<h3 id=\"update-a-book-endpoint\">Update a book endpoint</h3>\n<p>Use the <code>PUT</code> method and specify the ID and the data to update an existing book.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#BD93F9\"> --request</span><span style=\"color:#F1FA8C\"> PUT</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/book/3</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">    --header</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Content-Type: application/json</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">    --data</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">{</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">        \"title\": \"Go by Example: Programmer</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\">\\'</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">s guide to idiomatic and testable code - Updated\",</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">        \"author\": \"Inanc Gumus\",</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">        \"year\": 2023</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    }</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-update-book-1b5k2.png\" alt=\"Updated a book\"></p>\n<h3 id=\"delete-a-book-1\">Delete a book</h3>\n<p>Make a <code>DELETE</code> request with an already created book ID.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#BD93F9\"> --request</span><span style=\"color:#F1FA8C\"> DELETE</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/book/3</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-delete-book-t325s.png\" alt=\"Delete a book.\"></p>\n<p>You can also query your Neon database to see the latest changes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/neon-list-changes-mbxz0.png\" alt=\"Neon database\"></p>\n<h2 id=\"step-5-unit-testing-the-api-handler-functions\">Step 5: Unit testing the API handler functions</h2>\n<p>Go comes with a testing package that makes it easy to write unit tests, integration tests, functional tests, and end-to-end tests. To begin, create a <code>tests/main_test.go</code> file and add the code snippet below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> tests</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">bytes</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">encoding/json</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">go_book_api/api</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/driver/sqlite</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/gorm</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">net/http</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">net/http/httptest</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">strconv</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">testing</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> setupTestDB</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#8BE9FD;font-style:italic\">error</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tapi.DB, err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> gorm.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(sqlite.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">:memory:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">), </span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">gorm</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Config</span><span style=\"color:#F8F8F2\">{})</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tpanic</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">failed to connect test database</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tapi.DB.</span><span style=\"color:#50FA7B\">AutoMigrate</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{})</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> addBook</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{Title: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Go Programming</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Author: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Year: </span><span style=\"color:#BD93F9\">2023</span><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tapi.DB.</span><span style=\"color:#50FA7B\">Create</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> book</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The snippet above creates helper functions <code>setupTestDB</code> and <code>addBook</code>, which initialize a new SQLite in-memory database (<code>:memory:</code> ) specifically for testing purposes and insert a new book record into the test database, respectively.</p>\n<blockquote>\n<p>Ending the test name with <code>_test.go</code> is a standard naming convention in the Go ecosystem.</p>\n</blockquote>\n<h3 id=\"create-a-new-book-unit-test\">Create a new book unit test</h3>\n<p>Create a <code>TestCreateBook</code> test function that sets up a mock HTTP server using Gin, sends a POST request to create a book, and checks that the response matches the expected outcome and the HTTP status code defined in the <code>CreateBook</code> handler.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestCreateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.CreateBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tTitle: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Demo Book name</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Author: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Demo Author name</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Year: </span><span style=\"color:#BD93F9\">2021</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjsonValue, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> json.</span><span style=\"color:#50FA7B\">Marshal</span><span style=\"color:#F8F8F2\">(book)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">POST</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, bytes.</span><span style=\"color:#50FA7B\">NewBuffer</span><span style=\"color:#F8F8F2\">(jsonValue))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusCreated {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusCreated, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Data </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected book data, got nil</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"get-the-list-of-books-unit-test\">Get the list of books unit test</h3>\n<p>Similar to the <code>TestCreateBook</code> test function, create a <code>TestGetBooks</code> that tests the <code>GetBooks</code> handler functionality of retrieving a list of books via a GET request.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestGetBooks</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\taddBook</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/books</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBooks)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">GET</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/books</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusOK, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(response.Data.([]</span><span style=\"color:#FF79C6\">interface</span><span style=\"color:#F8F8F2\">{})) </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected non-empty books list</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"get-a-book-unit-test\">Get a book unit test</h3>\n<p>Create a <code>TestGetBook</code> test function that tests the <code>GetBook</code> handler functionality of retrieving a single book that matches the specified ID via a GET request.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestGetBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> addBook</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">GET</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#F8F8F2\">strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">(book.ID)), </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusOK, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Data </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> response.Data.(</span><span style=\"color:#FF79C6\">map</span><span style=\"color:#F8F8F2\">[</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#FF79C6\">interface</span><span style=\"color:#F8F8F2\">{})[</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#8BE9FD;font-style:italic\"> float64</span><span style=\"color:#F8F8F2\">(book.ID) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected book ID </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got nil or wrong ID</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, book.ID)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"update-a-book-unit-test\">Update a book unit test</h3>\n<p>Create a <code>TestUpdateBook</code> test function that tests the <code>UpdateBook</code> handler functionality of updating an existing book through a PUT request.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestUpdateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> addBook</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">PUT</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.UpdateBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tupdateBook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tTitle: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Advanced Go Programming</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Author: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Demo Author name</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Year: </span><span style=\"color:#BD93F9\">2021</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjsonValue, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> json.</span><span style=\"color:#50FA7B\">Marshal</span><span style=\"color:#F8F8F2\">(updateBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">PUT</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#F8F8F2\">strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">(book.ID)), bytes.</span><span style=\"color:#50FA7B\">NewBuffer</span><span style=\"color:#F8F8F2\">(jsonValue))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusOK, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Data </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> response.Data.(</span><span style=\"color:#FF79C6\">map</span><span style=\"color:#F8F8F2\">[</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#FF79C6\">interface</span><span style=\"color:#F8F8F2\">{})[</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">title</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Advanced Go Programming</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected updated book title 'Advanced Go Programming', got </span><span style=\"color:#BD93F9\">%v</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, response.Data)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"delete-a-book-unit-test\">Delete a book unit test</h3>\n<p>Create a <code>TestDeleteBook</code> test function that tests the <code>DeleteBook</code> handler functionality of deleting an existing book through a DELETE request.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestDeleteBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> addBook</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">DELETE</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.DeleteBook)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">DELETE</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#F8F8F2\">strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">(book.ID)), </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusOK, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Message </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Book deleted successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected delete message 'Book deleted successfully', got </span><span style=\"color:#BD93F9\">%v</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, response.Message)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t//verify that the book was deleted</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> deletedBook </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tresult </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> api.DB.</span><span style=\"color:#50FA7B\">First</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">deletedBook, book.ID)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> result.Error </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected book to be deleted, but it still exists</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Finally, you can run your test in the development environment using the command below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#BD93F9\">GIN_MODE</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F1FA8C\">release</span><span style=\"color:#50FA7B\"> go</span><span style=\"color:#F1FA8C\"> test</span><span style=\"color:#F1FA8C\"> tests/main_test.go</span><span style=\"color:#BD93F9\"> -v</span></span></code></pre>\n<blockquote>\n<p><code>GIN_MODE=release</code> is a command in Gin that tells it to mimic the production environment and run the test in an optimized mode.</p>\n</blockquote>\n<p><img src=\"https://assets.roadmap.sh/guest/running-the-test-nd189.png\" alt=\"running the test\"></p>\n<h2 id=\"adding-authentication-to-the-rest-apis\">Adding authentication to the REST APIs</h2>\n<p>An integral part of building a robust API is the authentication mechanism. It verifies the identity of a user or system using your API. When you have authentication set up in your API, you can:</p>\n<ul>\n<li>Prevent unauthorized access to sensitive resources or data.</li>\n<li>Control the level of access.</li>\n<li>Track and log who accessed the API and what actions they performed.</li>\n<li>Tailored responses or experiences for authenticated users.</li>\n</ul>\n<p>In Go, you can implement authentication using any of the following methods:</p>\n<ul>\n<li>JSON Web Tokens (JWT).</li>\n<li>OAuth 2.0.</li>\n<li>Session-based authentication.</li>\n<li>API Keys.</li>\n</ul>\n<p>For this project, you’ll use JWT (JSON Web Tokens) to secure the API. The process begins with a user providing their credentials, such as a username and password. The system then verifies these credentials and issues a token, which the user can use to access protected endpoints.</p>\n<p>To get started, install the JWT package.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> github.com/golang-jwt/jwt/v5</span></span></code></pre>\n<h3 id=\"create-a-middleware\">Create a middleware</h3>\n<p>Middlewares are functions or modules that intercept and process HTTP requests before they reach the final route handler or after the response leaves the handler. In this case, you want to check that the request has the right token before accessing any of the endpoints.</p>\n<p>To do this, first update your <code>.env</code> file with a secret token. The token ensures the security, authenticity, and integrity of the tokens.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>SECRET_TOKEN=&#x3C;REPLACE WITH A RANDOM LONG STRING></span></span></code></pre>\n<p>Next, create a <code>middleware.go</code> file inside the <code>api</code> folder and add the snippet below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">fmt</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/golang-jwt/jwt/v5</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">net/http</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">os</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Secret key for signing JWT</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">var</span><span style=\"color:#F8F8F2\"> jwtSecret </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">(os.</span><span style=\"color:#50FA7B\">Getenv</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">SECRET_TOKEN</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> JWTAuthMiddleware</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">HandlerFunc</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#FF79C6\"> func</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\ttokenString </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">GetHeader</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Authorization</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#F8F8F2\"> tokenString </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#E9F284\"> \"\"</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusUnauthorized, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Authorization token required</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tc.</span><span style=\"color:#50FA7B\">Abort</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t// parse and validate the token</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t_, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> jwt.</span><span style=\"color:#50FA7B\">Parse</span><span style=\"color:#F8F8F2\">(tokenString, </span><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">token</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">jwt</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Token</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">interface</span><span style=\"color:#F8F8F2\">{}, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t\t// Validate the signing method</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\tif</span><span style=\"color:#F8F8F2\"> _, ok </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> token.Method.(</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">jwt</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">SigningMethodHMAC</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#FF79C6\">!</span><span style=\"color:#F8F8F2\">ok {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, fmt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">unexpected signing method: </span><span style=\"color:#BD93F9\">%v</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, token.Header[</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">alg</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\treturn</span><span style=\"color:#F8F8F2\"> jwtSecret, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t})</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusUnauthorized, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tc.</span><span style=\"color:#50FA7B\">Abort</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t// Token is valid, proceed to the next handler</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tc.</span><span style=\"color:#50FA7B\">Next</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The snippet above creates a <code>JWTAuthMiddleware</code> function that uses the JWT package to intercept incoming requests and validate their JWT tokens before allowing the request to proceed to the handler.</p>\n<p>Next, update the <code>handlers.go</code> file with a <code>GenerateJWT</code> function that generates a JWT token-based default username and password.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t//other imports</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/golang-jwt/jwt/v5</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> GenerateJWT</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> loginRequest </span><span style=\"color:#8BE9FD;font-style:italic\">LoginRequest</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">ShouldBindJSON</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">loginRequest); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusBadRequest, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid request payload</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> loginRequest.Username </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> loginRequest.Password </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">password</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusUnauthorized, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid credentials</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\texpirationTime </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> time.</span><span style=\"color:#50FA7B\">Now</span><span style=\"color:#F8F8F2\">().</span><span style=\"color:#50FA7B\">Add</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">15</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#F8F8F2\"> time.Minute)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttoken </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> jwt.</span><span style=\"color:#50FA7B\">NewWithClaims</span><span style=\"color:#F8F8F2\">(jwt.SigningMethodHS256, </span><span style=\"color:#8BE9FD;font-style:italic\">jwt</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">MapClaims</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">exp</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: expirationTime.</span><span style=\"color:#50FA7B\">Unix</span><span style=\"color:#F8F8F2\">(),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t})</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// Sign the token</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttokenString, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> token.</span><span style=\"color:#50FA7B\">SignedString</span><span style=\"color:#F8F8F2\">(jwtSecret)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusInternalServerError, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Could not generate token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Token generated successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">H</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: tokenString})</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<blockquote>\n<p>In a real-world application, the credentials used to generate the token will be specific to users and not the default ones.</p>\n</blockquote>\n<p>Lastly, update the <code>main.go</code> file inside the <code>cmd</code> folder to add a public route to generate a token and use the middleware to protect the API routes.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">go_book_api/api</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tapi.</span><span style=\"color:#50FA7B\">InitDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// Public routes</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GenerateJWT)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// protected routes</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tprotected </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> r.</span><span style=\"color:#50FA7B\">Group</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.</span><span style=\"color:#50FA7B\">JWTAuthMiddleware</span><span style=\"color:#F8F8F2\">())</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tprotected.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.CreateBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tprotected.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/books</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBooks)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tprotected.</span><span style=\"color:#50FA7B\">GET</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GetBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tprotected.</span><span style=\"color:#50FA7B\">PUT</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.UpdateBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tprotected.</span><span style=\"color:#50FA7B\">DELETE</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book/:id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.DeleteBook)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tr.</span><span style=\"color:#50FA7B\">Run</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">:8080</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h2 id=\"testing-the-rest-api\">Testing the REST API</h2>\n<p>If you restart the server and make a request to any of the endpoints without a token, you’ll get unauthorized.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/books</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-test-rest-api-7711y.png\" alt=\"Request without a Token\"></p>\n<p>To test the API with a token, make a request to the token generation endpoint.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/token</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">    --header</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Content-Type: application/json</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">    --data</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">{</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      \"username\": \"admin\",</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      \"password\": \"password\"</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    }</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-create-token-x6yro.png\" alt=\"\"></p>\n<p>Then, use the generated token to make a request.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">curl</span><span style=\"color:#BD93F9\"> --location</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">localhost:8080/books</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">     --header</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzM3MDU3Njl9.ULspm6GR9Q0zqZWHifdFEeLZqgtw7k2FDDhSOpwcw4U</span><span style=\"color:#E9F284\">'</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-listing-books-aukjh.png\" alt=\"\"></p>\n<h2 id=\"updating-the-unit-test\">Updating the unit test</h2>\n<p>Since the API route is now protected, you also need to update the unit test to capture the authentication mechanism.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> tests</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// other imports</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/golang-jwt/jwt/v5</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">var</span><span style=\"color:#F8F8F2\"> jwtSecret </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">(os.</span><span style=\"color:#50FA7B\">Getenv</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">SECRET_TOKEN</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> setupTestDB</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// setupTestDB goes here</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> addBook</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// add book code goes here</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> generateValidToken</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\texpirationTime </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> time.</span><span style=\"color:#50FA7B\">Now</span><span style=\"color:#F8F8F2\">().</span><span style=\"color:#50FA7B\">Add</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">15</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#F8F8F2\"> time.Minute)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttoken </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> jwt.</span><span style=\"color:#50FA7B\">NewWithClaims</span><span style=\"color:#F8F8F2\">(jwt.SigningMethodHS256, </span><span style=\"color:#8BE9FD;font-style:italic\">jwt</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">MapClaims</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">exp</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: expirationTime.</span><span style=\"color:#50FA7B\">Unix</span><span style=\"color:#F8F8F2\">(),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t})</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttokenString, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> token.</span><span style=\"color:#50FA7B\">SignedString</span><span style=\"color:#F8F8F2\">(jwtSecret)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> tokenString</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestGenerateJWT</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.GenerateJWT)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tloginRequest </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> map</span><span style=\"color:#F8F8F2\">[</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">username</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">password</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">password</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjsonValue, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> json.</span><span style=\"color:#50FA7B\">Marshal</span><span style=\"color:#F8F8F2\">(loginRequest)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">POST</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, bytes.</span><span style=\"color:#50FA7B\">NewBuffer</span><span style=\"color:#F8F8F2\">(jsonValue))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusOK, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Data </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> response.Data.(</span><span style=\"color:#FF79C6\">map</span><span style=\"color:#F8F8F2\">[</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#FF79C6\">interface</span><span style=\"color:#F8F8F2\">{})[</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">token</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#E9F284\"> \"\"</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected token in response, got nil or empty</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The snippet above imports the required dependency, creates a <code>generateValidToken</code> helper and <code>TestGenerateJWT</code> function that generates a token and tests the token generation endpoint, respectively.</p>\n<p>Next, use the <code>generateValidToken</code> helper function to modify the request object for each test by adding authentication to the route, generating a token, and adding it to the request header. For example, the test for creating a book will look like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> TestCreateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">t</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">testing</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">T</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tsetupTestDB</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> gin.</span><span style=\"color:#50FA7B\">Default</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tprotected </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> router.</span><span style=\"color:#50FA7B\">Group</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.</span><span style=\"color:#50FA7B\">JWTAuthMiddleware</span><span style=\"color:#F8F8F2\">()) </span><span style=\"color:#6272A4\">// add</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tprotected.</span><span style=\"color:#50FA7B\">POST</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, api.CreateBook)                 </span><span style=\"color:#6272A4\">// add</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttoken </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> generateValidToken</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#6272A4\">// add</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbook </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tTitle: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Demo Book name</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Author: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Demo Author name</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, Year: </span><span style=\"color:#BD93F9\">2021</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjsonValue, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> json.</span><span style=\"color:#50FA7B\">Marshal</span><span style=\"color:#F8F8F2\">(book)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq, _ </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> http.</span><span style=\"color:#50FA7B\">NewRequest</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">POST</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">/book</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, bytes.</span><span style=\"color:#50FA7B\">NewBuffer</span><span style=\"color:#F8F8F2\">(jsonValue))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\treq.Header.</span><span style=\"color:#50FA7B\">Set</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Authorization</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, token) </span><span style=\"color:#6272A4\">// add</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> httptest.</span><span style=\"color:#50FA7B\">NewRecorder</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trouter.</span><span style=\"color:#50FA7B\">ServeHTTP</span><span style=\"color:#F8F8F2\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> status </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> w.Code; status </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#F8F8F2\"> http.StatusCreated {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected status </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\">, got </span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, http.StatusCreated, status)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#8BE9FD;font-style:italic\">api</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">JsonResponse</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tjson.</span><span style=\"color:#50FA7B\">NewDecoder</span><span style=\"color:#F8F8F2\">(w.Body).</span><span style=\"color:#50FA7B\">Decode</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">response)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> response.Data </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Expected book data, got nil</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h2 id=\"adding-documentation-to-the-rest-apis\">Adding documentation to the REST APIs</h2>\n<p>Documentation is an integral part of your APIs. It helps you communicate intent and help others understand, maintain, and utilize your APIs effectively. Documentation can be in the form of the following:</p>\n<ul>\n<li><strong>Technical documentation</strong> that guides developers on APIs, configurations, and architecture of the system.</li>\n<li><strong>User manual</strong> that helps end-users understand how to use the product.</li>\n<li><strong>Internal documentation</strong> that captures internal processes, workflows, and other operational details.</li>\n<li><strong>Code comments</strong> that provide inline explanations of specific sections of the codes.</li>\n</ul>\n<p>In Go, you have access to a variety of tools when it comes to generating, maintaining, and displaying documentation. Below are some of the widely used ones:</p>\n<ul>\n<li>GoDoc</li>\n<li>pkg.go.dev</li>\n<li>go doc</li>\n<li>godocdown</li>\n<li>Swagger/OpenAPI</li>\n</ul>\n<p>In this project, you’ll use GoDoc to add documentation.</p>\n<p>To get started, first update the <a href=\"https://go.dev/dl/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Go version</a> based on your operating system. Then, install the GoDoc package using the command below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">go</span><span style=\"color:#F1FA8C\"> get</span><span style=\"color:#F1FA8C\"> golang.org/x/tools/cmd/godoc</span></span></code></pre>\n<p>Next, modify the <code>handlers.rs</code> file and add comments to describe what each helper function and handlers do.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">/*</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">Package api provides RESTful handlers and middleware for managing a library of books.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">It includes functionality for creating, reading, updating, and deleting books, as well as generating JWT tokens for authentication.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">*/</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> api</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/gin-gonic/gin</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/golang-jwt/jwt/v5</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/joho/godotenv</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/driver/postgres</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">gorm.io/gorm</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">log</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">net/http</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">os</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">time</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">var</span><span style=\"color:#F8F8F2\"> DB </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">gorm</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">DB</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// InitDB initializes the database connection using environment variables.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// It loads the database configuration from a .env file and migrates the Book schema.</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> InitDB</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> godotenv.</span><span style=\"color:#50FA7B\">Load</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to connect to database:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tdsn </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.</span><span style=\"color:#50FA7B\">Getenv</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">DB_URL</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB, err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> gorm.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(postgres.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(dsn), </span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">gorm</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Config</span><span style=\"color:#F8F8F2\">{})</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to connect to database:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// Migrate the schema</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> DB.</span><span style=\"color:#50FA7B\">AutoMigrate</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span><span style=\"color:#F8F8F2\">{}); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Failed to migrate schema:</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// CreateBook handles the creation of a new book in the database.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// It expects a JSON payload with book details and responds with the created book.</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> CreateBook</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> book </span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">ShouldBindJSON</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book); err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\t\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusBadRequest, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Invalid input</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB.</span><span style=\"color:#50FA7B\">Create</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">book)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusCreated, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Book created successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, book)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// GetBooks retrieves all books from the database.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// It responds with a list of books.</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> GetBooks</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">gin</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Context</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tvar</span><span style=\"color:#F8F8F2\"> books []</span><span style=\"color:#8BE9FD;font-style:italic\">Book</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tDB.</span><span style=\"color:#50FA7B\">Find</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">books)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tResponseJSON</span><span style=\"color:#F8F8F2\">(c, http.StatusOK, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Books retrieved successfully</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, books)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// other handlers goes below</span></span></code></pre>\n<p>Finally, test the documentation by running the command below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">godoc</span><span style=\"color:#BD93F9\"> -http=:6060</span></span></code></pre>\n<p>Open your browser and navigate to the documentation URL:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">http://localhost:6060/pkg/go_book_api/api/</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/golang-package-docs-el1vi.png\" alt=\"Book API documentation\"></p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>Go’s simplicity, built-in concurrency, cloud-native features, and performance make it a popular choice among developers. The growing ecosystem and community support also ensure that you have the right tools and libraries to build and maintain RESTful APIs efficiently and any other application you want to build.</p>\n<p>Apart from the Gin framework, Go also has popular web frameworks like Echo, Revel, and many more for building APIs. To stay up-to-date with the latest changes, check out the <a href=\"https://roadmap.sh/golang\" target=\"_blank\">Go roadmap</a>.</p>";

				const frontmatter$z = {"title":"How to Build a Rest API in Golang (Detailed Tutorial)","description":"Want to build a REST API in Golang? Follow our detailed tutorial to set up, code, and deploy your API with best practices and clear examples.","authorId":"william","excludedBySlug":"/golang/rest-api","seo":{"title":"How to Build a Rest API in Golang (Detailed Tutorial)","description":"Want to build a REST API in Golang? Follow our detailed tutorial to set up, code, and deploy your API with best practices and clear examples.","ogImageUrl":"https://assets.roadmap.sh/guest/build-a-rest-api-in-golang-k3zuq.jpg"},"relatedGuidesTitle":"Other Guides","isNew":false,"type":"textual","date":"2025-01-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$z = "/workspace/src/data/guides/golang-rest-api.md";
				const url$z = undefined;
				function rawContent$z() {
					return "   \n                                                              \n                                                                                                                                                            \n                 \n                                  \n    \n                                                                \n                                                                                                                                                              \n                                                                                    \n                                  \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How to Build a Rest API in Golang](https://assets.roadmap.sh/guest/build-a-rest-api-in-golang-k3zuq.jpg)\n\nBuilding a REST API in [Go](https://roadmap.sh/golang) offers a blend of high performance, ease of deployment, and scalability. Go’s efficient runtime and built-in concurrency model make it an ideal choice for building applications that handle large volumes of requests while still maintaining low latency. With a robust standard library and supportive ecosystem, you can quickly implement REST functionality into your applications.\n\nSince its official release in 2009, Go has gained massive adoption and is gradually becoming the go-to technology for building applications, from small-scale to mission-critical systems. Its adoption surged even further when industry leaders used it to power containerization and orchestration tools like [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes). Whether you’re building a small service or a mission-critical application, Go provides a powerful foundation for REST API development.\n\nGiven these advantages, let's put Go's capabilities into practice. In this guide, you will build a basic bookkeeping management API that supports create, read, update, and delete (CRUD) functionalities. You’ll also write unit tests for these functionalities to ensure they work as intended, implement authentication to secure the APIs, and create comprehensive documentation.\n\nLet’s get started building the application.\n\n## Step 1: Project set up\n\nTo get started, use your terminal to create a project directory.\n\n```bash\nmkdir go_book_api && cd go_book_api\n```\n\nThese commands create a directory called `go_book_api` and navigate into it.\n\nNext, initialize a [Go module](https://go.dev/doc/tutorial/create-module) within the project.\n\n```bash\ngo mod init go_book_api\n```\n\nThis command creates a `go.mod` file for tracking the project dependencies.\n\nFinally, install the required dependencies.\n\n```bash\ngo get -u github.com/gin-gonic/gin\ngo get -u gorm.io/gorm\ngo get -u gorm.io/driver/postgres\ngo get -u gorm.io/driver/sqlite\ngo get -u github.com/joho/godotenv\n```\n\nLet’s look at what these dependencies are and what they are used for:\n\n[Gin](https://gin-gonic.com/) is a framework for building web applications.\n\n[Gorm](https://gorm.io/docs/index.html) is a Go-based Object Relational Mapper (ORM). ORMs make it easy to query and manipulate data from a database. The installation also includes both [Postgres](https://github.com/go-gorm/postgres) and [SQLite](https://github.com/go-gorm/sqlite) drivers. You’ll use the Postgres driver to interact with your application data, while SQLite will mock your database interaction when writing unit tests.\n\n[godotenv](https://github.com/joho/godotenv) is a library for loading environment variables.\n\n**Set up the project database**\nTo save your API data, you need to set up your project database on [Neon](https://console.neon.tech/realms/prod-realm/protocol/openid-connect/registrations?client_id=neon-console&redirect_uri=https%3A%2F%2Fconsole.neon.tech%2Fauth%2Fkeycloak%2Fcallback&response_type=code&scope=openid+profile+email&state=FB3kotT4P_2z1eLKxJJvkA%3D%3D%2C%2C%2C). Neon is a fully managed serverless PostgreSQL database with a generous free tier you can start with.\n\nTo set up your database, log into your [Neon console](https://console.neon.tech/app/projects) and create a project.\n\n![Set up a project](https://assets.roadmap.sh/guest/neon-create-project-i4u20.png)\n\nOn successful creation of the project, copy the database URL.\n\n![Copy database URL](https://assets.roadmap.sh/guest/neon-successful-project-r4jiw.png)\n\n> Alternatively, you can use any managed Postgres service or a local Postgres instance.\n\nLastly, create `.env` in your project directly and add the copied database URL.\n\n```bash\nDB_URL=<REPLACE THIS WITH YOUR DATABASE URL>\n```\n\n## Step 2: Structuring the project\n\nWhile Go doesn’t enforce how you should structure your project, it is essential you have a good structure when building an application with Go. It makes your codebase easy to maintain and clear for others to understand.\n\nTo structure your project, create an `api`, `cmd`, and `tests` folders.\n\n`api` is for organizing API development-related files.\n`cmd` is used to organize the application entry point. This is a convention within the Go community.\n`tests` are for organizing unit tests.\n\n## Step 3: Implement CRUD operations for the bookkeeping application\n\nCreate an `api/model.go` file to structure the application’s data and response.\n\n```go\npackage api\n\nimport \"github.com/gin-gonic/gin\"\n\ntype Book struct {\n\tID     uint   `json:\"id\" gorm:\"primaryKey\"`\n\tTitle  string `json:\"title\"`\n\tAuthor string `json:\"author\"`\n\tYear   int    `json:\"year\"`\n}\n\ntype JsonResponse struct {\n\tStatus  int    `json:\"status\"`\n\tMessage string `json:\"message\"`\n\tData    any    `json:\"data\"`\n}\n\nfunc ResponseJSON(c *gin.Context, status int, message string, data any) {\n\tresponse := JsonResponse{\n\t\tStatus:  status,\n\t\tMessage: message,\n\t\tData:    data,\n\t}\n\n\tc.JSON(status, response)\n}\n```\n\nThe code snippet above creates a `Book` and `JsonResponse` structs with the required properties using struct tags (e.g., `json:\"title\"`) and a helper function `ResponseJSON` to manage API responses.\n\n> The struct tag lets you send responses that fit into the JSON naming convention.\n\n### Create a new book\n\nTo create a new book handler function, create an `api/handlers.go` file that will contain the application business logic. It’s important to separate the business logic from the data model, as it helps deliver scalable, maintainable, and testable code.\n\n```go\npackage api\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/joho/godotenv\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nvar DB *gorm.DB\n\nfunc InitDB() {\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to connect to database:\", err)\n\t}\n\n\tdsn := os.Getenv(\"DB_URL\")\n\tDB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to connect to database:\", err)\n\t}\n\n\t// migrate the schema\n\tif err := DB.AutoMigrate(&Book{}); err != nil {\n\t\tlog.Fatal(\"Failed to migrate schema:\", err)\n\t}\n}\n\nfunc CreateBook(c *gin.Context) {\n\tvar book Book\n\n\t//bind the request body\n\tif err := c.ShouldBindJSON(&book); err != nil {\n\t\tResponseJSON(c, http.StatusBadRequest, \"Invalid input\", nil)\n\t\treturn\n\t}\n\tDB.Create(&book)\n\tResponseJSON(c, http.StatusCreated, \"Book created successfully\", book)\n}\n```\n\nThe code snippet declares a global variable `DB` that holds the database connection and is then initialized inside the `InitDB` function. The `InitDB` function loads the environment variable to connect to the database and performs automatic schema migration. Finally, create a `CreateBook` handler that uses the `DB` variable to create a new book, handle errors, and return the appropriate response using the `ResponseJSON` helper.\n\n> When a function, type, or variable is declared with an initial capital letter, it is **exported**. This means it is visible and can be accessed by other packages.\n\n### Getting the list of books\n\nTo retrieve the list of books, create a `GetBooks` handler that uses the `DB` variable to get the list of available books inside the database.\n\n```go\nfunc GetBooks(c *gin.Context) {\n\tvar books []Book\n\tDB.Find(&books)\n\tResponseJSON(c, http.StatusOK, \"Books retrieved successfully\", books)\n}\n```\n\n### Get a single book\n\nTo retrieve a book, create a `GetBook` handler that uses the `DB` variable to get a book matching the specified ID and returns the appropriate response.\n\n```go\nfunc GetBook(c *gin.Context) {\n\tvar book Book\n\tif err := DB.First(&book, c.Param(\"id\")).Error; err != nil {\n\t\tResponseJSON(c, http.StatusNotFound, \"Book not found\", nil)\n\t\treturn\n\t}\n\tResponseJSON(c, http.StatusOK, \"Book retrieved successfully\", book)\n}\n```\n\n### Update a book\n\nTo update a book, create an `UpdateBook` handler that uses the `DB` variable to get a book matching the specified ID, updates it, and returns the appropriate response.\n\n```go\nfunc UpdateBook(c *gin.Context) {\n\tvar book Book\n\tif err := DB.First(&book, c.Param(\"id\")).Error; err != nil {\n\t\tResponseJSON(c, http.StatusNotFound, \"Book not found\", nil)\n\t\treturn\n\t}\n\n\t// bind the request body\n\tif err := c.ShouldBindJSON(&book); err != nil {\n\t\tResponseJSON(c, http.StatusBadRequest, \"Invalid input\", nil)\n\t\treturn\n\t}\n\n\tDB.Save(&book)\n\tResponseJSON(c, http.StatusOK, \"Book updated successfully\", book)\n}\n```\n\n### Delete a book\n\nTo delete a book, create a `DeleteBook` handler that uses the `DB` variable to get a book matching the specified ID, deletes it, and returns the appropriate response.\n\n```go\nfunc DeleteBook(c *gin.Context) {\n\tvar book Book\n\tif err := DB.Delete(&book, c.Param(\"id\")).Error; err != nil {\n\t\tResponseJSON(c, http.StatusNotFound, \"Book not found\", nil)\n\t\treturn\n\t}\n\tResponseJSON(c, http.StatusOK, \"Book deleted successfully\", nil)\n}\n```\n\n### Putting it all together\n\nWith the handlers set up, you need to create the application entry point and specify the application routes. To do this, create a `cmd/main.go` file and add the code snippet below:\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go_book_api/api\"\n)\n\nfunc main() {\n\tapi.InitDB()\n\tr := gin.Default()\n\n\t//routes\n\tr.POST(\"/book\", api.CreateBook)\n\tr.GET(\"/books\", api.GetBooks)\n\tr.GET(\"/book/:id\", api.GetBook)\n\tr.PUT(\"/book/:id\", api.UpdateBook)\n\tr.DELETE(\"/book/:id\", api.DeleteBook)\n\n\tr.Run(\":8080\")\n}\n```\n\nThe snippet above creates a `main` function that initializes the database, specifies the routes with the associated handlers, and runs the application on port `8080`.\n\n## Step 4: Testing the REST APIs\n\nTo test the APIs, you need a [Postman](https://www.postman.com/downloads/) or any API testing application of your choice.\n\nIn your terminal, start the development server by running the command.\n\n```bash\ngo run cmd/main.go\n```\n\nThen, use the API testing client of your choice to test out the endpoints as shown below:\n\n### Create a book endpoint\n\nUse the `POST` method and pass in the required data to create a new book.\n\n```bash\ncurl --location 'localhost:8080/book' \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n       \"title\": \"Go by Example: Programmer'\\''s guide to idiomatic and testable code\",\n       \"author\": \"Inanc Gumus\",\n       \"year\": 2021\n     }'\n```\n\n![Create a book](https://assets.roadmap.sh/guest/postman-create-book-558ii.png)\n\n### Get the list of books\n\nUse the `GET` method to get the list of existing books in the database.\n\n```bash\ncurl --location 'localhost:8080/books'\n```\n\n![List of books](https://assets.roadmap.sh/guest/postman-list-books-7y7qi.png)\n\n### Get a book endpoint\n\nUse the `GET` method and add the ID to get the details of an existing book.\n\n```bash\ncurl --location 'localhost:8080/book/3'\n```\n\n![Get a book](https://assets.roadmap.sh/guest/postman-get-book-mhlxj.png)\n\n### Update a book endpoint\n\nUse the `PUT` method and specify the ID and the data to update an existing book.\n\n```bash\ncurl --location --request PUT 'localhost:8080/book/3' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\n        \"title\": \"Go by Example: Programmer'\\''s guide to idiomatic and testable code - Updated\",\n        \"author\": \"Inanc Gumus\",\n        \"year\": 2023\n    }'\n```\n\n![Updated a book](https://assets.roadmap.sh/guest/postman-update-book-1b5k2.png)\n\n### Delete a book\n\nMake a `DELETE` request with an already created book ID.\n\n```bash\ncurl --location --request DELETE 'localhost:8080/book/3'\n```\n\n![Delete a book.](https://assets.roadmap.sh/guest/postman-delete-book-t325s.png)\n\nYou can also query your Neon database to see the latest changes.\n\n![Neon database](https://assets.roadmap.sh/guest/neon-list-changes-mbxz0.png)\n\n## Step 5: Unit testing the API handler functions\n\nGo comes with a testing package that makes it easy to write unit tests, integration tests, functional tests, and end-to-end tests. To begin, create a `tests/main_test.go` file and add the code snippet below:\n\n```go\npackage tests\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"github.com/gin-gonic/gin\"\n\t\"go_book_api/api\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strconv\"\n\t\"testing\"\n)\n\nfunc setupTestDB() {\n\tvar err error\n\tapi.DB, err = gorm.Open(sqlite.Open(\":memory:\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect test database\")\n\t}\n\tapi.DB.AutoMigrate(&api.Book{})\n}\n\nfunc addBook() api.Book {\n\tbook := api.Book{Title: \"Go Programming\", Author: \"John Doe\", Year: 2023}\n\tapi.DB.Create(&book)\n\treturn book\n}\n```\n\nThe snippet above creates helper functions `setupTestDB` and `addBook`, which initialize a new SQLite in-memory database (`:memory:` ) specifically for testing purposes and insert a new book record into the test database, respectively.\n\n> Ending the test name with `_test.go` is a standard naming convention in the Go ecosystem.\n\n### Create a new book unit test\n\nCreate a `TestCreateBook` test function that sets up a mock HTTP server using Gin, sends a POST request to create a book, and checks that the response matches the expected outcome and the HTTP status code defined in the `CreateBook` handler.\n\n```go\nfunc TestCreateBook(t *testing.T) {\n\tsetupTestDB()\n\trouter := gin.Default()\n\trouter.POST(\"/book\", api.CreateBook)\n\n\tbook := api.Book{\n\t\tTitle: \"Demo Book name\", Author: \"Demo Author name\", Year: 2021,\n\t}\n\n\tjsonValue, _ := json.Marshal(book)\n\treq, _ := http.NewRequest(\"POST\", \"/book\", bytes.NewBuffer(jsonValue))\n\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusCreated {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusCreated, status)\n\t}\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Data == nil {\n\t\tt.Errorf(\"Expected book data, got nil\")\n\t}\n}\n```\n\n### Get the list of books unit test\n\nSimilar to the `TestCreateBook` test function, create a `TestGetBooks` that tests the `GetBooks` handler functionality of retrieving a list of books via a GET request.\n\n```go\nfunc TestGetBooks(t *testing.T) {\n\tsetupTestDB()\n\taddBook()\n\trouter := gin.Default()\n\trouter.GET(\"/books\", api.GetBooks)\n\n\treq, _ := http.NewRequest(\"GET\", \"/books\", nil)\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusOK {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusOK, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif len(response.Data.([]interface{})) == 0 {\n\t\tt.Errorf(\"Expected non-empty books list\")\n\t}\n}\n```\n\n### Get a book unit test\n\nCreate a `TestGetBook` test function that tests the `GetBook` handler functionality of retrieving a single book that matches the specified ID via a GET request.\n\n```go\nfunc TestGetBook(t *testing.T) {\n\tsetupTestDB()\n\tbook := addBook()\n\trouter := gin.Default()\n\trouter.GET(\"/book/:id\", api.GetBook)\n\n\treq, _ := http.NewRequest(\"GET\", \"/book/\"+strconv.Itoa(int(book.ID)), nil)\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusOK {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusOK, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Data == nil || response.Data.(map[string]interface{})[\"id\"] != float64(book.ID) {\n\t\tt.Errorf(\"Expected book ID %d, got nil or wrong ID\", book.ID)\n\t}\n}\n```\n\n### Update a book unit test\n\nCreate a `TestUpdateBook` test function that tests the `UpdateBook` handler functionality of updating an existing book through a PUT request.\n\n```go\nfunc TestUpdateBook(t *testing.T) {\n\tsetupTestDB()\n\tbook := addBook()\n\trouter := gin.Default()\n\trouter.PUT(\"/book/:id\", api.UpdateBook)\n\n\tupdateBook := api.Book{\n\t\tTitle: \"Advanced Go Programming\", Author: \"Demo Author name\", Year: 2021,\n\t}\n\tjsonValue, _ := json.Marshal(updateBook)\n\n\treq, _ := http.NewRequest(\"PUT\", \"/book/\"+strconv.Itoa(int(book.ID)), bytes.NewBuffer(jsonValue))\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusOK {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusOK, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Data == nil || response.Data.(map[string]interface{})[\"title\"] != \"Advanced Go Programming\" {\n\t\tt.Errorf(\"Expected updated book title 'Advanced Go Programming', got %v\", response.Data)\n\t}\n}\n```\n\n### Delete a book unit test\n\nCreate a `TestDeleteBook` test function that tests the `DeleteBook` handler functionality of deleting an existing book through a DELETE request.\n\n```go\nfunc TestDeleteBook(t *testing.T) {\n\tsetupTestDB()\n\tbook := addBook()\n\trouter := gin.Default()\n\trouter.DELETE(\"/book/:id\", api.DeleteBook)\n\n\treq, _ := http.NewRequest(\"DELETE\", \"/book/\"+strconv.Itoa(int(book.ID)), nil)\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusOK {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusOK, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Message != \"Book deleted successfully\" {\n\t\tt.Errorf(\"Expected delete message 'Book deleted successfully', got %v\", response.Message)\n\t}\n\n\t//verify that the book was deleted\n\tvar deletedBook api.Book\n\tresult := api.DB.First(&deletedBook, book.ID)\n\tif result.Error == nil {\n\t\tt.Errorf(\"Expected book to be deleted, but it still exists\")\n\t}\n}\n```\n\nFinally, you can run your test in the development environment using the command below:\n\n```bash\nGIN_MODE=release go test tests/main_test.go -v\n```\n\n> `GIN_MODE=release` is a command in Gin that tells it to mimic the production environment and run the test in an optimized mode.\n\n![running the test](https://assets.roadmap.sh/guest/running-the-test-nd189.png)\n\n## Adding authentication to the REST APIs\n\nAn integral part of building a robust API is the authentication mechanism. It verifies the identity of a user or system using your API. When you have authentication set up in your API, you can:\n\n- Prevent unauthorized access to sensitive resources or data.\n- Control the level of access.\n- Track and log who accessed the API and what actions they performed.\n- Tailored responses or experiences for authenticated users.\n\nIn Go, you can implement authentication using any of the following methods:\n\n- JSON Web Tokens (JWT).\n- OAuth 2.0.\n- Session-based authentication.\n- API Keys.\n\nFor this project, you'll use JWT (JSON Web Tokens) to secure the API. The process begins with a user providing their credentials, such as a username and password. The system then verifies these credentials and issues a token, which the user can use to access protected endpoints.\n\nTo get started, install the JWT package.\n\n```bash\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n### Create a middleware\n\nMiddlewares are functions or modules that intercept and process HTTP requests before they reach the final route handler or after the response leaves the handler. In this case, you want to check that the request has the right token before accessing any of the endpoints.\n\nTo do this, first update your `.env` file with a secret token. The token ensures the security, authenticity, and integrity of the tokens.\n\n```\nSECRET_TOKEN=<REPLACE WITH A RANDOM LONG STRING>\n```\n\nNext, create a `middleware.go` file inside the `api` folder and add the snippet below:\n\n```go\npackage api\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"net/http\"\n\t\"os\"\n)\n\n// Secret key for signing JWT\nvar jwtSecret = []byte(os.Getenv(\"SECRET_TOKEN\"))\n\nfunc JWTAuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttokenString := c.GetHeader(\"Authorization\")\n\t\tif tokenString == \"\" {\n\t\t\tResponseJSON(c, http.StatusUnauthorized, \"Authorization token required\", nil)\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\t\t// parse and validate the token\n\t\t_, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\t\t// Validate the signing method\n\t\t\tif _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {\n\t\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n\t\t\t}\n\t\t\treturn jwtSecret, nil\n\t\t})\n\t\tif err != nil {\n\t\t\tResponseJSON(c, http.StatusUnauthorized, \"Invalid token\", nil)\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\t\t// Token is valid, proceed to the next handler\n\t\tc.Next()\n\t}\n}\n```\n\nThe snippet above creates a `JWTAuthMiddleware` function that uses the JWT package to intercept incoming requests and validate their JWT tokens before allowing the request to proceed to the handler.\n\nNext, update the `handlers.go` file with a `GenerateJWT` function that generates a JWT token-based default username and password.\n\n```go\npackage api\n\nimport (\n\t//other imports\n\t\"github.com/golang-jwt/jwt/v5\"\n)\n\nfunc GenerateJWT(c *gin.Context) {\n\tvar loginRequest LoginRequest\n\tif err := c.ShouldBindJSON(&loginRequest); err != nil {\n\t\tResponseJSON(c, http.StatusBadRequest, \"Invalid request payload\", nil)\n\t\treturn\n\t}\n\tif loginRequest.Username != \"admin\" || loginRequest.Password != \"password\" {\n\t\tResponseJSON(c, http.StatusUnauthorized, \"Invalid credentials\", nil)\n\t\treturn\n\t}\n\texpirationTime := time.Now().Add(15 * time.Minute)\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n\t\t\"exp\": expirationTime.Unix(),\n\t})\n\t// Sign the token\n\ttokenString, err := token.SignedString(jwtSecret)\n\tif err != nil {\n\t\tResponseJSON(c, http.StatusInternalServerError, \"Could not generate token\", nil)\n\t\treturn\n\t}\n\tResponseJSON(c, http.StatusOK, \"Token generated successfully\", gin.H{\"token\": tokenString})\n}\n```\n\n> In a real-world application, the credentials used to generate the token will be specific to users and not the default ones.\n\nLastly, update the `main.go` file inside the `cmd` folder to add a public route to generate a token and use the middleware to protect the API routes.\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"go_book_api/api\"\n)\n\nfunc main() {\n\tapi.InitDB()\n\tr := gin.Default()\n\n\t// Public routes\n\tr.POST(\"/token\", api.GenerateJWT)\n\n\t// protected routes\n\tprotected := r.Group(\"/\", api.JWTAuthMiddleware())\n\t{\n\t\tprotected.POST(\"/book\", api.CreateBook)\n\t\tprotected.GET(\"/books\", api.GetBooks)\n\t\tprotected.GET(\"/book/:id\", api.GetBook)\n\t\tprotected.PUT(\"/book/:id\", api.UpdateBook)\n\t\tprotected.DELETE(\"/book/:id\", api.DeleteBook)\n\t}\n\n\tr.Run(\":8080\")\n}\n```\n\n## Testing the REST API\n\nIf you restart the server and make a request to any of the endpoints without a token, you’ll get unauthorized.\n\n```bash\ncurl --location 'localhost:8080/books'\n```\n\n![Request without a Token](https://assets.roadmap.sh/guest/postman-test-rest-api-7711y.png)\n\nTo test the API with a token, make a request to the token generation endpoint.\n\n```bash\ncurl --location 'localhost:8080/token' \\\n    --header 'Content-Type: application/json' \\\n    --data '{\n      \"username\": \"admin\",\n      \"password\": \"password\"\n    }'\n```\n\n![](https://assets.roadmap.sh/guest/postman-create-token-x6yro.png)\n\nThen, use the generated token to make a request.\n\n```bash\ncurl --location 'localhost:8080/books' \\\n     --header 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzM3MDU3Njl9.ULspm6GR9Q0zqZWHifdFEeLZqgtw7k2FDDhSOpwcw4U'\n``` \n\n![](https://assets.roadmap.sh/guest/postman-listing-books-aukjh.png)\n\n## Updating the unit test\n\nSince the API route is now protected, you also need to update the unit test to capture the authentication mechanism.\n\n```go\npackage tests\n\nimport (\n\t// other imports\n\t\"github.com/golang-jwt/jwt/v5\"\n)\n\nvar jwtSecret = []byte(os.Getenv(\"SECRET_TOKEN\"))\n\nfunc setupTestDB() {\n\t// setupTestDB goes here\n}\n\nfunc addBook() api.Book {\n\t// add book code goes here\n}\n\nfunc generateValidToken() string {\n\texpirationTime := time.Now().Add(15 * time.Minute)\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n\t\t\"exp\": expirationTime.Unix(),\n\t})\n\ttokenString, _ := token.SignedString(jwtSecret)\n\treturn tokenString\n}\n\nfunc TestGenerateJWT(t *testing.T) {\n\trouter := gin.Default()\n\trouter.POST(\"/token\", api.GenerateJWT)\n\n\tloginRequest := map[string]string{\n\t\t\"username\": \"admin\",\n\t\t\"password\": \"password\",\n\t}\n\n\tjsonValue, _ := json.Marshal(loginRequest)\n\treq, _ := http.NewRequest(\"POST\", \"/token\", bytes.NewBuffer(jsonValue))\n\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusOK {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusOK, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Data == nil || response.Data.(map[string]interface{})[\"token\"] == \"\" {\n\t\tt.Errorf(\"Expected token in response, got nil or empty\")\n\t}\n}\n```\n\nThe snippet above imports the required dependency, creates a `generateValidToken` helper and `TestGenerateJWT` function that generates a token and tests the token generation endpoint, respectively.\n\nNext, use the `generateValidToken` helper function to modify the request object for each test by adding authentication to the route, generating a token, and adding it to the request header. For example, the test for creating a book will look like this:\n\n```go\nfunc TestCreateBook(t *testing.T) {\n\tsetupTestDB()\n\trouter := gin.Default()\n\tprotected := router.Group(\"/\", api.JWTAuthMiddleware()) // add\n\tprotected.POST(\"/book\", api.CreateBook)                 // add\n\n\ttoken := generateValidToken() // add\n\n\tbook := api.Book{\n\t\tTitle: \"Demo Book name\", Author: \"Demo Author name\", Year: 2021,\n\t}\n\tjsonValue, _ := json.Marshal(book)\n\n\treq, _ := http.NewRequest(\"POST\", \"/book\", bytes.NewBuffer(jsonValue))\n\treq.Header.Set(\"Authorization\", token) // add\n\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\n\tif status := w.Code; status != http.StatusCreated {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusCreated, status)\n\t}\n\n\tvar response api.JsonResponse\n\tjson.NewDecoder(w.Body).Decode(&response)\n\n\tif response.Data == nil {\n\t\tt.Errorf(\"Expected book data, got nil\")\n\t}\n}\n```\n\n## Adding documentation to the REST APIs\n\nDocumentation is an integral part of your APIs. It helps you communicate intent and help others understand, maintain, and utilize your APIs effectively. Documentation can be in the form of the following:\n\n- **Technical documentation** that guides developers on APIs, configurations, and architecture of the system.\n- **User manual** that helps end-users understand how to use the product.\n- **Internal documentation** that captures internal processes, workflows, and other operational details.\n- **Code comments** that provide inline explanations of specific sections of the codes.\n\nIn Go, you have access to a variety of tools when it comes to generating, maintaining, and displaying documentation. Below are some of the widely used ones:\n\n- GoDoc\n- pkg.go.dev\n- go doc\n- godocdown\n- Swagger/OpenAPI\n\nIn this project, you’ll use GoDoc to add documentation.\n\nTo get started, first update the [Go version](https://go.dev/dl/) based on your operating system. Then, install the GoDoc package using the command below:\n\n```bash\ngo get golang.org/x/tools/cmd/godoc\n```\nNext, modify the `handlers.rs` file and add comments to describe what each helper function and handlers do.\n\n```go\n/*\nPackage api provides RESTful handlers and middleware for managing a library of books.\nIt includes functionality for creating, reading, updating, and deleting books, as well as generating JWT tokens for authentication.\n*/\npackage api\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/joho/godotenv\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar DB *gorm.DB\n\n// InitDB initializes the database connection using environment variables.\n// It loads the database configuration from a .env file and migrates the Book schema.\nfunc InitDB() {\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to connect to database:\", err)\n\t}\n\tdsn := os.Getenv(\"DB_URL\")\n\tDB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to connect to database:\", err)\n\t}\n\t// Migrate the schema\n\tif err := DB.AutoMigrate(&Book{}); err != nil {\n\t\tlog.Fatal(\"Failed to migrate schema:\", err)\n\t}\n}\n\n// CreateBook handles the creation of a new book in the database.\n// It expects a JSON payload with book details and responds with the created book.\nfunc CreateBook(c *gin.Context) {\n\tvar book Book\n\tif err := c.ShouldBindJSON(&book); err != nil {\n\t\tResponseJSON(c, http.StatusBadRequest, \"Invalid input\", nil)\n\t\treturn\n\t}\n\tDB.Create(&book)\n\tResponseJSON(c, http.StatusCreated, \"Book created successfully\", book)\n}\n\n// GetBooks retrieves all books from the database.\n// It responds with a list of books.\nfunc GetBooks(c *gin.Context) {\n\tvar books []Book\n\tDB.Find(&books)\n\tResponseJSON(c, http.StatusOK, \"Books retrieved successfully\", books)\n}\n\n// other handlers goes below\n```\n\nFinally, test the documentation by running the command below:\n\n```bash\ngodoc -http=:6060\n```\n\nOpen your browser and navigate to the documentation URL:\n\n```bash\nhttp://localhost:6060/pkg/go_book_api/api/\n```\n\n![Book API documentation](https://assets.roadmap.sh/guest/golang-package-docs-el1vi.png)\n\n## Next steps\n\nGo’s simplicity, built-in concurrency, cloud-native features, and performance make it a popular choice among developers. The growing ecosystem and community support also ensure that you have the right tools and libraries to build and maintain RESTful APIs efficiently and any other application you want to build.\n\nApart from the Gin framework, Go also has popular web frameworks like Echo, Revel, and many more for building APIs. To stay up-to-date with the latest changes, check out the [Go roadmap](https://roadmap.sh/golang).\n";
				}
				async function compiledContent$z() {
					return await html$z();
				}
				function getHeadings$z() {
					return [{"depth":2,"slug":"step-1-project-set-up","text":"Step 1: Project set up"},{"depth":2,"slug":"step-2-structuring-the-project","text":"Step 2: Structuring the project"},{"depth":2,"slug":"step-3-implement-crud-operations-for-the-bookkeeping-application","text":"Step 3: Implement CRUD operations for the bookkeeping application"},{"depth":3,"slug":"create-a-new-book","text":"Create a new book"},{"depth":3,"slug":"getting-the-list-of-books","text":"Getting the list of books"},{"depth":3,"slug":"get-a-single-book","text":"Get a single book"},{"depth":3,"slug":"update-a-book","text":"Update a book"},{"depth":3,"slug":"delete-a-book","text":"Delete a book"},{"depth":3,"slug":"putting-it-all-together","text":"Putting it all together"},{"depth":2,"slug":"step-4-testing-the-rest-apis","text":"Step 4: Testing the REST APIs"},{"depth":3,"slug":"create-a-book-endpoint","text":"Create a book endpoint"},{"depth":3,"slug":"get-the-list-of-books","text":"Get the list of books"},{"depth":3,"slug":"get-a-book-endpoint","text":"Get a book endpoint"},{"depth":3,"slug":"update-a-book-endpoint","text":"Update a book endpoint"},{"depth":3,"slug":"delete-a-book-1","text":"Delete a book"},{"depth":2,"slug":"step-5-unit-testing-the-api-handler-functions","text":"Step 5: Unit testing the API handler functions"},{"depth":3,"slug":"create-a-new-book-unit-test","text":"Create a new book unit test"},{"depth":3,"slug":"get-the-list-of-books-unit-test","text":"Get the list of books unit test"},{"depth":3,"slug":"get-a-book-unit-test","text":"Get a book unit test"},{"depth":3,"slug":"update-a-book-unit-test","text":"Update a book unit test"},{"depth":3,"slug":"delete-a-book-unit-test","text":"Delete a book unit test"},{"depth":2,"slug":"adding-authentication-to-the-rest-apis","text":"Adding authentication to the REST APIs"},{"depth":3,"slug":"create-a-middleware","text":"Create a middleware"},{"depth":2,"slug":"testing-the-rest-api","text":"Testing the REST API"},{"depth":2,"slug":"updating-the-unit-test","text":"Updating the unit test"},{"depth":2,"slug":"adding-documentation-to-the-rest-apis","text":"Adding documentation to the REST APIs"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$z = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$z;
					content.file = file$z;
					content.url = url$z;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$z())}`;
				});

const __vite_glob_0_63 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$z,
	compiledContent: compiledContent$z,
	default: Content$z,
	file: file$z,
	frontmatter: frontmatter$z,
	getHeadings: getHeadings$z,
	rawContent: rawContent$z,
	url: url$z
}, Symbol.toStringTag, { value: 'Module' }));

const html$y = () => "<p>Around 10 years ago, Jeff Atwood (the founder of stackoverflow) made a case that JavaScript is going to be the future and he coined the “Atwood Law” which states that <em>Any application that can be written in JavaScript will eventually be written in JavaScript</em>. Fast-forward to today, 10 years later, if you look at it rings truer than ever. JavaScript is continuing to gain more and more adoption.</p>\n<h3 id=\"javascript-is-announced\">JavaScript is announced</h3>\n<p>JavaScript was initially created by <a href=\"https://twitter.com/BrendanEich\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Brendan Eich</a> of Netscape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially it was named <code>Mocha</code> by the creator, which was later renamed to <code>LiveScript</code>. In 1996, about a year later after the release, NetScape decided to rename it to be <code>JavaScript</code> with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.</p>\n<h3 id=\"es1-es2-and-es3\">ES1, ES2 and ES3</h3>\n<p>In 1996, Netscape decided to submit it to <a href=\"https://en.wikipedia.org/wiki/Ecma_International\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ECMA International</a> with the hopes of getting it standardized. First edition of the standard specification was released in 1997 and the language was standardized. After the initial release, <code>ECMAScript</code> was continued to be worked upon and in no-time two more versions were released ECMAScript 2 in 1998 and ECMAScript 3 in 1999.</p>\n<h3 id=\"decade-of-silence-and-es4\">Decade of Silence and ES4</h3>\n<p>After the release of ES3 in 1999, there was a complete silence for a decade and no changes were made to the official standard. There was some work on the fourth edition in the initial days; some of the features that were being discussed included classes, modules, static typings, destructuring etc. It was being targeted to be released by 2008 but was abandoned due to political differences concerning language complexity. However, the vendors kept introducing the extensions to the language and the developers were left scratching their heads — adding polyfills to battle compatibility issues between different browsers.</p>\n<h3 id=\"from-silence-to-es5\">From silence to ES5</h3>\n<p>Google, Microsoft, Yahoo and other disputers of ES4 came together and decided to work on a less ambitious update to ES3 tentatively named ES3.1. But the teams were still fighting about what to include from ES4 and what not. Finally, in 2009 ES5 was released mainly focusing on fixing the compatibility and security issues etc. But there wasn’t much of a splash in the water — it took ages for the vendors to incorporate the standards and many developers were still using ES3 without being aware of the “modern” standards.</p>\n<h3 id=\"release-of-es6--ecmascript-2015\">Release of ES6 — ECMAScript 2015</h3>\n<p>After a few years of the release of ES5, things started to change, TC39 (the committee under ECMA international responsible for ECMAScript standardization) kept working on the next version of ECMAScript (ES6) which was originally named ES Harmony, before being eventually released with the name ES2015. ES2015 adds significant features and syntactic sugar to allow writing complex applications. Some of the features that ES6 has to offer include</p>\n<ul>\n<li>Classes, Modules, Arrows</li>\n<li>Enhanced object literals</li>\n<li>Template strings</li>\n<li>Destructuring</li>\n<li>Default and rest parameters</li>\n<li>Spread operator</li>\n<li><code>let</code> and <code>const</code></li>\n<li>Iterators <code>for..of</code></li>\n<li>Generators</li>\n<li><code>map</code> and <code>set</code></li>\n<li>Proxies and Symbols</li>\n<li>Promises</li>\n<li>Math, Number, String, Array, Object APIs and <a href=\"http://es6-features.org/#Constants\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">etc</a></li>\n</ul>\n<p>Browser support for ES6 is still scarce but everything that ES6 has to offer is still available to developers by transpiling the ES6 code to ES5. With the release of 6th version of ECMAScript, TC39 decided to move to yearly model of releasing updates to ECMAScript so to make sure that the new features are added as soon as they are approved and we don’t have to wait for the full specification to be drafted and approved — thus 6th version of ECMAScript was renamed as ECMAScript 2015 or ES2015 before the release in June 2015. And the next versions of ECMAScript were decided to published in June of every year.</p>\n<h3 id=\"release-of-es7--ecmascript-2016\">Release of ES7 — ECMAScript 2016</h3>\n<p>In June 2016, seventh version of ECMAScript was released. As ECMAScript has been moved to an yearly release model, ECMAScript 2016 (ES2016) comparatively did not have much to offer. ES2016 includes just two new features</p>\n<ul>\n<li>Exponentiation operator <code>**</code></li>\n<li><code>Array.prototype.includes</code></li>\n</ul>\n<h3 id=\"release-of-es8--ecmascript-2017\">Release of ES8 — ECMAScript 2017</h3>\n<p>The eighth version of ECMAScript was released in June 2017. The key highlight of ES8 was the addition of async functions. Here is the list of new features in ES8</p>\n<ul>\n<li><code>Object.values()</code> and <code>Object.entries()</code></li>\n<li>String padding i.e. <code>String.prototype.padEnd()</code> and <code>String.prototype.padStart()</code></li>\n<li><code>Object.getOwnPropertyDescriptors</code></li>\n<li>Trailing commas in function parameter lists and calls</li>\n<li>Async functions</li>\n</ul>\n<h3 id=\"what-is-esnext-then\">What is ESNext then?</h3>\n<p>ESNext is a dynamic name that refers to whatever the current version of ECMAScript is at the given time. For example, at the time of this writing <code>ES2017</code> or <code>ES8</code> is the current <code>ESNext</code>.</p>\n<h3 id=\"what-does-the-future-hold\">What does the future hold?</h3>\n<p>Since the release of ES6, <a href=\"https://github.com/tc39\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">TC39</a> has quite streamlined their process. TC39 operates through a Github organization now and there are <a href=\"https://github.com/tc39/proposals\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">several proposals</a> for new features or syntax to be added to the next versions of ECMAScript. Any one can go ahead and <a href=\"https://github.com/tc39/proposals\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">submit a proposal</a> thus resulting in increasing the participation from the community. Every proposal goes through <a href=\"https://tc39.github.io/process-document/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">four stages of maturity</a> before it makes it into the specification.</p>\n<p>And that about wraps it up. Feel free to leave your feedback in the <a href=\"https://roadmap.sh/discord\" target=\"_blank\">discord</a>. Also here are the links to original language specifications <a href=\"https://www.ecma-international.org/ecma-262/6.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES6</a>, <a href=\"https://www.ecma-international.org/ecma-262/7.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES7</a> and <a href=\"https://www.ecma-international.org/ecma-262/8.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES8</a>.</p>";

				const frontmatter$y = {"title":"Brief History of JavaScript","description":"How JavaScript was introduced and evolved over the years","authorId":"kamran","seo":{"title":"Brief History of JavaScript - roadmap.sh","description":"How JavaScript was introduced and evolved over the years"},"isNew":false,"type":"textual","date":"2017-10-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$y = "/workspace/src/data/guides/history-of-javascript.md";
				const url$y = undefined;
				function rawContent$y() {
					return "   \n                                    \n                                                                       \n                  \n    \n                                                   \n                                                                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nAround 10 years ago, Jeff Atwood (the founder of stackoverflow) made a case that JavaScript is going to be the future and he coined the “Atwood Law” which states that _Any application that can be written in JavaScript will eventually be written in JavaScript_. Fast-forward to today, 10 years later, if you look at it rings truer than ever. JavaScript is continuing to gain more and more adoption.\n\n### JavaScript is announced\n\nJavaScript was initially created by [Brendan Eich](https://twitter.com/BrendanEich) of Netscape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially it was named `Mocha` by the creator, which was later renamed to `LiveScript`. In 1996, about a year later after the release, NetScape decided to rename it to be `JavaScript` with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.\n\n### ES1, ES2 and ES3\n\nIn 1996, Netscape decided to submit it to [ECMA International](https://en.wikipedia.org/wiki/Ecma_International) with the hopes of getting it standardized. First edition of the standard specification was released in 1997 and the language was standardized. After the initial release, `ECMAScript` was continued to be worked upon and in no-time two more versions were released ECMAScript 2 in 1998 and ECMAScript 3 in 1999.\n\n### Decade of Silence and ES4\n\nAfter the release of ES3 in 1999, there was a complete silence for a decade and no changes were made to the official standard. There was some work on the fourth edition in the initial days; some of the features that were being discussed included classes, modules, static typings, destructuring etc. It was being targeted to be released by 2008 but was abandoned due to political differences concerning language complexity. However, the vendors kept introducing the extensions to the language and the developers were left scratching their heads — adding polyfills to battle compatibility issues between different browsers.\n\n### From silence to ES5\n\nGoogle, Microsoft, Yahoo and other disputers of ES4 came together and decided to work on a less ambitious update to ES3 tentatively named ES3.1. But the teams were still fighting about what to include from ES4 and what not. Finally, in 2009 ES5 was released mainly focusing on fixing the compatibility and security issues etc. But there wasn’t much of a splash in the water — it took ages for the vendors to incorporate the standards and many developers were still using ES3 without being aware of the “modern” standards.\n\n### Release of ES6 — ECMAScript 2015\n\nAfter a few years of the release of ES5, things started to change, TC39 (the committee under ECMA international responsible for ECMAScript standardization) kept working on the next version of ECMAScript (ES6) which was originally named ES Harmony, before being eventually released with the name ES2015. ES2015 adds significant features and syntactic sugar to allow writing complex applications. Some of the features that ES6 has to offer include\n\n- Classes, Modules, Arrows\n- Enhanced object literals\n- Template strings\n- Destructuring\n- Default and rest parameters\n- Spread operator\n- `let` and `const`\n- Iterators `for..of`\n- Generators\n- `map` and `set`\n- Proxies and Symbols\n- Promises\n- Math, Number, String, Array, Object APIs and [etc](http://es6-features.org/#Constants)\n\nBrowser support for ES6 is still scarce but everything that ES6 has to offer is still available to developers by transpiling the ES6 code to ES5. With the release of 6th version of ECMAScript, TC39 decided to move to yearly model of releasing updates to ECMAScript so to make sure that the new features are added as soon as they are approved and we don’t have to wait for the full specification to be drafted and approved — thus 6th version of ECMAScript was renamed as ECMAScript 2015 or ES2015 before the release in June 2015. And the next versions of ECMAScript were decided to published in June of every year.\n\n### Release of ES7 — ECMAScript 2016\n\nIn June 2016, seventh version of ECMAScript was released. As ECMAScript has been moved to an yearly release model, ECMAScript 2016 (ES2016) comparatively did not have much to offer. ES2016 includes just two new features\n\n- Exponentiation operator `**`\n- `Array.prototype.includes`\n\n### Release of ES8 — ECMAScript 2017\n\nThe eighth version of ECMAScript was released in June 2017. The key highlight of ES8 was the addition of async functions. Here is the list of new features in ES8\n\n- `Object.values()` and `Object.entries()`\n- String padding i.e. `String.prototype.padEnd()` and `String.prototype.padStart()`\n- `Object.getOwnPropertyDescriptors`\n- Trailing commas in function parameter lists and calls\n- Async functions\n\n### What is ESNext then?\n\nESNext is a dynamic name that refers to whatever the current version of ECMAScript is at the given time. For example, at the time of this writing `ES2017` or `ES8` is the current `ESNext`.\n\n### What does the future hold?\n\nSince the release of ES6, [TC39](https://github.com/tc39) has quite streamlined their process. TC39 operates through a Github organization now and there are [several proposals](https://github.com/tc39/proposals) for new features or syntax to be added to the next versions of ECMAScript. Any one can go ahead and [submit a proposal](https://github.com/tc39/proposals) thus resulting in increasing the participation from the community. Every proposal goes through [four stages of maturity](https://tc39.github.io/process-document/) before it makes it into the specification.\n\nAnd that about wraps it up. Feel free to leave your feedback in the [discord](https://roadmap.sh/discord). Also here are the links to original language specifications [ES6](https://www.ecma-international.org/ecma-262/6.0/), [ES7](https://www.ecma-international.org/ecma-262/7.0/) and [ES8](https://www.ecma-international.org/ecma-262/8.0/).\n";
				}
				async function compiledContent$y() {
					return await html$y();
				}
				function getHeadings$y() {
					return [{"depth":3,"slug":"javascript-is-announced","text":"JavaScript is announced"},{"depth":3,"slug":"es1-es2-and-es3","text":"ES1, ES2 and ES3"},{"depth":3,"slug":"decade-of-silence-and-es4","text":"Decade of Silence and ES4"},{"depth":3,"slug":"from-silence-to-es5","text":"From silence to ES5"},{"depth":3,"slug":"release-of-es6--ecmascript-2015","text":"Release of ES6 — ECMAScript 2015"},{"depth":3,"slug":"release-of-es7--ecmascript-2016","text":"Release of ES7 — ECMAScript 2016"},{"depth":3,"slug":"release-of-es8--ecmascript-2017","text":"Release of ES8 — ECMAScript 2017"},{"depth":3,"slug":"what-is-esnext-then","text":"What is ESNext then?"},{"depth":3,"slug":"what-does-the-future-hold","text":"What does the future hold?"}];
				}

				const Content$y = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$y;
					content.file = file$y;
					content.url = url$y;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$y())}`;
				});

const __vite_glob_0_64 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$y,
	compiledContent: compiledContent$y,
	default: Content$y,
	file: file$y,
	frontmatter: frontmatter$y,
	getHeadings: getHeadings$y,
	rawContent: rawContent$y,
	url: url$y
}, Symbol.toStringTag, { value: 'Module' }));

const html$x = () => "<p><img src=\"https://assets.roadmap.sh/guest/become-devops-engineer-4x2p7.jpg\" alt=\"How to become a DevOps engineer.\"></p>\n<p>If you are trying to get into tech or are already in tech and have been exploring roles across the industry, you must have come across Development and Operations (DevOps). In fact, <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> is one of the highest-paying roles in the tech industry.</p>\n<p>But <strong>what is DevOps, and how is it different from other roles?</strong></p>\n<p><strong>DevOps is a software engineering approach that combines development (Dev) and operations (Ops) to shorten the software development lifecycle</strong> by embracing automation. It is a bridge between the development and operations teams.</p>\n<p>While the primary goal of a software engineer is to design and build software solutions, a DevOps engineer has a key role in streamlining the software development and deployment pipeline, automating infrastructure provisioning, and enhancing the deployment process.</p>\n<p>This guide provides in-depth knowledge on how to become a DevOps engineer, highlighting the mindset of DevOps engineers and the <a href=\"https://roadmap.sh/devops/skills\" target=\"_blank\">technical skills</a> (including <a href=\"https://roadmap.sh/devops/tools\" target=\"_blank\">DevOps tools</a>) required to become one. It also guides you on how you can find DevOps engineer jobs.</p>\n<h2 id=\"tldr\"><strong>TL;DR:</strong></h2>\n<p>DevOps combines development and operations to automate software delivery. To become a DevOps engineer, you should adopt a mindset of <a href=\"https://roadmap.sh/devops/automation\" target=\"_blank\">automation</a>, risk awareness, systems thinking, and continuous learning. In addition to the mindset, follow the steps below:</p>\n<ul>\n<li>Step 1: Learn a programming language</li>\n<li>Step 2: Get comfortable with Linux and terminal</li>\n<li>Step 3: Version control and code hosting platforms</li>\n<li>Step 4: Networking fundamentals</li>\n<li>Step 5: Containerization</li>\n<li>Step 6: Cloud services</li>\n<li>Step 7: Continuous integration and delivery</li>\n</ul>\n<p>Let’s dive into the essential skills required for a DevOps engineer.</p>\n<h2 id=\"skills-required-to-become-a-devops-engineer\">Skills required to become a DevOps engineer</h2>\n<h3 id=\"operating-system\">Operating system</h3>\n<p>A DevOps engineer should understand the operating system, especially Linux (distribution or any variant). This is because most of the servers in use are Linux-based, so having a solid foundation in the Linux OS is imperative for infrastructure management and troubleshooting.</p>\n<h3 id=\"solid-programming-fundamentals\">Solid programming fundamentals</h3>\n<p>As a DevOps engineer, you will use your knowledge of programming languages and scripting languages (bash scripting, shell scripting, etc) to:</p>\n<ul>\n<li>Automate processes and frequent tasks</li>\n<li>Patch a security bug exposing your internal application to outside users</li>\n<li>Create <a href=\"https://roadmap.sh/devops/automation-tools\" target=\"_blank\">automation tools</a>, monitoring tools, and logging tools</li>\n<li>Create monitoring dashboards to visualize workload and resource usage</li>\n</ul>\n<p>Hence, hands-on experience with programming is crucial to excel in your DevOps career.</p>\n<h3 id=\"version-control\">Version control</h3>\n<p>A basic understanding of version control is one of the essential DevOps skills required for DevOps engineer jobs. In your DevOps career, you will likely work in a team rather than alone. Systems like Git facilitate collaboration in a team while providing a centralized repository for the code.</p>\n<h3 id=\"networking-fundamentals\">Networking fundamentals</h3>\n<p>Many modern-day applications are distributed systems that rely on networking. For instance, a single application could be composed of a frontend, backend, database, file server, etc., each residing on a separate server. For a seamless user experience, these separate entities should be able to communicate smoothly.</p>\n<h3 id=\"containerization-and-orchestration\">Containerization and orchestration</h3>\n<p>Containerization (or container technology) and orchestration help solve the issues of software deployment and resource utilization. Knowledge of containerization and orchestration helps reduce deployment time and allows you to scale applications quickly without downtime, resulting in a better user experience.</p>\n<h3 id=\"cloud-deployment\">Cloud deployment</h3>\n<p>Procuring hardware to deploy the software is not always feasible and beneficial. Furthermore, once you purchase the hardware, you need more time and resources to manage the new hardware. Depending upon the complexity of the application, choosing the cloud instead of on-premise hardware can significantly reduce deployment time and cost.</p>\n<h3 id=\"infrastructure-as-code-iac\">Infrastructure as Code (IaC)</h3>\n<p>IaC can be seen as a superior form of automation for a DevOps engineer. IaC tools like Terraform and Amazon Cloud CDK allow the operations team to set up and manage infrastructure by simply changing a configuration file. This makes it easier to manage and scale the application.</p>\n<p>So, how do you learn these essential skills? In what sequence do you acquire these skills?</p>\n<p>The following section presents a complete DevOps roadmap on how you can learn these skills and become a DevOps engineer.</p>\n<h2 id=\"how-to-become-a-devops-engineer-the-devops-roadmap\">How to become a DevOps engineer: the DevOps roadmap</h2>\n<p>The internet is full of resources for learning DevOps and DevOps tools. Many of these guides lack structure and organization, resulting in a dilemma of where to start.</p>\n<p>To help beginners learn DevOps in a structured manner, <a href=\"https://roadmap.sh/\" target=\"_blank\">roadmap.sh</a> has a beginner-friendly <a href=\"https://roadmap.sh/devops?r=devops-beginner\" target=\"_blank\">DevOps engineer roadmap</a> that will help you land into DevOps engineer positions.</p>\n<p>This section presents a concise version of the DevOps engineering roadmap. It is recommended that you implement real-world projects recommended in each stage of the roadmap. In the end, you can publish these DevOps projects to GitHub as an open-source project repository, and the repository will act as your portfolio and increase your exposure in the DevOps community.</p>\n<h3 id=\"step-1-learn-a-programming-language\">Step 1: Learn a programming language</h3>\n<p>Programming language is essential to a DevOps engineer. I recommend you start with either Python or Go. <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> is a popular language that is easier to learn and used in various projects involving <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a> development, writing machine learning algorithms, automating everyday tasks, etc.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/learn-a-programming-language-he481.jpeg\" alt=\"Popular programming languages\"></p>\n<p><a href=\"https://automatetheboringstuff.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Automate the Boring Stuff with Python</a> is an excellent resource for learning Python and basic programming concepts. It will also come in handy when building automation tools.</p>\n<p>To demonstrate your understanding of Python, you can create a web scraper (or other coding projects) that extracts a list of hotels, their address, prices, reviews, and locations from a site like <a href=\"http://booking.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">booking.com</a>.</p>\n<h3 id=\"step-2-get-comfortable-with-linux-and-the-terminal\">Step 2: Get comfortable with Linux and the terminal</h3>\n<p>According to <a href=\"https://gitnux.org/linux-statistics/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Gitnux</a>, 92.4% of the world’s top 1 million servers run on Linux, and about 96.3% of the world’s top 1 million websites are powered by Unix-like operating systems, with Linux being one of the most widely used operating systems. This makes Linux a popular tool for all software engineers.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/most-popular-operating-systems-exdwq.jpeg\" alt=\"The most popular operating systems today\"></p>\n<p>Furthermore, you should make the terminal your best friend. Some programs and packages may not have a GUI counterpart, and even when they exist, using the CLI(Command Line Interface) alternative is faster and easier to automate.</p>\n<p>An excellent way to practice Linux for DevOps engineers is to install it on a thumb drive and try to do everyday tasks like changing the directory, creating new files and folders, editing files, searching for files and folders, etc., using Linux commands instead of using the GUI interface.</p>\n<h3 id=\"step-3-version-control-and-code-hosting-platforms\">Step 3: Version control and code hosting platforms</h3>\n<p>Version control systems like Git make it easier for developers to track changes in their source code by maintaining a history of the changes. Combined with platforms like GitHub or Bitbucket, Git can facilitate developers to work collaboratively with each other.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/git-and-github-kui4q.jpeg\" alt=\"Git and GitHub\"></p>\n<p><a href=\"https://www.atlassian.com/git\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">This tutorial</a> will help you learn Git basics and how to use Git for collaboration using Bitbucket, a code hosting platform.</p>\n<p>For advanced concepts on git branching, <a href=\"https://learngitbranching.js.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">refer to this site.</a> Once you go through the tutorial, you can easily switch from Bitbucket to GitHub and GitLab, which are more popular among developers.</p>\n<h3 id=\"step-4-networking-fundamentals\">Step 4: Networking fundamentals</h3>\n<p>Learning networking fundamentals becomes vital to the DevOps team when working with software components constantly communicating with other services. Knowledge of networks comes in handy when setting up resources in the public cloud. At a minimum, you should clearly understand standard protocols(TCP/IP, UDP), routing, IP addressing, subnetting, and ports.</p>\n<p>A DevOps engineer should have a sound knowledge of web servers like Nginx. Nginx allows you to serve your application on the web while handling reverse proxy and load balancing. <a href=\"https://httpd.apache.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Apache</a> is another web server that provides similar features.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/nginx-and-apache-psljm.jpeg\" alt=\"Nginx and Apache\"></p>\n<p>For your practice, you can create a simple frontend (or clone it from GitHub) and deploy it using Nginx or Apache.</p>\n<h3 id=\"step-5-containerization\">Step 5: Containerization</h3>\n<p>An application developed by one developer may not work on other machines due to the difference in environment. To eliminate this issue, DevOps engineers use containerization tools like Docker.</p>\n<p>Docker allows engineers to create consistent development, testing, and production environments. It also ensures the developed application is portable across different platforms.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/docker-and-kubernetes-fxplh.jpeg\" alt=\"Docker and Kubernetes\"></p>\n<p>Applications rely on multiple containers that communicate with each other. To facilitate the orchestration of these containers, you can use container orchestration tools like <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>. The <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker Roadmap</a> provides essential resources to help you master Docker and Kubernetes.</p>\n<p>You can demonstrate your understanding of containerization tools by creating a simple project with frontend and back deployed as two separate containers. If you have already developed these components in the previous stages of the roadmap, re-use them to save time.</p>\n<p>Alternatively, certifications like Docker Certified Associate and Certified Kubernetes Administrator can help you prove your knowledge.</p>\n<h3 id=\"step-6-cloud-services\">Step 6: Cloud services</h3>\n<p>Cloud services like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, and Google Cloud Platform are some popular cloud providers that allow you to deploy your projects without investing in expensive hardware. Many cloud services across these cloud platforms are analogous.</p>\n<p>If you are a beginner, start with AWS. It is the most widely used cloud platform. Once you are comfortable with AWS’s services and key concepts, you can deploy the application created in earlier stages to the AWS.</p>\n<p>Alternatively, you could demonstrate your understanding by taking the <a href=\"https://aws.amazon.com/certification/?trk=dc557659-52ab-4a28-b2b8-0b1fb90235db&#x26;sc_channel=ps&#x26;ef_id=CjwKCAjw88yxBhBWEiwA7cm6pRXCRcI-uDNNigl81tPxsbbyV9RqT6MsdSM_x5EzoFnfxcr6N22rvBoCS7IQAvD_BwE:G:s&#x26;s_kwcid=AL!4422!3!465713397254!e!!g!!aws%20certification!11138243015!111694711080&#x26;gclid=CjwKCAjw88yxBhBWEiwA7cm6pRXCRcI-uDNNigl81tPxsbbyV9RqT6MsdSM_x5EzoFnfxcr6N22rvBoCS7IQAvD_BwE\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">certification exam from AWS</a>. Becoming an AWS certified DevOps engineer helps you gain credibility for your DevOps skills.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/top-cloud-providers-76zj5.jpeg\" alt=\"Top cloud providers\"></p>\n<p>Once comfortable launching your infrastructure using the GUI, you should learn about Infrastructure as Code(IaC). I recommend using <a href=\"https://www.terraform.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Terraform</a> for IaC as it is cloud-agnostic and popular among software developers and operations teams. Terraform allows you to set up and make changes to infrastructure resources by editing a configuration file, resulting in infrastructure automation.</p>\n<h3 id=\"step-7-continuous-integration-and-delivery\">Step 7: Continuous integration and delivery</h3>\n<p><a href=\"https://www.youtube.com/watch?v=nyKZTKQS_EQ\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Continuous Integration and Continuous Delivery</a> (or Continuous Deployment) (CI/CD) is a set of practices aimed at automating and streamlining software changes from development to production.</p>\n<p>Today, in practice, when you commit and push your changes to the remote repository (say GitHub), the tests kick-off; if the tests pass successfully, your changes are merged and then deployed to the staging and production server.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/ci-cd-hndye.jpeg\" alt=\"CI/CD\"></p>\n<p>CI/CD is a combination of three skills: programming, writing configuration files, and Git. As such, you don’t need to learn new skills to implement CI/CD. However, some organizations use tools like CircleCI and Jenkins to simplify the process.</p>\n<p>You can practice CI/CD using GitHub actions. <a href=\"https://docs.github.com/en/actions/learn-github-actions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub provides a set of tutorials</a> for the same. You can follow along those tutorials to get a good grasp of Continuous Integration and Continuous Deployment.</p>\n<p>Finally, you can implement CICD in one of your projects created while learning previous skills in this roadmap.</p>\n<p>Next, let’s discuss the mindset needed to become a DevOps engineer.</p>\n<h2 id=\"devops-engineers-mindset\">DevOps engineer’s mindset</h2>\n<p>To become a successful DevOps engineer and successfully embrace the DevOps culture, you must orient your thoughts around the following:</p>\n<h3 id=\"automation\">Automation</h3>\n<p>Software products or systems are prone to various errors, including human errors. Stress during work and the race against deadlines can increase the frequency of these errors. Automating processes helps reduce human error and eliminate boring tasks.</p>\n<h3 id=\"risk-awareness\">Risk awareness</h3>\n<p>DevOps engineers must understand the risks entangled with changes to a software system and deployment infrastructures. The risk should be minimized by utilizing automated testing, monitoring, and incremental changes.</p>\n<h3 id=\"systems-thinking\">Systems thinking</h3>\n<p>DevOps professionals or any member of the operations teams must understand how different components within a system communicate and interact with each other to deliver the desired solution. A graphical representation of the system can come in handy when fixing issues or knowledge transfer within the DevOps teams.</p>\n<h3 id=\"continuous-learning\">Continuous learning</h3>\n<p>A continuous learning and continuous improvement mindset is essential across all roles in software engineering, but its importance is amplified for a DevOps engineer. A DevOps engineer must continually learn about new technologies, tools, DevOps principles, and DevOps practices and implement the ones best suited to the project.</p>\n<p>You may not have the DevOps mindset, but that is okay. You can build this mindset as you learn and grow into the role. Let us look at some technical skills required to become a DevOps engineer.</p>\n<h2 id=\"who-can-become-a-devops-engineer\">Who can become a DevOps engineer?</h2>\n<p>Anyone with the right skillset can become a DevOps engineer. Typically, it is easier to transition into a DevOps engineer role if you are a,</p>\n<ul>\n<li>Systems Engineer</li>\n<li>Backend Engineer</li>\n<li>Infrastructure Engineer</li>\n</ul>\n<p>If you are one of the aspiring DevOps engineers, you are encouraged to learn the above skills and concepts. You can then apply for entry-level DevOps engineer jobs and intern DevOps positions. You may look for DevOps openings in local companies or remote job boards advertising DevOps engineer roles.</p>\n<p>Depending on your current skill set and practical experience, the time to transition into a DevOps role will vary. However, following a structured learning path will help you gain a head start in your DevOps career.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>The roadmap simplifies the DevOps journey by breaking it into learnable skills via the <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineer roadmap</a>. To effectively use the site, I encourage you to <a href=\"https://roadmap.sh/signup\" target=\"_blank\">sign up</a> on the platform and learn the desired skill by following the structured roadmap. You could explore additional roadmaps and advanced topics utilizing the search bar on the platform. The platform also allows you to:</p>\n<ul>\n<li>Keep track of your journey as you progress through a roadmap</li>\n<li>Draw your own roadmap or generate one using AI</li>\n<li>Create and share a roadmap for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">your team</a></li>\n</ul>";

				const frontmatter$x = {"title":"How to become a DevOps Engineer in @currentYear@","description":"Want to become a DevOps engineer? Our @currentYear@ guide covers skills, certifications, and expert career advice. Start your journey today!","authorId":"william","excludedBySlug":"/devops/how-to-become-devops-engineer","seo":{"title":"How to become a DevOps Engineer in @currentYear@","description":"Want to become a DevOps engineer? Our @currentYear@ guide covers skills, certifications, and expert career advice. Start your journey today!","ogImageUrl":"https://assets.roadmap.sh/guest/become-devops-engineer-4x2p7.jpg"},"relatedGuidesTitle":"Other Guides","relatedGuidesId":"devops","isNew":false,"type":"textual","date":"2024-06-11T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$x = "/workspace/src/data/guides/how-to-become-devops-engineer.md";
				const url$x = undefined;
				function rawContent$x() {
					return "   \n                                                         \n                                                                                                                                                           \n                 \n                                                       \n    \n                                                           \n                                                                                                                                                             \n                                                                                \n                                  \n                       \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How to become a DevOps engineer.](https://assets.roadmap.sh/guest/become-devops-engineer-4x2p7.jpg)\n\nIf you are trying to get into tech or are already in tech and have been exploring roles across the industry, you must have come across Development and Operations (DevOps). In fact, [DevOps](https://roadmap.sh/devops) is one of the highest-paying roles in the tech industry.\n\nBut **what is DevOps, and how is it different from other roles?**\n\n**DevOps is a software engineering approach that combines development (Dev) and operations (Ops) to shorten the software development lifecycle** by embracing automation. It is a bridge between the development and operations teams.\n\nWhile the primary goal of a software engineer is to design and build software solutions, a DevOps engineer has a key role in streamlining the software development and deployment pipeline, automating infrastructure provisioning, and enhancing the deployment process.\n\nThis guide provides in-depth knowledge on how to become a DevOps engineer, highlighting the mindset of DevOps engineers and the [technical skills](https://roadmap.sh/devops/skills) (including [DevOps tools](https://roadmap.sh/devops/tools)) required to become one. It also guides you on how you can find DevOps engineer jobs.\n\n## **TL;DR:**\n\nDevOps combines development and operations to automate software delivery. To become a DevOps engineer, you should adopt a mindset of [automation](https://roadmap.sh/devops/automation), risk awareness, systems thinking, and continuous learning. In addition to the mindset, follow the steps below:\n\n- Step 1: Learn a programming language\n- Step 2: Get comfortable with Linux and terminal\n- Step 3: Version control and code hosting platforms\n- Step 4: Networking fundamentals\n- Step 5: Containerization\n- Step 6: Cloud services\n- Step 7: Continuous integration and delivery\n\nLet’s dive into the essential skills required for a DevOps engineer.\n\n## Skills required to become a DevOps engineer\n\n### Operating system\n\nA DevOps engineer should understand the operating system, especially Linux (distribution or any variant). This is because most of the servers in use are Linux-based, so having a solid foundation in the Linux OS is imperative for infrastructure management and troubleshooting.\n\n### Solid programming fundamentals\n\nAs a DevOps engineer, you will use your knowledge of programming languages and scripting languages (bash scripting, shell scripting, etc) to:\n\n- Automate processes and frequent tasks\n- Patch a security bug exposing your internal application to outside users\n- Create [automation tools](https://roadmap.sh/devops/automation-tools), monitoring tools, and logging tools\n- Create monitoring dashboards to visualize workload and resource usage\n\nHence, hands-on experience with programming is crucial to excel in your DevOps career.\n\n### Version control\n\nA basic understanding of version control is one of the essential DevOps skills required for DevOps engineer jobs. In your DevOps career, you will likely work in a team rather than alone. Systems like Git facilitate collaboration in a team while providing a centralized repository for the code.\n\n### Networking fundamentals\n\nMany modern-day applications are distributed systems that rely on networking. For instance, a single application could be composed of a frontend, backend, database, file server, etc., each residing on a separate server. For a seamless user experience, these separate entities should be able to communicate smoothly.\n\n### Containerization and orchestration\n\nContainerization (or container technology) and orchestration help solve the issues of software deployment and resource utilization. Knowledge of containerization and orchestration helps reduce deployment time and allows you to scale applications quickly without downtime, resulting in a better user experience.\n\n### Cloud deployment\n\nProcuring hardware to deploy the software is not always feasible and beneficial. Furthermore, once you purchase the hardware, you need more time and resources to manage the new hardware. Depending upon the complexity of the application, choosing the cloud instead of on-premise hardware can significantly reduce deployment time and cost.\n\n### Infrastructure as Code (IaC)\n\nIaC can be seen as a superior form of automation for a DevOps engineer. IaC tools like Terraform and Amazon Cloud CDK allow the operations team to set up and manage infrastructure by simply changing a configuration file. This makes it easier to manage and scale the application.\n\nSo, how do you learn these essential skills? In what sequence do you acquire these skills?\n\nThe following section presents a complete DevOps roadmap on how you can learn these skills and become a DevOps engineer.\n\n## How to become a DevOps engineer: the DevOps roadmap\n\nThe internet is full of resources for learning DevOps and DevOps tools. Many of these guides lack structure and organization, resulting in a dilemma of where to start.\n\nTo help beginners learn DevOps in a structured manner, [roadmap.sh](https://roadmap.sh/) has a beginner-friendly [DevOps engineer roadmap](https://roadmap.sh/devops?r=devops-beginner) that will help you land into DevOps engineer positions.\n\nThis section presents a concise version of the DevOps engineering roadmap. It is recommended that you implement real-world projects recommended in each stage of the roadmap. In the end, you can publish these DevOps projects to GitHub as an open-source project repository, and the repository will act as your portfolio and increase your exposure in the DevOps community.\n\n### Step 1: Learn a programming language\n\nProgramming language is essential to a DevOps engineer. I recommend you start with either Python or Go. [Python](https://roadmap.sh/python) is a popular language that is easier to learn and used in various projects involving [backend](https://roadmap.sh/backend) development, writing machine learning algorithms, automating everyday tasks, etc.\n\n![Popular programming languages](https://assets.roadmap.sh/guest/learn-a-programming-language-he481.jpeg)\n\n[Automate the Boring Stuff with Python](https://automatetheboringstuff.com/) is an excellent resource for learning Python and basic programming concepts. It will also come in handy when building automation tools.\n\nTo demonstrate your understanding of Python, you can create a web scraper (or other coding projects) that extracts a list of hotels, their address, prices, reviews, and locations from a site like [booking.com](http://booking.com/).\n\n### Step 2: Get comfortable with Linux and the terminal\n\nAccording to [Gitnux](https://gitnux.org/linux-statistics/), 92.4% of the world’s top 1 million servers run on Linux, and about 96.3% of the world’s top 1 million websites are powered by Unix-like operating systems, with Linux being one of the most widely used operating systems. This makes Linux a popular tool for all software engineers.\n\n![The most popular operating systems today](https://assets.roadmap.sh/guest/most-popular-operating-systems-exdwq.jpeg)\n\nFurthermore, you should make the terminal your best friend. Some programs and packages may not have a GUI counterpart, and even when they exist, using the CLI(Command Line Interface) alternative is faster and easier to automate.\n\nAn excellent way to practice Linux for DevOps engineers is to install it on a thumb drive and try to do everyday tasks like changing the directory, creating new files and folders, editing files, searching for files and folders, etc., using Linux commands instead of using the GUI interface.\n\n### Step 3: Version control and code hosting platforms\n\nVersion control systems like Git make it easier for developers to track changes in their source code by maintaining a history of the changes. Combined with platforms like GitHub or Bitbucket, Git can facilitate developers to work collaboratively with each other.\n\n![Git and GitHub](https://assets.roadmap.sh/guest/git-and-github-kui4q.jpeg)\n\n[This tutorial](https://www.atlassian.com/git) will help you learn Git basics and how to use Git for collaboration using Bitbucket, a code hosting platform.\n\nFor advanced concepts on git branching, [refer to this site.](https://learngitbranching.js.org/) Once you go through the tutorial, you can easily switch from Bitbucket to GitHub and GitLab, which are more popular among developers.\n\n### Step 4: Networking fundamentals\n\nLearning networking fundamentals becomes vital to the DevOps team when working with software components constantly communicating with other services. Knowledge of networks comes in handy when setting up resources in the public cloud. At a minimum, you should clearly understand standard protocols(TCP/IP, UDP), routing, IP addressing, subnetting, and ports.\n\nA DevOps engineer should have a sound knowledge of web servers like Nginx. Nginx allows you to serve your application on the web while handling reverse proxy and load balancing. [Apache](https://httpd.apache.org/) is another web server that provides similar features.\n\n![Nginx and Apache](https://assets.roadmap.sh/guest/nginx-and-apache-psljm.jpeg)\n\nFor your practice, you can create a simple frontend (or clone it from GitHub) and deploy it using Nginx or Apache.\n\n### Step 5: Containerization\n\nAn application developed by one developer may not work on other machines due to the difference in environment. To eliminate this issue, DevOps engineers use containerization tools like Docker.\n\nDocker allows engineers to create consistent development, testing, and production environments. It also ensures the developed application is portable across different platforms.\n\n![Docker and Kubernetes](https://assets.roadmap.sh/guest/docker-and-kubernetes-fxplh.jpeg)\n\nApplications rely on multiple containers that communicate with each other. To facilitate the orchestration of these containers, you can use container orchestration tools like [Kubernetes](https://roadmap.sh/kubernetes). The [Docker Roadmap](https://roadmap.sh/docker) provides essential resources to help you master Docker and Kubernetes.\n\nYou can demonstrate your understanding of containerization tools by creating a simple project with frontend and back deployed as two separate containers. If you have already developed these components in the previous stages of the roadmap, re-use them to save time.\n\nAlternatively, certifications like Docker Certified Associate and Certified Kubernetes Administrator can help you prove your knowledge.\n\n### Step 6: Cloud services\n\nCloud services like [AWS](https://roadmap.sh/aws), Azure, and Google Cloud Platform are some popular cloud providers that allow you to deploy your projects without investing in expensive hardware. Many cloud services across these cloud platforms are analogous.\n\nIf you are a beginner, start with AWS. It is the most widely used cloud platform. Once you are comfortable with AWS’s services and key concepts, you can deploy the application created in earlier stages to the AWS.\n\nAlternatively, you could demonstrate your understanding by taking the [certification exam from AWS](https://aws.amazon.com/certification/?trk=dc557659-52ab-4a28-b2b8-0b1fb90235db&sc_channel=ps&ef_id=CjwKCAjw88yxBhBWEiwA7cm6pRXCRcI-uDNNigl81tPxsbbyV9RqT6MsdSM_x5EzoFnfxcr6N22rvBoCS7IQAvD_BwE:G:s&s_kwcid=AL!4422!3!465713397254!e!!g!!aws%20certification!11138243015!111694711080&gclid=CjwKCAjw88yxBhBWEiwA7cm6pRXCRcI-uDNNigl81tPxsbbyV9RqT6MsdSM_x5EzoFnfxcr6N22rvBoCS7IQAvD_BwE). Becoming an AWS certified DevOps engineer helps you gain credibility for your DevOps skills.\n\n![Top cloud providers](https://assets.roadmap.sh/guest/top-cloud-providers-76zj5.jpeg)\n\nOnce comfortable launching your infrastructure using the GUI, you should learn about Infrastructure as Code(IaC). I recommend using [Terraform](https://www.terraform.io/) for IaC as it is cloud-agnostic and popular among software developers and operations teams. Terraform allows you to set up and make changes to infrastructure resources by editing a configuration file, resulting in infrastructure automation.\n\n### Step 7: Continuous integration and delivery\n\n[Continuous Integration and Continuous Delivery](https://www.youtube.com/watch?v=nyKZTKQS_EQ) (or Continuous Deployment) (CI/CD) is a set of practices aimed at automating and streamlining software changes from development to production.\n\nToday, in practice, when you commit and push your changes to the remote repository (say GitHub), the tests kick-off; if the tests pass successfully, your changes are merged and then deployed to the staging and production server.\n\n![CI/CD](https://assets.roadmap.sh/guest/ci-cd-hndye.jpeg)\n\nCI/CD is a combination of three skills: programming, writing configuration files, and Git. As such, you don’t need to learn new skills to implement CI/CD. However, some organizations use tools like CircleCI and Jenkins to simplify the process.\n\nYou can practice CI/CD using GitHub actions. [GitHub provides a set of tutorials](https://docs.github.com/en/actions/learn-github-actions) for the same. You can follow along those tutorials to get a good grasp of Continuous Integration and Continuous Deployment.\n\nFinally, you can implement CICD in one of your projects created while learning previous skills in this roadmap.\n\nNext, let’s discuss the mindset needed to become a DevOps engineer.\n\n## DevOps engineer’s mindset\n\nTo become a successful DevOps engineer and successfully embrace the DevOps culture, you must orient your thoughts around the following:\n\n### Automation\n\nSoftware products or systems are prone to various errors, including human errors. Stress during work and the race against deadlines can increase the frequency of these errors. Automating processes helps reduce human error and eliminate boring tasks.\n\n### Risk awareness\n\nDevOps engineers must understand the risks entangled with changes to a software system and deployment infrastructures. The risk should be minimized by utilizing automated testing, monitoring, and incremental changes.\n\n### Systems thinking\n\nDevOps professionals or any member of the operations teams must understand how different components within a system communicate and interact with each other to deliver the desired solution. A graphical representation of the system can come in handy when fixing issues or knowledge transfer within the DevOps teams.\n\n### Continuous learning\n\nA continuous learning and continuous improvement mindset is essential across all roles in software engineering, but its importance is amplified for a DevOps engineer. A DevOps engineer must continually learn about new technologies, tools, DevOps principles, and DevOps practices and implement the ones best suited to the project.\n\nYou may not have the DevOps mindset, but that is okay. You can build this mindset as you learn and grow into the role. Let us look at some technical skills required to become a DevOps engineer.\n\n## Who can become a DevOps engineer?\n\nAnyone with the right skillset can become a DevOps engineer. Typically, it is easier to transition into a DevOps engineer role if you are a,\n\n- Systems Engineer\n- Backend Engineer\n- Infrastructure Engineer\n\nIf you are one of the aspiring DevOps engineers, you are encouraged to learn the above skills and concepts. You can then apply for entry-level DevOps engineer jobs and intern DevOps positions. You may look for DevOps openings in local companies or remote job boards advertising DevOps engineer roles.\n\nDepending on your current skill set and practical experience, the time to transition into a DevOps role will vary. However, following a structured learning path will help you gain a head start in your DevOps career.\n\n## What next?\n\nThe roadmap simplifies the DevOps journey by breaking it into learnable skills via the [DevOps engineer roadmap](https://roadmap.sh/devops). To effectively use the site, I encourage you to [sign up](https://roadmap.sh/signup) on the platform and learn the desired skill by following the structured roadmap. You could explore additional roadmaps and advanced topics utilizing the search bar on the platform. The platform also allows you to:\n\n- Keep track of your journey as you progress through a roadmap\n- Draw your own roadmap or generate one using AI\n- Create and share a roadmap for [your team](https://roadmap.sh/teams)\n";
				}
				async function compiledContent$x() {
					return await html$x();
				}
				function getHeadings$x() {
					return [{"depth":2,"slug":"tldr","text":"TL;DR:"},{"depth":2,"slug":"skills-required-to-become-a-devops-engineer","text":"Skills required to become a DevOps engineer"},{"depth":3,"slug":"operating-system","text":"Operating system"},{"depth":3,"slug":"solid-programming-fundamentals","text":"Solid programming fundamentals"},{"depth":3,"slug":"version-control","text":"Version control"},{"depth":3,"slug":"networking-fundamentals","text":"Networking fundamentals"},{"depth":3,"slug":"containerization-and-orchestration","text":"Containerization and orchestration"},{"depth":3,"slug":"cloud-deployment","text":"Cloud deployment"},{"depth":3,"slug":"infrastructure-as-code-iac","text":"Infrastructure as Code (IaC)"},{"depth":2,"slug":"how-to-become-a-devops-engineer-the-devops-roadmap","text":"How to become a DevOps engineer: the DevOps roadmap"},{"depth":3,"slug":"step-1-learn-a-programming-language","text":"Step 1: Learn a programming language"},{"depth":3,"slug":"step-2-get-comfortable-with-linux-and-the-terminal","text":"Step 2: Get comfortable with Linux and the terminal"},{"depth":3,"slug":"step-3-version-control-and-code-hosting-platforms","text":"Step 3: Version control and code hosting platforms"},{"depth":3,"slug":"step-4-networking-fundamentals","text":"Step 4: Networking fundamentals"},{"depth":3,"slug":"step-5-containerization","text":"Step 5: Containerization"},{"depth":3,"slug":"step-6-cloud-services","text":"Step 6: Cloud services"},{"depth":3,"slug":"step-7-continuous-integration-and-delivery","text":"Step 7: Continuous integration and delivery"},{"depth":2,"slug":"devops-engineers-mindset","text":"DevOps engineer’s mindset"},{"depth":3,"slug":"automation","text":"Automation"},{"depth":3,"slug":"risk-awareness","text":"Risk awareness"},{"depth":3,"slug":"systems-thinking","text":"Systems thinking"},{"depth":3,"slug":"continuous-learning","text":"Continuous learning"},{"depth":2,"slug":"who-can-become-a-devops-engineer","text":"Who can become a DevOps engineer?"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$x = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$x;
					content.file = file$x;
					content.url = url$x;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$x())}`;
				});

const __vite_glob_0_65 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$x,
	compiledContent: compiledContent$x,
	default: Content$x,
	file: file$x,
	frontmatter: frontmatter$x,
	getHeadings: getHeadings$x,
	rawContent: rawContent$x,
	url: url$x
}, Symbol.toStringTag, { value: 'Module' }));

const html$w = () => "<p><img src=\"https://assets.roadmap.sh/guest/how-to-become-frontend-developer-i23nx.jpg\" alt=\"How to become a frontend developer.\"></p>\n<p>Front-end developers <strong>(also referred to as front-end engineers or client-side developers)</strong> create the user interface (UI) and user experience (UX) of web pages and web applications. Using HTML, CSS, and JavaScript, they transform static designs into functional web pages. They create interactive and visual elements that users interact with directly, including buttons, forms, and navigation menus.</p>\n<p><a href=\"https://roadmap.sh/frontend\" target=\"_blank\">Front-end developers</a> are a crucial part of any team. They ensure that websites are user-friendly, load fast, and rank high on search engines. So, companies seek skilled front-end developers who can create dynamic and responsive websites.</p>\n<p>However, becoming a front-end developer isn’t just about jumping straight into coding. It’s a deliberate process that involves following specific steps.</p>\n<p><strong>TL;DR</strong>: Become a front-end developer in 7 steps:</p>\n<ul>\n<li><strong>Step 1</strong>: Learn web development fundamentals.</li>\n<li><strong>Step 2</strong>: Practice building projects.</li>\n<li><strong>Step 3</strong>: Learn the version control systems and the command line.</li>\n<li><strong>Step 4</strong>: Learn front-end frameworks and libraries.</li>\n<li><strong>Step 5</strong>: Study the accessibility and responsive design principles</li>\n<li><strong>Step 6:</strong> Join online communities and attend events.</li>\n<li><strong>Step 7</strong>: Build a portfolio and apply for jobs.</li>\n</ul>\n<p>The above steps will give you the <a href=\"https://roadmap.sh/frontend/developer-skills\" target=\"_blank\">skills</a> to become a proficient front-end developer. This guide will provide a deep dive into the steps and benefits of working in a front-end position.</p>\n<h2 id=\"benefits-of-pursuing-a-career-in-front-end-development\">Benefits of pursuing a career in front-end development</h2>\n<p>The job market requires skilled professionals to create dynamic websites and web applications as part of most <a href=\"https://roadmap.sh/frontend/job-description\" target=\"_blank\">frontend developer job descriptions</a>. This demand makes front-end development a role filled with numerous career opportunities.</p>\n<p>Some of the benefits of pursuing a career in front-end development include:</p>\n<ul>\n<li>High demand and employment stability.</li>\n<li>Flexible career.</li>\n<li>Competitive earning potential.</li>\n</ul>\n<h3 id=\"high-demand-and-employment-stability\">High demand and employment stability</h3>\n<p>Front-end development is a highly sought-after skill set in the tech industry. The demand isn’t limited to a particular sector; it extends to healthcare, e-commerce, gaming, etc., making it a lucrative career choice.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/job-outlook-frontend-engineer-tvm05.jpeg\" alt=\"Job Outlook for Front-End Developers\"></p>\n<p><a href=\"https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">BLS (Bureau of Labor Statistics)</a> projects a 16% increase in web developer jobs from 2022 to 2032. This rate exceeds the average for all other jobs by a significant margin. So, there will always be a need for front-end developers, which means job security and a steady career path.</p>\n<h3 id=\"flexible-career\">Flexible career</h3>\n<p>The front-end development field offers many benefits, one of which is flexibility. You can work as a freelancer, remotely, or in a hybrid role – whatever works best for you! Or, if you prefer, you can go with a more traditional office setup. This flexibility gives you the power to:</p>\n<ul>\n<li>Work from anywhere on the planet as long as you can access the Internet.</li>\n<li>Find projects and clients that align with your interests and goals.</li>\n<li>Connect with global teams and build your professional network.</li>\n</ul>\n<h3 id=\"competitive-earning-potential\">Competitive earning potential</h3>\n<p>Front-end development provides a financially rewarding career path with competitive salaries. As per Glassdoor, front-end developers make an average salary of $85,432 in the United States.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-engineer-salary-smqar.PNG\" alt=\"Frontend Developer Salary\"></p>\n<p>However, how much you earn can depend on your experience, the size of the company, and where you’re looking for a job.</p>\n<h2 id=\"become-a-front-end-developer-in-7-steps\">Become a front-end developer in 7 steps</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/how-to-become-frontend-developer-in-7-steps-2gigl.jpeg\" alt=\"How to become a frontend developer in 7 steps\"></p>\n<p>The number of online resources available to learn front-end development can be overwhelming. It’s hard for aspiring front-end developers to know where to start. However, roadmap.sh provides a clear step-by-step <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end roadmap</a> to help you learn.</p>\n<p>The guide breaks it down so you don’t have to guess and gives you all you need to learn front-end development. The steps below present a concise version of the front-end roadmap.</p>\n<h3 id=\"step-1-learn-web-development-fundamentals\">Step 1: Learn web development fundamentals</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/learn-web-fundementals-bg7c8.jpeg\" alt=\"Web development fundamentals\"></p>\n<p>The first step toward becoming a front-end developer is to learn the fundamentals. These are the foundations for everything you create on the web.</p>\n<p>It involves learning:</p>\n<ul>\n<li><strong>HTML (Hyper Text Markup Language)</strong>: For structuring the content on a webpage. HTML is the blueprint or skeletal structure of a website. It defines the different elements of websites, like headings, paragraphs, and images.</li>\n<li><strong>CSS (Cascading Style Sheets):</strong> For styling the content on a webpage. It is a styling language that controls the layout and appearance of HTML-based web pages. With CSS, you can add colors, fonts, and more to your web pages.</li>\n<li><strong>JavaScript</strong>: <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> adds interactivity and functionality to web pages. It is a programming language that makes HTML and CSS static websites functional. Thanks to JavaScript, web pages can respond to user actions. For example, you can achieve your desired outcome when you click a button or submit a form on a website.</li>\n</ul>\n<p>Building beautiful websites and applications begins with learning HTML, CSS, and JavaScript. It gives you many job options in web development and lets you create your own website!</p>\n<h3 id=\"step-2-practice-building-projects\">Step 2: Practice building projects</h3>\n<p>Coding is like playing video games: you have to put in a lot of practice to become proficient. So, don’t just watch or read tutorials about coding concepts daily–apply them! It will improve your programming skills. If all you do is learn without practicing, you will be an expert in theory but an amateur in practice.</p>\n<p>Write code regularly and work on building projects, no matter how small. Follow a learning, practicing, and repetition cycle to enhance your skills. As you work on small projects, you’ll gain experience with HTML, CSS, and JavaScript.</p>\n<p>Some ways to practice building projects include:</p>\n<ul>\n<li><strong>Personal projects</strong>: Build projects that address a problem or individual needs. These include tribute pages, calculators, or to-do list applications.</li>\n<li>Join a technical team or find a coding partner to work on a project together.</li>\n<li><strong>Project work</strong>: Work on a client project or contribute to open-source projects on GitHub. It will allow you to learn from others, contribute to existing code, and connect with new people.</li>\n<li><strong>Code challenges</strong>: Participate in code challenges on platforms like <a href=\"https://www.hackerrank.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">HackerRank</a> and <a href=\"https://leetcode.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">LeetCode</a>. These sites provide various exercises for practicing <a href=\"https://cesscode.hashnode.dev/resources-to-help-you-practice-web-development\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">front-end and building websites</a>.</li>\n</ul>\n<p>As you practice coding consistently, you will face a lot of issues. The more problems you solve, the better you become.</p>\n<h3 id=\"step-3-learn-the-version-control-systems-and-the-command-line\">Step 3: Learn the version control systems and the command line.</h3>\n<p>As a front-end developer, learning version control systems <strong>(VCS)</strong> and the command line is vital. They make it easier for you to:</p>\n<ul>\n<li>Track and manage source code modifications.</li>\n<li>Work with others on the same project.</li>\n<li>Streamline your workflow and automate tasks.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/version-control-systems-qwtx6.jpeg\" alt=\"Version control systems\"></p>\n<p>Examples of version control systems include Git <strong>(e.g., GitHub, GitLab, Bitbucket).</strong> Git enables you to:</p>\n<ul>\n<li>Create and manage repositories</li>\n<li>Create branches and merge code</li>\n<li>Commit changes and track source code revisions</li>\n</ul>\n<p>When you become skilled at using Git, you’ll work and deploy projects faster. This documentation provides a detailed guide to help you learn everything you need to know about <a href=\"https://github.com/git-guides\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Git</a>.</p>\n<h3 id=\"step-4-learn-front-end-frameworks-and-libraries\">Step 4: Learn front-end frameworks and libraries</h3>\n<p>Learning <a href=\"https://roadmap.sh/frontend/frameworks\" target=\"_blank\">front-end frameworks</a> and libraries is essential for a front-end developer. It will make your job easier and help you build faster websites and applications.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-frameworks-and-libraries-8vplh.jpeg\" alt=\"Front-end frameworks and libraries\"></p>\n<p>Examples of front-end development frameworks and libraries include:</p>\n<ul>\n<li><strong>CSS libraries</strong>: CSS libraries are pre-designed CSS templates for styling websites and applications. They provide ready-made design solutions, such as responsive layouts and button styling. Examples of CSS libraries are Bootstrap and TailwindCSS. They help you to work faster, keep your design consistent, and not write too much CSS code from scratch.</li>\n<li><strong>JavaScript frameworks:</strong> JavaScript frameworks are more extensive collections of code. They are building blocks for creating web applications and providing structure and functionality. Their pre-defined structure quickens development for creating complex web applications. Popular JavaScript frameworks include <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a> and <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue.js</a>.</li>\n<li><strong>JavaScript libraries:</strong> JavaScript libraries are similar to CSS libraries. Examples of JavaScript libraries are Chart.js and <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>. They offer pre-built functions for performing tasks like DOM manipulation and event handling.</li>\n</ul>\n<p>Before learning a front-end framework or library, ensure you understand HTML, CSS, and JavaScript. It will give you an in-depth understanding of how frameworks and libraries work.</p>\n<h3 id=\"step-5-study-the-accessibility-and-responsive-design-principles\">Step 5: Study the accessibility and responsive design principles</h3>\n<p>Becoming an expert frontend developer requires understanding accessibility and responsive design principles. These principles ensure that everyone can use your website and that it looks good on all devices.</p>\n<p>Responsive design involves creating websites that are:</p>\n<ul>\n<li>Adaptable to several screen sizes and devices, e.g., laptops, tablets, and smartphones.</li>\n<li>Able to deliver the best possible user experience on various devices.</li>\n</ul>\n<p>Accessible design involves creating websites that are:</p>\n<ul>\n<li>Usable by a wide range of users, including users with disabilities.</li>\n<li>Following guidelines and standards of accessibility.</li>\n</ul>\n<p>Understanding these principles demonstrates your commitment to best practices for front-end development. As a result, you become a better front-end developer and more job-ready.</p>\n<h3 id=\"step-6-join-developer-communities-and-attend-events\">Step 6: Join developer communities and attend events</h3>\n<p>Attending developer events and joining a community is essential for aspiring front-end developers. The best part? You can join in from your work desk <strong>(online)</strong> or look for events nearby <strong>(offline)</strong> that work with your plans. These include conferences, meet-ups, and online forums like the <a href=\"https://discord.com/invite/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap community.</a></p>\n<p>By joining a developer community and attending tech events, you’ll:</p>\n<ul>\n<li>Become part of a supportive community.</li>\n<li>Get access to resources and tools that can help simplify your development process.</li>\n<li>Participate in workshops and sessions that will expand your skills.</li>\n<li>Connect with colleagues to learn about new opportunities.</li>\n</ul>\n<h3 id=\"step-7-build-a-portfolio-and-apply-for-jobs\">Step 7: Build a portfolio and apply for jobs</h3>\n<p>The final step in becoming a front-end developer is to build an online portfolio and apply for jobs. Portfolios are visual representations of your skills, and they should include:</p>\n<ul>\n<li>Real-world projects that showcase your skills in HTML, CSS, JavaScript, React and more. These projects could include anything from basic websites to complex web applications. However, it’s advisable to include complex projects like an e-commerce application.</li>\n<li>Open source contributions code.</li>\n<li>Code examples to demonstrate your problem-solving skills.</li>\n</ul>\n<p>Once you’ve built a solid portfolio, it’s time to apply for a front-end developer job. This process includes writing a cover letter and resume and preparing for interviews. This roadmap.sh guide will help you prepare for these interviews: <a href=\"https://roadmap.sh/questions/frontend\" target=\"_blank\">Top Front End Developer Interview Questions</a>.</p>\n<p>But remember, front-end development is a continuous learning process. So, it’s essential to keep learning during and after a job search to keep up with new tools and trends.</p>\n<h2 id=\"responsibilities-of-a-front-end-developer\">Responsibilities of a front-end developer</h2>\n<p>Now that you’ve taken the steps to become a front-end developer, it’s time to dive into the heart of the role.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/responsibilites-of-frontend-developer-r6k0m.jpeg\" alt=\"Responsibilities of a front-end developer\"></p>\n<p>Creating an effective website involves managing various responsibilities as a front-end developer, such as:</p>\n<ul>\n<li>Collaboration with other teams.</li>\n<li>Building user interfaces.</li>\n<li>Responsiveness and cross-browser compatibility.</li>\n<li>Implementing website functionality and interactivity.</li>\n</ul>\n<h3 id=\"collaboration-with-other-teams\">Collaboration with other teams</h3>\n<p><img src=\"https://assets.roadmap.sh/guest/collaboration-with-other-teams-04way.jpeg\" alt=\"Collaboration with other teams\"></p>\n<p>Front-end development is usually not done alone. It is a team effort! It involves everyone working together and communicating well to ensure a successful project. As a front-end developer, you will work with several teams, such as:</p>\n<ul>\n<li><strong>Back-end developers</strong>: <a href=\"https://roadmap.sh/backend\" target=\"_blank\">Back-end developers</a> build the server side of websites and web applications. They handle many functionalities you don’t see on a website or web application. These functionalities include developing APIs <strong>(application program interfaces)</strong> and managing server-side logic. Front-end and back-end developers collaborate to create a functional and secure website.</li>\n<li><strong>UI designers</strong>: UI designers create the visual elements of websites and applications. They design the color scheme, layout, and interactive elements like buttons. Front-end developers collaborate with UI designers to understand the design requirements. They use their technical skills to turn these designs into functional, interactive websites.</li>\n</ul>\n<h3 id=\"building-user-interfaces\">Building user interfaces</h3>\n<p>The responsibility of creating user interfaces (UIs) falls to front-end developers. Building UIs begins after the front-end developer understands the design requirements. It involves transforming design concepts into functional and interactive websites.</p>\n<p>The processes involved in building UIs include:</p>\n<ul>\n<li>Writing clean, maintainable, and efficient code.</li>\n<li><strong>Accessibility and performance optimization</strong>: Front-end developers must prioritize accessibility. All users, including users with disabilities, must be able to access the UI. They must consider color contrast, keyboard navigation, and other accessibility features. Also, they should optimize performance by using lazy loading methods for fast-load times.</li>\n<li><strong>Testing and iteration.</strong> Testing the UI for bugs and usability issues is essential. It ensures the interface is easy to use and meets the desired quality.</li>\n</ul>\n<h3 id=\"responsiveness-and-cross-browser-compatibility\">Responsiveness and cross-browser compatibility</h3>\n<p>Front-end developers are responsible for ensuring project responsiveness and cross-browser compatibility. It often takes place when building user interfaces.</p>\n<p>This process involves building a website and web application that:</p>\n<ul>\n<li>Adjust to various devices and screen sizes <strong>(responsive web design)</strong>.</li>\n<li>Function consistently in different web browsers, like Chrome and Firefox <strong>(cross-browser compatibility)</strong>.</li>\n</ul>\n<h3 id=\"implementing-website-functionality-and-interactivity\">Implementing website functionality and interactivity</h3>\n<p>Front-end developers are responsible for implementing website functionality and interactivity. This step often follows the designer’s completion of the user interface layout. The process involves making user-friendly UIs that boost user experience and engagement.</p>\n<p>It involves several steps, like:</p>\n<ul>\n<li>\n<p>Writing JavaScript code to create interactive features. These interactive features include:</p>\n<ul>\n<li>Form validation - To check if the web user fills the form fields correctly.</li>\n<li>Interactive elements like image sliders, clickable buttons, and dropdown menus.</li>\n</ul>\n</li>\n<li>\n<p>Using CSS animations or JavaScript transitions for interactive responses. These transitions and animations include:</p>\n<ul>\n<li>Smooth scrolling animations for a better browsing experience.</li>\n<li>Animated dropdown menus for easy-to-use web navigation.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"frequently-asked-questions-faq-becoming-a-front-end-developer\">Frequently asked questions (FAQ): Becoming a front-end developer</h2>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-developer-faqs-zhhns.jpeg\" alt=\"Frequently asked questions: Becoming a front-end developer\"></p>\n<p>The process of becoming a front-end developer may pose some questions to you. The following are some answers to common questions to get you started:</p>\n<h3 id=\"do-i-need-any-prior-knowledge-to-start-learning-front-end-development\">Do I need any prior knowledge to start learning front-end development?</h3>\n<p>No, learning front-end development does not require any prior knowledge. But it’s good to have a basic idea of how computers and the internet work. <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a> provides a clear step-by-step <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end roadmap</a> to help you get started.</p>\n<h3 id=\"is-a-degree-in-computer-science-necessary-to-become-a-front-end-developer\">Is a degree in Computer Science necessary to become a front-end developer?</h3>\n<p>Nope, you don’t need a Computer Science degree. Many front-end developers are self-taught and have learned through online resources. An impressive portfolio is the key to demonstrating your front-end development skills.</p>\n<h3 id=\"which-languages-should-i-study-to-learn-front-end-development\">Which languages should I study to learn front-end development?</h3>\n<p>The following are the main coding <a href=\"https://roadmap.sh/frontend/languages\" target=\"_blank\">languages used in front-end development</a>:</p>\n<ul>\n<li><strong>HTML (Hypertext Markup Language)</strong>: For structuring the content on a webpage.</li>\n<li><strong>CSS (Cascading Style Sheets)</strong>: For styling the content on a webpage.</li>\n<li><strong>JavaScript</strong>: for adding interactivity and functionality to web pages</li>\n</ul>\n<h3 id=\"how-skilled-in-these-coding-languages-must-i-be-to-land-my-first-job\">How skilled in these coding languages must I be to land my first job?</h3>\n<p>To secure your first job as a front-end developer, you must be proficient in HTML, CSS, and JavaScript. It will allow you to create a <a href=\"https://roadmap.sh/frontend/web-developer-portfolio\" target=\"_blank\">web developer portfolio</a> site that shows your coding skills to employers.</p>\n<h3 id=\"is-html-css-and-javascript-enough-for-a-front-end-developer\">Is HTML, CSS, and JavaScript enough for a front-end developer?</h3>\n<p>HTML, CSS, and JavaScript are fundamental knowledge for any front-end developer. However, knowledge of frameworks and libraries like React is also essential.</p>\n<h3 id=\"which-skills-are-vital-for-a-professional-front-end-developer\">Which skills are vital for a professional front-end developer?</h3>\n<p>The following are some of the essential front-end developer skills:</p>\n<ul>\n<li>Solid understanding of core <a href=\"https://roadmap.sh/frontend/technologies\" target=\"_blank\">frontend technologies</a>, e.g., HTML, CSS, and JavaScript.</li>\n<li>Proficient in using version control systems, e.g., Git.</li>\n<li>Practical experience with front-end frameworks and libraries such as React and TailwindCSS.</li>\n<li><strong>Soft skills</strong>: Communication, problem-solving, and collaboration skills.</li>\n</ul>\n<h3 id=\"how-long-does-it-take-to-become-a-frontend-developer\">How long does it take to become a frontend developer?</h3>\n<p>How long it takes to become a front-end developer depends on how much time you spend learning. But if you are consistent, you can master the basics in a couple of months and more advanced skills in a year or two.</p>\n<h3 id=\"is-it-possible-for-me-to-become-a-frontend-developer-on-my-own\">Is it possible for me to become a frontend developer on my own?</h3>\n<p>Yes, you can learn how to become a frontend developer by using online resources.</p>\n<h3 id=\"can-i-learn-front-end-development-in-2-months\">Can I learn front-end development in 2 months?</h3>\n<p>You can pick up the basics of frontend development in 2 months. However, getting really good at it takes more time.</p>\n<h3 id=\"what-is-the-difference-between-a-frontend-developer-and-a-back-end-developer\">What is the difference between a frontend developer and a back-end developer?</h3>\n<p>Frontend developer develops user interfaces and user experiences for web applications and websites. They use coding languages like HTML, CSS, and JavaScript to create visual elements you can see and directly interact with on your phone. Examples of these visual elements include Buttons, forms, and text.</p>\n<p>Backend developers create the invisible elements on a web page, like database structures and queries. They create the back-end logic that keeps the website running smoothly using programming languages like Python and Java.</p>\n<h3 id=\"who-is-a-full-stack-developer\">Who is a full-stack developer?</h3>\n<p>A full-stack developer specializes in both frontend and backend development.</p>\n<h3 id=\"does-a-front-end-developer-need-to-know-backend-development\">Does a front-end developer need to know backend development?</h3>\n<p>Though it is not required, having a grasp of the basics of backend development can be helpful. It makes it easier to work with backend developers and better understand how the web works.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>To become a front-end developer, you need a mix of skills, dedication, and the right guidance. If you follow the steps in this guide, you’ll be on track to kickstart an excellent front-end career. Stay on track with a personalized learning plan available on roadmap.sh.</p>\n<p>roadmap.sh will keep you focused and help you reach your maximum potential as a front-end developer. It has numerous resources that will help you learn front-end and web development. To get started, sign up, create a <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end roadmap plan</a>, and begin studying. You can also share the roadmap with your study buddies.</p>";

				const frontmatter$w = {"title":"How to Become a Front-End Developer in 7 Steps","description":"Learn how to become a front-end developer in 7 clear steps. Start your coding journey with practical tips and resources today!","authorId":"william","excludedBySlug":"/frontend/how-to-become-frontend-developer","seo":{"title":"How to become a Front-End Developer in 7 Steps","description":"Learn how to become a front-end developer in 7 clear steps. Start your coding journey with practical tips and resources today!","ogImageUrl":"https://assets.roadmap.sh/guest/how-to-become-frontend-developer-i23nx.jpg"},"relatedTitle":"Other Guides","relatedGuidesId":"frontend","isNew":false,"type":"textual","date":"2024-08-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$w = "/workspace/src/data/guides/how-to-become-frontend-developer.md";
				const url$w = undefined;
				function rawContent$w() {
					return "   \n                                                       \n                                                                                                                                             \n                 \n                                                            \n    \n                                                         \n                                                                                                                                               \n                                                                                          \n                            \n                         \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How to become a frontend developer.](https://assets.roadmap.sh/guest/how-to-become-frontend-developer-i23nx.jpg)\n\nFront-end developers **(also referred to as front-end engineers or client-side developers)** create the user interface (UI) and user experience (UX) of web pages and web applications. Using HTML, CSS, and JavaScript, they transform static designs into functional web pages. They create interactive and visual elements that users interact with directly, including buttons, forms, and navigation menus.\n\n[Front-end developers](https://roadmap.sh/frontend) are a crucial part of any team. They ensure that websites are user-friendly, load fast, and rank high on search engines. So, companies seek skilled front-end developers who can create dynamic and responsive websites.\n\nHowever, becoming a front-end developer isn't just about jumping straight into coding. It's a deliberate process that involves following specific steps.\n\n**TL;DR**: Become a front-end developer in 7 steps:\n\n- **Step 1**: Learn web development fundamentals.\n- **Step 2**: Practice building projects.\n- **Step 3**: Learn the version control systems and the command line.\n- **Step 4**: Learn front-end frameworks and libraries.\n- **Step 5**: Study the accessibility and responsive design principles\n- **Step 6:** Join online communities and attend events.\n- **Step 7**: Build a portfolio and apply for jobs.\n\nThe above steps will give you the [skills](https://roadmap.sh/frontend/developer-skills) to become a proficient front-end developer. This guide will provide a deep dive into the steps and benefits of working in a front-end position.\n\n## Benefits of pursuing a career in front-end development\n\nThe job market requires skilled professionals to create dynamic websites and web applications as part of most [frontend developer job descriptions](https://roadmap.sh/frontend/job-description). This demand makes front-end development a role filled with numerous career opportunities.\n\nSome of the benefits of pursuing a career in front-end development include:\n\n- High demand and employment stability.\n- Flexible career.\n- Competitive earning potential.\n\n### High demand and employment stability\n\nFront-end development is a highly sought-after skill set in the tech industry. The demand isn't limited to a particular sector; it extends to healthcare, e-commerce, gaming, etc., making it a lucrative career choice.\n\n![Job Outlook for Front-End Developers](https://assets.roadmap.sh/guest/job-outlook-frontend-engineer-tvm05.jpeg)\n\n[BLS (Bureau of Labor Statistics)](https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm) projects a 16% increase in web developer jobs from 2022 to 2032. This rate exceeds the average for all other jobs by a significant margin. So, there will always be a need for front-end developers, which means job security and a steady career path.\n\n### Flexible career\n\nThe front-end development field offers many benefits, one of which is flexibility. You can work as a freelancer, remotely, or in a hybrid role – whatever works best for you! Or, if you prefer, you can go with a more traditional office setup. This flexibility gives you the power to:\n\n- Work from anywhere on the planet as long as you can access the Internet.\n- Find projects and clients that align with your interests and goals.\n- Connect with global teams and build your professional network.\n\n### Competitive earning potential\n\nFront-end development provides a financially rewarding career path with competitive salaries. As per Glassdoor, front-end developers make an average salary of $85,432 in the United States.\n\n![Frontend Developer Salary](https://assets.roadmap.sh/guest/frontend-engineer-salary-smqar.PNG)\n\nHowever, how much you earn can depend on your experience, the size of the company, and where you're looking for a job.\n\n## Become a front-end developer in 7 steps\n![How to become a frontend developer in 7 steps](https://assets.roadmap.sh/guest/how-to-become-frontend-developer-in-7-steps-2gigl.jpeg)\n\nThe number of online resources available to learn front-end development can be overwhelming. It's hard for aspiring front-end developers to know where to start. However, roadmap.sh provides a clear step-by-step [front-end roadmap](https://roadmap.sh/frontend) to help you learn.\n\nThe guide breaks it down so you don't have to guess and gives you all you need to learn front-end development. The steps below present a concise version of the front-end roadmap.\n\n### Step 1: Learn web development fundamentals\n\n![Web development fundamentals](https://assets.roadmap.sh/guest/learn-web-fundementals-bg7c8.jpeg)\n\nThe first step toward becoming a front-end developer is to learn the fundamentals. These are the foundations for everything you create on the web.\n\nIt involves learning:\n\n- **HTML (Hyper Text Markup Language)**: For structuring the content on a webpage. HTML is the blueprint or skeletal structure of a website. It defines the different elements of websites, like headings, paragraphs, and images.\n- **CSS (Cascading Style Sheets):** For styling the content on a webpage. It is a styling language that controls the layout and appearance of HTML-based web pages. With CSS, you can add colors, fonts, and more to your web pages.\n- **JavaScript**: [JavaScript](https://roadmap.sh/javascript) adds interactivity and functionality to web pages. It is a programming language that makes HTML and CSS static websites functional. Thanks to JavaScript, web pages can respond to user actions. For example, you can achieve your desired outcome when you click a button or submit a form on a website.\n\nBuilding beautiful websites and applications begins with learning HTML, CSS, and JavaScript. It gives you many job options in web development and lets you create your own website!\n\n### Step 2: Practice building projects\n\nCoding is like playing video games: you have to put in a lot of practice to become proficient. So, don't just watch or read tutorials about coding concepts daily–apply them! It will improve your programming skills. If all you do is learn without practicing, you will be an expert in theory but an amateur in practice.\n\nWrite code regularly and work on building projects, no matter how small. Follow a learning, practicing, and repetition cycle to enhance your skills. As you work on small projects, you'll gain experience with HTML, CSS, and JavaScript.\n\nSome ways to practice building projects include:\n\n- **Personal projects**: Build projects that address a problem or individual needs. These include tribute pages, calculators, or to-do list applications.\n- Join a technical team or find a coding partner to work on a project together.\n- **Project work**: Work on a client project or contribute to open-source projects on GitHub. It will allow you to learn from others, contribute to existing code, and connect with new people.\n- **Code challenges**: Participate in code challenges on platforms like [HackerRank](https://www.hackerrank.com/) and [LeetCode](https://leetcode.com/). These sites provide various exercises for practicing [front-end and building websites](https://cesscode.hashnode.dev/resources-to-help-you-practice-web-development).\n\nAs you practice coding consistently, you will face a lot of issues. The more problems you solve, the better you become.\n\n### Step 3: Learn the version control systems and the command line.\n\nAs a front-end developer, learning version control systems **(VCS)** and the command line is vital. They make it easier for you to:\n\n- Track and manage source code modifications.\n- Work with others on the same project.\n- Streamline your workflow and automate tasks.\n\n![Version control systems](https://assets.roadmap.sh/guest/version-control-systems-qwtx6.jpeg)\n\nExamples of version control systems include Git **(e.g., GitHub, GitLab, Bitbucket).** Git enables you to:\n\n- Create and manage repositories\n- Create branches and merge code\n- Commit changes and track source code revisions\n\nWhen you become skilled at using Git, you'll work and deploy projects faster. This documentation provides a detailed guide to help you learn everything you need to know about [Git](https://github.com/git-guides).\n\n### Step 4: Learn front-end frameworks and libraries\n\nLearning [front-end frameworks](https://roadmap.sh/frontend/frameworks) and libraries is essential for a front-end developer. It will make your job easier and help you build faster websites and applications.\n\n![Front-end frameworks and libraries](https://assets.roadmap.sh/guest/frontend-frameworks-and-libraries-8vplh.jpeg)\n\nExamples of front-end development frameworks and libraries include:\n\n- **CSS libraries**: CSS libraries are pre-designed CSS templates for styling websites and applications. They provide ready-made design solutions, such as responsive layouts and button styling. Examples of CSS libraries are Bootstrap and TailwindCSS. They help you to work faster, keep your design consistent, and not write too much CSS code from scratch.\n- **JavaScript frameworks:** JavaScript frameworks are more extensive collections of code. They are building blocks for creating web applications and providing structure and functionality. Their pre-defined structure quickens development for creating complex web applications. Popular JavaScript frameworks include [Angular](https://roadmap.sh/angular) and [Vue.js](https://roadmap.sh/vue).\n- **JavaScript libraries:** JavaScript libraries are similar to CSS libraries. Examples of JavaScript libraries are Chart.js and [React](https://roadmap.sh/react). They offer pre-built functions for performing tasks like DOM manipulation and event handling.\n\nBefore learning a front-end framework or library, ensure you understand HTML, CSS, and JavaScript. It will give you an in-depth understanding of how frameworks and libraries work.\n\n### Step 5: Study the accessibility and responsive design principles\n\nBecoming an expert frontend developer requires understanding accessibility and responsive design principles. These principles ensure that everyone can use your website and that it looks good on all devices.\n\nResponsive design involves creating websites that are:\n\n- Adaptable to several screen sizes and devices, e.g., laptops, tablets, and smartphones.\n- Able to deliver the best possible user experience on various devices.\n\nAccessible design involves creating websites that are:\n\n- Usable by a wide range of users, including users with disabilities.\n- Following guidelines and standards of accessibility.\n\nUnderstanding these principles demonstrates your commitment to best practices for front-end development. As a result, you become a better front-end developer and more job-ready.\n\n### Step 6: Join developer communities and attend events\n\nAttending developer events and joining a community is essential for aspiring front-end developers. The best part? You can join in from your work desk **(online)** or look for events nearby **(offline)** that work with your plans. These include conferences, meet-ups, and online forums like the [roadmap community.](https://discord.com/invite/cJpEt5Qbwa)\n\nBy joining a developer community and attending tech events, you'll:\n\n- Become part of a supportive community.\n- Get access to resources and tools that can help simplify your development process.\n- Participate in workshops and sessions that will expand your skills.\n- Connect with colleagues to learn about new opportunities.\n\n### Step 7: Build a portfolio and apply for jobs\n\nThe final step in becoming a front-end developer is to build an online portfolio and apply for jobs. Portfolios are visual representations of your skills, and they should include:\n\n- Real-world projects that showcase your skills in HTML, CSS, JavaScript, React and more. These projects could include anything from basic websites to complex web applications. However, it's advisable to include complex projects like an e-commerce application.\n- Open source contributions code.\n- Code examples to demonstrate your problem-solving skills.\n\nOnce you've built a solid portfolio, it's time to apply for a front-end developer job. This process includes writing a cover letter and resume and preparing for interviews. This roadmap.sh guide will help you prepare for these interviews: [Top Front End Developer Interview Questions](https://roadmap.sh/questions/frontend).\n\nBut remember, front-end development is a continuous learning process. So, it's essential to keep learning during and after a job search to keep up with new tools and trends.\n\n## Responsibilities of a front-end developer\n\nNow that you've taken the steps to become a front-end developer, it's time to dive into the heart of the role.\n\n![Responsibilities of a front-end developer](https://assets.roadmap.sh/guest/responsibilites-of-frontend-developer-r6k0m.jpeg)\n\nCreating an effective website involves managing various responsibilities as a front-end developer, such as:\n\n- Collaboration with other teams.\n- Building user interfaces.\n- Responsiveness and cross-browser compatibility.\n- Implementing website functionality and interactivity.\n\n### Collaboration with other teams\n\n![Collaboration with other teams](https://assets.roadmap.sh/guest/collaboration-with-other-teams-04way.jpeg)\n\nFront-end development is usually not done alone. It is a team effort! It involves everyone working together and communicating well to ensure a successful project. As a front-end developer, you will work with several teams, such as:\n\n- **Back-end developers**: [Back-end developers](https://roadmap.sh/backend) build the server side of websites and web applications. They handle many functionalities you don't see on a website or web application. These functionalities include developing APIs **(application program interfaces)** and managing server-side logic. Front-end and back-end developers collaborate to create a functional and secure website.\n- **UI designers**: UI designers create the visual elements of websites and applications. They design the color scheme, layout, and interactive elements like buttons. Front-end developers collaborate with UI designers to understand the design requirements. They use their technical skills to turn these designs into functional, interactive websites.\n\n### Building user interfaces\n\nThe responsibility of creating user interfaces (UIs) falls to front-end developers. Building UIs begins after the front-end developer understands the design requirements. It involves transforming design concepts into functional and interactive websites.\n\nThe processes involved in building UIs include:\n\n- Writing clean, maintainable, and efficient code.\n- **Accessibility and performance optimization**: Front-end developers must prioritize accessibility. All users, including users with disabilities, must be able to access the UI. They must consider color contrast, keyboard navigation, and other accessibility features. Also, they should optimize performance by using lazy loading methods for fast-load times.\n- **Testing and iteration.** Testing the UI for bugs and usability issues is essential. It ensures the interface is easy to use and meets the desired quality.\n\n### Responsiveness and cross-browser compatibility\n\nFront-end developers are responsible for ensuring project responsiveness and cross-browser compatibility. It often takes place when building user interfaces.\n\nThis process involves building a website and web application that:\n\n- Adjust to various devices and screen sizes **(responsive web design)**.\n- Function consistently in different web browsers, like Chrome and Firefox **(cross-browser compatibility)**.\n\n### Implementing website functionality and interactivity\n\nFront-end developers are responsible for implementing website functionality and interactivity. This step often follows the designer's completion of the user interface layout. The process involves making user-friendly UIs that boost user experience and engagement.\n\nIt involves several steps, like:\n\n- Writing JavaScript code to create interactive features. These interactive features include:\n    - Form validation - To check if the web user fills the form fields correctly.\n    - Interactive elements like image sliders, clickable buttons, and dropdown menus.\n\n- Using CSS animations or JavaScript transitions for interactive responses. These transitions and animations include:\n    - Smooth scrolling animations for a better browsing experience.\n    - Animated dropdown menus for easy-to-use web navigation.\n\n## Frequently asked questions (FAQ): Becoming a front-end developer\n\n![Frequently asked questions: Becoming a front-end developer](https://assets.roadmap.sh/guest/frontend-developer-faqs-zhhns.jpeg)\n\nThe process of becoming a front-end developer may pose some questions to you. The following are some answers to common questions to get you started:\n\n### Do I need any prior knowledge to start learning front-end development?\n\nNo, learning front-end development does not require any prior knowledge. But it's good to have a basic idea of how computers and the internet work. [roadmap.sh](http://roadmap.sh) provides a clear step-by-step [front-end roadmap](https://roadmap.sh/frontend) to help you get started.\n\n### Is a degree in Computer Science necessary to become a front-end developer?\n\nNope, you don't need a Computer Science degree. Many front-end developers are self-taught and have learned through online resources. An impressive portfolio is the key to demonstrating your front-end development skills.\n\n### Which languages should I study to learn front-end development?\n\nThe following are the main coding [languages used in front-end development](https://roadmap.sh/frontend/languages):\n\n- **HTML (Hypertext Markup Language)**: For structuring the content on a webpage.\n- **CSS (Cascading Style Sheets)**: For styling the content on a webpage.\n- **JavaScript**: for adding interactivity and functionality to web pages\n\n### How skilled in these coding languages must I be to land my first job?\n\nTo secure your first job as a front-end developer, you must be proficient in HTML, CSS, and JavaScript. It will allow you to create a [web developer portfolio](https://roadmap.sh/frontend/web-developer-portfolio) site that shows your coding skills to employers.\n\n### Is HTML, CSS, and JavaScript enough for a front-end developer?\n\nHTML, CSS, and JavaScript are fundamental knowledge for any front-end developer. However, knowledge of frameworks and libraries like React is also essential.\n\n### Which skills are vital for a professional front-end developer?\n\nThe following are some of the essential front-end developer skills:\n\n- Solid understanding of core [frontend technologies](https://roadmap.sh/frontend/technologies), e.g., HTML, CSS, and JavaScript.\n- Proficient in using version control systems, e.g., Git.\n- Practical experience with front-end frameworks and libraries such as React and TailwindCSS.\n- **Soft skills**: Communication, problem-solving, and collaboration skills.\n\n### How long does it take to become a frontend developer?\n\nHow long it takes to become a front-end developer depends on how much time you spend learning. But if you are consistent, you can master the basics in a couple of months and more advanced skills in a year or two.\n\n### Is it possible for me to become a frontend developer on my own?\n\nYes, you can learn how to become a frontend developer by using online resources.\n\n### Can I learn front-end development in 2 months?\n\nYou can pick up the basics of frontend development in 2 months. However, getting really good at it takes more time.\n\n### What is the difference between a frontend developer and a back-end developer?\n\nFrontend developer develops user interfaces and user experiences for web applications and websites. They use coding languages like HTML, CSS, and JavaScript to create visual elements you can see and directly interact with on your phone. Examples of these visual elements include Buttons, forms, and text.\n\nBackend developers create the invisible elements on a web page, like database structures and queries. They create the back-end logic that keeps the website running smoothly using programming languages like Python and Java.\n\n### Who is a full-stack developer?\n\nA full-stack developer specializes in both frontend and backend development.\n\n### Does a front-end developer need to know backend development?\n\nThough it is not required, having a grasp of the basics of backend development can be helpful. It makes it easier to work with backend developers and better understand how the web works.\n\n## What next?\n\nTo become a front-end developer, you need a mix of skills, dedication, and the right guidance. If you follow the steps in this guide, you'll be on track to kickstart an excellent front-end career. Stay on track with a personalized learning plan available on roadmap.sh.\n\nroadmap.sh will keep you focused and help you reach your maximum potential as a front-end developer. It has numerous resources that will help you learn front-end and web development. To get started, sign up, create a [front-end roadmap plan](https://roadmap.sh/frontend), and begin studying. You can also share the roadmap with your study buddies.\n";
				}
				async function compiledContent$w() {
					return await html$w();
				}
				function getHeadings$w() {
					return [{"depth":2,"slug":"benefits-of-pursuing-a-career-in-front-end-development","text":"Benefits of pursuing a career in front-end development"},{"depth":3,"slug":"high-demand-and-employment-stability","text":"High demand and employment stability"},{"depth":3,"slug":"flexible-career","text":"Flexible career"},{"depth":3,"slug":"competitive-earning-potential","text":"Competitive earning potential"},{"depth":2,"slug":"become-a-front-end-developer-in-7-steps","text":"Become a front-end developer in 7 steps"},{"depth":3,"slug":"step-1-learn-web-development-fundamentals","text":"Step 1: Learn web development fundamentals"},{"depth":3,"slug":"step-2-practice-building-projects","text":"Step 2: Practice building projects"},{"depth":3,"slug":"step-3-learn-the-version-control-systems-and-the-command-line","text":"Step 3: Learn the version control systems and the command line."},{"depth":3,"slug":"step-4-learn-front-end-frameworks-and-libraries","text":"Step 4: Learn front-end frameworks and libraries"},{"depth":3,"slug":"step-5-study-the-accessibility-and-responsive-design-principles","text":"Step 5: Study the accessibility and responsive design principles"},{"depth":3,"slug":"step-6-join-developer-communities-and-attend-events","text":"Step 6: Join developer communities and attend events"},{"depth":3,"slug":"step-7-build-a-portfolio-and-apply-for-jobs","text":"Step 7: Build a portfolio and apply for jobs"},{"depth":2,"slug":"responsibilities-of-a-front-end-developer","text":"Responsibilities of a front-end developer"},{"depth":3,"slug":"collaboration-with-other-teams","text":"Collaboration with other teams"},{"depth":3,"slug":"building-user-interfaces","text":"Building user interfaces"},{"depth":3,"slug":"responsiveness-and-cross-browser-compatibility","text":"Responsiveness and cross-browser compatibility"},{"depth":3,"slug":"implementing-website-functionality-and-interactivity","text":"Implementing website functionality and interactivity"},{"depth":2,"slug":"frequently-asked-questions-faq-becoming-a-front-end-developer","text":"Frequently asked questions (FAQ): Becoming a front-end developer"},{"depth":3,"slug":"do-i-need-any-prior-knowledge-to-start-learning-front-end-development","text":"Do I need any prior knowledge to start learning front-end development?"},{"depth":3,"slug":"is-a-degree-in-computer-science-necessary-to-become-a-front-end-developer","text":"Is a degree in Computer Science necessary to become a front-end developer?"},{"depth":3,"slug":"which-languages-should-i-study-to-learn-front-end-development","text":"Which languages should I study to learn front-end development?"},{"depth":3,"slug":"how-skilled-in-these-coding-languages-must-i-be-to-land-my-first-job","text":"How skilled in these coding languages must I be to land my first job?"},{"depth":3,"slug":"is-html-css-and-javascript-enough-for-a-front-end-developer","text":"Is HTML, CSS, and JavaScript enough for a front-end developer?"},{"depth":3,"slug":"which-skills-are-vital-for-a-professional-front-end-developer","text":"Which skills are vital for a professional front-end developer?"},{"depth":3,"slug":"how-long-does-it-take-to-become-a-frontend-developer","text":"How long does it take to become a frontend developer?"},{"depth":3,"slug":"is-it-possible-for-me-to-become-a-frontend-developer-on-my-own","text":"Is it possible for me to become a frontend developer on my own?"},{"depth":3,"slug":"can-i-learn-front-end-development-in-2-months","text":"Can I learn front-end development in 2 months?"},{"depth":3,"slug":"what-is-the-difference-between-a-frontend-developer-and-a-back-end-developer","text":"What is the difference between a frontend developer and a back-end developer?"},{"depth":3,"slug":"who-is-a-full-stack-developer","text":"Who is a full-stack developer?"},{"depth":3,"slug":"does-a-front-end-developer-need-to-know-backend-development","text":"Does a front-end developer need to know backend development?"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$w = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$w;
					content.file = file$w;
					content.url = url$w;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$w())}`;
				});

const __vite_glob_0_66 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$w,
	compiledContent: compiledContent$w,
	default: Content$w,
	file: file$w,
	frontmatter: frontmatter$w,
	getHeadings: getHeadings$w,
	rawContent: rawContent$w,
	url: url$w
}, Symbol.toStringTag, { value: 'Module' }));

const html$v = () => "<p>Given below is the demonstration of a sample production environment for a web application that consists of two different components, application server and database server.</p>\n<p><img src=\"https://i.imgur.com/nBJDuVO.png\" alt=\"Private Network\"></p>\n<p>Application server has both a public and private IP address. It is accessible from the internet. Database server has only a private IP address and is accessible only from the application server.</p>\n<p>It is a common practice to have this setup due to security reasons. This is done to prevent unauthorized access to the database server.</p>\n<h2 id=\"what-is-a-jump-server\">What is a Jump Server?</h2>\n<p>A jump server is a server that is used to access other servers. It is also known as a bastion host. It is a server that is accessible from the internet and is used to access other servers that are not accessible from the internet.</p>\n<p>In the above example, the application server is called the jump server.</p>\n<p>For example, you might have this infrastructure on AWS, where you have a custom VPC with two subnets.</p>\n<ul>\n<li><strong>Public Subnet:</strong> Outside world can access</li>\n<li><strong>Private Subnet:</strong> Only accessible from within the VPC</li>\n</ul>\n<p>Let’s say that the application server is in the public subnet and the database server is in the private subnet.</p>\n<blockquote>\n<p>If you want to learn more about AWS VPC, check out this <a href=\"https://cs.fyi/guide/up-and-running-with-aws-vpc\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">detailed guide about AWS VPC</a>, Subnets and everything else you need to know about AWS VPC.\nAlso, have a look at <a href=\"https://cs.fyi/guide/up-and-running-with-aws-ec2\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">this guide on AWS EC2 instances</a> which covers all the important concepts about EC2 instances and how to launch them.</p>\n</blockquote>\n<p>We can easily SSH into the application server from the internet i.e.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span></code></pre>\n<p>But the database server doesn’t have a public IP address. So, we can’t SSH into it from the internet. For example, following won’t work</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Won't work because the IP address is private</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span></code></pre>\n<p>Now if we have to SSH into the database server, we have to first SSH into the application server and then SSH into the database server from there. Because the application server, being in the same VPC, can access the database server.</p>\n<h2 id=\"lets-try-it-out\">Let’s try it Out</h2>\n<p>Let’s first SSH into the application server:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span></code></pre>\n<p>Once we are inside the application server, let’s try to SSH into the database server:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span></code></pre>\n<p>We have an error:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Warning: Identity file /home/ubuntu/.ssh/mykey.pem not accessible: No such file or directory.</span></span>\n<span class=\"line\"><span>ubuntu@192.168.1.0: Permission denied (publickey).</span></span></code></pre>\n<p>What happened? The reason is that the private key is not present on the application server i.e. <code>~/.ssh/mykey.pem</code>. Now, there are two ways to solve this problem.</p>\n<h3 id=\"solution-1---copy-the-private-key-to-server\">Solution 1 - Copy the Private Key to Server</h3>\n<p>We can copy the private key from our local machine to the application server and use it there to access the database server. You can do that by running the following command on your local machine:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">scp</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> path/to/key.pem</span><span style=\"color:#F1FA8C\"> examplefile</span><span style=\"color:#F1FA8C\"> yourusername@yourserver:/home/yourusername/</span></span></code></pre>\n<p>i.e. in our case it will be</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">scp</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67:/home/ubuntu/</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#   --------^---------- -------^-------- ----^--- ----^----- ----^--------</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#      key file path      file to copy     user      host    path to copy</span></span></code></pre>\n<p>Now we can SSH into the application server and use the private key copied at <code>/home/ubuntu/mykey.pem</code> to access the database server.</p>\n<p>The issue with this solution is that if our application server is compromised, the attacker will have access to our private key and can access the database server.</p>\n<h3 id=\"solution-2---use-ssh-agent-forwarding\">Solution 2 - Use SSH Agent Forwarding</h3>\n<p>The second solution is to use SSH agent forwarding. SSH agent forwarding is a technique that allows you to access a server that is not accessible from the internet. Follow these steps to set up the SSH agent forwarding:</p>\n<p>Add the private key (.pem file) that we use to connect to the application server to our local SSH agen:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh-add</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span></span></code></pre>\n<p>Now if you run <code>ssh-add -l</code> you will see the key added to the agent:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx path/to/key.pem (RSA)</span></span></code></pre>\n<p>Now let’s SSH into the application server using the following command</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#  ^^^ -A flag is used to enable agent forwarding</span></span></code></pre>\n<p>Once you have SSHed into the application server, you can SSH into the database server simply by using the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span></code></pre>\n<p>Voila! You have successfully SSHed into the database server from the application server.</p>\n<h4 id=\"summarized-steps\">Summarized Steps</h4>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Add the private key to the local SSH agent</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh-add</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the application server using the private key</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># you don't need to specify the private key here because it is already added to the SSH agent, so you can simply use the following command</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the database server from the application server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span></code></pre>\n<p>Now, we can even have a single command to SSH into the database server without first having to SSH int the application server. We can do that by using the <code>-J</code> flag which is used to specify the jump server.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -J</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#         -------^----------- --------^-----------</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#            jump server          destination</span></span></code></pre>\n<h4 id=\"simplifying-the-ssh-command\">Simplifying the SSH Command</h4>\n<p>We can simplify this even further by adding these host entries to our <code>~/.ssh/config</code> file. Open the file in your favorite text editor and add the following lines:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">Host</span><span style=\"color:#F1FA8C\"> app</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  HostName</span><span style=\"color:#BD93F9\"> 3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  User</span><span style=\"color:#F1FA8C\"> ec2-user</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  Port</span><span style=\"color:#BD93F9\"> 22</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  IdentityFile</span><span style=\"color:#F1FA8C\"> /Users/yourusername/.ssh/mykey.pem</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  ForwardAgent</span><span style=\"color:#F1FA8C\"> yes</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">Host</span><span style=\"color:#F1FA8C\"> db</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  HostName</span><span style=\"color:#BD93F9\"> 192.168.1.0</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  User</span><span style=\"color:#F1FA8C\"> ec2-user</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  Port</span><span style=\"color:#BD93F9\"> 22</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  ProxyJump</span><span style=\"color:#F1FA8C\"> app</span></span></code></pre>\n<p>Now we can SSH into the application or database server simply by running the following commands on your local machine:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># SSH into the application server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> app</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the database server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> db</span></span></code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this article, we learned about the jump server and how to use SSH agent forwarding to access a server that is not accessible from the internet. We also learned how to simplify the SSH command by adding host entries to the <code>~/.ssh/config</code> file.</p>";

				const frontmatter$v = {"title":"Jump Servers: What, Why and How","description":"Learn what is a Jump Server and how to set it up for SSH access.","authorId":"kamran","seo":{"title":"Jump Servers: What, Why and How - roadmap.sh","description":"Learn what is a Jump Server and how to set it up for SSH access."},"isNew":false,"type":"textual","date":"2023-03-20T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$v = "/workspace/src/data/guides/how-to-setup-a-jump-server.md";
				const url$v = undefined;
				function rawContent$v() {
					return "   \n                                        \n                                                                               \n                  \n    \n                                                       \n                                                                                 \n            \n               \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nGiven below is the demonstration of a sample production environment for a web application that consists of two different components, application server and database server.\n\n![Private Network](https://i.imgur.com/nBJDuVO.png)\n\nApplication server has both a public and private IP address. It is accessible from the internet. Database server has only a private IP address and is accessible only from the application server.\n\nIt is a common practice to have this setup due to security reasons. This is done to prevent unauthorized access to the database server.\n\n## What is a Jump Server?\n\nA jump server is a server that is used to access other servers. It is also known as a bastion host. It is a server that is accessible from the internet and is used to access other servers that are not accessible from the internet.\n\nIn the above example, the application server is called the jump server.\n\nFor example, you might have this infrastructure on AWS, where you have a custom VPC with two subnets.\n\n- **Public Subnet:** Outside world can access\n- **Private Subnet:** Only accessible from within the VPC\n\nLet's say that the application server is in the public subnet and the database server is in the private subnet.\n\n> If you want to learn more about AWS VPC, check out this [detailed guide about AWS VPC](https://cs.fyi/guide/up-and-running-with-aws-vpc), Subnets and everything else you need to know about AWS VPC.\n> Also, have a look at [this guide on AWS EC2 instances](https://cs.fyi/guide/up-and-running-with-aws-ec2) which covers all the important concepts about EC2 instances and how to launch them.\n\nWe can easily SSH into the application server from the internet i.e.\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n```\n\nBut the database server doesn't have a public IP address. So, we can't SSH into it from the internet. For example, following won't work\n\n```bash\n# Won't work because the IP address is private\nssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0\n```\n\nNow if we have to SSH into the database server, we have to first SSH into the application server and then SSH into the database server from there. Because the application server, being in the same VPC, can access the database server.\n\n## Let's try it Out\n\nLet's first SSH into the application server:\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n```\n\nOnce we are inside the application server, let's try to SSH into the database server:\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0\n```\n\nWe have an error:\n\n```\nWarning: Identity file /home/ubuntu/.ssh/mykey.pem not accessible: No such file or directory.\nubuntu@192.168.1.0: Permission denied (publickey).\n```\n\nWhat happened? The reason is that the private key is not present on the application server i.e. `~/.ssh/mykey.pem`. Now, there are two ways to solve this problem.\n\n### Solution 1 - Copy the Private Key to Server\n\nWe can copy the private key from our local machine to the application server and use it there to access the database server. You can do that by running the following command on your local machine:\n\n```bash\nscp -i path/to/key.pem examplefile yourusername@yourserver:/home/yourusername/\n```\n\ni.e. in our case it will be\n\n```bash\nscp -i ~/.ssh/mykey.pem ~/.ssh/mykey.pem ec2-user@3.112.5.67:/home/ubuntu/\n#   --------^---------- -------^-------- ----^--- ----^----- ----^--------\n#      key file path      file to copy     user      host    path to copy\n```\n\nNow we can SSH into the application server and use the private key copied at `/home/ubuntu/mykey.pem` to access the database server.\n\nThe issue with this solution is that if our application server is compromised, the attacker will have access to our private key and can access the database server.\n\n### Solution 2 - Use SSH Agent Forwarding\n\nThe second solution is to use SSH agent forwarding. SSH agent forwarding is a technique that allows you to access a server that is not accessible from the internet. Follow these steps to set up the SSH agent forwarding:\n\nAdd the private key (.pem file) that we use to connect to the application server to our local SSH agen:\n\n```bash\nssh-add ~/.ssh/mykey.pem\n```\n\nNow if you run `ssh-add -l` you will see the key added to the agent:\n\n```\n2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx path/to/key.pem (RSA)\n```\n\nNow let's SSH into the application server using the following command\n\n```bash\nssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n#  ^^^ -A flag is used to enable agent forwarding\n```\n\nOnce you have SSHed into the application server, you can SSH into the database server simply by using the following command:\n\n```bash\nssh ec2-user@192.168.1.0\n```\n\nVoila! You have successfully SSHed into the database server from the application server.\n\n#### Summarized Steps\n\n```bash\n# Add the private key to the local SSH agent\nssh-add ~/.ssh/mykey.pem\n\n# SSH into the application server using the private key\nssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n# you don't need to specify the private key here because it is already added to the SSH agent, so you can simply use the following command\nssh -A ec2-user@3.112.5.67\n\n# SSH into the database server from the application server\nssh ec2-user@192.168.1.0\n```\n\nNow, we can even have a single command to SSH into the database server without first having to SSH int the application server. We can do that by using the `-J` flag which is used to specify the jump server.\n\n```bash\nssh -A -J ec2-user@3.112.5.67 ec2-user@192.168.1.0\n#         -------^----------- --------^-----------\n#            jump server          destination\n```\n\n#### Simplifying the SSH Command\n\nWe can simplify this even further by adding these host entries to our `~/.ssh/config` file. Open the file in your favorite text editor and add the following lines:\n\n```bash\nHost app\n  HostName 3.112.5.67\n  User ec2-user\n  Port 22\n  IdentityFile /Users/yourusername/.ssh/mykey.pem\n  ForwardAgent yes\n\nHost db\n  HostName 192.168.1.0\n  User ec2-user\n  Port 22\n  ProxyJump app\n```\n\nNow we can SSH into the application or database server simply by running the following commands on your local machine:\n\n```bash\n# SSH into the application server\nssh app\n\n# SSH into the database server\nssh db\n```\n\n## Conclusion\n\nIn this article, we learned about the jump server and how to use SSH agent forwarding to access a server that is not accessible from the internet. We also learned how to simplify the SSH command by adding host entries to the `~/.ssh/config` file.\n";
				}
				async function compiledContent$v() {
					return await html$v();
				}
				function getHeadings$v() {
					return [{"depth":2,"slug":"what-is-a-jump-server","text":"What is a Jump Server?"},{"depth":2,"slug":"lets-try-it-out","text":"Let’s try it Out"},{"depth":3,"slug":"solution-1---copy-the-private-key-to-server","text":"Solution 1 - Copy the Private Key to Server"},{"depth":3,"slug":"solution-2---use-ssh-agent-forwarding","text":"Solution 2 - Use SSH Agent Forwarding"},{"depth":4,"slug":"summarized-steps","text":"Summarized Steps"},{"depth":4,"slug":"simplifying-the-ssh-command","text":"Simplifying the SSH Command"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$v = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$v;
					content.file = file$v;
					content.url = url$v;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$v())}`;
				});

const __vite_glob_0_67 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$v,
	compiledContent: compiledContent$v,
	default: Content$v,
	file: file$v,
	frontmatter: frontmatter$v,
	getHeadings: getHeadings$v,
	rawContent: rawContent$v,
	url: url$v
}, Symbol.toStringTag, { value: 'Module' }));

const html$u = () => "<p>Our last guide was about the <a href=\"https://roadmap.sh/guides/basics-of-authentication\" target=\"_blank\">basics of authentication</a>, where we discussed authentication, authorization, types of authentication, authentication factors, authentication strategies, and so on.</p>\n<p>In this guide today, we will be learning about basic authentication, and we will see how we can implement Basic Authentication in Node.js. We have a <a href=\"https://roadmap.sh/guides/basic-authentication\" target=\"_blank\">visual guide on the basic authentication</a> and an illustrative video, watch the video below or continue reading:</p>\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/mwccHwUn7Gc\" title=\"HTTP Basic Authentication\"></iframe>\n<h2 id=\"what-is-basic-authentication\">What is Basic Authentication?</h2>\n<p>Given the name “Basic Authentication”, you should not confuse Basic Authentication with the standard username and password authentication. Basic authentication is a part of the HTTP specification, and the details can be <a href=\"https://www.rfc-editor.org/rfc/rfc7617.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">found in the RFC7617</a>.</p>\n<p>Because it is a part of the HTTP specifications, all the browsers have native support for “HTTP Basic Authentication”. Given below is the screenshot from the implementation in Google Chrome.</p>\n<p><img src=\"/guides/basic-authentication/chrome-basic-auth.png\" alt=\"Chrome Basic Authentication\"></p>\n<h2 id=\"how-does-it-work\">How does it Work?</h2>\n<p>Now that we know what basic authentication is, the question is, how does it work? The answer is: it is controlled by the response of the server.</p>\n<h3 id=\"step-1\">Step 1</h3>\n<p>When the browser first requests the server, the server tries to check the availability of the <code>Authorization</code> header in the request. Because it is the first request, no <code>Authorization</code> header is found in the request. So the server responds with the <code>401 Unauthorized</code> response code and also sends the <code>WWW-Authenticate</code> header with the value set to <code>Basic</code>, which tells the browser that it needs to trigger the basic authentication flow.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>401 Unauthorized</span></span>\n<span class=\"line\"><span>WWW-Authenticate: Basic realm='user_pages'</span></span></code></pre>\n<p>If you notice the response, we have an additional parameter called <code>realm</code>, which is just a value assigned to a group of pages that share the same credentials.</p>\n<p>The browser might use Realm to cache the credential. In the future, when there is an authentication failure browser will check if it has the credentials in the cache for the given realm of the domain, and it may use the same credentials.</p>\n<h2 id=\"step-2\">Step 2</h2>\n<p>Upon receiving the response from the server, the browser will notice the <code>WWW-Authenticate</code> header and will show the authentication popup.</p>\n<p><img src=\"/guides/basic-authentication/chrome-basic-auth.png\" alt=\"Chrome Basic Authentication\"></p>\n<h2 id=\"step-3\">Step 3</h2>\n<p>After the user submits the credentials through this authentication popup, the browser will automatically encode the credentials using the <code>base64</code> encoding and send them in the <code>Authorization</code> header of the same request.</p>\n<h3 id=\"step-4\">Step 4</h3>\n<p>Upon receiving the request, the server will decode and verify the credentials. If the credentials are valid, the server will send the response to the client.</p>\n<p>So that is how Basic Authentication works.</p>\n<h2 id=\"basic-authentication-in-nodejs\">Basic Authentication in Node.js</h2>\n<p>I have prepared the sample project in Node.js, which can be found on GitHub <a href=\"https://github.com/kamranahmedse/node-basic-auth-example\" target=\"_blank\">kamranahmedse/node-basic-auth-example</a>. If you look at the codebase of the project, we have two files <code>index.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6272A4\">// src/index.js</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> express </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> authMiddleware </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./auth</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> app </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> express</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> port </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 3000</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// This middleware is where we have the</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// basic authentication implementation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(authMiddleware);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, (</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hello World!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">listen</span><span style=\"color:#F8F8F2\">(port, () </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`App running @ http://localhost:</span><span style=\"color:#FF79C6\">${</span><span style=\"color:#F8F8F2\">port</span><span style=\"color:#FF79C6\">}</span><span style=\"color:#F1FA8C\">`</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span></code></pre>\n<p>As you can see, it’s just a regular express server. <code>authMiddleware</code> registration is where we have all the code for “Basic Authentication”. Here is the content of the middleware:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6272A4\">// src/auth.js</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> base64 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">base-64</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">function</span><span style=\"color:#50FA7B\"> decodeCredentials</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">authHeader</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">next</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Take the header and decode credentials</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  const</span><span style=\"color:#F8F8F2\"> [username, password] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> decodeCredentials</span><span style=\"color:#F8F8F2\">(</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    req.headers.authorization </span><span style=\"color:#FF79C6\">||</span><span style=\"color:#E9F284\"> ''</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Verify the credentials</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (username </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> &#x26;&#x26;</span><span style=\"color:#F8F8F2\"> password </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#50FA7B\"> next</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Respond with authenticate header on auth failure.</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">set</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">WWW-Authenticate</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Basic realm=\"user_pages\"</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">status</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">401</span><span style=\"color:#F8F8F2\">).</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Authentication required.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span></code></pre>\n<p>And that is how the basic authentication is implemented in Node.js.</p>";

				const frontmatter$u = {"title":"HTTP Basic Authentication","description":"Learn what is HTTP Basic Authentication and how to implement it in Node.js","authorId":"kamran","seo":{"title":"HTTP Basic Authentication - roadmap.sh","description":"Learn what is HTTP Basic Authentication and how to implement it in Node.js"},"isNew":false,"type":"textual","date":"2022-10-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$u = "/workspace/src/data/guides/http-basic-authentication.md";
				const url$u = undefined;
				function rawContent$u() {
					return "   \n                                  \n                                                                                         \n                  \n    \n                                                 \n                                                                                           \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nOur last guide was about the [basics of authentication](https://roadmap.sh/guides/basics-of-authentication), where we discussed authentication, authorization, types of authentication, authentication factors, authentication strategies, and so on.\n\nIn this guide today, we will be learning about basic authentication, and we will see how we can implement Basic Authentication in Node.js. We have a [visual guide on the basic authentication](https://roadmap.sh/guides/basic-authentication) and an illustrative video, watch the video below or continue reading:\n\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/mwccHwUn7Gc\" title=\"HTTP Basic Authentication\"></iframe>\n\n## What is Basic Authentication?\n\nGiven the name \"Basic Authentication\", you should not confuse Basic Authentication with the standard username and password authentication. Basic authentication is a part of the HTTP specification, and the details can be [found in the RFC7617](https://www.rfc-editor.org/rfc/rfc7617.html).\n\nBecause it is a part of the HTTP specifications, all the browsers have native support for \"HTTP Basic Authentication\". Given below is the screenshot from the implementation in Google Chrome.\n\n![Chrome Basic Authentication](/guides/basic-authentication/chrome-basic-auth.png)\n\n## How does it Work?\n\nNow that we know what basic authentication is, the question is, how does it work? The answer is: it is controlled by the response of the server.\n\n### Step 1\n\nWhen the browser first requests the server, the server tries to check the availability of the `Authorization` header in the request. Because it is the first request, no `Authorization` header is found in the request. So the server responds with the `401 Unauthorized` response code and also sends the `WWW-Authenticate` header with the value set to `Basic`, which tells the browser that it needs to trigger the basic authentication flow.\n\n```\n401 Unauthorized\nWWW-Authenticate: Basic realm='user_pages'\n```\n\nIf you notice the response, we have an additional parameter called `realm`, which is just a value assigned to a group of pages that share the same credentials.\n\nThe browser might use Realm to cache the credential. In the future, when there is an authentication failure browser will check if it has the credentials in the cache for the given realm of the domain, and it may use the same credentials.\n\n## Step 2\n\nUpon receiving the response from the server, the browser will notice the `WWW-Authenticate` header and will show the authentication popup.\n\n![Chrome Basic Authentication](/guides/basic-authentication/chrome-basic-auth.png)\n\n## Step 3\n\nAfter the user submits the credentials through this authentication popup, the browser will automatically encode the credentials using the `base64` encoding and send them in the `Authorization` header of the same request.\n\n### Step 4\n\nUpon receiving the request, the server will decode and verify the credentials. If the credentials are valid, the server will send the response to the client.\n\nSo that is how Basic Authentication works.\n\n## Basic Authentication in Node.js\n\nI have prepared the sample project in Node.js, which can be found on GitHub [kamranahmedse/node-basic-auth-example](https://github.com/kamranahmedse/node-basic-auth-example). If you look at the codebase of the project, we have two files `index.js` with the following content:\n\n```javascript\n// src/index.js\n\nconst express = require('express');\nconst authMiddleware = require('./auth');\n\nconst app = express();\nconst port = 3000;\n\n// This middleware is where we have the\n// basic authentication implementation\napp.use(authMiddleware);\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`App running @ http://localhost:${port}`);\n});\n```\n\nAs you can see, it's just a regular express server. `authMiddleware` registration is where we have all the code for \"Basic Authentication\". Here is the content of the middleware:\n\n```javascript\n// src/auth.js\nconst base64 = require('base-64');\n\nfunction decodeCredentials(authHeader) {\n  // ...\n}\n\nmodule.exports = function (req, res, next) {\n  // Take the header and decode credentials\n  const [username, password] = decodeCredentials(\n    req.headers.authorization || ''\n  );\n\n  // Verify the credentials\n  if (username === 'admin' && password === 'admin') {\n    return next();\n  }\n\n  // Respond with authenticate header on auth failure.\n  res.set('WWW-Authenticate', 'Basic realm=\"user_pages\"');\n  res.status(401).send('Authentication required.');\n};\n```\n\nAnd that is how the basic authentication is implemented in Node.js.\n";
				}
				async function compiledContent$u() {
					return await html$u();
				}
				function getHeadings$u() {
					return [{"depth":2,"slug":"what-is-basic-authentication","text":"What is Basic Authentication?"},{"depth":2,"slug":"how-does-it-work","text":"How does it Work?"},{"depth":3,"slug":"step-1","text":"Step 1"},{"depth":2,"slug":"step-2","text":"Step 2"},{"depth":2,"slug":"step-3","text":"Step 3"},{"depth":3,"slug":"step-4","text":"Step 4"},{"depth":2,"slug":"basic-authentication-in-nodejs","text":"Basic Authentication in Node.js"}];
				}

				const Content$u = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$u;
					content.file = file$u;
					content.url = url$u;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$u())}`;
				});

const __vite_glob_0_68 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$u,
	compiledContent: compiledContent$u,
	default: Content$u,
	file: file$u,
	frontmatter: frontmatter$u,
	getHeadings: getHeadings$u,
	rawContent: rawContent$u,
	url: url$u
}, Symbol.toStringTag, { value: 'Module' }));

const html$t = () => "<p>As users, we easily get frustrated by the buffering of videos, the images that take seconds to load, and pages that got stuck because the content is being loaded. Loading the resources from some cache is much faster than fetching the same from the originating server. It reduces latency, speeds up the loading of resources, decreases the load on the server, cuts down the bandwidth costs etc.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>What is a web cache? It is something that sits somewhere between the client and the server, continuously looking at the requests and their responses, looking for any responses that can be cached. So that there is less time consumed when the same request is made again.</p>\n<p><img src=\"https://i.imgur.com/mJYVvTh.png\" alt=\"Web Cache\"></p>\n<blockquote>\n<p>Note that this image is just to give you an idea. Depending upon the type of cache, the place where it is implemented could vary. More on this later.</p>\n</blockquote>\n<p>Before we get into further details, let me give you an overview of the terms that will be used, further in the article</p>\n<ul>\n<li><strong>Client</strong> could be your browser or any application requesting the server for some resource</li>\n<li><strong>Origin Server</strong>, the source of truth, houses all the content required by the client and is responsible for fulfilling the client’s requests.</li>\n<li><strong>Stale Content</strong> is cached but expired content</li>\n<li><strong>Fresh Content</strong> is the content available in the cache that hasn’t expired yet</li>\n<li><strong>Cache Validation</strong> is the process of contacting the server to check the validity of the cached content and get it updated for when it is going to expire</li>\n<li><strong>Cache Invalidation</strong> is the process of removing any stale content available in the cache</li>\n</ul>\n<p><img src=\"https://i.imgur.com/9MjlzvW.png\" alt=\"Web Cache\"></p>\n<h3 id=\"caching-locations\">Caching Locations</h3>\n<p>Web cache can be shared or private depending upon the location where it exists. Here is the list of different caching locations</p>\n<ul>\n<li><a href=\"#browser-cache\">Browser Cache</a></li>\n<li><a href=\"#proxy-cache\">Proxy Cache</a></li>\n<li><a href=\"#reverse-proxy-cache\">Reverse Proxy Cache</a></li>\n</ul>\n<h4 id=\"browser-cache\">Browser Cache</h4>\n<p>You might have noticed that when you click the back button in your browser it takes less time to load the page than the time that it took during the first load; this is the browser cache in play. Browser cache is the most common location for caching and browsers usually reserve some space for it.</p>\n<p><img src=\"https://i.imgur.com/mJYVvTh.png\" alt=\"Web Cache\"></p>\n<p>A browser cache is limited to just one user and unlike other caches, it can store the “private” responses. More on it later.</p>\n<h4 id=\"proxy-cache\">Proxy Cache</h4>\n<p>Unlike browser cache which serves a single user, proxy caches may serve hundreds of different users accessing the same content. They are usually implemented on a broader level by ISPs or any other independent entities for example.</p>\n<p><img src=\"https://i.imgur.com/3mj6e1O.png\" alt=\"Proxy Cache\"></p>\n<h4 id=\"reverse-proxy-cache\">Reverse Proxy Cache</h4>\n<p>A Reverse proxy cache or surrogate cache is implemented close to the origin servers in order to reduce the load on the server. Unlike proxy caches which are implemented by ISPs etc to reduce the bandwidth usage in a network, surrogates or reverse proxy caches are implemented near the origin servers by the server administrators to reduce the load on the server.</p>\n<p><img src=\"https://i.imgur.com/Eg4Cru3.png\" alt=\"Reverse Proxy Cache\"></p>\n<p>Although you can control the reverse proxy caches (since it is implemented by you on your server) you can not avoid or control browser and proxy caches. And if your website is not configured to use these caches properly, it will still be cached using whatever defaults are set on these caches.</p>\n<h3 id=\"caching-headers\">Caching Headers</h3>\n<p>So, how do we control the web cache? Whenever the server emits some response, it is accompanied by some HTTP headers to guide the caches on whether and how to cache this response. The content provider is the one that has to make sure to return proper HTTP headers to force the caches on how to cache the content.</p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#caching-locations\">Caching Locations</a>\n<ul>\n<li><a href=\"#browser-cache\">Browser Cache</a></li>\n<li><a href=\"#proxy-cache\">Proxy Cache</a></li>\n<li><a href=\"#reverse-proxy-cache\">Reverse Proxy Cache</a></li>\n</ul>\n</li>\n<li><a href=\"#caching-headers\">Caching Headers</a>\n<ul>\n<li><a href=\"#expires\">Expires</a></li>\n<li><a href=\"#pragma\">Pragma</a></li>\n<li><a href=\"#cache-control\">Cache-Control</a>\n<ul>\n<li><a href=\"#private\">private</a></li>\n<li><a href=\"#public\">public</a></li>\n<li><a href=\"#no-store\">no-store</a></li>\n<li><a href=\"#no-cache\">no-cache</a></li>\n<li><a href=\"#max-age-seconds\">max-age: seconds</a></li>\n<li><a href=\"#s-maxage-seconds\">s-maxage: seconds</a></li>\n<li><a href=\"#must-revalidate\">must-revalidate</a></li>\n<li><a href=\"#proxy-revalidate\">proxy-revalidate</a></li>\n<li><a href=\"#mixing-values\">Mixing Values</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#validators\">Validators</a>\n<ul>\n<li><a href=\"#etag\">ETag</a></li>\n<li><a href=\"#last-modified\">Last-Modified</a></li>\n</ul>\n</li>\n<li><a href=\"#where-do-i-start\">Where do I start?</a>\n<ul>\n<li><a href=\"#utilizing-server\">Utilizing Server</a></li>\n<li><a href=\"#caching-recommendations\">Caching Recommendations</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"expires\">Expires</h4>\n<p>Before HTTP/1.1 and the introduction of <code>Cache-Control</code>, there was an <code>Expires</code> header which is simply a timestamp telling the caches how long should some content be considered fresh. A possible value to this header is the absolute expiry date; where a date has to be in GMT. Below is the sample header</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Expires: Mon, 13 Mar 2017 12:22:00 GMT</span></span></code></pre>\n<p>It should be noted that the date cannot be more than a year and if the date format is wrong, the content will be considered stale. Also, the clock on the cache has to be in sync with the clock on the server, otherwise, the desired results might not be achieved.</p>\n<p>Although the <code>Expires</code> header is still valid and is supported widely by the caches, preference should be given to HTTP/1.1 successor of it i.e. <code>Cache-Control</code>.</p>\n<h4 id=\"pragma\">Pragma</h4>\n<p>Another one from the old, pre HTTP/1.1 days, is <code>Pragma</code>. Everything that it could do is now possible using the cache-control header given below. However, one thing I would like to point out about it is, that you might see <code>Pragma: no-cache</code> being used here and there in hopes of stopping the response from being cached. It might not necessarily work; as HTTP specification discusses it in the request headers and there is no mention of it in the response headers. Rather <code>Cache-Control</code> header should be used to control the caching.</p>\n<h4 id=\"cache-control\">Cache-Control</h4>\n<p>Cache-Control specifies how long and in what manner should the content be cached. This family of headers was introduced in HTTP/1.1 to overcome the limitations of the <code>Expires</code> header.</p>\n<p>Value for the <code>Cache-Control</code> header is composite i.e. it can have multiple directive/values. Let’s look at the possible values that this header may contain.</p>\n<h5 id=\"private\">private</h5>\n<p>Setting the cache to <code>private</code> means that the content will not be cached in any of the proxies and it will only be cached by the client (i.e. browser)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: private</span></span></code></pre>\n<p>Having said that, don’t let it fool you into thinking that setting this header will make your data any secure; you still have to use SSL for that purpose.</p>\n<h5 id=\"public\">public</h5>\n<p>If set to <code>public</code>, apart from being cached by the client, it can also be cached by the proxies; serving many other users</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: public</span></span></code></pre>\n<h5 id=\"no-store\">no-store</h5>\n<p><strong><code>no-store</code></strong> specifies that the content is not to be cached by any of the caches</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: no-store</span></span></code></pre>\n<h5 id=\"no-cache\">no-cache</h5>\n<p><strong><code>no-cache</code></strong> indicates that the cache can be maintained but the cached content is to be re-validated (using <code>ETag</code> for example) from the server before being served. That is, there is still a request to server but for validation and not to download the cached content.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, no-cache, public</span></span></code></pre>\n<h5 id=\"max-age-seconds\">max-age: seconds</h5>\n<p><strong><code>max-age</code></strong> specifies the number of seconds for which the content will be cached. For example, if the <code>cache-control</code> looks like below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, public</span></span></code></pre>\n<p>it would mean that the content is publicly cacheable and will be considered stale after 60 minutes</p>\n<h5 id=\"s-maxage-seconds\">s-maxage: seconds</h5>\n<p><strong><code>s-maxage</code></strong> here <code>s-</code> prefix stands for shared. This directive specifically targets the shared caches. Like <code>max-age</code> it also gets the number of seconds for which something is to be cached. If present, it will override <code>max-age</code> and <code>expires</code> headers for shared caching.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: s-maxage=3600, public</span></span></code></pre>\n<h5 id=\"must-revalidate\">must-revalidate</h5>\n<p><strong><code>must-revalidate</code></strong> it might happen sometimes that if you have network problems and the content cannot be retrieved from the server, the browser may serve stale content without validation. <code>must-revalidate</code> avoids that. If this directive is present, it means that stale content cannot be served in any case and the data must be re-validated from the server before serving.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, public, must-revalidate</span></span></code></pre>\n<h5 id=\"proxy-revalidate\">proxy-revalidate</h5>\n<p><strong><code>proxy-revalidate</code></strong> is similar to <code>must-revalidate</code> but it specifies the same for shared or proxy caches. In other words <code>proxy-revalidate</code> is to <code>must-revalidate</code> as <code>s-maxage</code> is to <code>max-age</code>. But why did they not call it <code>s-revalidate</code>?. I have no idea why, if you have any clue please leave a comment below.</p>\n<h5 id=\"mixing-values\">Mixing Values</h5>\n<p>You can combine these directives in different ways to achieve different caching behaviors, however <code>no-cache/no-store</code> and <code>public/private</code> are mutually exclusive.</p>\n<p>If you specify both <code>no-store</code> and <code>no-cache</code>, <code>no-store</code> will be given precedence over <code>no-cache</code>.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">; If specified both Cache-Control: no-store, no-cache ; Below will be considered</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: no-store</span></span></code></pre>\n<p>For <code>private/public</code>, for any unauthenticated requests cache is considered <code>public</code> and for any authenticated ones cache is considered <code>private</code>.</p>\n<h3 id=\"validators\">Validators</h3>\n<p>Up until now we only discussed how the content is cached and how long the cached content is to be considered fresh but we did not discuss how the client does the validation from the server. Below we discuss the headers used for this purpose.</p>\n<h4 id=\"etag\">ETag</h4>\n<p>Etag or “entity tag” was introduced in HTTP/1.1 specs. Etag is just a unique identifier that the server attaches with some resource. This ETag is later on used by the client to make conditional HTTP requests stating <code>\"give me this resource if ETag is not same as the ETag that I have\"</code> and the content is downloaded only if the etags do not match.</p>\n<p>Method by which ETag is generated is not specified in the HTTP docs and usually some collision-resistant hash function is used to assign etags to each version of a resource. There could be two types of etags i.e. strong and weak</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">ETag: \"j82j8232ha7sdh0q2882\" - Strong Etag ETag: W/\"j82j8232ha7sdh0q2882\" - Weak</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Etag (prefixed with `W/`)</span></span></code></pre>\n<p>A strong validating ETag means that two resources are <strong>exactly</strong> same and there is no difference between them at all. While a weak ETag means that two resources although not strictly the same but could be considered the same. Weak etags might be useful for dynamic content, for example.</p>\n<p>Now you know what etags are but how does the browser make this request? by making a request to server while sending the available Etag in <code>If-None-Match</code> header.</p>\n<p>Consider the scenario, you opened a web page which loaded a logo image with caching period of 60 seconds and ETag of <code>abc123xyz</code>. After about 30 minutes you reload the page, browser will notice that the logo which was fresh for 60 seconds is now stale; it will trigger a request to server, sending the ETag of the stale logo image in <code>if-none-match</code> header</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">If-None-Match: \"abc123xyz\"</span></span></code></pre>\n<p>Server will then compare this ETag with the ETag of the current version of resource. If both etags are matched, server will send back the response of <code>304 Not Modified</code> which will tell the client that the copy that it has is still good and it will be considered fresh for another 60 seconds. If both the etags do not match i.e. the logo has likely changed and client will be sent the new logo which it will use to replace the stale logo that it has.</p>\n<h4 id=\"last-modified\">Last-Modified</h4>\n<p>Server might include the <code>Last-Modified</code> header indicating the date and time at which some content was last modified on.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Last-Modified: Wed, 15 Mar 2017 12:30:26 GMT</span></span></code></pre>\n<p>When the content gets stale, client will make a conditional request including the last modified date that it has inside the header called <code>If-Modified-Since</code> to server to get the updated <code>Last-Modified</code> date; if it matches the date that the client has, <code>Last-Modified</code> date for the content is updated to be considered fresh for another <code>n</code> seconds. If the received <code>Last-Modified</code> date does not match the one that the client has, content is reloaded from the server and replaced with the content that client has.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">If-Modified-Since: Wed, 15 Mar 2017 12:30:26 GMT</span></span></code></pre>\n<p>You might be questioning now, what if the cached content has both the <code>Last-Modified</code> and <code>ETag</code> assigned to it? Well, in that case both are to be used i.e. there will not be any re-downloading of the resource if and only if <code>ETag</code> matches the newly retrieved one and so does the <code>Last-Modified</code> date. If either the <code>ETag</code> does not match or the <code>Last-Modified</code> is greater than the one from the server, content has to be downloaded again.</p>\n<h3 id=\"where-do-i-start\">Where do I start?</h3>\n<p>Now that we have got <em>everything</em> covered, let us put everything in perspective and see how you can use this information.</p>\n<h4 id=\"utilizing-server\">Utilizing Server</h4>\n<p>Before we get into the possible caching strategies , let me add the fact that most of the servers including Apache and Nginx allow you to implement your caching policy through the server so that you don’t have to juggle with headers in your code.</p>\n<p><strong>For example</strong>, if you are using Apache and you have your static content placed at <code>/static</code>, you can put below <code>.htaccess</code> file in the directory to make all the content in it be cached for an year using below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\"># Cache everything for an year Header set Cache-Control \"max-age=31536000,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">public\"</span></span></code></pre>\n<p>You can further use <code>filesMatch</code> directive to add conditionals and use different caching strategy for different kinds of files e.g.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\"># Cache any images for one year</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span> </span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">\".(png|jpg|jpeg|gif)$\"</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Header set Cache-Control \"max-age=31536000, public\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;/</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\"># Cache any CSS and JS files for a month</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span> </span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">\".(css|js)$\"</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Header set Cache-Control \"max-age=2628000, public\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;/</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span style=\"color:#F8F8F2\">></span></span></code></pre>\n<p>Or if you don’t want to use the <code>.htaccess</code> file you can modify Apache’s configuration file <code>http.conf</code>. Same goes for Nginx, you can add the caching information in the location or server block.</p>\n<h4 id=\"caching-recommendations\">Caching Recommendations</h4>\n<p>There is no golden rule or set standards about how your caching policy should look like, each of the application is different and you have to look and find what suits your application the best. However, just to give you a rough idea</p>\n<ul>\n<li>You can have aggressive caching (e.g. cache for an year) on any static content and use fingerprinted filenames (e.g. <code>style.ju2i90.css</code>) so that the cache is automatically rejected whenever the files are updated.\nAlso it should be noted that you should not cross the upper limit of one year as it <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">might not be honored</a></li>\n<li>Look and decide do you even need caching for any dynamic content, if yes how long it should be. For example, in case of some RSS feed of a blog there could be the caching of a few hours but there couldn’t be any caching for inventory items in an ERP.</li>\n<li>Always add the validators (preferably ETags) in your response.</li>\n<li>Pay attention while choosing the visibility (private or public) of the cached content. Make sure that you do not accidentally cache any user-specific or sensitive content in any public proxies. When in doubt, do not use cache at all.</li>\n<li>Separate the content that changes often from the content that doesn’t change that often (e.g. in javascript bundles) so that when it is updated it doesn’t need to make the whole cached content stale.</li>\n<li>Test and monitor the caching headers being served by your site. You can use the browser console or <code>curl -I http://some-url.com</code> for that purpose.</li>\n</ul>\n<p>And that about wraps it up. Stay tuned for more!</p>";

				const frontmatter$t = {"title":"HTTP Caching","description":"Everything you need to know about web caching","authorId":"kamran","seo":{"title":"HTTP Caching - roadmap.sh","description":"Everything you need to know about web caching"},"isNew":false,"type":"textual","date":"2018-11-29T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$t = "/workspace/src/data/guides/http-caching.md";
				const url$t = undefined;
				function rawContent$t() {
					return "   \n                     \n                                                            \n                  \n    \n                                    \n                                                              \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nAs users, we easily get frustrated by the buffering of videos, the images that take seconds to load, and pages that got stuck because the content is being loaded. Loading the resources from some cache is much faster than fetching the same from the originating server. It reduces latency, speeds up the loading of resources, decreases the load on the server, cuts down the bandwidth costs etc.\n\n### Introduction\n\nWhat is a web cache? It is something that sits somewhere between the client and the server, continuously looking at the requests and their responses, looking for any responses that can be cached. So that there is less time consumed when the same request is made again.\n\n![Web Cache](https://i.imgur.com/mJYVvTh.png)\n\n> Note that this image is just to give you an idea. Depending upon the type of cache, the place where it is implemented could vary. More on this later.\n\nBefore we get into further details, let me give you an overview of the terms that will be used, further in the article\n\n- **Client** could be your browser or any application requesting the server for some resource\n- **Origin Server**, the source of truth, houses all the content required by the client and is responsible for fulfilling the client's requests.\n- **Stale Content** is cached but expired content\n- **Fresh Content** is the content available in the cache that hasn't expired yet\n- **Cache Validation** is the process of contacting the server to check the validity of the cached content and get it updated for when it is going to expire\n- **Cache Invalidation** is the process of removing any stale content available in the cache\n\n![Web Cache](https://i.imgur.com/9MjlzvW.png)\n\n### Caching Locations\n\nWeb cache can be shared or private depending upon the location where it exists. Here is the list of different caching locations\n\n- [Browser Cache](#browser-cache)\n- [Proxy Cache](#proxy-cache)\n- [Reverse Proxy Cache](#reverse-proxy-cache)\n\n#### Browser Cache\n\nYou might have noticed that when you click the back button in your browser it takes less time to load the page than the time that it took during the first load; this is the browser cache in play. Browser cache is the most common location for caching and browsers usually reserve some space for it.\n\n![Web Cache](https://i.imgur.com/mJYVvTh.png)\n\nA browser cache is limited to just one user and unlike other caches, it can store the \"private\" responses. More on it later.\n\n#### Proxy Cache\n\nUnlike browser cache which serves a single user, proxy caches may serve hundreds of different users accessing the same content. They are usually implemented on a broader level by ISPs or any other independent entities for example.\n\n![Proxy Cache](https://i.imgur.com/3mj6e1O.png)\n\n#### Reverse Proxy Cache\n\nA Reverse proxy cache or surrogate cache is implemented close to the origin servers in order to reduce the load on the server. Unlike proxy caches which are implemented by ISPs etc to reduce the bandwidth usage in a network, surrogates or reverse proxy caches are implemented near the origin servers by the server administrators to reduce the load on the server.\n\n![Reverse Proxy Cache](https://i.imgur.com/Eg4Cru3.png)\n\nAlthough you can control the reverse proxy caches (since it is implemented by you on your server) you can not avoid or control browser and proxy caches. And if your website is not configured to use these caches properly, it will still be cached using whatever defaults are set on these caches.\n\n### Caching Headers\n\nSo, how do we control the web cache? Whenever the server emits some response, it is accompanied by some HTTP headers to guide the caches on whether and how to cache this response. The content provider is the one that has to make sure to return proper HTTP headers to force the caches on how to cache the content.\n\n- [Introduction](#introduction)\n- [Caching Locations](#caching-locations)\n  - [Browser Cache](#browser-cache)\n  - [Proxy Cache](#proxy-cache)\n  - [Reverse Proxy Cache](#reverse-proxy-cache)\n- [Caching Headers](#caching-headers)\n  - [Expires](#expires)\n  - [Pragma](#pragma)\n  - [Cache-Control](#cache-control)\n    - [private](#private)\n    - [public](#public)\n    - [no-store](#no-store)\n    - [no-cache](#no-cache)\n    - [max-age: seconds](#max-age-seconds)\n    - [s-maxage: seconds](#s-maxage-seconds)\n    - [must-revalidate](#must-revalidate)\n    - [proxy-revalidate](#proxy-revalidate)\n    - [Mixing Values](#mixing-values)\n- [Validators](#validators)\n  - [ETag](#etag)\n  - [Last-Modified](#last-modified)\n- [Where do I start?](#where-do-i-start)\n  - [Utilizing Server](#utilizing-server)\n  - [Caching Recommendations](#caching-recommendations)\n\n#### Expires\n\nBefore HTTP/1.1 and the introduction of `Cache-Control`, there was an `Expires` header which is simply a timestamp telling the caches how long should some content be considered fresh. A possible value to this header is the absolute expiry date; where a date has to be in GMT. Below is the sample header\n\n```html\nExpires: Mon, 13 Mar 2017 12:22:00 GMT\n```\n\nIt should be noted that the date cannot be more than a year and if the date format is wrong, the content will be considered stale. Also, the clock on the cache has to be in sync with the clock on the server, otherwise, the desired results might not be achieved.\n\nAlthough the `Expires` header is still valid and is supported widely by the caches, preference should be given to HTTP/1.1 successor of it i.e. `Cache-Control`.\n\n#### Pragma\n\nAnother one from the old, pre HTTP/1.1 days, is `Pragma`. Everything that it could do is now possible using the cache-control header given below. However, one thing I would like to point out about it is, that you might see `Pragma: no-cache` being used here and there in hopes of stopping the response from being cached. It might not necessarily work; as HTTP specification discusses it in the request headers and there is no mention of it in the response headers. Rather `Cache-Control` header should be used to control the caching.\n\n#### Cache-Control\n\nCache-Control specifies how long and in what manner should the content be cached. This family of headers was introduced in HTTP/1.1 to overcome the limitations of the `Expires` header.\n\nValue for the `Cache-Control` header is composite i.e. it can have multiple directive/values. Let's look at the possible values that this header may contain.\n\n##### private\n\nSetting the cache to `private` means that the content will not be cached in any of the proxies and it will only be cached by the client (i.e. browser)\n\n```html\nCache-Control: private\n```\n\nHaving said that, don't let it fool you into thinking that setting this header will make your data any secure; you still have to use SSL for that purpose.\n\n##### public\n\nIf set to `public`, apart from being cached by the client, it can also be cached by the proxies; serving many other users\n\n```html\nCache-Control: public\n```\n\n##### no-store\n\n**`no-store`** specifies that the content is not to be cached by any of the caches\n\n```html\nCache-Control: no-store\n```\n\n##### no-cache\n\n**`no-cache`** indicates that the cache can be maintained but the cached content is to be re-validated (using `ETag` for example) from the server before being served. That is, there is still a request to server but for validation and not to download the cached content.\n\n```html\nCache-Control: max-age=3600, no-cache, public\n```\n\n##### max-age: seconds\n\n**`max-age`** specifies the number of seconds for which the content will be cached. For example, if the `cache-control` looks like below:\n\n```html\nCache-Control: max-age=3600, public\n```\n\nit would mean that the content is publicly cacheable and will be considered stale after 60 minutes\n\n##### s-maxage: seconds\n\n**`s-maxage`** here `s-` prefix stands for shared. This directive specifically targets the shared caches. Like `max-age` it also gets the number of seconds for which something is to be cached. If present, it will override `max-age` and `expires` headers for shared caching.\n\n```html\nCache-Control: s-maxage=3600, public\n```\n\n##### must-revalidate\n\n**`must-revalidate`** it might happen sometimes that if you have network problems and the content cannot be retrieved from the server, the browser may serve stale content without validation. `must-revalidate` avoids that. If this directive is present, it means that stale content cannot be served in any case and the data must be re-validated from the server before serving.\n\n```html\nCache-Control: max-age=3600, public, must-revalidate\n```\n\n##### proxy-revalidate\n\n**`proxy-revalidate`** is similar to `must-revalidate` but it specifies the same for shared or proxy caches. In other words `proxy-revalidate` is to `must-revalidate` as `s-maxage` is to `max-age`. But why did they not call it `s-revalidate`?. I have no idea why, if you have any clue please leave a comment below.\n\n##### Mixing Values\n\nYou can combine these directives in different ways to achieve different caching behaviors, however `no-cache/no-store` and `public/private` are mutually exclusive.\n\nIf you specify both `no-store` and `no-cache`, `no-store` will be given precedence over `no-cache`.\n\n```html\n; If specified both Cache-Control: no-store, no-cache ; Below will be considered\nCache-Control: no-store\n```\n\nFor `private/public`, for any unauthenticated requests cache is considered `public` and for any authenticated ones cache is considered `private`.\n\n### Validators\n\nUp until now we only discussed how the content is cached and how long the cached content is to be considered fresh but we did not discuss how the client does the validation from the server. Below we discuss the headers used for this purpose.\n\n#### ETag\n\nEtag or \"entity tag\" was introduced in HTTP/1.1 specs. Etag is just a unique identifier that the server attaches with some resource. This ETag is later on used by the client to make conditional HTTP requests stating `\"give me this resource if ETag is not same as the ETag that I have\"` and the content is downloaded only if the etags do not match.\n\nMethod by which ETag is generated is not specified in the HTTP docs and usually some collision-resistant hash function is used to assign etags to each version of a resource. There could be two types of etags i.e. strong and weak\n\n```html\nETag: \"j82j8232ha7sdh0q2882\" - Strong Etag ETag: W/\"j82j8232ha7sdh0q2882\" - Weak\nEtag (prefixed with `W/`)\n```\n\nA strong validating ETag means that two resources are **exactly** same and there is no difference between them at all. While a weak ETag means that two resources although not strictly the same but could be considered the same. Weak etags might be useful for dynamic content, for example.\n\nNow you know what etags are but how does the browser make this request? by making a request to server while sending the available Etag in `If-None-Match` header.\n\nConsider the scenario, you opened a web page which loaded a logo image with caching period of 60 seconds and ETag of `abc123xyz`. After about 30 minutes you reload the page, browser will notice that the logo which was fresh for 60 seconds is now stale; it will trigger a request to server, sending the ETag of the stale logo image in `if-none-match` header\n\n```html\nIf-None-Match: \"abc123xyz\"\n```\n\nServer will then compare this ETag with the ETag of the current version of resource. If both etags are matched, server will send back the response of `304 Not Modified` which will tell the client that the copy that it has is still good and it will be considered fresh for another 60 seconds. If both the etags do not match i.e. the logo has likely changed and client will be sent the new logo which it will use to replace the stale logo that it has.\n\n#### Last-Modified\n\nServer might include the `Last-Modified` header indicating the date and time at which some content was last modified on.\n\n```html\nLast-Modified: Wed, 15 Mar 2017 12:30:26 GMT\n```\n\nWhen the content gets stale, client will make a conditional request including the last modified date that it has inside the header called `If-Modified-Since` to server to get the updated `Last-Modified` date; if it matches the date that the client has, `Last-Modified` date for the content is updated to be considered fresh for another `n` seconds. If the received `Last-Modified` date does not match the one that the client has, content is reloaded from the server and replaced with the content that client has.\n\n```html\nIf-Modified-Since: Wed, 15 Mar 2017 12:30:26 GMT\n```\n\nYou might be questioning now, what if the cached content has both the `Last-Modified` and `ETag` assigned to it? Well, in that case both are to be used i.e. there will not be any re-downloading of the resource if and only if `ETag` matches the newly retrieved one and so does the `Last-Modified` date. If either the `ETag` does not match or the `Last-Modified` is greater than the one from the server, content has to be downloaded again.\n\n### Where do I start?\n\nNow that we have got _everything_ covered, let us put everything in perspective and see how you can use this information.\n\n#### Utilizing Server\n\nBefore we get into the possible caching strategies , let me add the fact that most of the servers including Apache and Nginx allow you to implement your caching policy through the server so that you don't have to juggle with headers in your code.\n\n**For example**, if you are using Apache and you have your static content placed at `/static`, you can put below `.htaccess` file in the directory to make all the content in it be cached for an year using below\n\n```html\n# Cache everything for an year Header set Cache-Control \"max-age=31536000,\npublic\"\n```\n\nYou can further use `filesMatch` directive to add conditionals and use different caching strategy for different kinds of files e.g.\n\n```html\n# Cache any images for one year\n<filesMatch \".(png|jpg|jpeg|gif)$\">\n    Header set Cache-Control \"max-age=31536000, public\"\n</filesMatch>\n\n# Cache any CSS and JS files for a month\n<filesMatch \".(css|js)$\">\n    Header set Cache-Control \"max-age=2628000, public\"\n</filesMatch>\n```\n\nOr if you don't want to use the `.htaccess` file you can modify Apache's configuration file `http.conf`. Same goes for Nginx, you can add the caching information in the location or server block.\n\n#### Caching Recommendations\n\nThere is no golden rule or set standards about how your caching policy should look like, each of the application is different and you have to look and find what suits your application the best. However, just to give you a rough idea\n\n- You can have aggressive caching (e.g. cache for an year) on any static content and use fingerprinted filenames (e.g. `style.ju2i90.css`) so that the cache is automatically rejected whenever the files are updated.\n  Also it should be noted that you should not cross the upper limit of one year as it [might not be honored](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9)\n- Look and decide do you even need caching for any dynamic content, if yes how long it should be. For example, in case of some RSS feed of a blog there could be the caching of a few hours but there couldn't be any caching for inventory items in an ERP.\n- Always add the validators (preferably ETags) in your response.\n- Pay attention while choosing the visibility (private or public) of the cached content. Make sure that you do not accidentally cache any user-specific or sensitive content in any public proxies. When in doubt, do not use cache at all.\n- Separate the content that changes often from the content that doesn't change that often (e.g. in javascript bundles) so that when it is updated it doesn't need to make the whole cached content stale.\n- Test and monitor the caching headers being served by your site. You can use the browser console or `curl -I http://some-url.com` for that purpose.\n\nAnd that about wraps it up. Stay tuned for more!\n";
				}
				async function compiledContent$t() {
					return await html$t();
				}
				function getHeadings$t() {
					return [{"depth":3,"slug":"introduction","text":"Introduction"},{"depth":3,"slug":"caching-locations","text":"Caching Locations"},{"depth":4,"slug":"browser-cache","text":"Browser Cache"},{"depth":4,"slug":"proxy-cache","text":"Proxy Cache"},{"depth":4,"slug":"reverse-proxy-cache","text":"Reverse Proxy Cache"},{"depth":3,"slug":"caching-headers","text":"Caching Headers"},{"depth":4,"slug":"expires","text":"Expires"},{"depth":4,"slug":"pragma","text":"Pragma"},{"depth":4,"slug":"cache-control","text":"Cache-Control"},{"depth":5,"slug":"private","text":"private"},{"depth":5,"slug":"public","text":"public"},{"depth":5,"slug":"no-store","text":"no-store"},{"depth":5,"slug":"no-cache","text":"no-cache"},{"depth":5,"slug":"max-age-seconds","text":"max-age: seconds"},{"depth":5,"slug":"s-maxage-seconds","text":"s-maxage: seconds"},{"depth":5,"slug":"must-revalidate","text":"must-revalidate"},{"depth":5,"slug":"proxy-revalidate","text":"proxy-revalidate"},{"depth":5,"slug":"mixing-values","text":"Mixing Values"},{"depth":3,"slug":"validators","text":"Validators"},{"depth":4,"slug":"etag","text":"ETag"},{"depth":4,"slug":"last-modified","text":"Last-Modified"},{"depth":3,"slug":"where-do-i-start","text":"Where do I start?"},{"depth":4,"slug":"utilizing-server","text":"Utilizing Server"},{"depth":4,"slug":"caching-recommendations","text":"Caching Recommendations"}];
				}

				const Content$t = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$t;
					content.file = file$t;
					content.url = url$t;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$t())}`;
				});

const __vite_glob_0_69 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$t,
	compiledContent: compiledContent$t,
	default: Content$t,
	file: file$t,
	frontmatter: frontmatter$t,
	getHeadings: getHeadings$t,
	rawContent: rawContent$t,
	url: url$t
}, Symbol.toStringTag, { value: 'Module' }));

const html$s = () => "<p>Everyone these days is talking about LLMs, ChatGPT and what not. GitHub’s <a href=\"https://github.com/trending\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">trending page</a> is flooded with repositories that are using LLMs in one way or another. But what are LLMs? How do they work? What are the use cases? In this high level, introductory guide, we will try to answer these questions.</p>\n<h2 id=\"what-are-llms\">What are LLMs?</h2>\n<p>LLM stands for “Large Language Model.” These are advanced AI systems designed to understand and generate human-like text based on the input they receive. These models have been trained on vast amounts of text data and can perform a wide range of language-related tasks, such as answering questions, carrying out conversations, summarizing text, translating languages, and much more.</p>\n<p><a href=\"https://x.com/kamrify/status/1658271217189634049\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://roadmap.sh/guides/llms.png\" alt=\"LLMS Visualized\"></a></p>\n<p>OpenAI has been a major contributor to this space in the past few years with their models and research. However, there are other players in the market as well e.g. Meta with their <a href=\"https://huggingface.co/facebook/opt-66b\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OPT</a>, <a href=\"https://huggingface.co/facebook/opt-iml-30b\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OPT-IML</a> and <a href=\"https://ai.facebook.com/blog/large-language-model-llama-meta-ai/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">LLaMA</a> models, Google released <a href=\"https://huggingface.co/google/flan-t5-xxl\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">FLAN-T5</a> and <a href=\"https://huggingface.co/google-bert/bert-base-uncased\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">BERT</a>, <a href=\"https://github.com/stability-AI/stableLM/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StableLM</a> by Stability AI, <a href=\"https://crfm.stanford.edu/2023/03/13/alpaca.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Alpaca</a> at Stanford and there are many <a href=\"https://github.com/Hannibal046/Awesome-LLM\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">other opensource models as well</a>.</p>\n<h2 id=\"training-an-llm-model\">Training an LLM Model</h2>\n<p>On a high level, training an LLM model involves three steps i.e. data collection, training and evaluation.</p>\n<ul>\n<li>\n<p><strong>Data Collection</strong>: The first step is to collect the data that will be used to train the model. The data can be collected from various sources, such as Wikipedia, news articles, books, websites, etc.</p>\n</li>\n<li>\n<p><strong>Training</strong>: The data then goes through a training pipeline where it is cleaned and preprocessed before being fed into the model for training. The training process usually takes a long time and requires a lot of computational power.</p>\n</li>\n<li>\n<p><strong>Evaluation</strong>: The final step is to evaluate the performance of the model to see how well it performs on various tasks, such as question answering, summarization, translation, etc.</p>\n</li>\n</ul>\n<p>The output from the training Pipeline is an LLM model which is simply the parameters or weights which capture the knowledge learned during the training process. These parameters or weights are typically serialized and stored in a file, which can then be loaded into any application that requires language processing capabilities e.g. text generation, question answering, language processing etc.</p>\n<h2 id=\"types-of-llms\">Types of LLMs</h2>\n<p>On a high level, LLMs can be categorized into two types i.e. Base LLMs and Instruction tuned LLMs.</p>\n<h3 id=\"base-llms\">Base LLMs</h3>\n<p>Base LLMs are the LLMs which are designed to predict the next word based on the training data. They are not designed to answer questions, carry out conversations or help solve problems. For example, if you give a base LLM the sentence “In this book about LLMs, we will discuss”, it might complete this sentence and give you “In this book about LLMs, we will discuss <strong>what LLMs are, how they work, and how you can leverage them in your applications.</strong>.” Or if you give it “What are some famous social networks?”, instead of answering it might give back “Why do people use social networks?” or “What are some of the benefits of social networks?”. As you can see, it is giving us relevant text but it is not answering the question. This is where the Instruction tuned LLMs come in to the picture.</p>\n<h3 id=\"instruction-tuned-llms\">Instruction tuned LLMs</h3>\n<p>Instruction Tuned LLMs, instead of trying to autocomplete your text, try to follow the given instructions using the data that they have been trained on. For example, if you input the sentence “What are LLMs?” it will use the data that it is trained on and try to answer the question. Similarly, if you input “What are some famous social networks?” it will try to answer the question instead of giving you a random answer.</p>\n<p>Instruction Tuned LLMs are built on top of Base LLMs:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Instruction Tuned LLMs = Base LLMs + Further Tuning + RLHF</span></span></code></pre>\n<p>To build an Instruction Tuned LLM, a Base LLM is taken and is further trained using a large dataset covering sample “Instructions” and how the model should perform as a result of those instructions. The model is then fine-tuned using a technique called “Reinforcement Learning with Human Feedback” (RLHF) which allows the model to learn from human feedback and improve its performance over time.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>LLMs are a powerful tool that can be used to solve a wide range of language-related tasks. They are being used in various industries, such as healthcare, finance, education, etc., to automate processes and improve efficiency. LLMs have the potential to revolutionize the way we interact with computers and make our lives easier.</p>\n<p>And that’s it for this guide. We have some exciting AI related content coming up in the next few weeks. Stay tuned!</p>";

				const frontmatter$s = {"title":"Introduction to LLMs","description":"What are LLMs, how does ChatGPT and other LLMs work?","authorId":"kamran","seo":{"title":"Introduction to LLMs - roadmap.sh","description":"What are LLMs, how does ChatGPT and other LLMs work?"},"isNew":false,"type":"textual","date":"2023-05-16T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$s = "/workspace/src/data/guides/introduction-to-llms.md";
				const url$s = undefined;
				function rawContent$s() {
					return "   \n                             \n                                                                   \n                  \n    \n                                            \n                                                                     \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nEveryone these days is talking about LLMs, ChatGPT and what not. GitHub's [trending page](https://github.com/trending) is flooded with repositories that are using LLMs in one way or another. But what are LLMs? How do they work? What are the use cases? In this high level, introductory guide, we will try to answer these questions.\n\n## What are LLMs?\n\nLLM stands for \"Large Language Model.\" These are advanced AI systems designed to understand and generate human-like text based on the input they receive. These models have been trained on vast amounts of text data and can perform a wide range of language-related tasks, such as answering questions, carrying out conversations, summarizing text, translating languages, and much more.\n\n[![LLMS Visualized](https://roadmap.sh/guides/llms.png)](https://x.com/kamrify/status/1658271217189634049)\n\nOpenAI has been a major contributor to this space in the past few years with their models and research. However, there are other players in the market as well e.g. Meta with their [OPT](https://huggingface.co/facebook/opt-66b), [OPT-IML](https://huggingface.co/facebook/opt-iml-30b) and [LLaMA](https://ai.facebook.com/blog/large-language-model-llama-meta-ai/) models, Google released [FLAN-T5](https://huggingface.co/google/flan-t5-xxl) and [BERT](https://huggingface.co/google-bert/bert-base-uncased), [StableLM](https://github.com/stability-AI/stableLM/) by Stability AI, [Alpaca](https://crfm.stanford.edu/2023/03/13/alpaca.html) at Stanford and there are many [other opensource models as well](https://github.com/Hannibal046/Awesome-LLM).\n\n## Training an LLM Model\n\nOn a high level, training an LLM model involves three steps i.e. data collection, training and evaluation.\n\n- **Data Collection**: The first step is to collect the data that will be used to train the model. The data can be collected from various sources, such as Wikipedia, news articles, books, websites, etc.\n\n- **Training**: The data then goes through a training pipeline where it is cleaned and preprocessed before being fed into the model for training. The training process usually takes a long time and requires a lot of computational power.\n\n- **Evaluation**: The final step is to evaluate the performance of the model to see how well it performs on various tasks, such as question answering, summarization, translation, etc.\n\nThe output from the training Pipeline is an LLM model which is simply the parameters or weights which capture the knowledge learned during the training process. These parameters or weights are typically serialized and stored in a file, which can then be loaded into any application that requires language processing capabilities e.g. text generation, question answering, language processing etc.\n\n## Types of LLMs\n\nOn a high level, LLMs can be categorized into two types i.e. Base LLMs and Instruction tuned LLMs.\n\n### Base LLMs\n\nBase LLMs are the LLMs which are designed to predict the next word based on the training data. They are not designed to answer questions, carry out conversations or help solve problems. For example, if you give a base LLM the sentence \"In this book about LLMs, we will discuss\", it might complete this sentence and give you \"In this book about LLMs, we will discuss **what LLMs are, how they work, and how you can leverage them in your applications.**.\" Or if you give it \"What are some famous social networks?\", instead of answering it might give back \"Why do people use social networks?\" or \"What are some of the benefits of social networks?\". As you can see, it is giving us relevant text but it is not answering the question. This is where the Instruction tuned LLMs come in to the picture.\n\n### Instruction tuned LLMs\n\nInstruction Tuned LLMs, instead of trying to autocomplete your text, try to follow the given instructions using the data that they have been trained on. For example, if you input the sentence \"What are LLMs?\" it will use the data that it is trained on and try to answer the question. Similarly, if you input \"What are some famous social networks?\" it will try to answer the question instead of giving you a random answer.\n\nInstruction Tuned LLMs are built on top of Base LLMs:\n\n```\nInstruction Tuned LLMs = Base LLMs + Further Tuning + RLHF\n```\n\nTo build an Instruction Tuned LLM, a Base LLM is taken and is further trained using a large dataset covering sample \"Instructions\" and how the model should perform as a result of those instructions. The model is then fine-tuned using a technique called \"Reinforcement Learning with Human Feedback\" (RLHF) which allows the model to learn from human feedback and improve its performance over time.\n\n## Conclusion\n\nLLMs are a powerful tool that can be used to solve a wide range of language-related tasks. They are being used in various industries, such as healthcare, finance, education, etc., to automate processes and improve efficiency. LLMs have the potential to revolutionize the way we interact with computers and make our lives easier.\n\nAnd that's it for this guide. We have some exciting AI related content coming up in the next few weeks. Stay tuned!\n";
				}
				async function compiledContent$s() {
					return await html$s();
				}
				function getHeadings$s() {
					return [{"depth":2,"slug":"what-are-llms","text":"What are LLMs?"},{"depth":2,"slug":"training-an-llm-model","text":"Training an LLM Model"},{"depth":2,"slug":"types-of-llms","text":"Types of LLMs"},{"depth":3,"slug":"base-llms","text":"Base LLMs"},{"depth":3,"slug":"instruction-tuned-llms","text":"Instruction tuned LLMs"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$s = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$s;
					content.file = file$s;
					content.url = url$s;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$s())}`;
				});

const __vite_glob_0_70 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$s,
	compiledContent: compiledContent$s,
	default: Content$s,
	file: file$s,
	frontmatter: frontmatter$s,
	getHeadings: getHeadings$s,
	rawContent: rawContent$s,
	url: url$s
}, Symbol.toStringTag, { value: 'Module' }));

const html$r = () => "<p><img src=\"https://assets.roadmap.sh/guest/java-full-stack-developer-skills-ft8ta.png\" alt=\"The best java full stack developer skills to learn.\"></p>\n<p>Java has been a popular programming language for the past 28 years and remains in the top four programming languages today. This is due to its use in many Java-based platforms and the growing demand for specialized <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java developers</a> in big data, machine learning, and financial services.</p>\n<p>If you are building web applications, the ability to work on both front-end and back-end development using Java is valuable. Fundamental and advanced Java skills such as multithreading, concurrency, JVM tuning, and object-oriented design are vital in enterprise environments.</p>\n<p>To remain competitive as a Java developer, you must continuously improve your skill sets to meet evolving industry demands.</p>\n<p>This guide will equip you with the skills required in 2025. You’ll understand the landscape of Java demand, adoption, diverse applications, and strategies for excelling as a Java developer. By the end of this guide, you will be confident about pursuing a Java development career.</p>\n<p>These are the skills we will cover in this guide:</p>\n<ul>\n<li>HTML and CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>Accessibility standards and compatibility</li>\n<li>Java programming language</li>\n<li>Database management system</li>\n<li>Java frameworks</li>\n<li>Version control</li>\n<li>Version control providers</li>\n<li>Deployment mechanism</li>\n<li>Application Programming Interface (API)</li>\n<li>Web Security</li>\n<li>Caching</li>\n</ul>\n<p>Let’s look at these points in detail.</p>\n<h2 id=\"top-skills-required-as-java-full-stack-developer\">Top skills required as Java full stack developer</h2>\n<p>The required skills can be classified into <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end (client)</a> and <a href=\"https://roadmap.sh/backend\" target=\"_blank\">back-end (server)</a> development. As a Java full stack developer, you will be required to build applications that run seamlessly on both the client and the server.</p>\n<h2 id=\"required-skills-for-front-end-java-development\">Required skills for front-end Java development</h2>\n<p>Here are the front-end skills you should learn in 2025:</p>\n<ul>\n<li>HTML and CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>Accessibility standards and compatibility</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/front-end-java-development-m9zv6.JPG\" alt=\"front end java development\"></p>\n<h3 id=\"html-and-css\">HTML and CSS</h3>\n<p>HyperText Markup Language (HTML) is the building block for all web pages. It dictates users’ content and structure when interacting with a website or application, including text, images, videos, and more.</p>\n<p>Whereas HTML provides the structure of web pages, Cascading Style Sheets (CSS) enhance their appearance and layout. CSS determines how the content on a web page is styled and presented, including aspects like colors, fonts, spacing, and more. Additionally, CSS helps you create responsive designs that adapt to various screen sizes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/html-and-css-kktts.JPG\" alt=\"HTML and CSS\"></p>\n<h3 id=\"javascript\">JavaScript</h3>\n<p>JavaScript is a programming language used alongside HTML and CSS to enhance the functionality and interactivity of web pages. Whereas HTML and CSS are responsible for creating the structure and design of web pages, <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> adds dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features. Over the years, JavaScript has evolved significantly, introducing powerful frameworks such as <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, among others. These frameworks empower you to build software ranging from small applications to large-scale enterprise systems.</p>\n<p><img src=\"https://jbstechinfo.com/wp-content/uploads/2023/08/JavaScript-Symbol.png\" alt=\"JavaScript\"></p>\n<h3 id=\"typescript\">TypeScript</h3>\n<p>Typescript is an extension of JavaScript with static typing and other advanced features. <a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a> code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development. The knowledge enhances your productivity by allowing you to build robust applications, detect errors, and catch issues as they happen.</p>\n<p><img src=\"https://media.licdn.com/dms/image/D4D12AQHLiHtRbPUoAA/article-cover_image-shrink_600_2000/0/1696134741709?e=2147483647&#x26;v=beta&#x26;t=CajO9eTDp6iKznPn753F6ZUyTgaPf6DOzihN1AMMJew\" alt=\"TypeScript\"></p>\n<h3 id=\"accessibility-standards-and-compatibility\">Accessibility standards and compatibility</h3>\n<p>As a Java full-stack web developer, having a solid understanding of accessibility and browser compatibility is important. The knowledge enables you to create web applications usable by people with disabilities, promoting inclusivity, complying with accessibility regulations, and ensuring a solid user experience.</p>\n<p><img src=\"https://t3.ftcdn.net/jpg/05/42/09/62/360_F_542096212_pgNANUD1JMjdifjHQZ6LDK9s98TQENFP.jpg\" alt=\"Accessibility\"></p>\n<h2 id=\"required-skills-for-back-end-java-development\">Required skills for back-end Java development</h2>\n<p>Here are the back-end skills you should learn in 2025:</p>\n<ul>\n<li>Java programming language</li>\n<li>Database management system</li>\n<li>Java frameworks</li>\n<li>Version control</li>\n<li>Version control providers</li>\n<li>Deployment mechanism</li>\n<li>Application Programming Interface (API)</li>\n<li>Web Security</li>\n<li>Caching</li>\n</ul>\n<h3 id=\"java-programming-language\">Java programming language:</h3>\n<p>A deep understanding of Java fundamentals is essential to becoming a full stack developer. Having a strong grasp of Java’s core concepts, such as classes, inheritance, abstraction, etc., is crucial for developing full stack applications running on the web or mobile platforms. Java’s versatility and robustness make it a popular choice for backend development, and proficiency in Java allows developers to build scalable and secure server-side components for their applications. Some popular database management systems are MySQL, SQL, PostgreSQL, MongoDB, and Oracle.</p>\n<h3 id=\"database-management-system\">Database management system</h3>\n<p>The choice of database and data storage methods significantly impacts how data is retrieved and utilized in applications. You must consider various factors, such as whether to use a NoSQL or SQL database, employ stored procedures or Object Relational Mapping (ORM), and opt for self-hosting or cloud-based hosting. It’s essential to address these questions in your journey to become a full stack developer.</p>\n<h3 id=\"java-frameworks\">Java frameworks</h3>\n<p>Frameworks are pre-written and thoroughly tested collections of code, classes, components, templates, and other structures that you can utilize to streamline the development process of applications. They come equipped with standard functionalities such as security measures, data retrieval mechanisms, and predefined project structures. Leveraging frameworks allows you to build applications more efficiently without starting from scratch or recreating existing solutions.</p>\n<p>While Java has several frameworks for building full stack applications, it’s crucial to consider each framework’s associated pros and cons, adoption rates, and how effectively they address the intended business requirements. One particularly renowned framework is the Java <a href=\"https://roadmap.sh/spring-boot\" target=\"_blank\">Spring</a> framework, celebrated for simplifying the web development process for small-scale and enterprise-level Java applications. In addition to its user-friendliness, it boasts a vast ecosystem and a thriving community of developers.</p>\n<h3 id=\"version-control\">Version control</h3>\n<p>Version control systems facilitates teamwork by allowing you and your team members to collaborate on a project simultaneously. It enables the management of changes to code and files over time without disrupting the workflow.</p>\n<p>In your full stack journey, it’s crucial to grasp version control features like branching, pull requests, merge requests, commits, commit history, and more.</p>\n<h3 id=\"version-control-providers\">Version control providers</h3>\n<p>One of the essential Java full stack developer skills is familiarity with popular providers like <a href=\"http://github.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub</a> offer unique tools, such as user interfaces (UIs) and Command Line Interfaces (CLIs), for individuals and organizations to effectively manage and collaborate on code. Additionally, they offer a platform to search for and contribute to open-source projects, serving as a valuable resource for your learning and giving back to the community.</p>\n<h3 id=\"deployment-mechanism\">Deployment mechanism</h3>\n<p>The ultimate objective of application development is to deliver accessible solutions to end users. Deploying software involves various steps, such as packaging, configuring, releasing, and monitoring. Although these processes can overlap and business requirements may evolve, it is crucial to establish a reliable mechanism for building, testing, and deploying code to meet the desired objectives.</p>\n<p>In your journey as a full stack java developer, your responsibilities extend beyond creating applications. You must have a good understanding of tools such as <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>, and Jenkins and be proficient in <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> best practices. Additionally, familiarity with popular cloud platforms like Azure, <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, and GCP is essential for efficient deployment and scalability of applications.</p>\n<h3 id=\"application-programming-interfaces-apis\">Application Programming Interfaces (APIs)</h3>\n<p>APIs are rules and protocols that allow different software applications to communicate with each other. They give access to services or functionality other software systems provide, enabling developers to integrate these capabilities into their applications without understanding the underlying implementation details. A solid understanding of how APIs work, the standards they follow, and how they are exposed for utilization is important in full stack development.</p>\n<h3 id=\"web-security\">Web security</h3>\n<p>One of a Java developer’s key skills is having a good understanding of how to protect web resources. Knowing when to utilize tools like JSON Web Token (JWT), OAuth, and <a href=\"https://roadmap.sh/best-practices/api-security\" target=\"_blank\">API security best practices</a> is crucial. Deciding when to build solutions from scratch or leverage third-party offerings based on project requirements is key to successful development.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/web-security-g8b4s.JPG\" alt=\"Web security\"></p>\n<h3 id=\"caching\">Caching</h3>\n<p>Caching is the process of storing data so that future requests for that same data can be served faster. It typically involves using temporary storage that sits between the front-end and the back-end. Caching speeds up application performance, increases efficiency, and enhances overall user experience. As a Java full-stack developer, having a solid understanding of caching techniques and technologies like Redis is crucial.</p>\n<h2 id=\"how-to-stand-out-as-a-java-full-stack-developer\">How to stand out as a Java full stack developer</h2>\n<p>While mastering front-end and back-end technologies forms the core competencies for building an application as a Java full stack developer, it’s crucial to recognize that the technology landscape is dynamic, and business requirements evolve accordingly. Here are some additional skills that can be beneficial to you:</p>\n<ul>\n<li>Java Virtual Machine (JVM)</li>\n<li>Jakarta Server Pages</li>\n<li>Front-end frameworks</li>\n<li>Design patterns</li>\n<li>Community</li>\n<li>Soft skills</li>\n<li>Continuous learning</li>\n</ul>\n<h3 id=\"java-virtual-machine-jvm\">Java Virtual Machine (JVM)</h3>\n<p>The JVM is a virtual machine that loads, verifies, and executes Java programs. It enables Java applications to run on various devices while providing security and optimizing program memory usage. A good knowledge of JVM’s operation can empower you to build faster, safer, and more memory-efficient applications.</p>\n<h3 id=\"jakarta-server-pages\">Jakarta Server Pages</h3>\n<p>Jakarta Server Pages (JSP), previously known as Java Server Pages, is a suite of technologies that enables you to generate dynamic web pages. It facilitates the integration of Java code within static web markup, which is then compiled and executed on the server to deliver dynamic web applications.</p>\n<p><img src=\"https://jakarta.ee/images/jakarta/jakarta-ee-logo-color.svg\" alt=\"Jakarta server pages\"></p>\n<h3 id=\"front-end-frameworks\">Front-end frameworks</h3>\n<p>While Java can work with HTML, CSS, and JavaScript, there are scenarios where businesses need a clear separation between front-end and back-end development. This requirement could arise from diverse factors such as deployment strategies, continuous delivery pipelines, virtual (2D/3D) rendering demands, dynamic user interfaces, and performance optimizations. Therefore, knowledge of popular JavaScript frameworks like <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, etc. is critical for building scalable user interfaces.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png\" alt=\"react, angular &#x26; vue logos\"></p>\n<h3 id=\"design-patterns\">Design patterns</h3>\n<p>Design patterns are proven approaches to solving specific design challenges and promoting code reusability, maintainability, and scalability. A solid understanding of software architecture patterns like dependency injection, factory method patterns, builder patterns, etc., will prove invaluable when addressing common software design problems encountered during application development. These patterns provide developers with established solutions and best practices for effectively structuring their code and solving recurring design issues.</p>\n<h3 id=\"community\">Community</h3>\n<p>As the popular saying goes, “a tree cannot make a forest.” While it might be tempting to work in isolation and tackle all development tasks alone, it’s essential for you to join communities that encourage collaboration, peer learning, and staying updated on the latest developments.</p>\n<p>A great community to join is the <a href=\"https://roadmap.sh/\" target=\"_blank\">roadmap.sh</a> <a href=\"https://roadmap.sh/discord\" target=\"_blank\">Discord community</a>, where you can connect with like-minded individuals who share your passion for development.</p>\n<h3 id=\"soft-skills\">Soft skills</h3>\n<p>In addition to technical expertise, soft skills play a vital role in the development pipeline. Despite the advancements in AI shaping the technical landscape, human-centric soft skills remain highly valued. Machines may not fully grasp human needs, making empathy, critical thinking, and effective communication with business stakeholders indispensable qualities for you as a Java full stack developer.</p>\n<h3 id=\"continuous-learning\">Continuous learning</h3>\n<p>Frameworks, libraries, technologies, modes of adoption, and business requirements will continue to evolve. It is important you stay curious, continuously learn, and keep up with the latest developments in the Java ecosystem, which is huge.</p>\n<p>While staying informed about changes in the ecosystem can be overwhelming, especially with information from various sources like blogs, online training, bootcamp courses, etc., there’s a reliable and regularly updated platform for Java resources: <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java Developer Roadmap</a>.</p>\n<h2 id=\"javas-adoption-in-the-real-world\">Java’s adoption in the real-world</h2>\n<p>Developed by James Gosling at <a href=\"https://en.wikipedia.org/wiki/Sun_Microsystems\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sun Microsystems</a> in the 1990s, Java initially targeted interactive television but transitioned to Internet programming for its advanced features. The public release of Java 1.0 in 1996 introduced “<a href=\"https://en.wikipedia.org/wiki/Write_once,_run_anywhere\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">write once, run anywhere</a>” (WORA), offering no-cost runtimes across platforms and revolutionizing software development. Since then, Java has evolved significantly with numerous versions, runtimes, and platform support.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/java-adoption-tq5x4.jpeg\" alt=\"Java adoption\"></p>\n<p>The WORA mantra empowers developers to write Java programs that are capable of running on any device. These programs are compiled into standard bytecode, which allows them to execute on any device equipped with a <a href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java virtual machine</a>. Due to its seamless cross-platform compatibility, Java has been widely adopted for building applications on various platforms, including web, mobile, and other digital devices. Below are some areas where Java has been massively adopted beyond its general usage:</p>\n<h3 id=\"java-in-virtual-reality-augmented-reality-and-mixed-reality\">Java in virtual reality, augmented reality, and mixed reality</h3>\n<p>Java has also been widely adopted for building applications that support interactivity and immersive experiences, particularly in the realms of virtual reality (VR), augmented reality (AR), and mixed reality (XR).</p>\n<p>For example, in e-commerce, full stack developers can use Java’s capabilities to create realistic and virtual environments that allow customers to visualize how different clothing items and footwear will look on them before making a purchase.</p>\n<h3 id=\"java-in-ai\">Java in AI</h3>\n<p>Another field in which Java is gaining adoption is AI. Java’s maintainability, object-oriented approach, enhanced security, garbage collection, and platform independence have positioned it as a vital tool for modeling and powering AI applications. These features make Java well-suited for developing robust and scalable AI solutions that can effectively handle complex data processing and analysis tasks.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/java-usage-8bazm.JPG\" alt=\"Java usage\"></p>\n<h2 id=\"what-is-the-demand-for-java-developers\">What is the demand for Java developers?</h2>\n<p>According to Statista, <a href=\"https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java is one of the most widely embraced programming languages among developers,</a> owing to its speed, security, and reliability. Its versatility has led to widespread adoption across industries, including big data, banking, retail, and stock markets.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/most-used-programming-languages-lqmoo.png\" alt=\"Most used programming language statistics\"></p>\n<p>Based on the recently concluded <a href=\"https://survey.stackoverflow.co/2023/#technology\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Stack Overflow survey</a>, it was found that 30.49% of the respondents utilize Java in their professional endeavors, while 35.17% are in the process of adopting Java to fulfill their programming needs.</p>\n<p>Moreover, the demand for Java developers is projected to continue rising, <a href=\"https://www.statista.com/statistics/1296727/programming-languages-demanded-by-recruiters/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">with over 40% of recruiters actively seeking professionals skilled in Java programming</a>.</p>\n<p>In summary, a Java full stack developer needs expertise in front-end technologies (such as HTML, CSS, JavaScript, and WebSocket) and back-end skills (including Database management, Java frameworks, version control, version control providers, APIs, caching, etc.). These skills are essential for building comprehensive applications and ensuring seamless communication between the client and server sides.</p>\n<p>With billions of devices using Java across various platforms and its extensive adoption in big data, AI, VR/AR/XR, and more, the demand for Java developers is significant. This demand will persist for maintaining and developing new Java applications. Java’s ease of use, robustness, and scalability make it a top choice among developers, ensuring its relevance today and as technologies evolve.</p>\n<p>Whether you’re just getting into the field or an experienced developer aiming to stay updated with technological advancements, roadmap.sh’s <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java roadmap</a> is an invaluable resource. Moreover, you now have the opportunity to generate your roadmap with AI, follow and track your progress, showcase your skills, and become part of a supportive community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up</a> on roadmap.sh platform.</p>";

				const frontmatter$r = {"title":"13 Must-Have Java Full-stack Developer Skills in @currentYear@","description":"Master the essential skills every Java full stack developer needs. Boost your career with our expert tips!","authorId":"william","excludedBySlug":"/java/developer-skills","seo":{"title":"13 Must-Have Java Full-stack Developer Skills in @currentYear@","description":"Master the essential skills every Java full stack developer needs. Boost your career with our expert tips!","ogImageUrl":"https://assets.roadmap.sh/guest/java-full-stack-developer-skills-ft8ta.png"},"isNew":false,"type":"textual","date":"2024-05-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$r = "/workspace/src/data/guides/java-developer-skills.md";
				const url$r = undefined;
				function rawContent$r() {
					return "   \n                                                                       \n                                                                                                                         \n                 \n                                        \n    \n                                                                         \n                                                                                                                           \n                                                                                          \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![The best java full stack developer skills to learn.](https://assets.roadmap.sh/guest/java-full-stack-developer-skills-ft8ta.png)\n\nJava has been a popular programming language for the past 28 years and remains in the top four programming languages today. This is due to its use in many Java-based platforms and the growing demand for specialized [Java developers](https://roadmap.sh/java) in big data, machine learning, and financial services.\n\nIf you are building web applications, the ability to work on both front-end and back-end development using Java is valuable. Fundamental and advanced Java skills such as multithreading, concurrency, JVM tuning, and object-oriented design are vital in enterprise environments.\n\nTo remain competitive as a Java developer, you must continuously improve your skill sets to meet evolving industry demands.\n\nThis guide will equip you with the skills required in 2025. You’ll understand the landscape of Java demand, adoption, diverse applications, and strategies for excelling as a Java developer. By the end of this guide, you will be confident about pursuing a Java development career.\n\nThese are the skills we will cover in this guide:\n\n- HTML and CSS\n- JavaScript\n- TypeScript\n- Accessibility standards and compatibility\n- Java programming language\n- Database management system\n- Java frameworks\n- Version control\n- Version control providers\n- Deployment mechanism\n- Application Programming Interface (API)\n- Web Security\n- Caching\n\nLet’s look at these points in detail.\n\n## Top skills required as Java full stack developer\n\nThe required skills can be classified into [front-end (client)](https://roadmap.sh/frontend) and [back-end (server)](https://roadmap.sh/backend) development. As a Java full stack developer, you will be required to build applications that run seamlessly on both the client and the server.\n\n## Required skills for front-end Java development\n\nHere are the front-end skills you should learn in 2025:\n\n- HTML and CSS\n- JavaScript\n- TypeScript\n- Accessibility standards and compatibility\n\n![front end java development](https://assets.roadmap.sh/guest/front-end-java-development-m9zv6.JPG)\n\n### HTML and CSS\n\nHyperText Markup Language (HTML) is the building block for all web pages. It dictates users' content and structure when interacting with a website or application, including text, images, videos, and more.\n\nWhereas HTML provides the structure of web pages, Cascading Style Sheets (CSS) enhance their appearance and layout. CSS determines how the content on a web page is styled and presented, including aspects like colors, fonts, spacing, and more. Additionally, CSS helps you create responsive designs that adapt to various screen sizes.\n\n![HTML and CSS](https://assets.roadmap.sh/guest/html-and-css-kktts.JPG)\n\n### JavaScript\n\nJavaScript is a programming language used alongside HTML and CSS to enhance the functionality and interactivity of web pages. Whereas HTML and CSS are responsible for creating the structure and design of web pages, [JavaScript](https://roadmap.sh/javascript) adds dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features. Over the years, JavaScript has evolved significantly, introducing powerful frameworks such as [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular), among others. These frameworks empower you to build software ranging from small applications to large-scale enterprise systems.\n\n![JavaScript](https://jbstechinfo.com/wp-content/uploads/2023/08/JavaScript-Symbol.png)\n\n### TypeScript\n\nTypescript is an extension of JavaScript with static typing and other advanced features. [TypeScript](https://roadmap.sh/typescript) code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development. The knowledge enhances your productivity by allowing you to build robust applications, detect errors, and catch issues as they happen.\n\n![TypeScript](https://media.licdn.com/dms/image/D4D12AQHLiHtRbPUoAA/article-cover_image-shrink_600_2000/0/1696134741709?e=2147483647&v=beta&t=CajO9eTDp6iKznPn753F6ZUyTgaPf6DOzihN1AMMJew)\n\n### Accessibility standards and compatibility\n\nAs a Java full-stack web developer, having a solid understanding of accessibility and browser compatibility is important. The knowledge enables you to create web applications usable by people with disabilities, promoting inclusivity, complying with accessibility regulations, and ensuring a solid user experience.\n\n![Accessibility](https://t3.ftcdn.net/jpg/05/42/09/62/360_F_542096212_pgNANUD1JMjdifjHQZ6LDK9s98TQENFP.jpg)\n\n## Required skills for back-end Java development\n\nHere are the back-end skills you should learn in 2025:\n\n- Java programming language\n- Database management system\n- Java frameworks\n- Version control\n- Version control providers\n- Deployment mechanism\n- Application Programming Interface (API)\n- Web Security\n- Caching\n\n### Java programming language:\n\nA deep understanding of Java fundamentals is essential to becoming a full stack developer. Having a strong grasp of Java's core concepts, such as classes, inheritance, abstraction, etc., is crucial for developing full stack applications running on the web or mobile platforms. Java's versatility and robustness make it a popular choice for backend development, and proficiency in Java allows developers to build scalable and secure server-side components for their applications. Some popular database management systems are MySQL, SQL, PostgreSQL, MongoDB, and Oracle.\n\n### Database management system\n\nThe choice of database and data storage methods significantly impacts how data is retrieved and utilized in applications. You must consider various factors, such as whether to use a NoSQL or SQL database, employ stored procedures or Object Relational Mapping (ORM), and opt for self-hosting or cloud-based hosting. It's essential to address these questions in your journey to become a full stack developer.\n\n### Java frameworks\n\nFrameworks are pre-written and thoroughly tested collections of code, classes, components, templates, and other structures that you can utilize to streamline the development process of applications. They come equipped with standard functionalities such as security measures, data retrieval mechanisms, and predefined project structures. Leveraging frameworks allows you to build applications more efficiently without starting from scratch or recreating existing solutions.\n\nWhile Java has several frameworks for building full stack applications, it's crucial to consider each framework's associated pros and cons, adoption rates, and how effectively they address the intended business requirements. One particularly renowned framework is the Java [Spring](https://roadmap.sh/spring-boot) framework, celebrated for simplifying the web development process for small-scale and enterprise-level Java applications. In addition to its user-friendliness, it boasts a vast ecosystem and a thriving community of developers.\n\n### Version control\n\nVersion control systems facilitates teamwork by allowing you and your team members to collaborate on a project simultaneously. It enables the management of changes to code and files over time without disrupting the workflow.\n\nIn your full stack journey, it's crucial to grasp version control features like branching, pull requests, merge requests, commits, commit history, and more.\n\n### Version control providers\n\nOne of the essential Java full stack developer skills is familiarity with popular providers like [GitHub](http://github.com/) offer unique tools, such as user interfaces (UIs) and Command Line Interfaces (CLIs), for individuals and organizations to effectively manage and collaborate on code. Additionally, they offer a platform to search for and contribute to open-source projects, serving as a valuable resource for your learning and giving back to the community.\n\n### Deployment mechanism\n\nThe ultimate objective of application development is to deliver accessible solutions to end users. Deploying software involves various steps, such as packaging, configuring, releasing, and monitoring. Although these processes can overlap and business requirements may evolve, it is crucial to establish a reliable mechanism for building, testing, and deploying code to meet the desired objectives.\n\nIn your journey as a full stack java developer, your responsibilities extend beyond creating applications. You must have a good understanding of tools such as [Docker](https://roadmap.sh/docker), [Kubernetes](https://roadmap.sh/kubernetes), and Jenkins and be proficient in [DevOps](https://roadmap.sh/devops) best practices. Additionally, familiarity with popular cloud platforms like Azure, [AWS](https://roadmap.sh/aws), and GCP is essential for efficient deployment and scalability of applications.\n\n### Application Programming Interfaces (APIs)\n\nAPIs are rules and protocols that allow different software applications to communicate with each other. They give access to services or functionality other software systems provide, enabling developers to integrate these capabilities into their applications without understanding the underlying implementation details. A solid understanding of how APIs work, the standards they follow, and how they are exposed for utilization is important in full stack development.\n\n### Web security\n\nOne of a Java developer's key skills is having a good understanding of how to protect web resources. Knowing when to utilize tools like JSON Web Token (JWT), OAuth, and [API security best practices](https://roadmap.sh/best-practices/api-security) is crucial. Deciding when to build solutions from scratch or leverage third-party offerings based on project requirements is key to successful development.\n\n![Web security](https://assets.roadmap.sh/guest/web-security-g8b4s.JPG)\n\n### Caching\n\nCaching is the process of storing data so that future requests for that same data can be served faster. It typically involves using temporary storage that sits between the front-end and the back-end. Caching speeds up application performance, increases efficiency, and enhances overall user experience. As a Java full-stack developer, having a solid understanding of caching techniques and technologies like Redis is crucial.\n\n## How to stand out as a Java full stack developer\n\nWhile mastering front-end and back-end technologies forms the core competencies for building an application as a Java full stack developer, it's crucial to recognize that the technology landscape is dynamic, and business requirements evolve accordingly. Here are some additional skills that can be beneficial to you:\n\n- Java Virtual Machine (JVM)\n- Jakarta Server Pages\n- Front-end frameworks\n- Design patterns\n- Community\n- Soft skills\n- Continuous learning\n\n### Java Virtual Machine (JVM)\n\nThe JVM is a virtual machine that loads, verifies, and executes Java programs. It enables Java applications to run on various devices while providing security and optimizing program memory usage. A good knowledge of JVM's operation can empower you to build faster, safer, and more memory-efficient applications.\n\n### Jakarta Server Pages\n\nJakarta Server Pages (JSP), previously known as Java Server Pages, is a suite of technologies that enables you to generate dynamic web pages. It facilitates the integration of Java code within static web markup, which is then compiled and executed on the server to deliver dynamic web applications.\n\n![Jakarta server pages](https://jakarta.ee/images/jakarta/jakarta-ee-logo-color.svg)\n\n### Front-end frameworks\n\nWhile Java can work with HTML, CSS, and JavaScript, there are scenarios where businesses need a clear separation between front-end and back-end development. This requirement could arise from diverse factors such as deployment strategies, continuous delivery pipelines, virtual (2D/3D) rendering demands, dynamic user interfaces, and performance optimizations. Therefore, knowledge of popular JavaScript frameworks like [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular), etc. is critical for building scalable user interfaces.\n\n![react, angular & vue logos](https://assets.roadmap.sh/guest/react-angular-vue-logos-se584.png)\n\n### Design patterns\n\nDesign patterns are proven approaches to solving specific design challenges and promoting code reusability, maintainability, and scalability. A solid understanding of software architecture patterns like dependency injection, factory method patterns, builder patterns, etc., will prove invaluable when addressing common software design problems encountered during application development. These patterns provide developers with established solutions and best practices for effectively structuring their code and solving recurring design issues.\n\n### Community\n\nAs the popular saying goes, \"a tree cannot make a forest.\" While it might be tempting to work in isolation and tackle all development tasks alone, it's essential for you to join communities that encourage collaboration, peer learning, and staying updated on the latest developments.\n\nA great community to join is the [roadmap.sh](https://roadmap.sh/) [Discord community](https://roadmap.sh/discord), where you can connect with like-minded individuals who share your passion for development.\n\n### Soft skills\n\nIn addition to technical expertise, soft skills play a vital role in the development pipeline. Despite the advancements in AI shaping the technical landscape, human-centric soft skills remain highly valued. Machines may not fully grasp human needs, making empathy, critical thinking, and effective communication with business stakeholders indispensable qualities for you as a Java full stack developer.\n\n### Continuous learning\n\nFrameworks, libraries, technologies, modes of adoption, and business requirements will continue to evolve. It is important you stay curious, continuously learn, and keep up with the latest developments in the Java ecosystem, which is huge.\n\nWhile staying informed about changes in the ecosystem can be overwhelming, especially with information from various sources like blogs, online training, bootcamp courses, etc., there's a reliable and regularly updated platform for Java resources: [Java Developer Roadmap](https://roadmap.sh/java).\n\n## Java’s adoption in the real-world\n\nDeveloped by James Gosling at [Sun Microsystems](https://en.wikipedia.org/wiki/Sun_Microsystems) in the 1990s, Java initially targeted interactive television but transitioned to Internet programming for its advanced features. The public release of Java 1.0 in 1996 introduced \"[write once, run anywhere](https://en.wikipedia.org/wiki/Write_once,_run_anywhere)\" (WORA), offering no-cost runtimes across platforms and revolutionizing software development. Since then, Java has evolved significantly with numerous versions, runtimes, and platform support.\n\n![Java adoption](https://assets.roadmap.sh/guest/java-adoption-tq5x4.jpeg)\n\nThe WORA mantra empowers developers to write Java programs that are capable of running on any device. These programs are compiled into standard bytecode, which allows them to execute on any device equipped with a [Java virtual machine](https://en.wikipedia.org/wiki/Java_virtual_machine). Due to its seamless cross-platform compatibility, Java has been widely adopted for building applications on various platforms, including web, mobile, and other digital devices. Below are some areas where Java has been massively adopted beyond its general usage:\n\n### Java in virtual reality, augmented reality, and mixed reality\n\nJava has also been widely adopted for building applications that support interactivity and immersive experiences, particularly in the realms of virtual reality (VR), augmented reality (AR), and mixed reality (XR).\n\nFor example, in e-commerce, full stack developers can use Java’s capabilities to create realistic and virtual environments that allow customers to visualize how different clothing items and footwear will look on them before making a purchase.\n\n### Java in AI\n\nAnother field in which Java is gaining adoption is AI. Java's maintainability, object-oriented approach, enhanced security, garbage collection, and platform independence have positioned it as a vital tool for modeling and powering AI applications. These features make Java well-suited for developing robust and scalable AI solutions that can effectively handle complex data processing and analysis tasks.\n\n![Java usage](https://assets.roadmap.sh/guest/java-usage-8bazm.JPG)\n\n## What is the demand for Java developers?\n\nAccording to Statista, [Java is one of the most widely embraced programming languages among developers,](https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/) owing to its speed, security, and reliability. Its versatility has led to widespread adoption across industries, including big data, banking, retail, and stock markets.\n\n![Most used programming language statistics](https://assets.roadmap.sh/guest/most-used-programming-languages-lqmoo.png)\n\nBased on the recently concluded [Stack Overflow survey](https://survey.stackoverflow.co/2023/#technology), it was found that 30.49% of the respondents utilize Java in their professional endeavors, while 35.17% are in the process of adopting Java to fulfill their programming needs.\n\nMoreover, the demand for Java developers is projected to continue rising, [with over 40% of recruiters actively seeking professionals skilled in Java programming](https://www.statista.com/statistics/1296727/programming-languages-demanded-by-recruiters/).\n\nIn summary, a Java full stack developer needs expertise in front-end technologies (such as HTML, CSS, JavaScript, and WebSocket) and back-end skills (including Database management, Java frameworks, version control, version control providers, APIs, caching, etc.). These skills are essential for building comprehensive applications and ensuring seamless communication between the client and server sides.\n\nWith billions of devices using Java across various platforms and its extensive adoption in big data, AI, VR/AR/XR, and more, the demand for Java developers is significant. This demand will persist for maintaining and developing new Java applications. Java’s ease of use, robustness, and scalability make it a top choice among developers, ensuring its relevance today and as technologies evolve.\n\nWhether you're just getting into the field or an experienced developer aiming to stay updated with technological advancements, roadmap.sh’s [Java roadmap](https://roadmap.sh/java) is an invaluable resource. Moreover, you now have the opportunity to generate your roadmap with AI, follow and track your progress, showcase your skills, and become part of a supportive community by [signing up](https://roadmap.sh/signup) on roadmap.sh platform.\n";
				}
				async function compiledContent$r() {
					return await html$r();
				}
				function getHeadings$r() {
					return [{"depth":2,"slug":"top-skills-required-as-java-full-stack-developer","text":"Top skills required as Java full stack developer"},{"depth":2,"slug":"required-skills-for-front-end-java-development","text":"Required skills for front-end Java development"},{"depth":3,"slug":"html-and-css","text":"HTML and CSS"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":3,"slug":"typescript","text":"TypeScript"},{"depth":3,"slug":"accessibility-standards-and-compatibility","text":"Accessibility standards and compatibility"},{"depth":2,"slug":"required-skills-for-back-end-java-development","text":"Required skills for back-end Java development"},{"depth":3,"slug":"java-programming-language","text":"Java programming language:"},{"depth":3,"slug":"database-management-system","text":"Database management system"},{"depth":3,"slug":"java-frameworks","text":"Java frameworks"},{"depth":3,"slug":"version-control","text":"Version control"},{"depth":3,"slug":"version-control-providers","text":"Version control providers"},{"depth":3,"slug":"deployment-mechanism","text":"Deployment mechanism"},{"depth":3,"slug":"application-programming-interfaces-apis","text":"Application Programming Interfaces (APIs)"},{"depth":3,"slug":"web-security","text":"Web security"},{"depth":3,"slug":"caching","text":"Caching"},{"depth":2,"slug":"how-to-stand-out-as-a-java-full-stack-developer","text":"How to stand out as a Java full stack developer"},{"depth":3,"slug":"java-virtual-machine-jvm","text":"Java Virtual Machine (JVM)"},{"depth":3,"slug":"jakarta-server-pages","text":"Jakarta Server Pages"},{"depth":3,"slug":"front-end-frameworks","text":"Front-end frameworks"},{"depth":3,"slug":"design-patterns","text":"Design patterns"},{"depth":3,"slug":"community","text":"Community"},{"depth":3,"slug":"soft-skills","text":"Soft skills"},{"depth":3,"slug":"continuous-learning","text":"Continuous learning"},{"depth":2,"slug":"javas-adoption-in-the-real-world","text":"Java’s adoption in the real-world"},{"depth":3,"slug":"java-in-virtual-reality-augmented-reality-and-mixed-reality","text":"Java in virtual reality, augmented reality, and mixed reality"},{"depth":3,"slug":"java-in-ai","text":"Java in AI"},{"depth":2,"slug":"what-is-the-demand-for-java-developers","text":"What is the demand for Java developers?"}];
				}

				const Content$r = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$r;
					content.file = file$r;
					content.url = url$r;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$r())}`;
				});

const __vite_glob_0_71 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$r,
	compiledContent: compiledContent$r,
	default: Content$r,
	file: file$r,
	frontmatter: frontmatter$r,
	getHeadings: getHeadings$r,
	rawContent: rawContent$r,
	url: url$r
}, Symbol.toStringTag, { value: 'Module' }));

const html$q = () => "<p><img src=\"https://assets.roadmap.sh/guest/java-vs-javascript-66pqp.jpg\" alt=\"Java vs JavaScript\"></p>\n<p>Java and JavaScript are among the most popular programming languages in web development. They were both created in 1995: Sun Microsystems released Java in May, and Netscape released JavaScript in September. Despite coming out in the same year with similar names, Java and Javascript are two distinct programming languages with different designs, purposes, and use cases.</p>\n<p><a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a> is an object-oriented programming language used to create complex web applications ranging from mobile apps to large-scale enterprise software like banking software. Java is platform-independent—it can work on any device with a Java Virtual Machine <strong>(JVM)</strong> installed. This makes it suitable for backend development and high-performance software.</p>\n<p>In contrast, <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> is a lightweight scripting language for creating dynamic web interactions. It runs in web browsers and enables developers to build interactive web pages. Examples of these interactions include forms, animations, and more. JavaScript is often used alongside HTML and CSS in frontend web development. However, full stack developers now use JavaScript through Node.js to create backend applications.</p>\n<p>Knowing when to use each language will help you choose the right one for your projects and career goals. I will explain the key differences between Java and JavaScript in this guide. I will also cover their syntax, runtime environments, key features, advantages, and disadvantages.</p>\n<p><strong>TL;DR:</strong>\nJava and JavaScript may share similar names, but they serve distinct purposes. Thanks to its platform independence and high performance, Java is a robust, object-oriented language ideal for building large-scale applications like enterprise software and Android apps. Conversely, JavaScript is a lightweight, flexible scripting language used for creating dynamic, interactive web pages and full stack applications with tools like Node.js. Each language excels in different use cases—choose Java for backend-heavy, scalable systems and JavaScript for web interactivity and rapid development.</p>\n<h2 id=\"the-key-differences-between-java-and-javascript\">The key differences between Java and JavaScript</h2>\n<p>Note that the purpose of this guide is not to compare or select a winner between Java and JavaScript. Instead, it aims to help you know the strengths of each programming language and which to use.</p>\n<p>The table below summarizes the differences between both programming languages:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Characteristic</th><th>Java</th><th>JavaScript</th></tr></thead><tbody><tr><td>Syntax</td><td>Statically typed, verbose</td><td>Dynamically typed, concise</td></tr><tr><td>Runtime environment</td><td>JVM</td><td>Web Browser</td></tr><tr><td>Execution environment</td><td>Server-side programming</td><td>Client-side, server-side (Node.js)</td></tr><tr><td>Primary use case</td><td>Server-side application development, Android apps</td><td>Client-side development</td></tr><tr><td>Performance</td><td>High-performance, optimized</td><td>Often slower, more flexible</td></tr><tr><td>Compilation</td><td>Compiled into bytecode (compiled language)</td><td>Interpreted in web browsers or Node.js (interpreted language)</td></tr></tbody></table>\n<h3 id=\"java-vs-javascript-syntax\">Java vs. JavaScript: Syntax</h3>\n<p>Java and JavaScript have different syntaxes. Java is a statically typed language with a more verbose syntax. It has a more rigid syntax, so developers must declare exactly the variable type they use. Doing this leads to fewer errors but requires more lines of code to complete a task. The following are syntax code snippets showing this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\"> number </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 5</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">String</span><span style=\"color:#F8F8F2\"> message </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Sign up on roadmap</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<p>In contrast, JavaScript is a dynamically typed language with a more concise syntax. It is more flexible, so you do not have to declare what type of variable you are using. Doing this makes coding faster but leads to runtime errors if you are not careful. Example of a JavaScript code syntax:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">let</span><span style=\"color:#F8F8F2\"> number </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 5</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">number </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Sign up on roadmap</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">; </span><span style=\"color:#6272A4\">// The number variable can be casually reassigned to a string</span></span></code></pre>\n<p>Usually saved in a .js file extension, this code will show <strong>“Sign up on roadmap”</strong> on the console.</p>\n<h3 id=\"java-vs-javascript-execution-and-runtime\">Java vs. JavaScript: Execution and runtime</h3>\n<p>Java is often used for server-side programming. It is a compiled language that requires a Java Virtual Machine <strong>(JVM)</strong> to run Java code. Before running your code, it’s compiled into bytecode, a platform-independent format. The JVM then executes the bytecode to ensure that Java programs run on any system with JVM installed. It makes Java a good choice for large-scale applications that run on any operating system. These operating systems include Windows, macOS, Linux, and mobile devices.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/java-vs-javascript-execution-and-runtime-csnnz.png\" alt=\"\"></p>\n<p>JavaScript, however, is often used for client-side web development. It is an interpreted language that runs in the web browser <strong>(Google Chrome, Internet Explorer, etc.)</strong> or runtime environment like Node.js. There is no separate compilation step like in Java programming language. Instead, developers can see the results of their code changes as soon as they make them. Doing this makes JavaScript a good choice for building interactive websites.</p>\n<h3 id=\"java-vs-javascript-use-case-suitability\">Java vs. JavaScript: Use case suitability</h3>\n<p>Java is an <a href=\"https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">object-oriented programming language</a> used to build various applications. It’s quick, dependable, and versatile, so it’s great for creating:</p>\n<ul>\n<li>Native apps.</li>\n<li>Data analysis tools.</li>\n<li>Desktop apps.</li>\n<li>Backend apps.</li>\n<li>Android apps.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/java-vs-javascript-use-case-suitability-ev9gw.png\" alt=\"\"></p>\n<p>JavaScript is a scripting language used to create a web application user interface. Its dynamic nature makes it work well with web browsers, which is good for:</p>\n<ul>\n<li>Game development.</li>\n<li>Interactive web page experiences.</li>\n<li>Cross-platform app development (with React Native framework).</li>\n<li>Frontend and full stack development (Node.js).</li>\n</ul>\n<p>Java and JavaScript are important for a lot of leading tech companies**.** Tech companies like ****Amazon, Netflix, and Uber use Java for their backend systems, while Google, Facebook, and Netflix use JavaScript for their frontend services.</p>\n<h3 id=\"performance-impacts\">Performance impacts</h3>\n<p>Java’s compiled nature makes it better for building large-scale applications. However, its setup and execution can take a bit more time. So, it’s not as perfect as JavaScript for tasks that need quick feedback, like chat apps.</p>\n<p>JavaScript focuses on being fast and flexible for client-side interactions. Its event-driven nature makes carrying out tasks like document object model (DOM) manipulation easy. But, it may struggle with CPU-intensive tasks like data compression and decompression.</p>\n<h2 id=\"key-features-of-javascript-and-java\">Key features of JavaScript and Java</h2>\n<p>Java and JavaScript each have unique features that are perfect for specific tasks. The table below summarizes the key features of both programming languages:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Features</th><th>Java</th><th>JavaScript</th></tr></thead><tbody><tr><td>Concurrency</td><td>Multi-threading support</td><td>Event-driven, single-threaded with asynchronous built-in support</td></tr><tr><td>Inheritance model</td><td>Class-based inheritance</td><td>Prototype-based inheritance</td></tr><tr><td>Memory management</td><td>Automatic garbage collection</td><td>Automatic garbage collection (modern engines)</td></tr><tr><td>Cross-platform</td><td>JVM</td><td>Browsers and on servers (Node.js)</td></tr><tr><td>Paradigm</td><td>Primarily object-oriented</td><td>Multi-paradigm</td></tr></tbody></table>\n<h3 id=\"multi-threading-vs-asynchronous-calls\">Multi-threading vs. Asynchronous calls</h3>\n<p>Java is an object-based programming language with built-in support for multi-threading. It lets you write applications that run multiple threads <strong>(many tasks)</strong> at the same time. Multi-threading is especially useful for server-side applications, such as web application servers. It lets them juggle many requests at once, making them run quicker and more responsive.</p>\n<p>JavaScript, unlike Java, is single-threaded. So, it can only work on one task at a time. However, It has built-in support for asynchronous programming <strong>(callbacks, promises, and async/await)</strong>. This way, developers can work on many background tasks without blocking the main task. It helps create responsive and non-blocking web applications, e.g., chat applications.</p>\n<p>The event-driven nature of the JavaScript language is another key feature. It enables websites to react to user actions, e.g., button clicks, so it’s great for building the frontend of websites. However, Java’s object-oriented nature makes it great for creating robust backends of websites.</p>\n<h3 id=\"memory-management\">Memory management</h3>\n<p>Java uses automatic garbage collection ****for memory management. So, developers don’t have to worry about managing memory for their apps by themselves. The Java garbage collector cleans up and gets rid of unused memory often. It prevents memory leaks by removing the need for manual memory management. Due to this, Java is a good choice for backend systems that need to be scalable and stable.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/memory-management-tdg2z.png\" alt=\"\"></p>\n<p>Developers had to handle memory management themselves in earlier versions of JavaScript. However, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">modern JavaScript engines</a> like V8 now have good garbage collection systems. These updates improve memory management and make apps and websites run faster. It also enables developers to focus on how to write code rather than on memory issues.</p>\n<h3 id=\"cross-platform-support\">Cross-platform support</h3>\n<p>Although both Java and JavaScript support different platforms, they provide good cross-platform compatibility. Java is a platform-independent language because it runs on the Java platform. Any device with an installed Java Virtual Machine can run the Java code you write. It is great for developers because they can write their code once and use it anywhere.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cross-platform-support-ck38q.png\" alt=\"\"></p>\n<p>In contrast, JavaScript operates in web browsers. It is easy to use on all devices and platforms without extra setup. Any device can run your JavaScript code as long as it has a web browser. Also, with tools like Node.js, you can now use JavaScript for server-side development. It makes it easy for a full stack developer to work with JavaScript on frontend and backend projects. Thanks to Node.js, JavaScript can run on many platforms past the browser, e.g., Windows, MacOS, and Linux.</p>\n<h2 id=\"advantages-and-disadvantages-of-java-and-javascript\">Advantages and disadvantages of Java and JavaScript</h2>\n<p>When choosing between both languages, weigh their strengths and weaknesses. You can determine what is best for your project by being aware of these factors.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/advantages-and-disadvantages-of-java-and-javascript-4kx25.png\" alt=\"\"></p>\n<h3 id=\"advantages-of-java\">Advantages of Java</h3>\n<ul>\n<li><strong>Security</strong>: Java has strong built-in security features like the bytecode verification. It keeps your code secure for applications that need data protection, e.g., banking apps.</li>\n<li><strong>Security</strong>: Java has strong built-in security features like the bytecode verification. This keeps Java code secure for applications that need data protection, e.g., banking apps.</li>\n<li><strong>Ecosystem</strong>: Java is a popular programming language among developers. Java’s popularity has led to a huge library and framework ecosystem, e.g., Spring and Hibernate. They make it easier to learn Java and create large-scale enterprise software applications.</li>\n</ul>\n<h3 id=\"disadvantages-of-java\">Disadvantages of Java</h3>\n<ul>\n<li><strong>Verbose Syntax</strong>: Java can be a pain to learn because of its complex syntax and verbose code. It needs more code lines than other programming languages, like JavaScript. This can slow down the building process of websites and apps and be difficult to maintain.</li>\n<li><strong>Complex learning curve:</strong> Java is a complex language, especially for beginners. Its many programming concepts, syntax, etc., make it hard to learn Java.</li>\n</ul>\n<h3 id=\"advantages-of-javascript\">Advantages of JavaScript</h3>\n<ul>\n<li><strong>Easy learning curve</strong>: It is easier to learn JavaScript because of its flexible syntax. Unlike Java, your code will still work if you forget specific rules like semicolons. So, it’s the first programming language for most newbies going into web development.</li>\n<li><strong>Flexibility</strong>: JavaScript is a versatile programming language. It works for both frontend and backend development <strong>(with Node.js)</strong>. You can build a whole web application from start to finish using JavaScript.</li>\n<li><strong>Large Ecosystem</strong>: One major advantage of JavaScript is its ecosystem. It has a large and active ecosystem of libraries and frameworks, e.g., React and Vue. Unlike other languages, JavaScript’s ecosystem is always growing with new tools and resources. This makes learning JavaScript and building web apps way easier for developers.</li>\n<li><strong>Less overhead</strong>: JavaScript has less overhead compared to other languages. It is a lightweight programming language that needs fewer system resources to run. It helps speed up web apps, so pages load and respond fast to user actions <strong>(e.g., button clicks)</strong>.</li>\n</ul>\n<h3 id=\"disadvantages-of-javascript\">Disadvantages of JavaScript</h3>\n<ul>\n<li><strong>Security risks:</strong> Poorly written or insecure JavaScript code can cause client-side security risks. Since JavaScript code runs on the user’s browser, anyone visiting your website can see it. Hackers can abuse it, causing security problems like <a href=\"https://portswigger.net/web-security/cross-site-scripting\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Cross-Site Scripting</a> (XSS).</li>\n<li><strong>Browser inconsistencies:</strong> JavaScript can have browser inconsistencies. Web browsers like Google Chrome might interpret JavaScript code in different ways. It could cause issues where your website or web app works fine in one browser but not in another. This results in difficulty building sites that work the same on all browsers.</li>\n</ul>\n<h2 id=\"factors-to-consider-when-choosing-between-javascript-and-java\">Factors to consider when choosing between JavaScript and Java</h2>\n<p>Deciding between Java or JavaScript comes down to a few factors. It is not about one language being better; it’s just about picking the one that works best for you. Let’s take a closer look at these factors:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/factors-to-consider-when-choosing-between-java-and-javascript-jelvx.png\" alt=\"\"></p>\n<h3 id=\"personal-preference\">Personal preference</h3>\n<p>When choosing between Java or JavaScript, go with whatever you like best. For a flexible, growing programming language, choose JavaScript.</p>\n<p>Choose Java if you enjoy building complex systems with an emphasis on security. Also, if you are new to coding, JavaScript might be easier to learn. It lets you build interactive websites with hardly any setup needed. However, you might prefer Java if you have experience with object-oriented programming <strong>(OOP)</strong>.</p>\n<h3 id=\"career-goals-and-professional-development\">Career goals and professional development</h3>\n<p>If you want to start a career as a developer, it is important to consider what you want to achieve in the long run. You should base your decision on what kind of projects you want to work on and the industry. If you intend to work at start-ups or companies where you build interactive web apps, then JavaScript is the way to go. But if you are considering going into finance, healthcare, or any industry that relies on robust and scalable enterprise applications, consider learning Java.</p>\n<h3 id=\"project-requirements\">Project requirements</h3>\n<p>The kind of project you are working on also helps you figure out which of these two languages is the better pick. JavaScript is the way to go if you want to build an interactive web app. Its flexibility allows you to handle many tasks, so it’s suitable for fast-paced projects. Java is the better choice to build mobile apps for Android. JavaScript is also better for projects with a tight deadline due to its simpler syntax and fast development time.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>Knowing the difference between Java and JavaScript will help you choose one to learn or one for a specific project. JavaScript, for example, doesn’t have to be the only language you know; you can learn both. Learning both languages will open up more job options and make you a versatile developer.</p>\n<p>However, if you are a beginner, focus on being good at one language before learning another. To stay up-to-date on the latest developments in programming, visit <a href=\"http://roadmap.sh\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">roadmap.sh</a>. It has tutorials, resources, and everything you need to get started.</p>";

				const frontmatter$q = {"title":"Java vs JavaScript: Key Differences Explained","description":"Understand the unique strengths of Java and JavaScript to decide which suits your programming needs best.","authorId":"ekene","excludedBySlug":"/java/vs-javascript","seo":{"title":"Java vs JavaScript: Key Differences Explained","description":"Understand the unique strengths of Java and JavaScript to decide which suits your programming needs best.","ogImageUrl":"https://assets.roadmap.sh/guest/java-vs-javascript-66pqp.jpg"},"relatedTitle":"Other Guides","isNew":false,"type":"textual","date":"2025-01-30T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$q = "/workspace/src/data/guides/java-vs-javascript.md";
				const url$q = undefined;
				function rawContent$q() {
					return "   \n                                                      \n                                                                                                                        \n               \n                                     \n    \n                                                        \n                                                                                                                          \n                                                                            \n                            \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Java vs JavaScript](https://assets.roadmap.sh/guest/java-vs-javascript-66pqp.jpg)\n\nJava and JavaScript are among the most popular programming languages in web development. They were both created in 1995: Sun Microsystems released Java in May, and Netscape released JavaScript in September. Despite coming out in the same year with similar names, Java and Javascript are two distinct programming languages with different designs, purposes, and use cases.\n\n[Java](https://roadmap.sh/java) is an object-oriented programming language used to create complex web applications ranging from mobile apps to large-scale enterprise software like banking software. Java is platform-independent—it can work on any device with a Java Virtual Machine **(JVM)** installed. This makes it suitable for backend development and high-performance software.\n\nIn contrast, [JavaScript](https://roadmap.sh/javascript) is a lightweight scripting language for creating dynamic web interactions. It runs in web browsers and enables developers to build interactive web pages. Examples of these interactions include forms, animations, and more. JavaScript is often used alongside HTML and CSS in frontend web development. However, full stack developers now use JavaScript through Node.js to create backend applications.\n\nKnowing when to use each language will help you choose the right one for your projects and career goals. I will explain the key differences between Java and JavaScript in this guide. I will also cover their syntax, runtime environments, key features, advantages, and disadvantages.\n\n**TL;DR:**\nJava and JavaScript may share similar names, but they serve distinct purposes. Thanks to its platform independence and high performance, Java is a robust, object-oriented language ideal for building large-scale applications like enterprise software and Android apps. Conversely, JavaScript is a lightweight, flexible scripting language used for creating dynamic, interactive web pages and full stack applications with tools like Node.js. Each language excels in different use cases—choose Java for backend-heavy, scalable systems and JavaScript for web interactivity and rapid development.\n\n## The key differences between Java and JavaScript\n\nNote that the purpose of this guide is not to compare or select a winner between Java and JavaScript. Instead, it aims to help you know the strengths of each programming language and which to use.\n\nThe table below summarizes the differences between both programming languages:\n\n| Characteristic        | Java                                              | JavaScript                                                    |\n| --------------------- | ------------------------------------------------- | ------------------------------------------------------------- |\n| Syntax                | Statically typed, verbose                         | Dynamically typed, concise                                    |\n| Runtime environment   | JVM                                               | Web Browser                                                   |\n| Execution environment | Server-side programming                           | Client-side, server-side (Node.js)                            |\n| Primary use case      | Server-side application development, Android apps | Client-side development                                       |\n| Performance           | High-performance, optimized                       | Often slower, more flexible                                   |\n| Compilation           | Compiled into bytecode (compiled language)        | Interpreted in web browsers or Node.js (interpreted language) |\n\n### Java vs. JavaScript: Syntax\n\nJava and JavaScript have different syntaxes. Java is a statically typed language with a more verbose syntax. It has a more rigid syntax, so developers must declare exactly the variable type they use. Doing this leads to fewer errors but requires more lines of code to complete a task. The following are syntax code snippets showing this:\n\n```java\nint number = 5;\nString message = \"Sign up on roadmap\";\n```\n\nIn contrast, JavaScript is a dynamically typed language with a more concise syntax. It is more flexible, so you do not have to declare what type of variable you are using. Doing this makes coding faster but leads to runtime errors if you are not careful. Example of a JavaScript code syntax:\n\n```javascript\nlet number = 5;\nnumber = 'Sign up on roadmap'; // The number variable can be casually reassigned to a string\n```\n\nUsually saved in a .js file extension, this code will show **\"Sign up on roadmap\"** on the console.\n\n### Java vs. JavaScript: Execution and runtime\n\nJava is often used for server-side programming. It is a compiled language that requires a Java Virtual Machine **(JVM)** to run Java code. Before running your code, it's compiled into bytecode, a platform-independent format. The JVM then executes the bytecode to ensure that Java programs run on any system with JVM installed. It makes Java a good choice for large-scale applications that run on any operating system. These operating systems include Windows, macOS, Linux, and mobile devices.\n\n![](https://assets.roadmap.sh/guest/java-vs-javascript-execution-and-runtime-csnnz.png)\n\nJavaScript, however, is often used for client-side web development. It is an interpreted language that runs in the web browser **(Google Chrome, Internet Explorer, etc.)** or runtime environment like Node.js. There is no separate compilation step like in Java programming language. Instead, developers can see the results of their code changes as soon as they make them. Doing this makes JavaScript a good choice for building interactive websites.\n\n### Java vs. JavaScript: Use case suitability\n\nJava is an [object-oriented programming language](https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP) used to build various applications. It's quick, dependable, and versatile, so it's great for creating:\n\n- Native apps.\n- Data analysis tools.\n- Desktop apps.\n- Backend apps.\n- Android apps.\n\n![](https://assets.roadmap.sh/guest/java-vs-javascript-use-case-suitability-ev9gw.png)\n\nJavaScript is a scripting language used to create a web application user interface. Its dynamic nature makes it work well with web browsers, which is good for:\n\n- Game development.\n- Interactive web page experiences.\n- Cross-platform app development (with React Native framework).\n- Frontend and full stack development (Node.js).\n\nJava and JavaScript are important for a lot of leading tech companies**.** Tech companies like \\*\\*\\*\\*Amazon, Netflix, and Uber use Java for their backend systems, while Google, Facebook, and Netflix use JavaScript for their frontend services.\n\n### Performance impacts\n\nJava's compiled nature makes it better for building large-scale applications. However, its setup and execution can take a bit more time. So, it's not as perfect as JavaScript for tasks that need quick feedback, like chat apps.\n\nJavaScript focuses on being fast and flexible for client-side interactions. Its event-driven nature makes carrying out tasks like document object model (DOM) manipulation easy. But, it may struggle with CPU-intensive tasks like data compression and decompression.\n\n## Key features of JavaScript and Java\n\nJava and JavaScript each have unique features that are perfect for specific tasks. The table below summarizes the key features of both programming languages:\n\n| Features          | Java                         | JavaScript                                                       |\n| ----------------- | ---------------------------- | ---------------------------------------------------------------- |\n| Concurrency       | Multi-threading support      | Event-driven, single-threaded with asynchronous built-in support |\n| Inheritance model | Class-based inheritance      | Prototype-based inheritance                                      |\n| Memory management | Automatic garbage collection | Automatic garbage collection (modern engines)                    |\n| Cross-platform    | JVM                          | Browsers and on servers (Node.js)                                |\n| Paradigm          | Primarily object-oriented    | Multi-paradigm                                                   |\n\n### Multi-threading vs. Asynchronous calls\n\nJava is an object-based programming language with built-in support for multi-threading. It lets you write applications that run multiple threads **(many tasks)** at the same time. Multi-threading is especially useful for server-side applications, such as web application servers. It lets them juggle many requests at once, making them run quicker and more responsive.\n\nJavaScript, unlike Java, is single-threaded. So, it can only work on one task at a time. However, It has built-in support for asynchronous programming **(callbacks, promises, and async/await)**. This way, developers can work on many background tasks without blocking the main task. It helps create responsive and non-blocking web applications, e.g., chat applications.\n\nThe event-driven nature of the JavaScript language is another key feature. It enables websites to react to user actions, e.g., button clicks, so it's great for building the frontend of websites. However, Java's object-oriented nature makes it great for creating robust backends of websites.\n\n### Memory management\n\nJava uses automatic garbage collection \\*\\*\\*\\*for memory management. So, developers don't have to worry about managing memory for their apps by themselves. The Java garbage collector cleans up and gets rid of unused memory often. It prevents memory leaks by removing the need for manual memory management. Due to this, Java is a good choice for backend systems that need to be scalable and stable.\n\n![](https://assets.roadmap.sh/guest/memory-management-tdg2z.png)\n\nDevelopers had to handle memory management themselves in earlier versions of JavaScript. However, [modern JavaScript engines](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management) like V8 now have good garbage collection systems. These updates improve memory management and make apps and websites run faster. It also enables developers to focus on how to write code rather than on memory issues.\n\n### Cross-platform support\n\nAlthough both Java and JavaScript support different platforms, they provide good cross-platform compatibility. Java is a platform-independent language because it runs on the Java platform. Any device with an installed Java Virtual Machine can run the Java code you write. It is great for developers because they can write their code once and use it anywhere.\n\n![](https://assets.roadmap.sh/guest/cross-platform-support-ck38q.png)\n\nIn contrast, JavaScript operates in web browsers. It is easy to use on all devices and platforms without extra setup. Any device can run your JavaScript code as long as it has a web browser. Also, with tools like Node.js, you can now use JavaScript for server-side development. It makes it easy for a full stack developer to work with JavaScript on frontend and backend projects. Thanks to Node.js, JavaScript can run on many platforms past the browser, e.g., Windows, MacOS, and Linux.\n\n## Advantages and disadvantages of Java and JavaScript\n\nWhen choosing between both languages, weigh their strengths and weaknesses. You can determine what is best for your project by being aware of these factors.\n\n![](https://assets.roadmap.sh/guest/advantages-and-disadvantages-of-java-and-javascript-4kx25.png)\n\n### Advantages of Java\n\n- **Security**: Java has strong built-in security features like the bytecode verification. It keeps your code secure for applications that need data protection, e.g., banking apps.\n- **Security**: Java has strong built-in security features like the bytecode verification. This keeps Java code secure for applications that need data protection, e.g., banking apps.\n- **Ecosystem**: Java is a popular programming language among developers. Java's popularity has led to a huge library and framework ecosystem, e.g., Spring and Hibernate. They make it easier to learn Java and create large-scale enterprise software applications.\n\n### Disadvantages of Java\n\n- **Verbose Syntax**: Java can be a pain to learn because of its complex syntax and verbose code. It needs more code lines than other programming languages, like JavaScript. This can slow down the building process of websites and apps and be difficult to maintain.\n- **Complex learning curve:** Java is a complex language, especially for beginners. Its many programming concepts, syntax, etc., make it hard to learn Java.\n\n### Advantages of JavaScript\n\n- **Easy learning curve**: It is easier to learn JavaScript because of its flexible syntax. Unlike Java, your code will still work if you forget specific rules like semicolons. So, it's the first programming language for most newbies going into web development.\n- **Flexibility**: JavaScript is a versatile programming language. It works for both frontend and backend development **(with Node.js)**. You can build a whole web application from start to finish using JavaScript.\n- **Large Ecosystem**: One major advantage of JavaScript is its ecosystem. It has a large and active ecosystem of libraries and frameworks, e.g., React and Vue. Unlike other languages, JavaScript's ecosystem is always growing with new tools and resources. This makes learning JavaScript and building web apps way easier for developers.\n- **Less overhead**: JavaScript has less overhead compared to other languages. It is a lightweight programming language that needs fewer system resources to run. It helps speed up web apps, so pages load and respond fast to user actions **(e.g., button clicks)**.\n\n### Disadvantages of JavaScript\n\n- **Security risks:** Poorly written or insecure JavaScript code can cause client-side security risks. Since JavaScript code runs on the user's browser, anyone visiting your website can see it. Hackers can abuse it, causing security problems like [Cross-Site Scripting](https://portswigger.net/web-security/cross-site-scripting) (XSS).\n- **Browser inconsistencies:** JavaScript can have browser inconsistencies. Web browsers like Google Chrome might interpret JavaScript code in different ways. It could cause issues where your website or web app works fine in one browser but not in another. This results in difficulty building sites that work the same on all browsers.\n\n## Factors to consider when choosing between JavaScript and Java\n\nDeciding between Java or JavaScript comes down to a few factors. It is not about one language being better; it's just about picking the one that works best for you. Let's take a closer look at these factors:\n\n![](https://assets.roadmap.sh/guest/factors-to-consider-when-choosing-between-java-and-javascript-jelvx.png)\n\n### Personal preference\n\nWhen choosing between Java or JavaScript, go with whatever you like best. For a flexible, growing programming language, choose JavaScript.\n\nChoose Java if you enjoy building complex systems with an emphasis on security. Also, if you are new to coding, JavaScript might be easier to learn. It lets you build interactive websites with hardly any setup needed. However, you might prefer Java if you have experience with object-oriented programming **(OOP)**.\n\n### Career goals and professional development\n\nIf you want to start a career as a developer, it is important to consider what you want to achieve in the long run. You should base your decision on what kind of projects you want to work on and the industry. If you intend to work at start-ups or companies where you build interactive web apps, then JavaScript is the way to go. But if you are considering going into finance, healthcare, or any industry that relies on robust and scalable enterprise applications, consider learning Java.\n\n### Project requirements\n\nThe kind of project you are working on also helps you figure out which of these two languages is the better pick. JavaScript is the way to go if you want to build an interactive web app. Its flexibility allows you to handle many tasks, so it's suitable for fast-paced projects. Java is the better choice to build mobile apps for Android. JavaScript is also better for projects with a tight deadline due to its simpler syntax and fast development time.\n\n## What next?\n\nKnowing the difference between Java and JavaScript will help you choose one to learn or one for a specific project. JavaScript, for example, doesn't have to be the only language you know; you can learn both. Learning both languages will open up more job options and make you a versatile developer.\n\nHowever, if you are a beginner, focus on being good at one language before learning another. To stay up-to-date on the latest developments in programming, visit [roadmap.sh](http://roadmap.sh). It has tutorials, resources, and everything you need to get started.\n";
				}
				async function compiledContent$q() {
					return await html$q();
				}
				function getHeadings$q() {
					return [{"depth":2,"slug":"the-key-differences-between-java-and-javascript","text":"The key differences between Java and JavaScript"},{"depth":3,"slug":"java-vs-javascript-syntax","text":"Java vs. JavaScript: Syntax"},{"depth":3,"slug":"java-vs-javascript-execution-and-runtime","text":"Java vs. JavaScript: Execution and runtime"},{"depth":3,"slug":"java-vs-javascript-use-case-suitability","text":"Java vs. JavaScript: Use case suitability"},{"depth":3,"slug":"performance-impacts","text":"Performance impacts"},{"depth":2,"slug":"key-features-of-javascript-and-java","text":"Key features of JavaScript and Java"},{"depth":3,"slug":"multi-threading-vs-asynchronous-calls","text":"Multi-threading vs. Asynchronous calls"},{"depth":3,"slug":"memory-management","text":"Memory management"},{"depth":3,"slug":"cross-platform-support","text":"Cross-platform support"},{"depth":2,"slug":"advantages-and-disadvantages-of-java-and-javascript","text":"Advantages and disadvantages of Java and JavaScript"},{"depth":3,"slug":"advantages-of-java","text":"Advantages of Java"},{"depth":3,"slug":"disadvantages-of-java","text":"Disadvantages of Java"},{"depth":3,"slug":"advantages-of-javascript","text":"Advantages of JavaScript"},{"depth":3,"slug":"disadvantages-of-javascript","text":"Disadvantages of JavaScript"},{"depth":2,"slug":"factors-to-consider-when-choosing-between-javascript-and-java","text":"Factors to consider when choosing between JavaScript and Java"},{"depth":3,"slug":"personal-preference","text":"Personal preference"},{"depth":3,"slug":"career-goals-and-professional-development","text":"Career goals and professional development"},{"depth":3,"slug":"project-requirements","text":"Project requirements"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$q = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$q;
					content.file = file$q;
					content.url = url$q;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$q())}`;
				});

const __vite_glob_0_72 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$q,
	compiledContent: compiledContent$q,
	default: Content$q,
	file: file$q,
	frontmatter: frontmatter$q,
	getHeadings: getHeadings$q,
	rawContent: rawContent$q,
	url: url$q
}, Symbol.toStringTag, { value: 'Module' }));

const html$p = () => "<p><img src=\"https://assets.roadmap.sh/guest/java-vs-python-xuk2b.jpg\" alt=\"Java vs Python\"></p>\n<p>Java and Python are two of the most popular programming languages, widely adopted for projects of all sizes. But when should you choose Java over Python, or vice versa? Which language enhances productivity during prototyping? And which ecosystem is better equipped to address modern software engineering challenges, such as those in artificial intelligence? These questions can be tough to answer and may slow down your development process.</p>\n<p>Having worked as an engineer building small to enterprise-scale projects, I’ve seen how <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java</a> and <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> compare to each other in terms of performance, scalability, and developer experience. In this guide, I’ll discuss their key features and practical use cases to help you decide the best language for your next project.</p>\n<p>The table below summarizes the key features of Java and Python to help you choose the right language for your next project:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Java</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td><strong>Type</strong></td><td>Compiled to bytecode, runs on the JVM</td><td>Interpreted language, runs on Python interpreter</td></tr><tr><td><strong>Syntax</strong></td><td>Verbose, object oriented language</td><td>Simple, easy to read and write, with dynamic typing</td></tr><tr><td><strong>Performance</strong></td><td>Faster due to static typing and JVM optimizations</td><td>Slower because of dynamic typing and interpreted execution</td></tr><tr><td><strong>Memory Management</strong></td><td>Automatic garbage collection (JVM)</td><td>Automatic garbage collection (via Python’s garbage collector)</td></tr><tr><td><strong>Concurrency Model</strong></td><td>Multi-threading with JVM threads</td><td>Threading and multiprocessing (GIL limits true parallelism)</td></tr><tr><td><strong>Cross-Platform</strong></td><td>JVM ensures compatibility across platforms</td><td>Platform-independent, requires Python runtime installed</td></tr><tr><td><strong>Error Handling</strong></td><td>Exception handling (try-catch)</td><td>Exception handling with simpler syntax</td></tr><tr><td><strong>Learning Curve</strong></td><td>Steeper, especially for beginners, due to verbosity</td><td>Beginner-friendly, intuitive syntax</td></tr><tr><td><strong>Use Cases</strong></td><td>Enterprise applications, Android app development, large-scale systems</td><td>Data science, web development, scripting, AI, machine learning</td></tr><tr><td><strong>Community and Libraries</strong></td><td>Mature, extensive ecosystem with robust frameworks</td><td>Vast and active community, rich libraries for diverse use cases</td></tr><tr><td><strong>Scalability</strong></td><td>Excellent for large-scale, high-performance systems</td><td>Good for scaling applications but may face performance bottlenecks</td></tr></tbody></table>\n<p>When it comes to adoption, both languages rank among the top choices for developing applications across platforms like web, mobile, and IoT.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/stack-overflow-survey-2024-ukhae.png\" alt=\"Stack Overflow survey 2024\"></p>\n<p>Before looking at these features in detail, let’s take a closer look at these two programming languages.</p>\n<h2 id=\"java\">Java</h2>\n<p><a href=\"https://www.java.com/en/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java</a> is a high-level, object-oriented, and class-based programming language developed in 1995 by Sun Microsystems (now owned by Oracle). It is designed to have as few implementation details as possible, and it is widely used for building applications across a range of platforms such as mobile, desktop, web, and enterprise systems. Java follows the “Write Once, Run Anywhere” (WORA) philosophy, which means compiled Java code can run on any platform with a Java Virtual Machine (JVM).</p>\n<h2 id=\"core-features-of-java\">Core features of Java</h2>\n<p>Below are the core features of Java that make it a powerhouse for building a range of applications:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/core-features-of-java-hjs55.png\" alt=\"Java features\"></p>\n<ol>\n<li><strong>Platform independence</strong>: Java code compiles into bytecode, which is portable and can run on any type of computer, including Windows, macOS, and Linux systems, as long as a JVM is available.</li>\n<li><strong>Object oriented programming language</strong>: Java follows the object oriented programming (OOP) paradigm of organizing code into reusable objects, functions, and classes, which makes it more intuitive for building large-scale projects. It also incorporates core OOP principles like encapsulation, inheritance, and polymorphism.</li>\n<li><strong>Scalability and robustness</strong>: Java has features like exception handling, memory management, and garbage collection, which makes it reliable, robust, and well-suited for building large-scale enterprise applications.</li>\n<li><strong>Security</strong>: Java has built-in security mechanisms like sandboxing, cryptography libraries, and bytecode verification, which checks for illegal code and performs runtime security checks. These features make it a preferred choice for security-conscious applications in banking and enterprise environments.</li>\n<li><strong>Multithreading</strong>: Java supports running more than one thread at a time. The concurrent support of executing tasks makes it an excellent choice for building performance-intensive applications.</li>\n<li><strong>Rich APIs and community support</strong>: Java comes with built-in standard libraries for handling tasks like data structures, file management, and networking. Additionally, it has a robust community that is constantly building new libraries and frameworks or extending existing ones.</li>\n</ol>\n<h2 id=\"advantages-of-java\">Advantages of Java</h2>\n<p>Below are some of the benefits you get when you use Java to build your applications:</p>\n<ul>\n<li>Java is enterprise-ready because it can handle the heavy load most modern applications need.</li>\n<li>The syntax is straightforward and relatively easy to learn compared to languages like C++.</li>\n<li>It has a Just-In-Time (JIT) compiler that improves runtime performance, which makes it an ideal language for building fast applications.</li>\n<li>There’s a large and active Java community with tons of libraries, frameworks, and resources that beginners can use or experts can rely on when they run into problems.</li>\n<li>The WORA principle ensures that applications built with Java run on any platform without any modification.</li>\n</ul>\n<h2 id=\"disadvantages-of-java\">Disadvantages of Java</h2>\n<p>While Java’s speed and efficiency make it ideal for building robust and scalable applications, there are some limitations to consider:</p>\n<ul>\n<li>Java syntax tends to be verbose compared to newer languages like Python, which can make the code harder to read and manage.</li>\n<li>The JVM layer makes Java slower than low-level languages like C or C++.</li>\n<li>Automatic garbage collection makes memory management easier, but it also limits how much control you have if you need to manage memory manually.</li>\n<li>Java isn’t the best choice for tasks like scientific computing, data analysis, or machine learning, where other languages might shine.</li>\n</ul>\n<h2 id=\"python\">Python</h2>\n<p><a href=\"https://www.python.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Python</a> is a high-level, all-purpose, popular programming language known for its readability and simplicity. It was designed by Guido van Rossum in 1991 with a focus on code readability with clear syntax and indentation. Python supports programming paradigms like procedural, object-oriented, and functional and is widely used in data science, software development, artificial intelligence (AI), and automation.</p>\n<h2 id=\"core-features-of-python\">Core features of Python</h2>\n<p>Below are the core features of Python that make it a go-to programming language for building all sorts of applications:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/core-features-of-python-c357l.png\" alt=\"Python features\"></p>\n<ol>\n<li><strong>Simple and readable syntax</strong>: Python’s syntax is intuitive for both beginners and experienced developers, thanks to its similarity to the English language. It’s also clean and concise, so you can achieve your goals with fewer lines of code.</li>\n<li><strong>Interpreted programming language</strong>: Python uses an interpreter to execute code line by line, which simplifies debugging and testing.</li>\n<li><strong>Support for multiple paradigms</strong>: Python accommodates different programming styles, such as object-oriented, functional, and procedural programming, giving you flexibility on how to write code.</li>\n<li><strong>Cross-platform compatibility</strong>: Python is platform-independent and can run on Windows, macOS, and Linux.</li>\n<li><strong>Rich ecosystem and community</strong>: Python offers a wide range of libraries and frameworks, like pandas, TensorFlow, Flask, and Django, for building just about anything. Plus, it has an active and growing community that contributes to its development and provides resources for troubleshooting and learning.</li>\n<li><strong>Dynamic typing</strong>: Python is dynamically typed, so you don’t need to specify variable types when declaring them, making coding faster and more flexible.</li>\n</ol>\n<h2 id=\"advantages-of-python\">Advantages of Python</h2>\n<p>Below are some of the benefits you get when you use Python to build your applications:</p>\n<ul>\n<li>The simple and English language-like syntax makes it an excellent choice for developers.</li>\n<li>The syntax is concise and supports dynamic typing, which reduces development time when compared to other verbose languages.</li>\n<li>Python is open-source and does not require any license before use, modification, or distribution.</li>\n<li>Python has extensive libraries, frameworks, and supportive communities that make it a versatile language for web development, artificial intelligence, and data science.</li>\n</ul>\n<h2 id=\"disadvantages-of-python\">Disadvantages of Python</h2>\n<p>While Python’s simple and yet elegant syntax makes it a general-purpose language for building all sorts of applications, there are some limitations to consider:</p>\n<ul>\n<li>Python’s use of an interpreter makes it slower when compared to a compiled language like Java.</li>\n<li>Python uses Global Interpreter Lock, a mechanism that allows only a single thread to access the interpreter, which makes it not suitable for resource-intensive applications that need to run multiple threads.</li>\n<li>Python has limited support for mobile development.</li>\n<li>Python’s dynamic typing and ease of use can lead to higher memory consumption.</li>\n<li>The dynamic typing of Python means errors only appear at runtime, which can cause issues in larger projects.</li>\n</ul>\n<p>Both Java and Python come with a huge ecosystem of libraries and frameworks for building various applications across devices and platforms. But how do you decide which one is the right fit for you? Let’s dive into a side-by-side comparison of these two popular languages to help you make an informed choice.</p>\n<h2 id=\"performance\">Performance</h2>\n<p>Java is faster than Python because it uses a compiler that compiles Java code into bytecode that the JVM then executes. The JVM also supports Just-In-Time (JIT) compilation, a program that converts bytecode into native code during the execution of a program, significantly improving performance.</p>\n<p>Python, on the other hand, uses an interpreter to execute Python code line by line. This approach introduces latency, which can impact application performance. Furthermore, Python is dynamically typed, meaning type-checking happens at runtime, which can further affect speed.</p>\n<p>For instance, if you’re building a financial application that requires real-time support, low latency, and performance at scale, Java is the better choice compared to Python. However, if your focus is on development speed rather than raw performance, then Python is a more suitable option.</p>\n<h2 id=\"memory-management\">Memory management</h2>\n<p>Java uses garbage collection within the JVM to automatically manage the allocations and deallocation of memory. The allocation mechanism makes it an ideal choice for applications that require long runtimes. However, Java also tends to consume more memory because of the JVM.</p>\n<p>Python also uses garbage collection to automatically manage memory. Although memory handling is simpler, the Global Interpreter Lock can limit multithreading, especially in CPU-intensive tasks.</p>\n<h2 id=\"concurrency\">Concurrency</h2>\n<p>Concurrency is important for building applications that require running multi-threaded environments where tasks are executed in parallel (like web servers, real-time banking systems, and stock trading platforms). Both Java and Python handle concurrency differently due to their design philosophies, threading models, and runtime environments.</p>\n<p>Java handles multi-threading through the <code>java.lang.Thread</code> class and <code>java.util.concurrent</code> package, which maps directly to the operating system threads and enables better use of the processor. Furthermore, the JVM also minimizes latency in concurrent tasks, which makes it a perfect programming language for building CPU-heavy applications.</p>\n<p>Python also provides a high-level interface for working with threads. It uses events and coroutines to enable running tasks in parallel. As compared to Java, Python’s GIL limits the CPU-bound task and can result in higher overhead.</p>\n<p>The table below summarizes what to consider when choosing either Java or Python for CPU-heavy tasks:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Java</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td><strong>Concurrency Model</strong></td><td>Multi-threading, parallelism</td><td>Threads, processes, asynchronous I/O</td></tr><tr><td><strong>Performance</strong></td><td>Better for CPU-bound tasks</td><td>Better for I/O-bound tasks</td></tr><tr><td><strong>Ease of Use</strong></td><td>Complex</td><td>Simplified</td></tr><tr><td><strong>Ecosystem</strong></td><td>Extensive libraries, enterprise-ready</td><td>Lightweight, flexible options</td></tr><tr><td><strong>Scalability</strong></td><td>High for multi-core systems</td><td>Limited for CPU-bound tasks</td></tr><tr><td><strong>Best Fit</strong></td><td>High-performance and real-time systems</td><td>Web scraping, data pipelines</td></tr></tbody></table>\n<h2 id=\"java-vs-python-error-handling\">Java vs. Python: Error handling</h2>\n<p>Java has a robust error-handling mechanism that makes it a perfect choice for enterprise applications that demand high reliability and predictability. Java uses checked and unchecked exceptions, Try-Catch-Finally block, and custom exceptions by extending the <code>Exception</code> or <code>RuntimeException</code> classes. These options make error handling predictable and enable precise error handling.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#6272A4\">// java code examples</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">public</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> ErrorHandlingExample</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#8BE9FD;font-style:italic\"> void</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">String</span><span style=\"color:#F8F8F2\">[] </span><span style=\"color:#FFB86C;font-style:italic\">args</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        System.out.</span><span style=\"color:#50FA7B\">println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">)); </span><span style=\"color:#6272A4\">// Result: 5.0</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        System.out.</span><span style=\"color:#50FA7B\">println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">)); </span><span style=\"color:#6272A4\">// Error: Division by zero is not allowed.</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#8BE9FD;font-style:italic\"> String</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#FFB86C;font-style:italic\"> a</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#FFB86C;font-style:italic\"> b</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        try</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">            int</span><span style=\"color:#F8F8F2\"> result </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> a </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Result: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> +</span><span style=\"color:#F8F8F2\"> result;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">catch</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD;font-style:italic\">ArithmeticException</span><span style=\"color:#FFB86C;font-style:italic\"> e</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Error: Division by zero is not allowed.</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">catch</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD;font-style:italic\">Exception</span><span style=\"color:#FFB86C;font-style:italic\"> e</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Error: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> +</span><span style=\"color:#F8F8F2\"> e.</span><span style=\"color:#50FA7B\">getMessage</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">finally</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            System.out.</span><span style=\"color:#50FA7B\">println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Execution completed.</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Python also has exception classes, Try-Except-Finally block, else clause, and custom exceptions by extending the <code>Exception</code> class to handle errors.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#6272A4\"># python code examples</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">def</span><span style=\"color:#50FA7B\"> divide</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">a</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">b</span><span style=\"color:#F8F8F2\">):</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    try</span><span style=\"color:#F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        result </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> a </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> b</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    except</span><span style=\"color:#8BE9FD;font-style:italic\"> ZeroDivisionError</span><span style=\"color:#F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Error: Division by zero is not allowed.</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    except</span><span style=\"color:#8BE9FD;font-style:italic\"> Exception</span><span style=\"color:#FF79C6\"> as</span><span style=\"color:#F8F8F2\"> e:</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> f</span><span style=\"color:#F1FA8C\">\"Error: </span><span style=\"color:#BD93F9\">{</span><span style=\"color:#8BE9FD;font-style:italic\">str</span><span style=\"color:#F8F8F2\">(e)</span><span style=\"color:#BD93F9\">}</span><span style=\"color:#F1FA8C\">\"</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    else</span><span style=\"color:#F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> f</span><span style=\"color:#F1FA8C\">\"Result: </span><span style=\"color:#BD93F9\">{</span><span style=\"color:#F8F8F2\">result</span><span style=\"color:#BD93F9\">}</span><span style=\"color:#F1FA8C\">\"</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    finally</span><span style=\"color:#F8F8F2\">:</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        print</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Execution completed.</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">print</span><span style=\"color:#F8F8F2\">(divide(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">))  </span><span style=\"color:#6272A4\"># Result: 5.0</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">print</span><span style=\"color:#F8F8F2\">(divide(</span><span style=\"color:#BD93F9\">10</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">))  </span><span style=\"color:#6272A4\"># Error: Division by zero is not allowed.</span></span></code></pre>\n<p>In comparison, Java enforces handling certain exceptions at compile time, while Python does not differentiate between checked and unchecked exceptions.</p>\n<h2 id=\"java-vs-python-learning-curve\">Java vs. Python: Learning curve</h2>\n<p>Java has a steeper learning curve than Python. Factors like syntax, complexity, programming principles, and practical applications affect the adoption of these two languages. Beginners often find Java’s code verbose because it requires explicit declaration for variable types and methods, which can sometimes be difficult for both beginners and experts to read. For example, a simple “Hello World!” program in Java requires defining a class and a main method:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#6272A4\">// java code examples</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">public</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> HelloWorld</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#8BE9FD;font-style:italic\"> void</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">String</span><span style=\"color:#F8F8F2\">[] </span><span style=\"color:#FFB86C;font-style:italic\">args</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        System.out.</span><span style=\"color:#50FA7B\">println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Hello, World!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Additionally, Java requires an understanding of Object-Oriented Programming (OOP) concepts like classes, inheritance, interface, and more, which makes the initial learning curve steeper for beginners.</p>\n<p>Python is significantly easier to pick up for beginners because the syntax is less verbose, simpler, and easier to read. It is dynamically typed and has fewer rules, which makes it easier for beginners to experiment and learn programming concepts. “Hello World!” program in Python:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>print(\"Hello, World!\")</span></span></code></pre>\n<p>Furthermore, Python supports procedural and OOP paradigms, allowing beginners to gradually adopt advanced concepts.</p>\n<h2 id=\"python-vs-java-communities-libraries-and-frameworks\">Python vs. Java: Communities, libraries, and frameworks</h2>\n<p>Python and Java are two of the most popular programming languages, with extensive communities, libraries, and frameworks. Java has been in existence since 1995, which means it has a more mature and larger community, along with a well-established ecosystem of standard libraries for networking, database access, and concurrent programming.</p>\n<p>Python’s community has grown significantly in recent years, driven by its popularity in data science, AI, and web development, as well as its welcoming nature and resources designed for beginners. Python also offers standard libraries for networking, database access, and concurrent programming.</p>\n<p>The table below highlights the key strengths of both languages across various domains:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Aspect</strong></th><th><strong>Java</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td><strong>Communities</strong></td><td><strong>Size and Maturity</strong>: Established since 1995, large and mature. <br><strong>Enterprise-Focused</strong>: Strong in backend, enterprise, and Android development. <br><strong>Learning Resources</strong>: Extensive tutorials, forums like Stack Overflow, JavaRanch. <br><strong>Meetups and Conferences</strong>: Active global presence (e.g., JavaOne, JUGs).</td><td><strong>Size and Growth</strong>: Rapidly growing, popular in data science, AI, and web development. <br><strong>Beginner-Friendly</strong>: Welcoming community with abundant beginner resources. <br><strong>Learning Resources</strong>: Interactive platforms like Codecademy, active Stack Overflow, and subreddits. <br><strong>Meetups and Conferences</strong>: PyCon and diverse events covering many fields.</td></tr><tr><td><strong>Libraries</strong></td><td><strong>Core Strengths</strong>: Extensive standard library (networking, DB access, concurrency). <br><strong>Third-Party Libraries</strong>: Apache Commons, Google Guava, Joda-Time.</td><td><strong>Core Strengths</strong>: Vast standard library (I/O operations, web services, data manipulation). <strong>Third-Party Libraries</strong>: NumPy, Pandas, Matplotlib, TensorFlow, PyTorch.</td></tr><tr><td><strong>Frameworks</strong></td><td><strong>Web Development</strong>: Spring (enterprise), Struts (MVC), Play (reactive). <br><strong>Mobile Development</strong>: Native Android (Android SDK). <br><strong>Big Data</strong>: Hadoop, Spark.</td><td><strong>Web Development</strong>: Django (rapid development), Flask (flexible), FastAPI (high-performance APIs). <strong>Machine Learning</strong>: TensorFlow, PyTorch, Scikit-learn. <br><strong>Web Scraping</strong>: Scrapy.</td></tr><tr><td><strong>Ecosystem Integration</strong></td><td>Strong in enterprise environments (Docker, Kubernetes, cloud platforms). Strong backward compatibility.</td><td>Ideal for modern ecosystems, especially in data pipelines and AI. Popular with Jupyter Notebooks for interactive coding.</td></tr></tbody></table>\n<h2 id=\"java-vs-python-cross-platform-support\">Java vs. Python: Cross-platform support</h2>\n<p>Both Java and Python are cross-platform compatible, but they approach this in slightly different ways. Java’s WORA philosophy ensures that Java programs run on Windows, macOS, Linux, and more, as long as the JVM is installed. Java also offers the Android SDK for mobile app development and frameworks like Swing and JavaFX for building desktop applications.</p>\n<p>Python, on the other hand, supports cross-platform compatibility provided the interpreter is installed on the platform (Windows, macOS, Linux, etc.). Once you install the interpreter, the same code can run across multiple platforms without compilation.</p>\n<p>While Python has frameworks like Tkinter and PyQt for building desktop applications, these tend to be less consistent across platforms compared to Java-based frameworks.</p>\n<h2 id=\"java-vs-python-use-cases\">Java vs. Python: Use cases</h2>\n<p>Java and Python each have unique strengths and ecosystems tailored to specific types of projects.</p>\n<p>Java’s robustness, scalability, and high performance make it a top choice for enterprise-grade applications such as banking and financial systems, enterprise resource planning (ERP) tools, and customer relationship management (CRM) platforms. It’s also widely adopted in areas like big data and distributed systems (e.g., Apache Hadoop and Apache Spark), game development (e.g., LibGDX and jMonkeyEngine), and embedded systems (e.g., Java ME).</p>\n<p>Python, with its simplicity, readable syntax, and versatility, shines in data science and machine learning (e.g., TensorFlow, PyTorch, and Scikit-learn), as well as automation and scripting tasks. While Python offers frameworks like Pygame for game development and Kivy for mobile app development, these are not as robust or scalable as Java-based frameworks for large-scale projects.</p>\n<p>The table below summarizes these languages’ use cases across multiple ecosystems:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Use Case</strong></th><th><strong>Java</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td><strong>Enterprise Applications</strong></td><td>Strong choice with frameworks like Spring and Hibernate, offering robust, scalable, and secure solutions.</td><td>Less common due to slower performance for large-scale enterprise systems.</td></tr><tr><td><strong>Web Development</strong></td><td>Popular with enterprise-level frameworks like Spring Boot and Play.</td><td>Well-suited for rapid development with Django, Flask, and FastAPI, especially for startups and small-to-medium projects.</td></tr><tr><td><strong>Mobile Development</strong></td><td>Primary language for native Android development (Android SDK).</td><td>Limited to frameworks like Kivy; not commonly used for mobile apps.</td></tr><tr><td><strong>Data Science and AI</strong></td><td>Limited ecosystem, with libraries like Weka and Tribuo providing basic support.</td><td>Dominates the field with TensorFlow, PyTorch, Pandas, and scikit-learn. Excellent for machine learning and AI.</td></tr><tr><td><strong>Big Data and Distributed Systems</strong></td><td>Widely used with Apache Hadoop, Spark (Java API), and Kafka for handling distributed systems and real-time data streaming.</td><td>Gaining traction with PySpark and Dask, but not as strong as Java for distributed systems.</td></tr><tr><td><strong>Automation and Scripting</strong></td><td>Suitable for automation in enterprise systems but lacks simplicity for quick scripting.</td><td>Perfect for automation tasks with libraries like Selenium, Beautiful Soup, and PyAutoGUI.</td></tr><tr><td><strong>Scientific Computing</strong></td><td>Basic support with libraries like JGraphT.</td><td>Comprehensive tools like NumPy, SciPy, and SymPy for numerical and symbolic computations.</td></tr><tr><td><strong>Game Development</strong></td><td>Used in Android games and frameworks like libGDX.</td><td>Supports indie game development with frameworks like Pygame, but less common for AAA games.</td></tr><tr><td><strong>Testing and QA</strong></td><td>Strong with JUnit, Mockito, and TestNG for enterprise-level testing.</td><td>Flexible and beginner-friendly tools like pytest, unittest, and Hypothesis.</td></tr><tr><td><strong>Learning and Prototyping</strong></td><td>Steeper learning curve; better for long-term, enterprise-grade systems.</td><td>Beginner-friendly with straightforward syntax, perfect for prototyping and learning.</td></tr></tbody></table>\n<p>To summarize, Java is best for enterprise applications, backend systems, Android development, and big data processing, while Python may be a better option for data science, AI, automation, and rapid prototyping of projects.</p>\n<h2 id=\"java-vs-python-trends-salaries-and-career-opportunities\">Java vs. Python: Trends, salaries, and career opportunities</h2>\n<p>Java and Python remain dominant programming languages in the tech industry, but they cater to different markets and job roles.</p>\n<p><strong>Java</strong> has maintained a strong presence in enterprise systems and is the go-to language for mission-critical applications requiring performance and scalability. It’s widely used for backend services, microservices, big data processing, and Android development. The average salary for Java developers in the US is around <strong>$90,759</strong>, and demand remains high, especially for developers skilled in modern frameworks like Spring Boot and cloud platforms.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/java-average-salary-in-the-us-yykpp.png\" alt=\"Java average salary in the US\"></p>\n<p>Python is also a valuable skill for developers, as its popularity has increased in fields like data science, AI/ML, automation, and web development. It’s projected to grow even more, thanks to its adoption in emerging fields like quantum computing and cloud automation. The average salary for a Python developer in the US is about <strong>$124,219</strong>, and demand is expected to increase as industries continue seeking developers with AI/ML expertise and Python skills.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/python-average-salary-in-the-us-4xvyb.png\" alt=\"Python average salary in the US\"></p>\n<p>Ultimately, choosing between Java and Python depends on your career goals. If you’re drawn to stable industries like finance, healthcare, and e-commerce that require enterprise-level solutions, <strong>Java</strong> is a great choice. On the other hand, if you’re excited about data science, ML, AI, or fields embracing rapid innovation and emerging technologies, <strong>Python</strong> might be your best bet.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>Choose Java if you’re building large-scale enterprise applications that demand scalability, robustness, and performance. Its strong typing and extensive frameworks make it perfect for complex, long-term projects. Opt for Python if you prioritize rapid prototyping or are working on scientific computing, data science, AI, or machine learning projects. Python’s simplicity and rich ecosystem of libraries enable faster development and innovation in these domains.</p>\n<p>In the end, choosing between Java and Python depends on the type of project you want to build, the platform you’re targeting, and the ecosystem you want to adopt for your project. Regardless of your choice, you can use the <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java roadmap</a> and <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python roadmap</a> to stay up to date with the latest changes in each language.</p>";

				const frontmatter$p = {"title":"Java vs Python: Which will suit you best?","description":"Wondering which language is right for you? Explore our comprehensive Java vs Python guide to find the best option for your career.","authorId":"ekene","excludedBySlug":"/java/vs-python","seo":{"title":"Java vs Python: Which will suit you best?","description":"Wondering which language is right for you? Explore our comprehensive Java vs Python guide to find the best option for your career.","ogImageUrl":"https://assets.roadmap.sh/guest/java-vs-python-xuk2b.jpg"},"relatedTitle":"Other Guides","isNew":false,"type":"textual","date":"2025-01-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$p = "/workspace/src/data/guides/java-vs-python.md";
				const url$p = undefined;
				function rawContent$p() {
					return "   \n                                                  \n                                                                                                                                                 \n               \n                                 \n    \n                                                    \n                                                                                                                                                   \n                                                                        \n                            \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Java vs Python](https://assets.roadmap.sh/guest/java-vs-python-xuk2b.jpg)\n\nJava and Python are two of the most popular programming languages, widely adopted for projects of all sizes. But when should you choose Java over Python, or vice versa? Which language enhances productivity during prototyping? And which ecosystem is better equipped to address modern software engineering challenges, such as those in artificial intelligence? These questions can be tough to answer and may slow down your development process.\n\nHaving worked as an engineer building small to enterprise-scale projects, I’ve seen how [Java](https://roadmap.sh/java) and [Python](https://roadmap.sh/python) compare to each other in terms of performance, scalability, and developer experience. In this guide, I’ll discuss their key features and practical use cases to help you decide the best language for your next project.\n\nThe table below summarizes the key features of Java and Python to help you choose the right language for your next project:\n\n| **Feature**                 | **Java**                                                              | **Python**                                                         |\n| --------------------------- | --------------------------------------------------------------------- | ------------------------------------------------------------------ |\n| **Type**                    | Compiled to bytecode, runs on the JVM                                 | Interpreted language, runs on Python interpreter                   |\n| **Syntax**                  | Verbose, object oriented language                                     | Simple, easy to read and write, with dynamic typing                |\n| **Performance**             | Faster due to static typing and JVM optimizations                     | Slower because of dynamic typing and interpreted execution         |\n| **Memory Management**       | Automatic garbage collection (JVM)                                    | Automatic garbage collection (via Python's garbage collector)      |\n| **Concurrency Model**       | Multi-threading with JVM threads                                      | Threading and multiprocessing (GIL limits true parallelism)        |\n| **Cross-Platform**          | JVM ensures compatibility across platforms                            | Platform-independent, requires Python runtime installed            |\n| **Error Handling**          | Exception handling (try-catch)                                        | Exception handling with simpler syntax                             |\n| **Learning Curve**          | Steeper, especially for beginners, due to verbosity                   | Beginner-friendly, intuitive syntax                                |\n| **Use Cases**               | Enterprise applications, Android app development, large-scale systems | Data science, web development, scripting, AI, machine learning     |\n| **Community and Libraries** | Mature, extensive ecosystem with robust frameworks                    | Vast and active community, rich libraries for diverse use cases    |\n| **Scalability**             | Excellent for large-scale, high-performance systems                   | Good for scaling applications but may face performance bottlenecks |\n\nWhen it comes to adoption, both languages rank among the top choices for developing applications across platforms like web, mobile, and IoT.\n\n![Stack Overflow survey 2024](https://assets.roadmap.sh/guest/stack-overflow-survey-2024-ukhae.png)\n\nBefore looking at these features in detail, let’s take a closer look at these two programming languages.\n\n## Java\n\n[Java](https://www.java.com/en/) is a high-level, object-oriented, and class-based programming language developed in 1995 by Sun Microsystems (now owned by Oracle). It is designed to have as few implementation details as possible, and it is widely used for building applications across a range of platforms such as mobile, desktop, web, and enterprise systems. Java follows the “Write Once, Run Anywhere” (WORA) philosophy, which means compiled Java code can run on any platform with a Java Virtual Machine (JVM).\n\n## Core features of Java\n\nBelow are the core features of Java that make it a powerhouse for building a range of applications:\n\n![Java features](https://assets.roadmap.sh/guest/core-features-of-java-hjs55.png)\n\n1. **Platform independence**: Java code compiles into bytecode, which is portable and can run on any type of computer, including Windows, macOS, and Linux systems, as long as a JVM is available.\n2. **Object oriented programming language**: Java follows the object oriented programming (OOP) paradigm of organizing code into reusable objects, functions, and classes, which makes it more intuitive for building large-scale projects. It also incorporates core OOP principles like encapsulation, inheritance, and polymorphism.\n3. **Scalability and robustness**: Java has features like exception handling, memory management, and garbage collection, which makes it reliable, robust, and well-suited for building large-scale enterprise applications.\n4. **Security**: Java has built-in security mechanisms like sandboxing, cryptography libraries, and bytecode verification, which checks for illegal code and performs runtime security checks. These features make it a preferred choice for security-conscious applications in banking and enterprise environments.\n5. **Multithreading**: Java supports running more than one thread at a time. The concurrent support of executing tasks makes it an excellent choice for building performance-intensive applications.\n6. **Rich APIs and community support**: Java comes with built-in standard libraries for handling tasks like data structures, file management, and networking. Additionally, it has a robust community that is constantly building new libraries and frameworks or extending existing ones.\n\n## Advantages of Java\n\nBelow are some of the benefits you get when you use Java to build your applications:\n\n- Java is enterprise-ready because it can handle the heavy load most modern applications need.\n- The syntax is straightforward and relatively easy to learn compared to languages like C++.\n- It has a Just-In-Time (JIT) compiler that improves runtime performance, which makes it an ideal language for building fast applications.\n- There’s a large and active Java community with tons of libraries, frameworks, and resources that beginners can use or experts can rely on when they run into problems.\n- The WORA principle ensures that applications built with Java run on any platform without any modification.\n\n## Disadvantages of Java\n\nWhile Java's speed and efficiency make it ideal for building robust and scalable applications, there are some limitations to consider:\n\n- Java syntax tends to be verbose compared to newer languages like Python, which can make the code harder to read and manage.\n- The JVM layer makes Java slower than low-level languages like C or C++.\n- Automatic garbage collection makes memory management easier, but it also limits how much control you have if you need to manage memory manually.\n- Java isn’t the best choice for tasks like scientific computing, data analysis, or machine learning, where other languages might shine.\n\n## Python\n\n[Python](https://www.python.org/) is a high-level, all-purpose, popular programming language known for its readability and simplicity. It was designed by Guido van Rossum in 1991 with a focus on code readability with clear syntax and indentation. Python supports programming paradigms like procedural, object-oriented, and functional and is widely used in data science, software development, artificial intelligence (AI), and automation.\n\n## Core features of Python\n\nBelow are the core features of Python that make it a go-to programming language for building all sorts of applications:\n\n![Python features](https://assets.roadmap.sh/guest/core-features-of-python-c357l.png)\n\n1. **Simple and readable syntax**: Python’s syntax is intuitive for both beginners and experienced developers, thanks to its similarity to the English language. It’s also clean and concise, so you can achieve your goals with fewer lines of code.\n2. **Interpreted programming language**: Python uses an interpreter to execute code line by line, which simplifies debugging and testing.\n3. **Support for multiple paradigms**: Python accommodates different programming styles, such as object-oriented, functional, and procedural programming, giving you flexibility on how to write code.\n4. **Cross-platform compatibility**: Python is platform-independent and can run on Windows, macOS, and Linux.\n5. **Rich ecosystem and community**: Python offers a wide range of libraries and frameworks, like pandas, TensorFlow, Flask, and Django, for building just about anything. Plus, it has an active and growing community that contributes to its development and provides resources for troubleshooting and learning.\n6. **Dynamic typing**: Python is dynamically typed, so you don’t need to specify variable types when declaring them, making coding faster and more flexible.\n\n## Advantages of Python\n\nBelow are some of the benefits you get when you use Python to build your applications:\n\n- The simple and English language-like syntax makes it an excellent choice for developers.\n- The syntax is concise and supports dynamic typing, which reduces development time when compared to other verbose languages.\n- Python is open-source and does not require any license before use, modification, or distribution.\n- Python has extensive libraries, frameworks, and supportive communities that make it a versatile language for web development, artificial intelligence, and data science.\n\n## Disadvantages of Python\n\nWhile Python's simple and yet elegant syntax makes it a general-purpose language for building all sorts of applications, there are some limitations to consider:\n\n- Python's use of an interpreter makes it slower when compared to a compiled language like Java.\n- Python uses Global Interpreter Lock, a mechanism that allows only a single thread to access the interpreter, which makes it not suitable for resource-intensive applications that need to run multiple threads.\n- Python has limited support for mobile development.\n- Python’s dynamic typing and ease of use can lead to higher memory consumption.\n- The dynamic typing of Python means errors only appear at runtime, which can cause issues in larger projects.\n\nBoth Java and Python come with a huge ecosystem of libraries and frameworks for building various applications across devices and platforms. But how do you decide which one is the right fit for you? Let’s dive into a side-by-side comparison of these two popular languages to help you make an informed choice.\n\n## Performance\n\nJava is faster than Python because it uses a compiler that compiles Java code into bytecode that the JVM then executes. The JVM also supports Just-In-Time (JIT) compilation, a program that converts bytecode into native code during the execution of a program, significantly improving performance.\n\nPython, on the other hand, uses an interpreter to execute Python code line by line. This approach introduces latency, which can impact application performance. Furthermore, Python is dynamically typed, meaning type-checking happens at runtime, which can further affect speed.\n\nFor instance, if you’re building a financial application that requires real-time support, low latency, and performance at scale, Java is the better choice compared to Python. However, if your focus is on development speed rather than raw performance, then Python is a more suitable option.\n\n## Memory management\n\nJava uses garbage collection within the JVM to automatically manage the allocations and deallocation of memory. The allocation mechanism makes it an ideal choice for applications that require long runtimes. However, Java also tends to consume more memory because of the JVM.\n\nPython also uses garbage collection to automatically manage memory. Although memory handling is simpler, the Global Interpreter Lock can limit multithreading, especially in CPU-intensive tasks.\n\n## Concurrency\n\nConcurrency is important for building applications that require running multi-threaded environments where tasks are executed in parallel (like web servers, real-time banking systems, and stock trading platforms). Both Java and Python handle concurrency differently due to their design philosophies, threading models, and runtime environments.\n\nJava handles multi-threading through the `java.lang.Thread` class and `java.util.concurrent` package, which maps directly to the operating system threads and enables better use of the processor. Furthermore, the JVM also minimizes latency in concurrent tasks, which makes it a perfect programming language for building CPU-heavy applications.\n\nPython also provides a high-level interface for working with threads. It uses events and coroutines to enable running tasks in parallel. As compared to Java, Python’s GIL limits the CPU-bound task and can result in higher overhead.\n\nThe table below summarizes what to consider when choosing either Java or Python for CPU-heavy tasks:\n\n| **Feature**           | **Java**                               | **Python**                           |\n| --------------------- | -------------------------------------- | ------------------------------------ |\n| **Concurrency Model** | Multi-threading, parallelism           | Threads, processes, asynchronous I/O |\n| **Performance**       | Better for CPU-bound tasks             | Better for I/O-bound tasks           |\n| **Ease of Use**       | Complex                                | Simplified                           |\n| **Ecosystem**         | Extensive libraries, enterprise-ready  | Lightweight, flexible options        |\n| **Scalability**       | High for multi-core systems            | Limited for CPU-bound tasks          |\n| **Best Fit**          | High-performance and real-time systems | Web scraping, data pipelines         |\n\n## Java vs. Python: Error handling\n\nJava has a robust error-handling mechanism that makes it a perfect choice for enterprise applications that demand high reliability and predictability. Java uses checked and unchecked exceptions, Try-Catch-Finally block, and custom exceptions by extending the `Exception` or `RuntimeException` classes. These options make error handling predictable and enable precise error handling.\n\n```java\n// java code examples\npublic class ErrorHandlingExample {\n    public static void main(String[] args) {\n        System.out.println(divide(10, 2)); // Result: 5.0\n        System.out.println(divide(10, 0)); // Error: Division by zero is not allowed.\n    }\n\n    public static String divide(int a, int b) {\n        try {\n            int result = a / b;\n            return \"Result: \" + result;\n        } catch (ArithmeticException e) {\n            return \"Error: Division by zero is not allowed.\";\n        } catch (Exception e) {\n            return \"Error: \" + e.getMessage();\n        } finally {\n            System.out.println(\"Execution completed.\");\n        }\n    }\n}\n```\n\nPython also has exception classes, Try-Except-Finally block, else clause, and custom exceptions by extending the `Exception` class to handle errors.\n\n```python\n# python code examples\ndef divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n    else:\n        return f\"Result: {result}\"\n    finally:\n        print(\"Execution completed.\")\n\n\nprint(divide(10, 2))  # Result: 5.0\nprint(divide(10, 0))  # Error: Division by zero is not allowed.\n```\n\nIn comparison, Java enforces handling certain exceptions at compile time, while Python does not differentiate between checked and unchecked exceptions.\n\n## Java vs. Python: Learning curve\n\nJava has a steeper learning curve than Python. Factors like syntax, complexity, programming principles, and practical applications affect the adoption of these two languages. Beginners often find Java’s code verbose because it requires explicit declaration for variable types and methods, which can sometimes be difficult for both beginners and experts to read. For example, a simple “Hello World!” program in Java requires defining a class and a main method:\n\n```java\n// java code examples\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nAdditionally, Java requires an understanding of Object-Oriented Programming (OOP) concepts like classes, inheritance, interface, and more, which makes the initial learning curve steeper for beginners.\n\nPython is significantly easier to pick up for beginners because the syntax is less verbose, simpler, and easier to read. It is dynamically typed and has fewer rules, which makes it easier for beginners to experiment and learn programming concepts. “Hello World!” program in Python:\n\n    print(\"Hello, World!\")\n\nFurthermore, Python supports procedural and OOP paradigms, allowing beginners to gradually adopt advanced concepts.\n\n## Python vs. Java: Communities, libraries, and frameworks\n\nPython and Java are two of the most popular programming languages, with extensive communities, libraries, and frameworks. Java has been in existence since 1995, which means it has a more mature and larger community, along with a well-established ecosystem of standard libraries for networking, database access, and concurrent programming.\n\nPython’s community has grown significantly in recent years, driven by its popularity in data science, AI, and web development, as well as its welcoming nature and resources designed for beginners. Python also offers standard libraries for networking, database access, and concurrent programming.\n\nThe table below highlights the key strengths of both languages across various domains:\n\n| **Aspect**                | **Java**                                                                                                                                                                                                                                                                                                                    | **Python**                                                                                                                                                                                                                                                                                                                                                         |\n| ------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Communities**           | **Size and Maturity**: Established since 1995, large and mature. <br>**Enterprise-Focused**: Strong in backend, enterprise, and Android development. <br>**Learning Resources**: Extensive tutorials, forums like Stack Overflow, JavaRanch. <br>**Meetups and Conferences**: Active global presence (e.g., JavaOne, JUGs). | **Size and Growth**: Rapidly growing, popular in data science, AI, and web development. <br>**Beginner-Friendly**: Welcoming community with abundant beginner resources. <br>**Learning Resources**: Interactive platforms like Codecademy, active Stack Overflow, and subreddits. <br>**Meetups and Conferences**: PyCon and diverse events covering many fields. |\n| **Libraries**             | **Core Strengths**: Extensive standard library (networking, DB access, concurrency). <br>**Third-Party Libraries**: Apache Commons, Google Guava, Joda-Time.                                                                                                                                                                | **Core Strengths**: Vast standard library (I/O operations, web services, data manipulation). **Third-Party Libraries**: NumPy, Pandas, Matplotlib, TensorFlow, PyTorch.                                                                                                                                                                                            |\n| **Frameworks**            | **Web Development**: Spring (enterprise), Struts (MVC), Play (reactive). <br>**Mobile Development**: Native Android (Android SDK). <br>**Big Data**: Hadoop, Spark.                                                                                                                                                         | **Web Development**: Django (rapid development), Flask (flexible), FastAPI (high-performance APIs). **Machine Learning**: TensorFlow, PyTorch, Scikit-learn. <br>**Web Scraping**: Scrapy.                                                                                                                                                                         |\n| **Ecosystem Integration** | Strong in enterprise environments (Docker, Kubernetes, cloud platforms). Strong backward compatibility.                                                                                                                                                                                                                     | Ideal for modern ecosystems, especially in data pipelines and AI. Popular with Jupyter Notebooks for interactive coding.                                                                                                                                                                                                                                           |\n\n## Java vs. Python: Cross-platform support\n\nBoth Java and Python are cross-platform compatible, but they approach this in slightly different ways. Java’s WORA philosophy ensures that Java programs run on Windows, macOS, Linux, and more, as long as the JVM is installed. Java also offers the Android SDK for mobile app development and frameworks like Swing and JavaFX for building desktop applications.\n\nPython, on the other hand, supports cross-platform compatibility provided the interpreter is installed on the platform (Windows, macOS, Linux, etc.). Once you install the interpreter, the same code can run across multiple platforms without compilation.\n\nWhile Python has frameworks like Tkinter and PyQt for building desktop applications, these tend to be less consistent across platforms compared to Java-based frameworks.\n\n## Java vs. Python: Use cases\n\nJava and Python each have unique strengths and ecosystems tailored to specific types of projects.\n\nJava’s robustness, scalability, and high performance make it a top choice for enterprise-grade applications such as banking and financial systems, enterprise resource planning (ERP) tools, and customer relationship management (CRM) platforms. It’s also widely adopted in areas like big data and distributed systems (e.g., Apache Hadoop and Apache Spark), game development (e.g., LibGDX and jMonkeyEngine), and embedded systems (e.g., Java ME).\n\nPython, with its simplicity, readable syntax, and versatility, shines in data science and machine learning (e.g., TensorFlow, PyTorch, and Scikit-learn), as well as automation and scripting tasks. While Python offers frameworks like Pygame for game development and Kivy for mobile app development, these are not as robust or scalable as Java-based frameworks for large-scale projects.\n\nThe table below summarizes these languages’ use cases across multiple ecosystems:\n\n| **Use Case**                         | **Java**                                                                                                                   | **Python**                                                                                                               |\n| ------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| **Enterprise Applications**          | Strong choice with frameworks like Spring and Hibernate, offering robust, scalable, and secure solutions.                  | Less common due to slower performance for large-scale enterprise systems.                                                |\n| **Web Development**                  | Popular with enterprise-level frameworks like Spring Boot and Play.                                                        | Well-suited for rapid development with Django, Flask, and FastAPI, especially for startups and small-to-medium projects. |\n| **Mobile Development**               | Primary language for native Android development (Android SDK).                                                             | Limited to frameworks like Kivy; not commonly used for mobile apps.                                                      |\n| **Data Science and AI**              | Limited ecosystem, with libraries like Weka and Tribuo providing basic support.                                            | Dominates the field with TensorFlow, PyTorch, Pandas, and scikit-learn. Excellent for machine learning and AI.           |\n| **Big Data and Distributed Systems** | Widely used with Apache Hadoop, Spark (Java API), and Kafka for handling distributed systems and real-time data streaming. | Gaining traction with PySpark and Dask, but not as strong as Java for distributed systems.                               |\n| **Automation and Scripting**         | Suitable for automation in enterprise systems but lacks simplicity for quick scripting.                                    | Perfect for automation tasks with libraries like Selenium, Beautiful Soup, and PyAutoGUI.                                |\n| **Scientific Computing**             | Basic support with libraries like JGraphT.                                                                                 | Comprehensive tools like NumPy, SciPy, and SymPy for numerical and symbolic computations.                                |\n| **Game Development**                 | Used in Android games and frameworks like libGDX.                                                                          | Supports indie game development with frameworks like Pygame, but less common for AAA games.                              |\n| **Testing and QA**                   | Strong with JUnit, Mockito, and TestNG for enterprise-level testing.                                                       | Flexible and beginner-friendly tools like pytest, unittest, and Hypothesis.                                              |\n| **Learning and Prototyping**         | Steeper learning curve; better for long-term, enterprise-grade systems.                                                    | Beginner-friendly with straightforward syntax, perfect for prototyping and learning.                                     |\n\nTo summarize, Java is best for enterprise applications, backend systems, Android development, and big data processing, while Python may be a better option for data science, AI, automation, and rapid prototyping of projects.\n\n## Java vs. Python: Trends, salaries, and career opportunities\n\nJava and Python remain dominant programming languages in the tech industry, but they cater to different markets and job roles.\n\n**Java** has maintained a strong presence in enterprise systems and is the go-to language for mission-critical applications requiring performance and scalability. It's widely used for backend services, microservices, big data processing, and Android development. The average salary for Java developers in the US is around **$90,759**, and demand remains high, especially for developers skilled in modern frameworks like Spring Boot and cloud platforms.\n\n![Java average salary in the US](https://assets.roadmap.sh/guest/java-average-salary-in-the-us-yykpp.png)\n\nPython is also a valuable skill for developers, as its popularity has increased in fields like data science, AI/ML, automation, and web development. It's projected to grow even more, thanks to its adoption in emerging fields like quantum computing and cloud automation. The average salary for a Python developer in the US is about **$124,219**, and demand is expected to increase as industries continue seeking developers with AI/ML expertise and Python skills.\n\n![Python average salary in the US](https://assets.roadmap.sh/guest/python-average-salary-in-the-us-4xvyb.png)\n\nUltimately, choosing between Java and Python depends on your career goals. If you're drawn to stable industries like finance, healthcare, and e-commerce that require enterprise-level solutions, **Java** is a great choice. On the other hand, if you're excited about data science, ML, AI, or fields embracing rapid innovation and emerging technologies, **Python** might be your best bet.\n\n## Next steps\n\nChoose Java if you're building large-scale enterprise applications that demand scalability, robustness, and performance. Its strong typing and extensive frameworks make it perfect for complex, long-term projects. Opt for Python if you prioritize rapid prototyping or are working on scientific computing, data science, AI, or machine learning projects. Python's simplicity and rich ecosystem of libraries enable faster development and innovation in these domains.\n\nIn the end, choosing between Java and Python depends on the type of project you want to build, the platform you're targeting, and the ecosystem you want to adopt for your project. Regardless of your choice, you can use the [Java roadmap](https://roadmap.sh/java) and [Python roadmap](https://roadmap.sh/python) to stay up to date with the latest changes in each language.\n";
				}
				async function compiledContent$p() {
					return await html$p();
				}
				function getHeadings$p() {
					return [{"depth":2,"slug":"java","text":"Java"},{"depth":2,"slug":"core-features-of-java","text":"Core features of Java"},{"depth":2,"slug":"advantages-of-java","text":"Advantages of Java"},{"depth":2,"slug":"disadvantages-of-java","text":"Disadvantages of Java"},{"depth":2,"slug":"python","text":"Python"},{"depth":2,"slug":"core-features-of-python","text":"Core features of Python"},{"depth":2,"slug":"advantages-of-python","text":"Advantages of Python"},{"depth":2,"slug":"disadvantages-of-python","text":"Disadvantages of Python"},{"depth":2,"slug":"performance","text":"Performance"},{"depth":2,"slug":"memory-management","text":"Memory management"},{"depth":2,"slug":"concurrency","text":"Concurrency"},{"depth":2,"slug":"java-vs-python-error-handling","text":"Java vs. Python: Error handling"},{"depth":2,"slug":"java-vs-python-learning-curve","text":"Java vs. Python: Learning curve"},{"depth":2,"slug":"python-vs-java-communities-libraries-and-frameworks","text":"Python vs. Java: Communities, libraries, and frameworks"},{"depth":2,"slug":"java-vs-python-cross-platform-support","text":"Java vs. Python: Cross-platform support"},{"depth":2,"slug":"java-vs-python-use-cases","text":"Java vs. Python: Use cases"},{"depth":2,"slug":"java-vs-python-trends-salaries-and-career-opportunities","text":"Java vs. Python: Trends, salaries, and career opportunities"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$p = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$p;
					content.file = file$p;
					content.url = url$p;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$p())}`;
				});

const __vite_glob_0_73 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$p,
	compiledContent: compiledContent$p,
	default: Content$p,
	file: file$p,
	frontmatter: frontmatter$p,
	getHeadings: getHeadings$p,
	rawContent: rawContent$p,
	url: url$p
}, Symbol.toStringTag, { value: 'Module' }));

const html$o = () => "<p><img src=\"https://assets.roadmap.sh/guest/typescript-or-javascript-99fzl.jpg\" alt=\"JavaScript vs TypeScript compared\"></p>\n<p>Choosing between <a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a> and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> can feel like picking between a Swiss Army knife and a scalpel. Both are useful, but their strengths depend on the task.</p>\n<p>If you’re working on a large-scale project or need better code maintainability, TypeScript is a great choice. On the other hand, if you’re working on a project that requires a quick development cycle or working within a small team, JavaScript might be enough.</p>\n<p>At the start of my tech career, I used JavaScript to learn basic programming concepts and build small projects to add to my portfolio. It was very common to learn JavaScript if you wanted to become a web developer. When I got my first full time role as a web developer, I realized my team was using TypeScript and that was when my journey with TypeScript began.</p>\n<p>While both languages have their strengths, selecting the right one depends on several factors, such as project requirements, developer needs, learning curve, etc.</p>\n<p>In this guide, I’ll compare the features of TypeScript and JavaScript to help you determine which language best suits your project. Drawing from personal experience and real-world examples, I’ll provide insights to support your decision-making.</p>\n<h2 id=\"differences-between-typescript-and-javascript\">Differences between TypeScript and JavaScript</h2>\n<p>The table below summarizes the differences between TypeScript and JavaScript.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Criteria</strong></th><th><strong>TypeScript</strong></th><th><strong>JavaScript</strong></th></tr></thead><tbody><tr><td>Typing</td><td>Static typing.</td><td>Dynamic typing.</td></tr><tr><td>Error checking</td><td>Compile time error checking.</td><td>Runtime error checking.</td></tr><tr><td>Use case</td><td>For large scale projects where type safety is crucial.</td><td>For smaller projects and rapid prototyping.</td></tr><tr><td>Backward compatibility</td><td>Can work with JavaScript code by including type definitions.</td><td>Can run natively on any JavaScript engine.</td></tr><tr><td>Compilation</td><td>It is compiled to JavaScript before execution.</td><td>Interpreted directly by browsers and Node.js without compilation.</td></tr><tr><td>Debugging</td><td>Easier to debug because of the type system.</td><td>Requires more effort and time to debug.</td></tr><tr><td>IDE support</td><td>Support for code refactoring, type checking, and auto completion.</td><td>Limited IDE support, mostly auto completion, and syntax highlighting.</td></tr><tr><td>File extension</td><td>.ts</td><td>.js</td></tr><tr><td>Learning curve</td><td>Has a steeper learning curve because you have to learn additional features.</td><td>Easier to start with due to dynamic typing and less strict rules.</td></tr></tbody></table>\n<h2 id=\"what-are-javascript-and-typescript\">What are JavaScript and TypeScript?</h2>\n<p>JavaScript is a simple and versatile programming language, and probably the most widely used in web development. It supports dynamic typing and works on both the frontend and backend. If you’re aiming to become a web developer, you should be comfortable with using JavaScript.</p>\n<p>TypeScript, on the other hand, is a superset of JavaScript that adds static typing and some features that JavaScript doesn’t offer out of the box. It was designed to solve specific problems that JavaScript developers face and make JavaScript development more efficient. Since valid JavaScript is also valid TypeScript, it’s easy to start using. TypeScript helps make codebases more robust and maintainable, especially as projects grow. Its type system is great for catching bugs early and making the development process smoother overall.</p>\n<h2 id=\"features-of-javascript\">Features of JavaScript</h2>\n<p>Some of the key features of JavaScript include:</p>\n<ol>\n<li><strong>Dynamic typing</strong>: In JavaScript, you do not have to declare variables with any type. The types can also change during runtime.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">let</span><span style=\"color:#F8F8F2\"> programmingLanguage </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">JavaScript</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">typeof</span><span style=\"color:#F8F8F2\"> programmingLanguage); </span><span style=\"color:#6272A4\">// \"string\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">programmingLanguage </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 12</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">typeof</span><span style=\"color:#F8F8F2\"> programmingLanguage); </span><span style=\"color:#6272A4\">// \"number\"</span></span></code></pre>\n<p>From the code snippet above, you see that the variable <code>programmingLanguage</code> was initially assigned a string value and later assigned to a number.</p>\n<ol start=\"2\">\n<li><strong>Interaction with the Document Object Model (DOM)</strong>: With JavaScript, you can manipulate the DOM of any webpage by changing its content, structure, and style.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> element </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> document.</span><span style=\"color:#50FA7B\">getElementById</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">demo</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">element.style.color </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">red</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<p>The code snippet selects an HTML element by its Id <code>demo</code> and then changes its color.</p>\n<ol start=\"3\">\n<li><strong>Event handling</strong>: In JavaScript, event listeners allow you to respond to user actions such as clicks, keyboard input, and mouse events.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">document.</span><span style=\"color:#50FA7B\">getElementById</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">demo</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">).</span><span style=\"color:#50FA7B\">addEventListener</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">click</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, () </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">I was clicked</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span></code></pre>\n<p>The code adds a click event listener to the element, and when the element is clicked, a message is logged into the console.</p>\n<ol start=\"4\">\n<li><strong>Asynchronous programming</strong>: JavaScript supports asynchronous programming using callbacks, promises, and async/await for non-blocking operations like reading and writing data to a database, fetching data from a server, etc.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#50FA7B\"> data</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> async</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  try</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    const</span><span style=\"color:#F8F8F2\"> response </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> await</span><span style=\"color:#50FA7B\"> fetch</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">http://api.com/data</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">!</span><span style=\"color:#F8F8F2\">response.ok){</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">      throw</span><span style=\"color:#FF79C6;font-weight:bold\"> new</span><span style=\"color:#50FA7B\"> Error</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Error while fetching data</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    const</span><span style=\"color:#F8F8F2\"> data </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> await</span><span style=\"color:#F8F8F2\"> response.</span><span style=\"color:#50FA7B\">json</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(data);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  catch</span><span style=\"color:#F8F8F2\">(error){</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(error);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The code uses async/await to fetch data from an endpoint. If successful, the data returned will be logged into the console.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/features-of-javascript-nts05.png\" alt=\"Features of JavaScript\"></p>\n<h2 id=\"features-of-typescript\">Features of TypeScript</h2>\n<p>Some of the key features of TypeScript include:</p>\n<ol>\n<li><strong>Static typing</strong>: Unlike JavaScript, TypeScript supports static typing. When defining a variable or object, you can specify the type you want it to have. This helps you catch errors at compile time rather than run time.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">let</span><span style=\"color:#F8F8F2\"> programmingLanguage</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> string</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">TypeScript</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">programmingLanguage </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 23</span><span style=\"color:#6272A4\"> // this will show a compile error</span></span></code></pre>\n<p>The code snippet demonstrates how to define a variable in TypeScript. You can also do this without explicitly specifying the type string; TypeScript will infer the type implicitly. You can notice the effect of the static type on the following line, where a number is assigned to the variable. This will show a compile error because the variable was initialized as a string.</p>\n<ol start=\"2\">\n<li><strong>Interfaces</strong>: Interfaces allow you to define an object’s structure and ensure that the structure is respected wherever you use that object. The code below defines an interface and creates an object based on the interface structure.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> IStudent</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  firstName</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> string</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  lastName</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> string</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  age</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> number</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> student</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> IStudent</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#F8F8F2\"> {firstName</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">John</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, lastName</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Doe</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, age</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> 30</span><span style=\"color:#F8F8F2\">};</span></span></code></pre>\n<ol start=\"3\">\n<li><strong>Generics</strong>: TypeScript allows you to create reusable and flexible components that can work with multiple data types instead of one.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> returnValue&#x3C;T> </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">arg</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> T</span><span style=\"color:#F8F8F2\">)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> T</span><span style=\"color:#FF79C6\"> =></span><span style=\"color:#F8F8F2\"> console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(arg);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// usage</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">returnValue</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">JavaScript</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// \"JavaScript\"</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">returnValue</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">43</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// 43</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">returnValue</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">true</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// true</span></span></code></pre>\n<p>The code above demonstrates how to use generics in TypeScript. A function <code>returnValue</code> is declared to accept arguments of any data type and logs them to the console.</p>\n<ol start=\"4\">\n<li><strong>Enums</strong>: This is a feature added in TypeScript and is not native to JavaScript. It allows you to define a set of constants and helps to improve code readability and maintainability.</li>\n</ol>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">enum</span><span style=\"color:#8BE9FD;font-style:italic\"> Level</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  Low,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  Medium,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  High</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> level</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Level</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#F8F8F2\"> Level.Low;</span></span></code></pre>\n<p>TypeScript also supports modern JavaScript features like classes and inheritance, with additional benefits like access modifiers (public, private, protected) and abstract classes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/features-of-typescript-csuhn.png\" alt=\"Features of TypeScript\"></p>\n<h2 id=\"when-should-you-use-typescript-or-javascript\">When should you use TypeScript or JavaScript?</h2>\n<p>Choosing between TypeScript and JavaScript depends on several factors such as the kind of project, if you are working in a team or alone, and so on. Knowing which to choose for your project will enhance your productivity. I will provide you with a guide on when to choose TypeScript over JavaScript and vice versa.</p>\n<p><strong>When JavaScript is enough</strong></p>\n<ol>\n<li><strong>Small projects or quick prototypes</strong>: JavaScript is suitable when you want to quickly test an idea or build small projects where static typing is not needed. It removes the compilation step that TypeScript has, leading to a faster development process.</li>\n</ol>\n<p>I once worked on a project to build a static website for a drug store using TypeScript, thinking it would give me an extra layer of safety and structure. But as I got into the development process, I realized I was spending so much time fixing type errors, tweaking interfaces, and trying to make the compiler happy, rather than focusing on the core logic of the app.</p>\n<p>In a project where speed and simplicity were the goals, TypeScript started to feel like a roadblock rather than a benefit. The experience taught me that for smaller projects, TypeScript can be a bit of an overkill. JavaScript does the job faster.</p>\n<ol start=\"2\">\n<li>\n<p><strong>Learning purposes</strong>: If you are new to programming or want to learn new concepts, JavaScript is enough. It helps you grasp the fundamentals without the extra layer of static typing.</p>\n</li>\n<li>\n<p><strong>Working solo</strong>: Whenever I work alone, I use JavaScript because it is effective for small projects and I’m familiar with its data interactions. JavaScript should be enough if you are working alone.</p>\n</li>\n</ol>\n<p><img src=\"https://assets.roadmap.sh/guest/working-on-a-solo-project-using-javascript-biffe.png\" alt=\"Working with JavaScript\"></p>\n<p><strong>When TypeScript is a great fit</strong></p>\n<ol>\n<li><strong>Large projects with multiple developers</strong>: TypeScript is a great fit for large projects with multiple developers. Its typing system helps you write code that is easier to read, manage, and debug.</li>\n</ol>\n<p>I worked on a project where built a fairly large and growing codebase entirely in JavaScript. At first, everything seemed to move quickly, and we could iterate fast. But as the project scaled, we started having problems.</p>\n<p>One of the most frustrating issues we ran into was type-related bugs. Debugging those bugs was painful. We’d waste a lot of time trying to find the error, only to find out that it was a function receiving the wrong data shape, something TypeScript could have caught during development. The experience proved how valuable static typing can be for large-scale applications.</p>\n<ol start=\"2\">\n<li>\n<p><strong>When code maintainability is a priority</strong>: Applications where code maintainability is crucial benefit from TypeScript type checking. You can detect errors during compile time instead of during run time. Many IDEs like Visual Studio Code support type checking and will notify you of any type mismatch while coding.</p>\n</li>\n<li>\n<p><strong>When dealing with strict API contracts</strong>: If you are making requests to an API endpoint with a strict structure, TypeScript’s type system helps to model the return of the endpoint using an Interface or Type and avoids throwing exceptions.</p>\n</li>\n</ol>\n<p>In my early career days, I had the task to implement a feature to fetch the price of some vehicles using the vehicleIds. It involved calling the price REST endpoint. I used JavaScript’s fetch to do this. Everything looked right - the request went out, the response came back, and I tried working with the data. But then, it threw an exception at runtime.</p>\n<p>I was confused because I was sure I’d handled everything correctly. After spending some time reading the API documentation, I realized the issue was in how I was handling the response. The API returned something slightly different from what I expected, and JavaScript didn’t give any warning, it just failed when I tried to use the data.</p>\n<p>Later, when I was faced with the same kind of problem using TypeScript, it was a better experience. With TypeScript, I was forced to define the expected response type up front. If I tried to access a field that didn’t exist, the compiler will immediately flag it.</p>\n<ol start=\"4\">\n<li><strong>When working with frameworks like Angular</strong>: <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a> is a popular web development framework and is built on TypeScript. So if you want to work with Angular, then using TypeScript is a must.</li>\n</ol>\n<p><img src=\"https://assets.roadmap.sh/guest/working-in-a-team-using-typescript-u78w3.png\" alt=\"Working in a team with TypeScript\"></p>\n<h2 id=\"is-typescript-hard-to-learn-if-you-know-javascript\">Is TypeScript hard to learn if you know JavaScript?</h2>\n<p>If you already know JavaScript, it’s not hard to learn TypeScript. As explained in the previous section, TypeScript is JavaScript with static typing, so most of your JavaScript knowledge still applies. It was relatively easy for me to pick up TypeScript because I had been using JavaScript for a long time.</p>\n<p>The typical learning curve challenges include:</p>\n<ul>\n<li>\n<p><strong>Getting used to explicit typing</strong>: Explicitly defining types for variables or objects might be challenging at first, but over time, you see the benefit and get used to it. The common data types in TypeScript are boolean, string, and number.</p>\n</li>\n<li>\n<p><strong>Handling type errors</strong>: One of the advantages of TypeScript is that you can see type errors while coding. It can be tricky at first when you see a type error message, but read the error message carefully, and you will be able to make sense of it.</p>\n</li>\n<li>\n<p><strong>Generics</strong>: This was one of the most confusing aspects of TypeScript for me. Generics help create reusable and flexible types and make your code more generic.</p>\n</li>\n</ul>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#50FA7B\"> generic</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#F8F8F2\"> &#x3C;</span><span style=\"color:#FFB86C;font-style:italic\">T</span><span style=\"color:#F8F8F2\">>(</span><span style=\"color:#FFB86C;font-style:italic\">arg</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> T</span><span style=\"color:#F8F8F2\">)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> T</span><span style=\"color:#FF79C6\"> =></span><span style=\"color:#F8F8F2\"> console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(arg);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">generic</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">string</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#6272A4\">// \"string\"</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">generic</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">34</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#6272A4\">// 34</span></span></code></pre>\n<p>The code snippet shows a function that takes arguments of different types and logs the argument to the console. This is the power of generics.</p>\n<ul>\n<li>\n<p><strong>Setting up configurations</strong>: You will also have to get used to setting up a tsconfig file. A tsconfig file is a configuration file that tells the compiler how to compile TypeScript into JavaScript. It’s usually confusing at first, but you’ll get used to it over time by reading the documentation.</p>\n</li>\n<li>\n<p><strong>Interfaces and Types</strong>: With Interfaces and Types, you can define the shape of an object. At first, I was confused about when to use an Interface or a Type because they can be used interchangeably. Yes, while they are alike, they have a slight difference. An Interface can be extended with new properties, but a Type cannot. I recommend taking a look at the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">documentation</a> for this.</p>\n</li>\n</ul>\n<h2 id=\"typescript-vs-javascript-for-frontend-and-backend\">TypeScript vs. JavaScript for frontend and backend</h2>\n<p>Are you caught in between choosing either TypeScript or JavaScript for either backend or frontend development? You can use TypeScript and JavaScript for both frontend and backend development. However, as you have seen in the previous sections, TypeScript is suitable for large-scale applications, while JavaScript is suitable for small projects.</p>\n<p>Let’s have a look at frontend and backend development using JavaScript and TypeScript.</p>\n<p><strong>Frontend development: TypeScript vs. JavaScript</strong></p>\n<p>The <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend</a> is the visual part of an application that users interact with. It is built using HTML, CSS, JavaScript, or TypeScript. Popular JavaScript libraries and frameworks such as <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and Angular also make frontend development easier.</p>\n<p>JavaScript is the default language of the web. It is compatible with every browser and is used for web development. However, due to its lack of static typing, it is used for smaller frontend projects and small React applications. Whenever I want to build a small project with React, I opt for JavaScript because I develop faster and don’t have to worry about types.</p>\n<p>On the other hand, TypeScript is used for large-scale frontend applications. It is easier to scale and maintain a frontend application written in TypeScript than with JavaScript. The popular frameworks support TypeScript, but it is required for Angular, which does not support JavaScript.</p>\n<p>I worked on a large-scale React project that was initially built with JavaScript. We ran into a log of bugs, and debugging was a nightmare. It was also quite difficult to debug state management using MobX. We switched to TypeScript, and debugging became easier. The code was also maintainable, thereby increasing developer productivity.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/frontend-development-using-js-and-ts-ljqba.png\" alt=\"Frontend development with JS and TS\"></p>\n<p><strong>Backend development: TypeScript vs. JavaScript</strong></p>\n<p>The backend of an application handles the non-visual parts, such as the business logic, database, authentication logic, and APIs. <a href=\"https://roadmap.sh/nodejs\" target=\"_blank\">Node.js</a> is the common runtime environment that helps developers run JavaScript and TypeScript in the backend.</p>\n<p>JavaScript is more common in quick Minimum Viable Products (MVP) or prototypes using frameworks like Express.js, where a fast development cycle is a priority. You don’t need extra setups to get started, and you don’t need to worry about typing.</p>\n<p>On the other hand, TypeScript brings better scalability, maintainability, and reliability to backend development. It supports Object-Oriented Programming and is best suited for building enterprise applications. It also supports static typing and avoids runtime errors, making backend services more reliable.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/backend-development-using-js-and-ts-36on7.png\" alt=\"Backend development with JS and TS\"></p>\n<h2 id=\"should-you-learn-typescript-or-javascript-first\">Should you learn TypeScript or JavaScript first?</h2>\n<p>I work with TypeScript on a daily basis, expanding my knowledge of its features and looking for better ways to use the language. My experience has been enjoyable so far. However, before I got comfortable with TypeScript, I had worked with JavaScript for many years.</p>\n<p>If you are new to web development, I recommend you start with JavaScript. Having a strong foundation of JavaScript will make it easier to grasp TypeScript. Then, after getting comfortable with JavaScript, you can pick up TypeScript and practice it by building small projects.</p>\n<p>If you already know the basics of TypeScript and you are working in a team or a large code base, you should use TypeScript because of its advantages, such as static typing and maintainability.</p>\n<h2 id=\"will-typescript-replace-javascript\">Will TypeScript replace JavaScript?</h2>\n<p>Many people, especially newbies, always ask if TypeScript will replace JavaScript. Well, the simple answer is no. JavaScript is not going anywhere. Although TypeScript shares many of the properties of JavaScript and adds some benefits like static typing, it still compiles to plain JavaScript because web browsers cannot execute TypeScript code. So, JavaScript is still very much needed.</p>\n<p>However, many teams are migrating to TypeScript because of better tooling, scalability, and maintainability. Also, more frameworks, such as Vue and Next.js, are providing support for TypeScript.</p>\n<p>Despite the popularity of TypeScript, JavaScript will still be the foundation and relevant in the future.</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>In this guide, we’ve seen the difference between JavaScript and TypeScript. For many developers, JavaScript is their go-to language because of its simplicity and low entry barrier. It is ideal for building small and responsive web and mobile apps, building prototypes, or experimenting with new programming concepts. JavaScript has a large ecosystem. With so many libraties and frameworks, it’s easy to find tools that suit your needs.</p>\n<p>On the other hand, TypeScript is an excellent choice if you are working on a large-scale project with multiple developers. As your project grows, having a strong type system provides huge benefits such as catching errors early, enforcing consistent data structures, and reduce runtime bugs. TypeScript provides developers with great tooling such as code completion, navigation and refactoring suggestions.</p>\n<p>However, I recommend you learn both JavaScript and TypeScript and use them based on the project you are working on. roadmap.sh offers structured <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> and <a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a> roadmaps where you can track and share your progress on your profile. You can also customize your roadmap based on your learning needs.</p>";

				const frontmatter$o = {"title":"TypeScript vs JavaScript: Which to Choose For Your Project","description":"TypeScript vs JavaScript: Learn the pros, cons, and best use cases to choose the right language for your next project.","authorId":"william","excludedBySlug":"/javascript/vs-typescript","seo":{"title":"TypeScript vs JavaScript: Which to Choose For Your Project","description":"TypeScript vs JavaScript: Learn the pros, cons, and best use cases to choose the right language for your next project.","ogImageUrl":"https://assets.roadmap.sh/guest/typescript-or-javascript-99fzl.jpg"},"isNew":false,"type":"textual","date":"2025-05-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$o = "/workspace/src/data/guides/javascript-vs-typescript.md";
				const url$o = undefined;
				function rawContent$o() {
					return "   \n                                                                   \n                                                                                                                                     \n                 \n                                           \n    \n                                                                     \n                                                                                                                                       \n                                                                                  \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![JavaScript vs TypeScript compared](https://assets.roadmap.sh/guest/typescript-or-javascript-99fzl.jpg)\n\nChoosing between [TypeScript](https://roadmap.sh/typescript) and [JavaScript](https://roadmap.sh/javascript) can feel like picking between a Swiss Army knife and a scalpel. Both are useful, but their strengths depend on the task.\n\nIf you're working on a large-scale project or need better code maintainability, TypeScript is a great choice. On the other hand, if you're working on a project that requires a quick development cycle or working within a small team, JavaScript might be enough.\n\nAt the start of my tech career, I used JavaScript to learn basic programming concepts and build small projects to add to my portfolio. It was very common to learn JavaScript if you wanted to become a web developer. When I got my first full time role as a web developer, I realized my team was using TypeScript and that was when my journey with TypeScript began.\n\nWhile both languages have their strengths, selecting the right one depends on several factors, such as project requirements, developer needs, learning curve, etc.\n\nIn this guide, I'll compare the features of TypeScript and JavaScript to help you determine which language best suits your project. Drawing from personal experience and real-world examples, I'll provide insights to support your decision-making.\n\n## Differences between TypeScript and JavaScript\n\nThe table below summarizes the differences between TypeScript and JavaScript.\n\n| **Criteria**           | **TypeScript**                                                              | **JavaScript**                                                        |\n| ---------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------- |\n| Typing                 | Static typing.                                                              | Dynamic typing.                                                       |\n| Error checking         | Compile time error checking.                                                | Runtime error checking.                                               |\n| Use case               | For large scale projects where type safety is crucial.                      | For smaller projects and rapid prototyping.                           |\n| Backward compatibility | Can work with JavaScript code by including type definitions.                | Can run natively on any JavaScript engine.                            |\n| Compilation            | It is compiled to JavaScript before execution.                              | Interpreted directly by browsers and Node.js without compilation.     |\n| Debugging              | Easier to debug because of the type system.                                 | Requires more effort and time to debug.                               |\n| IDE support            | Support for code refactoring, type checking, and auto completion.           | Limited IDE support, mostly auto completion, and syntax highlighting. |\n| File extension         | .ts                                                                         | .js                                                                   |\n| Learning curve         | Has a steeper learning curve because you have to learn additional features. | Easier to start with due to dynamic typing and less strict rules.     |\n\n## What are JavaScript and TypeScript?\n\nJavaScript is a simple and versatile programming language, and probably the most widely used in web development. It supports dynamic typing and works on both the frontend and backend. If you're aiming to become a web developer, you should be comfortable with using JavaScript.\n\nTypeScript, on the other hand, is a superset of JavaScript that adds static typing and some features that JavaScript doesn't offer out of the box. It was designed to solve specific problems that JavaScript developers face and make JavaScript development more efficient. Since valid JavaScript is also valid TypeScript, it's easy to start using. TypeScript helps make codebases more robust and maintainable, especially as projects grow. Its type system is great for catching bugs early and making the development process smoother overall.\n\n## Features of JavaScript\n\nSome of the key features of JavaScript include:\n\n1. **Dynamic typing**: In JavaScript, you do not have to declare variables with any type. The types can also change during runtime.\n\n```javascript\nlet programmingLanguage = \"JavaScript\";\nconsole.log(typeof programmingLanguage); // \"string\"\n\nprogrammingLanguage = 12;\nconsole.log(typeof programmingLanguage); // \"number\"\n```\n\nFrom the code snippet above, you see that the variable `programmingLanguage` was initially assigned a string value and later assigned to a number. \n\n2. **Interaction with the Document Object Model (DOM)**: With JavaScript, you can manipulate the DOM of any webpage by changing its content, structure, and style.\n\n```javascript\nconst element = document.getElementById(\"demo\");\nelement.style.color = \"red\";\n```\n\nThe code snippet selects an HTML element by its Id `demo` and then changes its color.\n\n3. **Event handling**: In JavaScript, event listeners allow you to respond to user actions such as clicks, keyboard input, and mouse events.\n\n```javascript\ndocument.getElementById(\"demo\").addEventListener(\"click\", () => {\n  console.log(\"I was clicked\");\n});\n```\n\nThe code adds a click event listener to the element, and when the element is clicked, a message is logged into the console.\n\n4. **Asynchronous programming**: JavaScript supports asynchronous programming using callbacks, promises, and async/await for non-blocking operations like reading and writing data to a database, fetching data from a server, etc.\n\n```javascript\nconst data = async() => {\n  try{\n    const response = await fetch(\"http://api.com/data\");\n    if(!response.ok){\n      throw new Error(\"Error while fetching data\");\n    }\n    const data = await response.json();\n    console.log(data);\n  }\n  catch(error){\n    console.log(error);\n  }\n}\n```\n\nThe code uses async/await to fetch data from an endpoint. If successful, the data returned will be logged into the console.\n\n![Features of JavaScript](https://assets.roadmap.sh/guest/features-of-javascript-nts05.png)\n\n## Features of TypeScript\n\nSome of the key features of TypeScript include:\n\n1. **Static typing**: Unlike JavaScript, TypeScript supports static typing. When defining a variable or object, you can specify the type you want it to have. This helps you catch errors at compile time rather than run time. \n\n```typescript\nlet programmingLanguage: string = \"TypeScript\";\nprogrammingLanguage = 23 // this will show a compile error\n```\n\nThe code snippet demonstrates how to define a variable in TypeScript. You can also do this without explicitly specifying the type string; TypeScript will infer the type implicitly. You can notice the effect of the static type on the following line, where a number is assigned to the variable. This will show a compile error because the variable was initialized as a string.\n\n2. **Interfaces**: Interfaces allow you to define an object's structure and ensure that the structure is respected wherever you use that object. The code below defines an interface and creates an object based on the interface structure.\n\n```typescript\ninterface IStudent{\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\nconst student: IStudent = {firstName: \"John\", lastName: \"Doe\", age: 30};\n```\n\n3. **Generics**: TypeScript allows you to create reusable and flexible components that can work with multiple data types instead of one.\n\n```typescript\nconst returnValue<T> = (arg: T): T => console.log(arg);\n\n// usage\nreturnValue(\"JavaScript\"); // \"JavaScript\"\nreturnValue(43); // 43\nreturnValue(true); // true\n```\n\nThe code above demonstrates how to use generics in TypeScript. A function `returnValue` is declared to accept arguments of any data type and logs them to the console. \n\n4. **Enums**: This is a feature added in TypeScript and is not native to JavaScript. It allows you to define a set of constants and helps to improve code readability and maintainability.\n\n```typescript\nenum Level{\n  Low,\n  Medium,\n  High\n}\n\nconst level: Level = Level.Low;\n```\n\nTypeScript also supports modern JavaScript features like classes and inheritance, with additional benefits like access modifiers (public, private, protected) and abstract classes.\n\n![Features of TypeScript](https://assets.roadmap.sh/guest/features-of-typescript-csuhn.png)\n\n## When should you use TypeScript or JavaScript?\n\nChoosing between TypeScript and JavaScript depends on several factors such as the kind of project, if you are working in a team or alone, and so on. Knowing which to choose for your project will enhance your productivity. I will provide you with a guide on when to choose TypeScript over JavaScript and vice versa.\n\n**When JavaScript is enough**\n\n1. **Small projects or quick prototypes**: JavaScript is suitable when you want to quickly test an idea or build small projects where static typing is not needed. It removes the compilation step that TypeScript has, leading to a faster development process.\n\nI once worked on a project to build a static website for a drug store using TypeScript, thinking it would give me an extra layer of safety and structure. But as I got into the development process, I realized I was spending so much time fixing type errors, tweaking interfaces, and trying to make the compiler happy, rather than focusing on the core logic of the app.\n\nIn a project where speed and simplicity were the goals, TypeScript started to feel like a roadblock rather than a benefit. The experience taught me that for smaller projects, TypeScript can be a bit of an overkill. JavaScript does the job faster.\n\n2. **Learning purposes**: If you are new to programming or want to learn new concepts, JavaScript is enough. It helps you grasp the fundamentals without the extra layer of static typing.\n\n3. **Working solo**: Whenever I work alone, I use JavaScript because it is effective for small projects and I'm familiar with its data interactions. JavaScript should be enough if you are working alone.\n\n![Working with JavaScript](https://assets.roadmap.sh/guest/working-on-a-solo-project-using-javascript-biffe.png)\n\n**When TypeScript is a great fit**\n\n1. **Large projects with multiple developers**: TypeScript is a great fit for large projects with multiple developers. Its typing system helps you write code that is easier to read, manage, and debug. \n\nI worked on a project where built a fairly large and growing codebase entirely in JavaScript. At first, everything seemed to move quickly, and we could iterate fast. But as the project scaled, we started having problems.\n\nOne of the most frustrating issues we ran into was type-related bugs. Debugging those bugs was painful. We'd waste a lot of time trying to find the error, only to find out that it was a function receiving the wrong data shape, something TypeScript could have caught during development. The experience proved how valuable static typing can be for large-scale applications.\n\n2. **When code maintainability is a priority**: Applications where code maintainability is crucial benefit from TypeScript type checking. You can detect errors during compile time instead of during run time. Many IDEs like Visual Studio Code support type checking and will notify you of any type mismatch while coding.\n\n3. **When dealing with strict API contracts**: If you are making requests to an API endpoint with a strict structure, TypeScript's type system helps to model the return of the endpoint using an Interface or Type and avoids throwing exceptions. \n\nIn my early career days, I had the task to implement a feature to fetch the price of some vehicles using the vehicleIds. It involved calling the price REST endpoint. I used JavaScript's fetch to do this. Everything looked right - the request went out, the response came back, and I tried working with the data. But then, it threw an exception at runtime.\n\nI was confused because I was sure I'd handled everything correctly. After spending some time reading the API documentation, I realized the issue was in how I was handling the response. The API returned something slightly different from what I expected, and JavaScript didn't give any warning, it just failed when I tried to use the data.\n\nLater, when I was faced with the same kind of problem using TypeScript, it was a better experience. With TypeScript, I was forced to define the expected response type up front. If I tried to access a field that didn't exist, the compiler will immediately flag it.\n\n4. **When working with frameworks like Angular**: [Angular](https://roadmap.sh/angular) is a popular web development framework and is built on TypeScript. So if you want to work with Angular, then using TypeScript is a must.\n\n![Working in a team with TypeScript](https://assets.roadmap.sh/guest/working-in-a-team-using-typescript-u78w3.png)\n\n## Is TypeScript hard to learn if you know JavaScript?\n\nIf you already know JavaScript, it's not hard to learn TypeScript. As explained in the previous section, TypeScript is JavaScript with static typing, so most of your JavaScript knowledge still applies. It was relatively easy for me to pick up TypeScript because I had been using JavaScript for a long time. \n\nThe typical learning curve challenges include:\n\n- **Getting used to explicit typing**: Explicitly defining types for variables or objects might be challenging at first, but over time, you see the benefit and get used to it. The common data types in TypeScript are boolean, string, and number.\n\n- **Handling type errors**: One of the advantages of TypeScript is that you can see type errors while coding. It can be tricky at first when you see a type error message, but read the error message carefully, and you will be able to make sense of it.\n\n- **Generics**: This was one of the most confusing aspects of TypeScript for me. Generics help create reusable and flexible types and make your code more generic.\n\n```typescript\nconst generic = <T>(arg: T): T => console.log(arg);\n\ngeneric(\"string\") // \"string\"\ngeneric(34) // 34\n```\n\nThe code snippet shows a function that takes arguments of different types and logs the argument to the console. This is the power of generics.\n\n- **Setting up configurations**: You will also have to get used to setting up a tsconfig file. A tsconfig file is a configuration file that tells the compiler how to compile TypeScript into JavaScript. It's usually confusing at first, but you'll get used to it over time by reading the documentation.\n\n- **Interfaces and Types**: With Interfaces and Types, you can define the shape of an object. At first, I was confused about when to use an Interface or a Type because they can be used interchangeably. Yes, while they are alike, they have a slight difference. An Interface can be extended with new properties, but a Type cannot. I recommend taking a look at the TypeScript [documentation](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces) for this.\n\n## TypeScript vs. JavaScript for frontend and backend\n\nAre you caught in between choosing either TypeScript or JavaScript for either backend or frontend development? You can use TypeScript and JavaScript for both frontend and backend development. However, as you have seen in the previous sections, TypeScript is suitable for large-scale applications, while JavaScript is suitable for small projects. \n\nLet's have a look at frontend and backend development using JavaScript and TypeScript.\n\n**Frontend development: TypeScript vs. JavaScript**\n\nThe [frontend](https://roadmap.sh/frontend) is the visual part of an application that users interact with. It is built using HTML, CSS, JavaScript, or TypeScript. Popular JavaScript libraries and frameworks such as [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and Angular also make frontend development easier.\n\nJavaScript is the default language of the web. It is compatible with every browser and is used for web development. However, due to its lack of static typing, it is used for smaller frontend projects and small React applications. Whenever I want to build a small project with React, I opt for JavaScript because I develop faster and don't have to worry about types.\n\nOn the other hand, TypeScript is used for large-scale frontend applications. It is easier to scale and maintain a frontend application written in TypeScript than with JavaScript. The popular frameworks support TypeScript, but it is required for Angular, which does not support JavaScript.\n\nI worked on a large-scale React project that was initially built with JavaScript. We ran into a log of bugs, and debugging was a nightmare. It was also quite difficult to debug state management using MobX. We switched to TypeScript, and debugging became easier. The code was also maintainable, thereby increasing developer productivity.\n\n![Frontend development with JS and TS](https://assets.roadmap.sh/guest/frontend-development-using-js-and-ts-ljqba.png)\n\n**Backend development: TypeScript vs. JavaScript**\n\nThe backend of an application handles the non-visual parts, such as the business logic, database, authentication logic, and APIs. [Node.js](https://roadmap.sh/nodejs) is the common runtime environment that helps developers run JavaScript and TypeScript in the backend.\n\nJavaScript is more common in quick Minimum Viable Products (MVP) or prototypes using frameworks like Express.js, where a fast development cycle is a priority. You don't need extra setups to get started, and you don't need to worry about typing.\n\nOn the other hand, TypeScript brings better scalability, maintainability, and reliability to backend development. It supports Object-Oriented Programming and is best suited for building enterprise applications. It also supports static typing and avoids runtime errors, making backend services more reliable.\n\n![Backend development with JS and TS](https://assets.roadmap.sh/guest/backend-development-using-js-and-ts-36on7.png)\n\n## Should you learn TypeScript or JavaScript first?\n\nI work with TypeScript on a daily basis, expanding my knowledge of its features and looking for better ways to use the language. My experience has been enjoyable so far. However, before I got comfortable with TypeScript, I had worked with JavaScript for many years.\n\nIf you are new to web development, I recommend you start with JavaScript. Having a strong foundation of JavaScript will make it easier to grasp TypeScript. Then, after getting comfortable with JavaScript, you can pick up TypeScript and practice it by building small projects.\n\nIf you already know the basics of TypeScript and you are working in a team or a large code base, you should use TypeScript because of its advantages, such as static typing and maintainability.\n\n## Will TypeScript replace JavaScript?\n\nMany people, especially newbies, always ask if TypeScript will replace JavaScript. Well, the simple answer is no. JavaScript is not going anywhere. Although TypeScript shares many of the properties of JavaScript and adds some benefits like static typing, it still compiles to plain JavaScript because web browsers cannot execute TypeScript code. So, JavaScript is still very much needed.\n\nHowever, many teams are migrating to TypeScript because of better tooling, scalability, and maintainability. Also, more frameworks, such as Vue and Next.js, are providing support for TypeScript.\n\nDespite the popularity of TypeScript, JavaScript will still be the foundation and relevant in the future.\n\n## Wrapping up\n\nIn this guide, we've seen the difference between JavaScript and TypeScript. For many developers, JavaScript is their go-to language because of its simplicity and low entry barrier. It is ideal for building small and responsive web and mobile apps, building prototypes, or experimenting with new programming concepts. JavaScript has a large ecosystem. With so many libraties and frameworks, it's easy to find tools that suit your needs.\n\nOn the other hand, TypeScript is an excellent choice if you are working on a large-scale project with multiple developers. As your project grows, having a strong type system provides huge benefits such as catching errors early, enforcing consistent data structures, and reduce runtime bugs. TypeScript provides developers with great tooling such as code completion, navigation and refactoring suggestions. \n\nHowever, I recommend you learn both JavaScript and TypeScript and use them based on the project you are working on. roadmap.sh offers structured [JavaScript](https://roadmap.sh/javascript) and [TypeScript](https://roadmap.sh/typescript) roadmaps where you can track and share your progress on your profile. You can also customize your roadmap based on your learning needs.\n\n";
				}
				async function compiledContent$o() {
					return await html$o();
				}
				function getHeadings$o() {
					return [{"depth":2,"slug":"differences-between-typescript-and-javascript","text":"Differences between TypeScript and JavaScript"},{"depth":2,"slug":"what-are-javascript-and-typescript","text":"What are JavaScript and TypeScript?"},{"depth":2,"slug":"features-of-javascript","text":"Features of JavaScript"},{"depth":2,"slug":"features-of-typescript","text":"Features of TypeScript"},{"depth":2,"slug":"when-should-you-use-typescript-or-javascript","text":"When should you use TypeScript or JavaScript?"},{"depth":2,"slug":"is-typescript-hard-to-learn-if-you-know-javascript","text":"Is TypeScript hard to learn if you know JavaScript?"},{"depth":2,"slug":"typescript-vs-javascript-for-frontend-and-backend","text":"TypeScript vs. JavaScript for frontend and backend"},{"depth":2,"slug":"should-you-learn-typescript-or-javascript-first","text":"Should you learn TypeScript or JavaScript first?"},{"depth":2,"slug":"will-typescript-replace-javascript","text":"Will TypeScript replace JavaScript?"},{"depth":2,"slug":"wrapping-up","text":"Wrapping up"}];
				}

				const Content$o = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$o;
					content.file = file$o;
					content.url = url$o;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$o())}`;
				});

const __vite_glob_0_74 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$o,
	compiledContent: compiledContent$o,
	default: Content$o,
	file: file$o,
	frontmatter: frontmatter$o,
	getHeadings: getHeadings$o,
	rawContent: rawContent$o,
	url: url$o
}, Symbol.toStringTag, { value: 'Module' }));

const html$n = () => "<p>HTTP is the protocol that every web developer should know as it powers the whole web and knowing it is definitely going to help you develop better applications. In this guide, I am going to be discussing what HTTP is, how it came to be, where it is today and how did we get here.</p>\n<h3 id=\"what-is-http\">What is HTTP?</h3>\n<p>First things first, what is HTTP? HTTP is the <code>TCP/IP</code> based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. By application layer protocol, I mean it’s just an abstraction layer that standardizes how the hosts (clients and servers) communicate and itself it depends upon <code>TCP/IP</code> to get request and response between the client and server. By default TCP port <code>80</code> is used but other ports can be used as well. HTTPS, however, uses port <code>443</code>.</p>\n<h3 id=\"http09--the-one-liner-1991\">HTTP/0.9 – The One Liner (1991)</h3>\n<p>The first documented version of HTTP was <a href=\"https://www.w3.org/Protocols/HTTP/AsImplemented.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><code>HTTP/0.9</code></a> which was put forward in 1991. It was the simplest protocol ever; having a single method called <code>GET</code>. If a client had to access some webpage on the server, it would have made the simple request like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">GET /index.html</span></span></code></pre>\n<p>And the response from server would have looked as follows</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">(response body) (connection closed)</span></span></code></pre>\n<p>That is, the server would get the request, reply with the HTML in response and as soon as the content has been transferred, the connection will be closed. There were</p>\n<ul>\n<li>No headers</li>\n<li><code>GET</code> was the only allowed method</li>\n<li>Response had to be HTML</li>\n</ul>\n<p>As you can see, the protocol really had nothing more than being a stepping stone for what was to come.</p>\n<h3 id=\"http10---1996\">HTTP/1.0 - 1996</h3>\n<p>In 1996, the next version of HTTP i.e. <code>HTTP/1.0</code> evolved that vastly improved over the original version.</p>\n<p>Unlike <code>HTTP/0.9</code> which was only designed for HTML response, <code>HTTP/1.0</code> could now deal with other response formats i.e. images, video files, plain text or any other content type as well. It added more methods (i.e. <code>POST</code> and <code>HEAD</code>), request/response formats got changed, HTTP headers got added to both the request and responses, status codes were added to identify the response, character set support was introduced, multi-part types, authorization, caching, content encoding and more was included.</p>\n<p>Here is how a sample <code>HTTP/1.0</code> request and response might have looked like:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">GET / HTTP/1.0 Host: kamranahmed.info User-Agent: Mozilla/5.0 (Macintosh; Intel</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Mac OS X 10_10_5) Accept: */*</span></span></code></pre>\n<p>As you can see, alongside the request, client has also sent its personal information, required response type etc. While in <code>HTTP/0.9</code> client could never send such information because there were no headers.</p>\n<p>Example response to the request above may have looked like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">HTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Dec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Apache 0.84 (response body) (connection closed)</span></span></code></pre>\n<p>In the very beginning of the response there is <code>HTTP/1.0</code> (HTTP followed by the version number), then there is the status code <code>200</code> followed by the reason phrase (or description of the status code, if you will).</p>\n<p>In this newer version, request and response headers were still kept as <code>ASCII</code> encoded, but the response body could have been of any type i.e. image, video, HTML, plain text or any other content type. So, now that server could send any content type to the client; not so long after the introduction, the term “Hyper Text” in <code>HTTP</code> became misnomer. <code>HMTP</code> or Hypermedia transfer protocol might have made more sense but, I guess, we are stuck with the name for life.</p>\n<p>One of the major drawbacks of <code>HTTP/1.0</code> were you couldn’t have multiple requests per connection. That is, whenever a client will need something from the server, it will have to open a new TCP connection and after that single request has been fulfilled, connection will be closed. And for any next requirement, it will have to be on a new connection. Why is it bad? Well, let’s assume that you visit a webpage having <code>10</code> images, <code>5</code> stylesheets and <code>5</code> javascript files, totalling to <code>20</code> items that needs to fetched when request to that webpage is made. Since the server closes the connection as soon as the request has been fulfilled, there will be a series of <code>20</code> separate connections where each of the items will be served one by one on their separate connections. This large number of connections results in a serious performance hit as requiring a new <code>TCP</code> connection imposes a significant performance penalty because of three-way handshake followed by slow-start.</p>\n<h4 id=\"three-way-handshake\">Three-way Handshake</h4>\n<p>Three-way handshake in its simplest form is that all the <code>TCP</code> connections begin with a three-way handshake in which the client and the server share a series of packets before starting to share the application data.</p>\n<ul>\n<li><code>SYN</code> - Client picks up a random number, let’s say <code>x</code>, and sends it to the server.</li>\n<li><code>SYN ACK</code> - Server acknowledges the request by sending an <code>ACK</code> packet back to the client which is made up of a random number, let’s say <code>y</code> picked up by server and the number <code>x+1</code> where <code>x</code> is the number that was sent by the client</li>\n<li><code>ACK</code> - Client increments the number <code>y</code> received from the server and sends an <code>ACK</code> packet back with the number <code>y+1</code></li>\n</ul>\n<p>Once the three-way handshake is completed, the data sharing between the client and server may begin. It should be noted that the client may start sending the application data as soon as it dispatches the last <code>ACK</code> packet but the server will still have to wait for the <code>ACK</code> packet to be received in order to fulfill the request.</p>\n<p><img src=\"https://i.imgur.com/uERG2G2.png\" alt=\"Three-way Handshake\"></p>\n<blockquote>\n<p>Please note that there is a minor issue with the image, the last <code>ACK</code> packet sent by the client to end the handshake contains only <code>y+1</code> i.e. it should have been <code>ACK:y+1</code> instead of <code>ACK: x+1, y+1</code></p>\n</blockquote>\n<p>However, some implementations of <code>HTTP/1.0</code> tried to overcome this issue by introducing a new header called <code>Connection: keep-alive</code> which was meant to tell the server “Hey server, do not close this connection, I need it again”. But still, it wasn’t that widely supported and the problem still persisted.</p>\n<p>Apart from being connection-less, <code>HTTP</code> also is a stateless protocol i.e. server doesn’t maintain the information about the client and so each of the requests has to have the information necessary for the server to fulfill the request on its own without any association with any old requests. And so this adds fuel to the fire i.e. apart from the large number of connections that the client has to open, it also has to send some redundant data on the wire causing increased bandwidth usage.</p>\n<h3 id=\"http11---1999\">HTTP/1.1 - 1999</h3>\n<p>After merely 3 years of <code>HTTP/1.0</code>, the next version i.e. <code>HTTP/1.1</code> was released in 1999; which made a lot of improvements over its predecessor. The major improvements over <code>HTTP/1.0</code> included</p>\n<ul>\n<li>\n<p><strong>New HTTP methods</strong> were added, which introduced <code>PUT</code>, <code>PATCH</code>, <code>OPTIONS</code>, <code>DELETE</code></p>\n</li>\n<li>\n<p><strong>Hostname Identification</strong> In <code>HTTP/1.0</code> <code>Host</code> header wasn’t required but <code>HTTP/1.1</code> made it required.</p>\n</li>\n<li>\n<p><strong>Persistent Connections</strong> As discussed above, in <code>HTTP/1.0</code> there was only one request per connection and the connection was closed as soon as the request was fulfilled which resulted in acute performance hit and latency problems. <code>HTTP/1.1</code> introduced the persistent connections i.e. <strong>connections weren’t closed by default</strong> and were kept open which allowed multiple sequential requests. To close the connections, the header <code>Connection: close</code> had to be available on the request. Clients usually send this header in the last request to safely close the connection.</p>\n</li>\n<li>\n<p><strong>Pipelining</strong> It also introduced the support for pipelining, where the client could send multiple requests to the server without waiting for the response from server on the same connection and server had to send the response in the same sequence in which requests were received. But how does the client know that this is the point where first response download completes and the content for next response starts, you may ask! Well, to solve this, there must be <code>Content-Length</code> header present which clients can use to identify where the response ends and it can start waiting for the next response.</p>\n<blockquote>\n<p>It should be noted that in order to benefit from persistent connections or pipelining, <code>Content-Length</code> header must be available on the response, because this would let the client know when the transmission completes and it can send the next request (in normal sequential way of sending requests) or start waiting for the next response (when pipelining is enabled).</p>\n</blockquote>\n<blockquote>\n<p>But there was still an issue with this approach. And that is, what if the data is dynamic and server cannot find the content length before hand? Well in that case, you really can’t benefit from persistent connections, could you?! In order to solve this <code>HTTP/1.1</code> introduced chunked encoding. In such cases server may omit content-Length in favor of chunked encoding (more to it in a moment). However, if none of them are available, then the connection must be closed at the end of request.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Chunked Transfers</strong> In case of dynamic content, when the server cannot really find out the <code>Content-Length</code> when the transmission starts, it may start sending the content in pieces (chunk by chunk) and add the <code>Content-Length</code> for each chunk when it is sent. And when all of the chunks are sent i.e. whole transmission has completed, it sends an empty chunk i.e. the one with <code>Content-Length</code> set to zero in order to identify the client that transmission has completed. In order to notify the client about the chunked transfer, server includes the header <code>Transfer-Encoding: chunked</code></p>\n</li>\n<li>\n<p>Unlike <code>HTTP/1.0</code> which had Basic authentication only, <code>HTTP/1.1</code> included digest and proxy authentication</p>\n</li>\n<li>\n<p>Caching</p>\n</li>\n<li>\n<p>Byte Ranges</p>\n</li>\n<li>\n<p>Character sets</p>\n</li>\n<li>\n<p>Language negotiation</p>\n</li>\n<li>\n<p>Client cookies</p>\n</li>\n<li>\n<p>Enhanced compression support</p>\n</li>\n<li>\n<p>New status codes</p>\n</li>\n<li>\n<p>..and more</p>\n</li>\n</ul>\n<p>I am not going to dwell about all the <code>HTTP/1.1</code> features in this post as it is a topic in itself and you can already find a lot about it. The one such document that I would recommend you to read is <a href=\"https://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Key differences between <code>HTTP/1.0</code> and HTTP/1.1</a> and here is the link to <a href=\"https://tools.ietf.org/html/rfc2616\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">original RFC</a> for the overachievers.</p>\n<p><code>HTTP/1.1</code> was introduced in 1999 and it had been a standard for many years. Although, it improved a lot over its predecessor; with the web changing everyday, it started to show its age. Loading a web page these days is more resource-intensive than it ever was. A simple webpage these days has to open more than 30 connections. Well <code>HTTP/1.1</code> has persistent connections, then why so many connections? you say! The reason is, in <code>HTTP/1.1</code> it can only have one outstanding connection at any moment of time. <code>HTTP/1.1</code> tried to fix this by introducing pipelining but it didn’t completely address the issue because of the <strong>head-of-line blocking</strong> where a slow or heavy request may block the requests behind and once a request gets stuck in a pipeline, it will have to wait for the next requests to be fulfilled. To overcome these shortcomings of <code>HTTP/1.1</code>, the developers started implementing the workarounds, for example use of spritesheets, encoded images in CSS, single humongous CSS/Javascript files, <a href=\"https://www.maxcdn.com/one/visual-glossary/domain-sharding-2/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">domain sharding</a> etc.</p>\n<h3 id=\"spdy---2009\">SPDY - 2009</h3>\n<p>Google went ahead and started experimenting with alternative protocols to make the web faster and improving web security while reducing the latency of web pages. In 2009, they announced <code>SPDY</code>.</p>\n<blockquote>\n<p><code>SPDY</code> is a trademark of Google and isn’t an acronym.</p>\n</blockquote>\n<p>It was seen that if we keep increasing the bandwidth, the network performance increases in the beginning but a point comes when there is not much of a performance gain. But if you do the same with latency i.e. if we keep dropping the latency, there is a constant performance gain. This was the core idea for performance gain behind <code>SPDY</code>, decrease the latency to increase the network performance.</p>\n<blockquote>\n<p>For those who don’t know the difference, latency is the delay i.e. how long it takes for data to travel between the source and destination (measured in milliseconds) and bandwidth is the amount of data transferred per second (bits per second).</p>\n</blockquote>\n<p>The features of <code>SPDY</code> included, multiplexing, compression, prioritization, security etc. I am not going to get into the details of SPDY, as you will get the idea when we get into the nitty gritty of <code>HTTP/2</code> in the next section as I said <code>HTTP/2</code> is mostly inspired from SPDY.</p>\n<p><code>SPDY</code> didn’t really try to replace HTTP; it was a translation layer over HTTP which existed at the application layer and modified the request before sending it over to the wire. It started to become a defacto standards and majority of browsers started implementing it.</p>\n<p>In 2015, at Google, they didn’t want to have two competing standards and so they decided to merge it into HTTP while giving birth to <code>HTTP/2</code> and deprecating SPDY.</p>\n<h3 id=\"http2---2015\">HTTP/2 - 2015</h3>\n<p>By now, you must be convinced that why we needed another revision of the HTTP protocol. <code>HTTP/2</code> was designed for low latency transport of content. The key features or differences from the old version of <code>HTTP/1.1</code> include</p>\n<ul>\n<li>Binary instead of Textual</li>\n<li>Multiplexing - Multiple asynchronous HTTP requests over a single connection</li>\n<li>Header compression using HPACK</li>\n<li>Server Push - Multiple responses for single request</li>\n<li>Request Prioritization</li>\n<li>Security</li>\n</ul>\n<p><img src=\"https://i.imgur.com/S85j8gg.png\" alt=\"HTTP Model\"></p>\n<h4 id=\"1-binary-protocol\">1. Binary Protocol</h4>\n<p><code>HTTP/2</code> tends to address the issue of increased latency that existed in HTTP/1.x by making it a binary protocol. Being a binary protocol, it easier to parse but unlike <code>HTTP/1.x</code> it is no longer readable by the human eye. The major building blocks of <code>HTTP/2</code> are Frames and Streams</p>\n<h5 id=\"frames-and-streams\">Frames and Streams</h5>\n<p>HTTP messages are now composed of one or more frames. There is a <code>HEADERS</code> frame for the meta data and <code>DATA</code> frame for the payload and there exist several other types of frames (<code>HEADERS</code>, <code>DATA</code>, <code>RST_STREAM</code>, <code>SETTINGS</code>, <code>PRIORITY</code> etc) that you can check through <a href=\"https://httpwg.org/specs/rfc7540.html#iana-frames\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">the <code>HTTP/2</code> specs</a>.</p>\n<p>Every <code>HTTP/2</code> request and response is given a unique stream ID and it is divided into frames. Frames are nothing but binary pieces of data. A collection of frames is called a Stream. Each frame has a stream id that identifies the stream to which it belongs and each frame has a common header. Also, apart from stream ID being unique, it is worth mentioning that, any request initiated by client uses odd numbers and the response from server has even numbers stream IDs.</p>\n<p>Apart from the <code>HEADERS</code> and <code>DATA</code>, another frame type that I think worth mentioning here is <code>RST_STREAM</code> which is a special frame type that is used to abort some stream i.e. client may send this frame to let the server know that I don’t need this stream anymore. In <code>HTTP/1.1</code> the only way to make the server stop sending the response to client was closing the connection which resulted in increased latency because a new connection had to be opened for any consecutive requests. While in HTTP/2, client can use <code>RST_STREAM</code> and stop receiving a specific stream while the connection will still be open and the other streams will still be in play.</p>\n<h4 id=\"2-multiplexing\">2. Multiplexing</h4>\n<p>Since <code>HTTP/2</code> is now a binary protocol and as I said above that it uses frames and streams for requests and responses, once a TCP connection is opened, all the streams are sent asynchronously through the same connection without opening any additional connections. And in turn, the server responds in the same asynchronous way i.e. the response has no order and the client uses the assigned stream id to identify the stream to which a specific packet belongs. This also solves the <strong>head-of-line blocking</strong> issue that existed in HTTP/1.x i.e. the client will not have to wait for the request that is taking time and other requests will still be getting processed.</p>\n<h4 id=\"3-hpack-header-compression\">3. HPACK Header Compression</h4>\n<p>It was part of a separate RFC which was specifically aimed at optimizing the sent headers. The essence of it is that when we are constantly accessing the server from a same client there is a lot of redundant data that we are sending in the headers over and over, and sometimes there might be cookies increasing the headers size which results in bandwidth usage and increased latency. To overcome this, <code>HTTP/2</code> introduced header compression.</p>\n<p><img src=\"https://i.imgur.com/3IPWXvR.png\" alt=\"Header Compression\"></p>\n<p>Unlike request and response, headers are not compressed in <code>gzip</code> or <code>compress</code> etc formats but there is a different mechanism in place for header compression which is literal values are encoded using Huffman code and a headers table is maintained by the client and server and both the client and server omit any repetitive headers (e.g. user agent etc) in the subsequent requests and reference them using the headers table maintained by both.</p>\n<p>While we are talking headers, let me add here that the headers are still the same as in HTTP/1.1, except for the addition of some pseudo headers i.e. <code>:method</code>, <code>:scheme</code>, <code>:host</code> and <code>:path</code></p>\n<h4 id=\"4-server-push\">4. Server Push</h4>\n<p>Server push is another tremendous feature of <code>HTTP/2</code> where the server, knowing that the client is going to ask for a certain resource, can push it to the client without even client asking for it. For example, let’s say a browser loads a web page, it parses the whole page to find out the remote content that it has to load from the server and then sends consequent requests to the server to get that content.</p>\n<p>Server push allows the server to decrease the round trips by pushing the data that it knows that client is going to demand. How it is done is, server sends a special frame called <code>PUSH_PROMISE</code> notifying the client that, “Hey, I am about to send this resource to you! Do not ask me for it.” The <code>PUSH_PROMISE</code> frame is associated with the stream that caused the push to happen and it contains the promised stream ID i.e. the stream on which the server will send the resource to be pushed.</p>\n<h4 id=\"5-request-prioritization\">5. Request Prioritization</h4>\n<p>A client can assign a priority to a stream by including the prioritization information in the <code>HEADERS</code> frame by which a stream is opened. At any other time, client can send a <code>PRIORITY</code> frame to change the priority of a stream.</p>\n<p>Without any priority information, server processes the requests asynchronously i.e. without any order. If there is priority assigned to a stream, then based on this prioritization information, server decides how much of the resources need to be given to process which request.</p>\n<h4 id=\"6-security\">6. Security</h4>\n<p>There was extensive discussion on whether security (through <code>TLS</code>) should be made mandatory for <code>HTTP/2</code> or not. In the end, it was decided not to make it mandatory. However, most vendors stated that they will only support <code>HTTP/2</code> when it is used over <code>TLS</code>. So, although <code>HTTP/2</code> doesn’t require encryption by specs but it has kind of become mandatory by default anyway. With that out of the way, <code>HTTP/2</code> when implemented over <code>TLS</code> does impose some requirements i.e. <code>TLS</code> version <code>1.2</code> or higher must be used, there must be a certain level of minimum key sizes, ephemeral keys are required etc.</p>\n<p><code>HTTP/2</code> is here and it has already <a href=\"https://caniuse.com/#search=http2\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">surpassed SPDY in adaption</a> which is gradually increasing. <code>HTTP/2</code> has alot to offer in terms of performance gain and it is about time we should start using it.</p>\n<p>For anyone interested in further details here is the <a href=\"https://httpwg.org/specs/rfc9113.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">link to specs</a> and a link <a href=\"https://www.http2demo.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">demonstrating the performance benefits of <code>HTTP/2</code></a>.</p>\n<p>And that about wraps it up. Until next time! stay tuned.</p>";

				const frontmatter$n = {"title":"Journey to HTTP/2","description":"The evolution of HTTP. How it all started and where we stand today","authorId":"kamran","seo":{"title":"Journey to HTTP/2 - roadmap.sh","description":"The evolution of HTTP. How it all started and where we stand today"},"isNew":false,"type":"textual","date":"2018-12-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$n = "/workspace/src/data/guides/journey-to-http2.md";
				const url$n = undefined;
				function rawContent$n() {
					return "   \n                          \n                                                                                 \n                  \n    \n                                         \n                                                                                   \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nHTTP is the protocol that every web developer should know as it powers the whole web and knowing it is definitely going to help you develop better applications. In this guide, I am going to be discussing what HTTP is, how it came to be, where it is today and how did we get here.\n\n### What is HTTP?\n\nFirst things first, what is HTTP? HTTP is the `TCP/IP` based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. By application layer protocol, I mean it's just an abstraction layer that standardizes how the hosts (clients and servers) communicate and itself it depends upon `TCP/IP` to get request and response between the client and server. By default TCP port `80` is used but other ports can be used as well. HTTPS, however, uses port `443`.\n\n### HTTP/0.9 – The One Liner (1991)\n\nThe first documented version of HTTP was [`HTTP/0.9`](https://www.w3.org/Protocols/HTTP/AsImplemented.html) which was put forward in 1991. It was the simplest protocol ever; having a single method called `GET`. If a client had to access some webpage on the server, it would have made the simple request like below\n\n```html\nGET /index.html\n```\n\nAnd the response from server would have looked as follows\n\n```html\n(response body) (connection closed)\n```\n\nThat is, the server would get the request, reply with the HTML in response and as soon as the content has been transferred, the connection will be closed. There were\n\n- No headers\n- `GET` was the only allowed method\n- Response had to be HTML\n\nAs you can see, the protocol really had nothing more than being a stepping stone for what was to come.\n\n### HTTP/1.0 - 1996\n\nIn 1996, the next version of HTTP i.e. `HTTP/1.0` evolved that vastly improved over the original version.\n\nUnlike `HTTP/0.9` which was only designed for HTML response, `HTTP/1.0` could now deal with other response formats i.e. images, video files, plain text or any other content type as well. It added more methods (i.e. `POST` and `HEAD`), request/response formats got changed, HTTP headers got added to both the request and responses, status codes were added to identify the response, character set support was introduced, multi-part types, authorization, caching, content encoding and more was included.\n\nHere is how a sample `HTTP/1.0` request and response might have looked like:\n\n```html\nGET / HTTP/1.0 Host: kamranahmed.info User-Agent: Mozilla/5.0 (Macintosh; Intel\nMac OS X 10_10_5) Accept: */*\n```\n\nAs you can see, alongside the request, client has also sent its personal information, required response type etc. While in `HTTP/0.9` client could never send such information because there were no headers.\n\nExample response to the request above may have looked like below\n\n```html\nHTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05\nDec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server:\nApache 0.84 (response body) (connection closed)\n```\n\nIn the very beginning of the response there is `HTTP/1.0` (HTTP followed by the version number), then there is the status code `200` followed by the reason phrase (or description of the status code, if you will).\n\nIn this newer version, request and response headers were still kept as `ASCII` encoded, but the response body could have been of any type i.e. image, video, HTML, plain text or any other content type. So, now that server could send any content type to the client; not so long after the introduction, the term \"Hyper Text\" in `HTTP` became misnomer. `HMTP` or Hypermedia transfer protocol might have made more sense but, I guess, we are stuck with the name for life.\n\nOne of the major drawbacks of `HTTP/1.0` were you couldn't have multiple requests per connection. That is, whenever a client will need something from the server, it will have to open a new TCP connection and after that single request has been fulfilled, connection will be closed. And for any next requirement, it will have to be on a new connection. Why is it bad? Well, let's assume that you visit a webpage having `10` images, `5` stylesheets and `5` javascript files, totalling to `20` items that needs to fetched when request to that webpage is made. Since the server closes the connection as soon as the request has been fulfilled, there will be a series of `20` separate connections where each of the items will be served one by one on their separate connections. This large number of connections results in a serious performance hit as requiring a new `TCP` connection imposes a significant performance penalty because of three-way handshake followed by slow-start.\n\n#### Three-way Handshake\n\nThree-way handshake in its simplest form is that all the `TCP` connections begin with a three-way handshake in which the client and the server share a series of packets before starting to share the application data.\n\n- `SYN` - Client picks up a random number, let's say `x`, and sends it to the server.\n- `SYN ACK` - Server acknowledges the request by sending an `ACK` packet back to the client which is made up of a random number, let's say `y` picked up by server and the number `x+1` where `x` is the number that was sent by the client\n- `ACK` - Client increments the number `y` received from the server and sends an `ACK` packet back with the number `y+1`\n\nOnce the three-way handshake is completed, the data sharing between the client and server may begin. It should be noted that the client may start sending the application data as soon as it dispatches the last `ACK` packet but the server will still have to wait for the `ACK` packet to be received in order to fulfill the request.\n\n![Three-way Handshake](https://i.imgur.com/uERG2G2.png)\n\n> Please note that there is a minor issue with the image, the last `ACK` packet sent by the client to end the handshake contains only `y+1` i.e. it should have been `ACK:y+1` instead of `ACK: x+1, y+1`\n\nHowever, some implementations of `HTTP/1.0` tried to overcome this issue by introducing a new header called `Connection: keep-alive` which was meant to tell the server \"Hey server, do not close this connection, I need it again\". But still, it wasn't that widely supported and the problem still persisted.\n\nApart from being connection-less, `HTTP` also is a stateless protocol i.e. server doesn't maintain the information about the client and so each of the requests has to have the information necessary for the server to fulfill the request on its own without any association with any old requests. And so this adds fuel to the fire i.e. apart from the large number of connections that the client has to open, it also has to send some redundant data on the wire causing increased bandwidth usage.\n\n### HTTP/1.1 - 1999\n\nAfter merely 3 years of `HTTP/1.0`, the next version i.e. `HTTP/1.1` was released in 1999; which made a lot of improvements over its predecessor. The major improvements over `HTTP/1.0` included\n\n- **New HTTP methods** were added, which introduced `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n\n- **Hostname Identification** In `HTTP/1.0` `Host` header wasn't required but `HTTP/1.1` made it required.\n\n- **Persistent Connections** As discussed above, in `HTTP/1.0` there was only one request per connection and the connection was closed as soon as the request was fulfilled which resulted in acute performance hit and latency problems. `HTTP/1.1` introduced the persistent connections i.e. **connections weren't closed by default** and were kept open which allowed multiple sequential requests. To close the connections, the header `Connection: close` had to be available on the request. Clients usually send this header in the last request to safely close the connection.\n\n- **Pipelining** It also introduced the support for pipelining, where the client could send multiple requests to the server without waiting for the response from server on the same connection and server had to send the response in the same sequence in which requests were received. But how does the client know that this is the point where first response download completes and the content for next response starts, you may ask! Well, to solve this, there must be `Content-Length` header present which clients can use to identify where the response ends and it can start waiting for the next response.\n\n  > It should be noted that in order to benefit from persistent connections or pipelining, `Content-Length` header must be available on the response, because this would let the client know when the transmission completes and it can send the next request (in normal sequential way of sending requests) or start waiting for the next response (when pipelining is enabled).\n\n  > But there was still an issue with this approach. And that is, what if the data is dynamic and server cannot find the content length before hand? Well in that case, you really can't benefit from persistent connections, could you?! In order to solve this `HTTP/1.1` introduced chunked encoding. In such cases server may omit content-Length in favor of chunked encoding (more to it in a moment). However, if none of them are available, then the connection must be closed at the end of request.\n\n- **Chunked Transfers** In case of dynamic content, when the server cannot really find out the `Content-Length` when the transmission starts, it may start sending the content in pieces (chunk by chunk) and add the `Content-Length` for each chunk when it is sent. And when all of the chunks are sent i.e. whole transmission has completed, it sends an empty chunk i.e. the one with `Content-Length` set to zero in order to identify the client that transmission has completed. In order to notify the client about the chunked transfer, server includes the header `Transfer-Encoding: chunked`\n\n- Unlike `HTTP/1.0` which had Basic authentication only, `HTTP/1.1` included digest and proxy authentication\n- Caching\n- Byte Ranges\n- Character sets\n- Language negotiation\n- Client cookies\n- Enhanced compression support\n- New status codes\n- ..and more\n\nI am not going to dwell about all the `HTTP/1.1` features in this post as it is a topic in itself and you can already find a lot about it. The one such document that I would recommend you to read is [Key differences between `HTTP/1.0` and HTTP/1.1](https://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf) and here is the link to [original RFC](https://tools.ietf.org/html/rfc2616) for the overachievers.\n\n`HTTP/1.1` was introduced in 1999 and it had been a standard for many years. Although, it improved a lot over its predecessor; with the web changing everyday, it started to show its age. Loading a web page these days is more resource-intensive than it ever was. A simple webpage these days has to open more than 30 connections. Well `HTTP/1.1` has persistent connections, then why so many connections? you say! The reason is, in `HTTP/1.1` it can only have one outstanding connection at any moment of time. `HTTP/1.1` tried to fix this by introducing pipelining but it didn't completely address the issue because of the **head-of-line blocking** where a slow or heavy request may block the requests behind and once a request gets stuck in a pipeline, it will have to wait for the next requests to be fulfilled. To overcome these shortcomings of `HTTP/1.1`, the developers started implementing the workarounds, for example use of spritesheets, encoded images in CSS, single humongous CSS/Javascript files, [domain sharding](https://www.maxcdn.com/one/visual-glossary/domain-sharding-2/) etc.\n\n### SPDY - 2009\n\nGoogle went ahead and started experimenting with alternative protocols to make the web faster and improving web security while reducing the latency of web pages. In 2009, they announced `SPDY`.\n\n> `SPDY` is a trademark of Google and isn't an acronym.\n\nIt was seen that if we keep increasing the bandwidth, the network performance increases in the beginning but a point comes when there is not much of a performance gain. But if you do the same with latency i.e. if we keep dropping the latency, there is a constant performance gain. This was the core idea for performance gain behind `SPDY`, decrease the latency to increase the network performance.\n\n> For those who don't know the difference, latency is the delay i.e. how long it takes for data to travel between the source and destination (measured in milliseconds) and bandwidth is the amount of data transferred per second (bits per second).\n\nThe features of `SPDY` included, multiplexing, compression, prioritization, security etc. I am not going to get into the details of SPDY, as you will get the idea when we get into the nitty gritty of `HTTP/2` in the next section as I said `HTTP/2` is mostly inspired from SPDY.\n\n`SPDY` didn't really try to replace HTTP; it was a translation layer over HTTP which existed at the application layer and modified the request before sending it over to the wire. It started to become a defacto standards and majority of browsers started implementing it.\n\nIn 2015, at Google, they didn't want to have two competing standards and so they decided to merge it into HTTP while giving birth to `HTTP/2` and deprecating SPDY.\n\n### HTTP/2 - 2015\n\nBy now, you must be convinced that why we needed another revision of the HTTP protocol. `HTTP/2` was designed for low latency transport of content. The key features or differences from the old version of `HTTP/1.1` include\n\n- Binary instead of Textual\n- Multiplexing - Multiple asynchronous HTTP requests over a single connection\n- Header compression using HPACK\n- Server Push - Multiple responses for single request\n- Request Prioritization\n- Security\n\n![HTTP Model](https://i.imgur.com/S85j8gg.png)\n\n#### 1. Binary Protocol\n\n`HTTP/2` tends to address the issue of increased latency that existed in HTTP/1.x by making it a binary protocol. Being a binary protocol, it easier to parse but unlike `HTTP/1.x` it is no longer readable by the human eye. The major building blocks of `HTTP/2` are Frames and Streams\n\n##### Frames and Streams\n\nHTTP messages are now composed of one or more frames. There is a `HEADERS` frame for the meta data and `DATA` frame for the payload and there exist several other types of frames (`HEADERS`, `DATA`, `RST_STREAM`, `SETTINGS`, `PRIORITY` etc) that you can check through [the `HTTP/2` specs](https://httpwg.org/specs/rfc7540.html#iana-frames).\n\nEvery `HTTP/2` request and response is given a unique stream ID and it is divided into frames. Frames are nothing but binary pieces of data. A collection of frames is called a Stream. Each frame has a stream id that identifies the stream to which it belongs and each frame has a common header. Also, apart from stream ID being unique, it is worth mentioning that, any request initiated by client uses odd numbers and the response from server has even numbers stream IDs.\n\nApart from the `HEADERS` and `DATA`, another frame type that I think worth mentioning here is `RST_STREAM` which is a special frame type that is used to abort some stream i.e. client may send this frame to let the server know that I don't need this stream anymore. In `HTTP/1.1` the only way to make the server stop sending the response to client was closing the connection which resulted in increased latency because a new connection had to be opened for any consecutive requests. While in HTTP/2, client can use `RST_STREAM` and stop receiving a specific stream while the connection will still be open and the other streams will still be in play.\n\n#### 2. Multiplexing\n\nSince `HTTP/2` is now a binary protocol and as I said above that it uses frames and streams for requests and responses, once a TCP connection is opened, all the streams are sent asynchronously through the same connection without opening any additional connections. And in turn, the server responds in the same asynchronous way i.e. the response has no order and the client uses the assigned stream id to identify the stream to which a specific packet belongs. This also solves the **head-of-line blocking** issue that existed in HTTP/1.x i.e. the client will not have to wait for the request that is taking time and other requests will still be getting processed.\n\n#### 3. HPACK Header Compression\n\nIt was part of a separate RFC which was specifically aimed at optimizing the sent headers. The essence of it is that when we are constantly accessing the server from a same client there is a lot of redundant data that we are sending in the headers over and over, and sometimes there might be cookies increasing the headers size which results in bandwidth usage and increased latency. To overcome this, `HTTP/2` introduced header compression.\n\n![Header Compression](https://i.imgur.com/3IPWXvR.png)\n\nUnlike request and response, headers are not compressed in `gzip` or `compress` etc formats but there is a different mechanism in place for header compression which is literal values are encoded using Huffman code and a headers table is maintained by the client and server and both the client and server omit any repetitive headers (e.g. user agent etc) in the subsequent requests and reference them using the headers table maintained by both.\n\nWhile we are talking headers, let me add here that the headers are still the same as in HTTP/1.1, except for the addition of some pseudo headers i.e. `:method`, `:scheme`, `:host` and `:path`\n\n#### 4. Server Push\n\nServer push is another tremendous feature of `HTTP/2` where the server, knowing that the client is going to ask for a certain resource, can push it to the client without even client asking for it. For example, let's say a browser loads a web page, it parses the whole page to find out the remote content that it has to load from the server and then sends consequent requests to the server to get that content.\n\nServer push allows the server to decrease the round trips by pushing the data that it knows that client is going to demand. How it is done is, server sends a special frame called `PUSH_PROMISE` notifying the client that, \"Hey, I am about to send this resource to you! Do not ask me for it.\" The `PUSH_PROMISE` frame is associated with the stream that caused the push to happen and it contains the promised stream ID i.e. the stream on which the server will send the resource to be pushed.\n\n#### 5. Request Prioritization\n\nA client can assign a priority to a stream by including the prioritization information in the `HEADERS` frame by which a stream is opened. At any other time, client can send a `PRIORITY` frame to change the priority of a stream.\n\nWithout any priority information, server processes the requests asynchronously i.e. without any order. If there is priority assigned to a stream, then based on this prioritization information, server decides how much of the resources need to be given to process which request.\n\n#### 6. Security\n\nThere was extensive discussion on whether security (through `TLS`) should be made mandatory for `HTTP/2` or not. In the end, it was decided not to make it mandatory. However, most vendors stated that they will only support `HTTP/2` when it is used over `TLS`. So, although `HTTP/2` doesn't require encryption by specs but it has kind of become mandatory by default anyway. With that out of the way, `HTTP/2` when implemented over `TLS` does impose some requirements i.e. `TLS` version `1.2` or higher must be used, there must be a certain level of minimum key sizes, ephemeral keys are required etc.\n\n`HTTP/2` is here and it has already [surpassed SPDY in adaption](https://caniuse.com/#search=http2) which is gradually increasing. `HTTP/2` has alot to offer in terms of performance gain and it is about time we should start using it.\n\nFor anyone interested in further details here is the [link to specs](https://httpwg.org/specs/rfc9113.html) and a link [demonstrating the performance benefits of `HTTP/2`](https://www.http2demo.io/).\n\nAnd that about wraps it up. Until next time! stay tuned.\n";
				}
				async function compiledContent$n() {
					return await html$n();
				}
				function getHeadings$n() {
					return [{"depth":3,"slug":"what-is-http","text":"What is HTTP?"},{"depth":3,"slug":"http09--the-one-liner-1991","text":"HTTP/0.9 – The One Liner (1991)"},{"depth":3,"slug":"http10---1996","text":"HTTP/1.0 - 1996"},{"depth":4,"slug":"three-way-handshake","text":"Three-way Handshake"},{"depth":3,"slug":"http11---1999","text":"HTTP/1.1 - 1999"},{"depth":3,"slug":"spdy---2009","text":"SPDY - 2009"},{"depth":3,"slug":"http2---2015","text":"HTTP/2 - 2015"},{"depth":4,"slug":"1-binary-protocol","text":"1. Binary Protocol"},{"depth":5,"slug":"frames-and-streams","text":"Frames and Streams"},{"depth":4,"slug":"2-multiplexing","text":"2. Multiplexing"},{"depth":4,"slug":"3-hpack-header-compression","text":"3. HPACK Header Compression"},{"depth":4,"slug":"4-server-push","text":"4. Server Push"},{"depth":4,"slug":"5-request-prioritization","text":"5. Request Prioritization"},{"depth":4,"slug":"6-security","text":"6. Security"}];
				}

				const Content$n = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$n;
					content.file = file$n;
					content.url = url$n;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$n())}`;
				});

const __vite_glob_0_75 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$n,
	compiledContent: compiledContent$n,
	default: Content$n,
	file: file$n,
	frontmatter: frontmatter$n,
	getHeadings: getHeadings$n,
	rawContent: rawContent$n,
	url: url$n
}, Symbol.toStringTag, { value: 'Module' }));

const html$m = () => "<p><a href=\"/guides/jwt-authentication.png\"><img src=\"/guides/jwt-authentication.png\" alt=\"JWT Authentication\"></a></p>";

				const frontmatter$m = {"title":"JWT Authentication","description":"Understand what is JWT authentication and how is it implemented","authorId":"kamran","seo":{"title":"JWT Authentication - roadmap.sh","description":"Understand what is JWT authentication and how is it implemented"},"isNew":false,"type":"visual","date":"2021-06-20T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$m = "/workspace/src/data/guides/jwt-authentication.md";
				const url$m = undefined;
				function rawContent$m() {
					return "   \n                           \n                                                                              \n                  \n    \n                                          \n                                                                                \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![JWT Authentication](/guides/jwt-authentication.png)](/guides/jwt-authentication.png)\n";
				}
				async function compiledContent$m() {
					return await html$m();
				}
				function getHeadings$m() {
					return [];
				}

				const Content$m = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$m;
					content.file = file$m;
					content.url = url$m;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$m())}`;
				});

const __vite_glob_0_76 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$m,
	compiledContent: compiledContent$m,
	default: Content$m,
	file: file$m,
	frontmatter: frontmatter$m,
	getHeadings: getHeadings$m,
	rawContent: rawContent$m,
	url: url$m
}, Symbol.toStringTag, { value: 'Module' }));

const html$l = () => "<p>I have been working on redoing the <a href=\"https://roadmap.sh\" target=\"_blank\">roadmaps</a> – splitting the skillset based on the seniority levels to make them easier to follow and not scare the new developers away. Since the roadmaps are going to be just about the technical knowledge, I thought it would be a good idea to reiterate and have an article on what I think of different seniority roles.</p>\n<p>I have seen many organizations decide the seniority of developers by giving more significance to the years of experience than they should. I have seen developers labeled “Junior” doing the work of Senior Developers and I have seen “Lead” developers who weren’t even qualified to be called “Senior”. The seniority of a developer cannot just be decided by their age, years of experience or technical knowledge that they have got. There are other factors in play here — their perception of work, how they interact with their peers and how they approach problems. We discuss these three key factors in detail for each of the seniority levels below.</p>\n<h3 id=\"different-seniority-titles\">Different Seniority Titles</h3>\n<p>Different organizations might have different seniority titles but they mainly fall into three categories:</p>\n<ul>\n<li>Junior Developer</li>\n<li>Mid Level Developer</li>\n<li>Senior Developer</li>\n</ul>\n<h3 id=\"junior-developer\">Junior Developer</h3>\n<p>Junior developers are normally fresh graduates and it’s either they don’t have or they have minimal industry experience. Not only they have weak coding skills but there are also a few other things that give Junior developers away:</p>\n<ul>\n<li>Their main mantra is “making it work” without giving much attention to how the solution is achieved. To them, a working software and good software are equivalent.</li>\n<li>They usually require very specific and structured directions to achieve something. They suffer from tunnel vision, need supervision and continuous guidance to be effective team members.</li>\n<li>Most of the Junior developers just try to live up to the role and, when stuck, they might leave work for a senior developer instead of at least trying to take a stab at something.</li>\n<li>They don’t know about the business side of the company and don’t realize how management/sales/marketing/etc think and they don’t realize how much rework, wasted effort, and end-user aggravation could be saved by getting to know the business domain.</li>\n<li>Over-engineering is a major problem, often leading to fragility and bugs.</li>\n<li>When given a problem, they often try to fix just the current problem a.k.a. fixing the symptoms instead of fixing the root problem.</li>\n<li>You might notice the “<a href=\"https://en.wikipedia.org/wiki/Somebody_else%27s_problem\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Somebody Else’s Problem</a>” behavior from them.</li>\n<li>They don’t know what or how much they don’t know, thanks to the <a href=\"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Dunning–Kruger effect</a>.</li>\n<li>They don’t take initiatives and they might be afraid to work on an unfamiliar codebase.</li>\n<li>They don’t participate in team discussions.</li>\n</ul>\n<p>Being a Junior developer in the team is not necessarily a bad thing; since you are just starting out, you are not expected to be a know-it-all person. However, it is your responsibility to learn, gain experience, not get stuck with the “Junior” title and improve yourself. Here are a few tips for Junior developers to help move up the ladder of seniority:</p>\n<ul>\n<li>All sorts of problems can be solved if you work on them long enough. Do not give up if Stack Overflow or an issue on GitHub doesn’t have an answer. Saying “I am stuck, but I have tried X, Y, and Z. Do you have any pointers?” to your lead is much better than saying “This is beyond me.”</li>\n<li>Read a lot of code, not just code in the projects that you are working on, but reference/framework source code, open-source. Ask your fellow developers, perhaps on Reddit too, about the good open-source examples for the language/tools of your choice.</li>\n<li>Do personal side-projects, share them with people, contribute to the open-source community. Reach out to people for help. You will be surprised how much support you can get from the community. I still remember my first open-source project on GitHub from around 6 years ago which was a small PHP script (a library) that fetched details for a given address from Google’s Geocoding API. The codebase was super messy, it did not have any tests, did not have any linters or sniffers, and it did not have any CI because I didn’t know about any of this at that time. I am not sure how but one kind soul somehow found the project, forked it, refactored it, “modernized” it, added linting, code sniffing, added CI and opened the pull request. This one pull request taught me so many things that I might have never learned that fast on my own because I was still in college, working for a small service-based company and doing just small websites all on my own without knowing what is right and what is not. This one PR on GitHub was my introduction to open-source and I owe everything to that.</li>\n<li>Avoid what is known as <a href=\"https://en.wikipedia.org/wiki/Somebody_else%27s_problem\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">“Somebody Else’s Problem Field”</a> behavior.</li>\n<li>When given a problem to solve, try to identify the root cause and fix that instead of fixing the symptoms. And remember, not being able to reproduce means not solved. It is solved when you understand why it occurred and why it no longer does.</li>\n<li>Have respect for the code that was written before you. Be generous when passing judgment on the architecture or the design decisions made in the codebase. Understand that code is often ugly and weird for a reason other than incompetence. Learning to live with and thrive with legacy code is a great skill. Never assume anybody is stupid. Instead, figure out how these intelligent, well-intentioned and experienced people have come to a decision that is stupid now. Approach inheriting legacy code with an “opportunity mindset” rather than a complaining one.</li>\n<li>It’s okay to not know things. You don’t need to be ashamed of not knowing things already. There are no stupid questions, ask however many questions that would allow you to work effectively.</li>\n<li>Don’t let yourself be limited by the job title that you have. Keep working on your self-improvement.</li>\n<li>Do your homework. Predict what’s coming down the pipe. Be involved in the team discussions. Even if you are wrong, you will learn something.</li>\n<li>Learn about the domain that you are working with. Understand the product end-to-end as an end-user. Do not assume things, ask questions and get things cleared when in doubt.</li>\n<li>Learn to communicate effectively - soft skills matter. Learn how to write good emails, how to present your work, how to phrase your questions in a thoughtful manner.</li>\n<li>Sit with the senior developers, watch them work, find a mentor. No one likes a know-it-all. Get hold of your ego and be humble enough to take lessons from experienced people.</li>\n<li>Don’t just blindly follow the advice of “experts”, take it with a grain of salt.</li>\n<li>If you are asked to provide an estimate for some work, do not give an answer unless you have all the details to make a reasonable estimate. If you are forced to do that, pad it 2x or more depending on how much you don’t know about what needs to be done for the task to be marked ‘done’.</li>\n<li>Take some time to learn how to use a debugger. Debuggers are quite beneficial when navigating new, undocumented or poorly documented codebase, or to debug weird issues.</li>\n<li>Avoid saying “it works on my machine” — yes, I have heard that a lot.</li>\n<li>Try to turn any feelings of inadequacy or imposter syndrome into energy to push yourself forward and increase your skills and knowledge.</li>\n</ul>\n<h3 id=\"mid-level-developers\">Mid Level Developers</h3>\n<p>The next level after the Junior developers is Mid Level developers. They are technically stronger than the Junior developers and can work with minimal supervision. They still have some issues to address in order to jump to Senior level.</p>\n<p>Intermediate developers are more competent than the Junior developer. They start to see the flaws in their old codebase. They gain the knowledge but they get trapped into the next chain i.e. messing things up while trying to do them “the right way” e.g. hasty abstractions, overuse or unnecessary usage of Design Patterns — they may be able to provide solution faster than the Junior developers but the solution might put you into another rabbit-hole in the long run. Without supervision, they might delay the execution while trying to “do things properly”. They don’t know when to make tradeoffs and they still don’t know when to be dogmatic and when to be pragmatic. They can easily become attached to their solution, become myopic, and be unable to take feedback.</p>\n<p>Mid-level developers are quite common. Most of the organizations wrongly label them as “Senior Developers”. However, they need further mentoring in order to become Senior Developers. The next section describes the responsibilities of a senior developer and how you can become one.</p>\n<h3 id=\"senior-developers\">Senior Developers</h3>\n<p>Senior developers are the next level after the Mid-level developers. They are the people who can get things done on their own without any supervision and without creating any issues down the road. They are more mature, have gained experience by delivering both good and bad software in the past and have learned from it — they know how to be pragmatic. Here is the list of things that are normally expected of a Senior Developer:</p>\n<ul>\n<li>With their past experiences, mistakes made, issues faced by over-designed or under-designed software, they can foresee the problems and persuade the direction of the codebase or the architecture.</li>\n<li>They don’t have a “Shiny-Toy” syndrome. They are pragmatic in the execution. They can make the tradeoffs when required, and they know why. They know where to be dogmatic and where to be pragmatic.</li>\n<li>They have a good picture of the field, know what the best tool for the job is in most cases (even if they don’t know the tool). They have the innate ability to pick up a new tool/language/paradigm/etc in order to solve a problem that requires it.</li>\n<li>They are aware they’re on a team. They view it as a part of their responsibility to mentor others. This can range from pair programming with junior devs to taking un-glorious tasks of writing docs or tests or whatever else needs to be done.</li>\n<li>They have a deep understanding of the domain - they know about the business side of the company and realize how management/sales/marketing/etc think and benefit from their knowledge of the business domain during the development.</li>\n<li>They don’t make empty complaints, they make judgments based on the empirical evidence and they have suggestions for solutions.</li>\n<li>They think much more than just code - they know that their job is to provide solutions to the problems and not just to write code.</li>\n<li>They have the ability to take on large ill-defined problems, define them, break them up, and execute the pieces. A senior developer can take something big and abstract, and run with it. They will come up with a few options, discuss them with the team and implement them.</li>\n<li>They have respect for the code that was written before them. They are generous when passing judgment on the architecture or the design decisions made in the codebase. They approach inheriting legacy code with an “opportunity mindset” rather than a complaining one.</li>\n<li>They know how to give feedback without hurting anyone.</li>\n</ul>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>All teams are made up of a mix of all these seniority roles. Being content with your role is a bad thing and you should always strive to improve yourself for the next step. This article is based on my beliefs and observations in the industry. Lots of companies care more for the years of experience to decide the seniority which is a crappy metric — you don’t gain experience just by spending years. You gain it by continuously solving different sorts of problems, irrespective of the number of years you spend in the industry. I have seen fresh graduates having no industry experience get up to speed quickly and producing work of a Senior Engineer and I have seen Senior developers labeled “senior” merely because of their age and “years of experience”.</p>\n<p>The most important traits that you need to have in order to step up in your career are: not settling with mediocrity, having an open mindset, being humble, learning from your mistakes, working on the challenging problems and having an opportunity mindset rather than a complaining one.</p>\n<p>With that said, this post comes to an end. What are your thoughts on the levels of seniority of developers? Feel free to send improvements to this guide. Until next time, stay tuned!</p>";

				const frontmatter$l = {"title":"Levels of Seniority","description":"How to Step Up as a Junior, Mid Level or a Senior Developer?","authorId":"kamran","seo":{"title":"Levels of Seniority - roadmap.sh","description":"How to Step Up as a Junior, Mid Level or a Senior Developer?"},"isNew":false,"type":"textual","date":"2020-12-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$l = "/workspace/src/data/guides/levels-of-seniority.md";
				const url$l = undefined;
				function rawContent$l() {
					return "   \n                            \n                                                                           \n                  \n    \n                                           \n                                                                             \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nI have been working on redoing the [roadmaps](https://roadmap.sh) – splitting the skillset based on the seniority levels to make them easier to follow and not scare the new developers away. Since the roadmaps are going to be just about the technical knowledge, I thought it would be a good idea to reiterate and have an article on what I think of different seniority roles.\n\nI have seen many organizations decide the seniority of developers by giving more significance to the years of experience than they should. I have seen developers labeled \"Junior\" doing the work of Senior Developers and I have seen \"Lead\" developers who weren't even qualified to be called \"Senior\". The seniority of a developer cannot just be decided by their age, years of experience or technical knowledge that they have got. There are other factors in play here -- their perception of work, how they interact with their peers and how they approach problems. We discuss these three key factors in detail for each of the seniority levels below.\n\n### Different Seniority Titles\n\nDifferent organizations might have different seniority titles but they mainly fall into three categories:\n\n- Junior Developer\n- Mid Level Developer\n- Senior Developer\n\n### Junior Developer\n\nJunior developers are normally fresh graduates and it's either they don't have or they have minimal industry experience. Not only they have weak coding skills but there are also a few other things that give Junior developers away:\n\n- Their main mantra is \"making it work\" without giving much attention to how the solution is achieved. To them, a working software and good software are equivalent.\n- They usually require very specific and structured directions to achieve something. They suffer from tunnel vision, need supervision and continuous guidance to be effective team members.\n- Most of the Junior developers just try to live up to the role and, when stuck, they might leave work for a senior developer instead of at least trying to take a stab at something.\n- They don't know about the business side of the company and don't realize how management/sales/marketing/etc think and they don't realize how much rework, wasted effort, and end-user aggravation could be saved by getting to know the business domain.\n- Over-engineering is a major problem, often leading to fragility and bugs.\n- When given a problem, they often try to fix just the current problem a.k.a. fixing the symptoms instead of fixing the root problem.\n- You might notice the \"[Somebody Else's Problem](https://en.wikipedia.org/wiki/Somebody_else%27s_problem)\" behavior from them.\n- They don't know what or how much they don't know, thanks to the [Dunning–Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect).\n- They don't take initiatives and they might be afraid to work on an unfamiliar codebase.\n- They don't participate in team discussions.\n\nBeing a Junior developer in the team is not necessarily a bad thing; since you are just starting out, you are not expected to be a know-it-all person. However, it is your responsibility to learn, gain experience, not get stuck with the \"Junior\" title and improve yourself. Here are a few tips for Junior developers to help move up the ladder of seniority:\n\n- All sorts of problems can be solved if you work on them long enough. Do not give up if Stack Overflow or an issue on GitHub doesn't have an answer. Saying \"I am stuck, but I have tried X, Y, and Z. Do you have any pointers?\" to your lead is much better than saying \"This is beyond me.\"\n- Read a lot of code, not just code in the projects that you are working on, but reference/framework source code, open-source. Ask your fellow developers, perhaps on Reddit too, about the good open-source examples for the language/tools of your choice.\n- Do personal side-projects, share them with people, contribute to the open-source community. Reach out to people for help. You will be surprised how much support you can get from the community. I still remember my first open-source project on GitHub from around 6 years ago which was a small PHP script (a library) that fetched details for a given address from Google's Geocoding API. The codebase was super messy, it did not have any tests, did not have any linters or sniffers, and it did not have any CI because I didn't know about any of this at that time. I am not sure how but one kind soul somehow found the project, forked it, refactored it, \"modernized\" it, added linting, code sniffing, added CI and opened the pull request. This one pull request taught me so many things that I might have never learned that fast on my own because I was still in college, working for a small service-based company and doing just small websites all on my own without knowing what is right and what is not. This one PR on GitHub was my introduction to open-source and I owe everything to that.\n- Avoid what is known as [\"Somebody Else's Problem Field\"](https://en.wikipedia.org/wiki/Somebody_else%27s_problem) behavior.\n- When given a problem to solve, try to identify the root cause and fix that instead of fixing the symptoms. And remember, not being able to reproduce means not solved. It is solved when you understand why it occurred and why it no longer does.\n- Have respect for the code that was written before you. Be generous when passing judgment on the architecture or the design decisions made in the codebase. Understand that code is often ugly and weird for a reason other than incompetence. Learning to live with and thrive with legacy code is a great skill. Never assume anybody is stupid. Instead, figure out how these intelligent, well-intentioned and experienced people have come to a decision that is stupid now. Approach inheriting legacy code with an \"opportunity mindset\" rather than a complaining one.\n- It's okay to not know things. You don't need to be ashamed of not knowing things already. There are no stupid questions, ask however many questions that would allow you to work effectively.\n- Don't let yourself be limited by the job title that you have. Keep working on your self-improvement.\n- Do your homework. Predict what’s coming down the pipe. Be involved in the team discussions. Even if you are wrong, you will learn something.\n- Learn about the domain that you are working with. Understand the product end-to-end as an end-user. Do not assume things, ask questions and get things cleared when in doubt.\n- Learn to communicate effectively - soft skills matter. Learn how to write good emails, how to present your work, how to phrase your questions in a thoughtful manner.\n- Sit with the senior developers, watch them work, find a mentor. No one likes a know-it-all. Get hold of your ego and be humble enough to take lessons from experienced people.\n- Don't just blindly follow the advice of \"experts\", take it with a grain of salt.\n- If you are asked to provide an estimate for some work, do not give an answer unless you have all the details to make a reasonable estimate. If you are forced to do that, pad it 2x or more depending on how much you don't know about what needs to be done for the task to be marked 'done'.\n- Take some time to learn how to use a debugger. Debuggers are quite beneficial when navigating new, undocumented or poorly documented codebase, or to debug weird issues.\n- Avoid saying \"it works on my machine\" -- yes, I have heard that a lot.\n- Try to turn any feelings of inadequacy or imposter syndrome into energy to push yourself forward and increase your skills and knowledge.\n\n### Mid Level Developers\n\nThe next level after the Junior developers is Mid Level developers. They are technically stronger than the Junior developers and can work with minimal supervision. They still have some issues to address in order to jump to Senior level.\n\nIntermediate developers are more competent than the Junior developer. They start to see the flaws in their old codebase. They gain the knowledge but they get trapped into the next chain i.e. messing things up while trying to do them \"the right way\" e.g. hasty abstractions, overuse or unnecessary usage of Design Patterns -- they may be able to provide solution faster than the Junior developers but the solution might put you into another rabbit-hole in the long run. Without supervision, they might delay the execution while trying to \"do things properly\". They don't know when to make tradeoffs and they still don't know when to be dogmatic and when to be pragmatic. They can easily become attached to their solution, become myopic, and be unable to take feedback.\n\nMid-level developers are quite common. Most of the organizations wrongly label them as \"Senior Developers\". However, they need further mentoring in order to become Senior Developers. The next section describes the responsibilities of a senior developer and how you can become one.\n\n### Senior Developers\n\nSenior developers are the next level after the Mid-level developers. They are the people who can get things done on their own without any supervision and without creating any issues down the road. They are more mature, have gained experience by delivering both good and bad software in the past and have learned from it — they know how to be pragmatic. Here is the list of things that are normally expected of a Senior Developer:\n\n- With their past experiences, mistakes made, issues faced by over-designed or under-designed software, they can foresee the problems and persuade the direction of the codebase or the architecture.\n- They don't have a \"Shiny-Toy\" syndrome. They are pragmatic in the execution. They can make the tradeoffs when required, and they know why. They know where to be dogmatic and where to be pragmatic.\n- They have a good picture of the field, know what the best tool for the job is in most cases (even if they don't know the tool). They have the innate ability to pick up a new tool/language/paradigm/etc in order to solve a problem that requires it.\n- They are aware they're on a team. They view it as a part of their responsibility to mentor others. This can range from pair programming with junior devs to taking un-glorious tasks of writing docs or tests or whatever else needs to be done.\n- They have a deep understanding of the domain - they know about the business side of the company and realize how management/sales/marketing/etc think and benefit from their knowledge of the business domain during the development.\n- They don't make empty complaints, they make judgments based on the empirical evidence and they have suggestions for solutions.\n- They think much more than just code - they know that their job is to provide solutions to the problems and not just to write code.\n- They have the ability to take on large ill-defined problems, define them, break them up, and execute the pieces. A senior developer can take something big and abstract, and run with it. They will come up with a few options, discuss them with the team and implement them.\n- They have respect for the code that was written before them. They are generous when passing judgment on the architecture or the design decisions made in the codebase. They approach inheriting legacy code with an \"opportunity mindset\" rather than a complaining one.\n- They know how to give feedback without hurting anyone.\n\n### Conclusion\n\nAll teams are made up of a mix of all these seniority roles. Being content with your role is a bad thing and you should always strive to improve yourself for the next step. This article is based on my beliefs and observations in the industry. Lots of companies care more for the years of experience to decide the seniority which is a crappy metric -- you don't gain experience just by spending years. You gain it by continuously solving different sorts of problems, irrespective of the number of years you spend in the industry. I have seen fresh graduates having no industry experience get up to speed quickly and producing work of a Senior Engineer and I have seen Senior developers labeled \"senior\" merely because of their age and \"years of experience\".\n\nThe most important traits that you need to have in order to step up in your career are: not settling with mediocrity, having an open mindset, being humble, learning from your mistakes, working on the challenging problems and having an opportunity mindset rather than a complaining one.\n\nWith that said, this post comes to an end. What are your thoughts on the levels of seniority of developers? Feel free to send improvements to this guide. Until next time, stay tuned!\n";
				}
				async function compiledContent$l() {
					return await html$l();
				}
				function getHeadings$l() {
					return [{"depth":3,"slug":"different-seniority-titles","text":"Different Seniority Titles"},{"depth":3,"slug":"junior-developer","text":"Junior Developer"},{"depth":3,"slug":"mid-level-developers","text":"Mid Level Developers"},{"depth":3,"slug":"senior-developers","text":"Senior Developers"},{"depth":3,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$l = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$l;
					content.file = file$l;
					content.url = url$l;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$l())}`;
				});

const __vite_glob_0_77 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$l,
	compiledContent: compiledContent$l,
	default: Content$l,
	file: file$l,
	frontmatter: frontmatter$l,
	getHeadings: getHeadings$l,
	rawContent: rawContent$l,
	url: url$l
}, Symbol.toStringTag, { value: 'Module' }));

const html$k = () => "<p><a href=\"/guides/oauth.png\"><img src=\"/guides/oauth.png\" alt=\"OAuth - Open Authorization\"></a></p>";

				const frontmatter$k = {"title":"OAuth — Open Authorization","description":"Learn and understand what is OAuth and how it works","authorId":"kamran","seo":{"title":"OAuth — Open Authorization - roadmap.sh","description":"Learn and understand what is OAuth and how it works"},"isNew":false,"type":"visual","date":"2021-06-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$k = "/workspace/src/data/guides/oauth.md";
				const url$k = undefined;
				function rawContent$k() {
					return "   \n                                   \n                                                                  \n                  \n    \n                                                  \n                                                                    \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![OAuth - Open Authorization](/guides/oauth.png)](/guides/oauth.png)\n";
				}
				async function compiledContent$k() {
					return await html$k();
				}
				function getHeadings$k() {
					return [];
				}

				const Content$k = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$k;
					content.file = file$k;
					content.url = url$k;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$k())}`;
				});

const __vite_glob_0_78 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$k,
	compiledContent: compiledContent$k,
	default: Content$k,
	file: file$k,
	frontmatter: frontmatter$k,
	getHeadings: getHeadings$k,
	rawContent: rawContent$k,
	url: url$k
}, Symbol.toStringTag, { value: 'Module' }));

const html$j = () => "<p>The Internet has connected people across the world using social media and audio/video calling features along with providing an overabundance of knowledge and tools. All this comes with an inherent danger of security and privacy breaches. In this guide, we will talk about <strong>proxies</strong> that play a vital role in mitigating these risks. We will cover the following topics in this guide:</p>\n<ul>\n<li><a href=\"#proxy-server\">Proxy Server</a></li>\n<li><a href=\"#forward-proxy-server\">Forward Proxy Server</a></li>\n<li><a href=\"#reverse-proxy-server\">Reverse Proxy Server</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n</ul>\n<h2 id=\"proxy-server\">Proxy Server</h2>\n<p><strong><em>Every web request which is sent from the client to a web server goes through some type of proxy server.</em></strong> A proxy server acts as a gateway between client <em>(you)</em> and the internet and separates end-users from the websites you browse. It replaces the source IP address of the web request with the proxy server’s IP address and then forwards it to the web server. The web server is unaware of the client, it only sees the proxy server.</p>\n<p><img src=\"/guides/proxy/proxy-example.png\" alt=\"Proxy Server Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration.</p>\n</blockquote>\n<p>Proxy servers serve as a single point of control making it easier to enforce security policies. It also provides caching mechanism which stores the requested web pages on the proxy server to improve performance. If the requested web-page is available in cache memory then instead of forwarding the request to the web-server it will send the cached webpage back to the client. This <strong>saves big companies thousands of dollars</strong> by reducing the load on their servers as their website is visited by millions of users every day.</p>\n<h2 id=\"forward-proxy-server\">Forward Proxy Server</h2>\n<p>A forward proxy is generally implemented on the client side and <strong>sits in front of multiple clients</strong> or client sources. Forward proxy servers are mainly used by companies to <strong>manage the internet usage</strong> of their employees and <strong>restrict content</strong>. It is also used as a <strong>firewall</strong> to secure the company’s network by blocking any request which would pose threat to the company’s network. Proxy servers are also used to <strong>bypass geo-restriction</strong> and browse content that might be blocked in the user’s country. It enables users to <strong>browse anonymously</strong>, as the proxy server masks their details from the website’s servers.</p>\n<p><img src=\"/guides/proxy/forward-proxy.png\" alt=\"Forward Proxy Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration</p>\n</blockquote>\n<h2 id=\"reverse-proxy-server\">Reverse Proxy Server</h2>\n<p>Reverse proxy servers are implemented on the <strong>server side</strong> instead of the client side. It <strong>sits in front of multiple webservers</strong> and manages incoming requests by forwarding them to the web servers. It provides anonymity for the <strong>back-end web servers and not the client</strong>. Reverse proxy servers are generally used to perform tasks such as <strong>authentication, content caching, and encryption/decryption</strong> on behalf of the web server. These tasks would <strong>hog CPU cycles</strong> on the web server and degrade the performance of the website by introducing a high amount of delay in loading the webpage. Reverse proxies are also used as <strong>load balancers</strong> to distribute the incoming traffic efficiently among the web servers but it is <strong>not optimized</strong> for this task. In essence, a reverse proxy server is a gateway to a web-server or group of web-servers.</p>\n<p><img src=\"/guides/proxy/reverse-proxy.png\" alt=\"Reverse Proxy Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration. Red lines represent the server’s response and black lines represent the initial request from client(s).</p>\n</blockquote>\n<h2 id=\"summary\">Summary</h2>\n<p>A proxy server acts as a gateway between client <em>(you)</em> and the internet and separates end-users from the websites you browse. <strong><em>The position of the proxy server on the network determines whether it is a forward or a reverse proxy server</em></strong>. A Forward proxy is implemented on the client side and <strong>sits in front of multiple clients</strong> or client sources and forwards requests to the web server. Reverse proxy servers are implemented on the <strong>server side</strong> it <strong>sits in front of multiple webservers</strong> and manage the incoming requests by forwarding them to the web servers.</p>\n<p>If all this was too much to take in, I have a simple analogy for you.</p>\n<p>At a restaurant, the waiter/waitress takes your order and gives it to the kitchen head chef. The head chef then calls out the order and assigns tasks to everyone in the kitchen.</p>\n<p>In this analogy:</p>\n<ul>\n<li>You are the client</li>\n<li>Your order is the web request</li>\n<li>Waiter/Waitress is your forward proxy server</li>\n<li>Kitchen head chef is the reverse proxy server</li>\n<li>Other chefs working in the kitchen are the web servers</li>\n</ul>\n<p>With that said our guide comes to an end. Thank you for reading and feel free to submit any updates to the guide using the links below.</p>";

				const frontmatter$j = {"title":"Proxy Servers","description":"How do proxy servers work and what are forward and reverse proxies?","authorId":"ebrahim-bharmal","seo":{"title":"Proxy Servers - roadmap.sh","description":"How do proxy servers work and what are forward and reverse proxies?"},"isNew":false,"type":"textual","date":"2017-10-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$j = "/workspace/src/data/guides/proxy-servers.md";
				const url$j = undefined;
				function rawContent$j() {
					return "   \n                      \n                                                                                  \n                           \n    \n                                     \n                                                                                    \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nThe Internet has connected people across the world using social media and audio/video calling features along with providing an overabundance of knowledge and tools. All this comes with an inherent danger of security and privacy breaches. In this guide, we will talk about **proxies** that play a vital role in mitigating these risks. We will cover the following topics in this guide:\n\n- [Proxy Server](#proxy-server)\n- [Forward Proxy Server](#forward-proxy-server)\n- [Reverse Proxy Server](#reverse-proxy-server)\n- [Summary](#summary)\n\n## Proxy Server\n\n**_Every web request which is sent from the client to a web server goes through some type of proxy server._** A proxy server acts as a gateway between client _(you)_ and the internet and separates end-users from the websites you browse. It replaces the source IP address of the web request with the proxy server's IP address and then forwards it to the web server. The web server is unaware of the client, it only sees the proxy server.\n\n![Proxy Server Description](/guides/proxy/proxy-example.png)\n\n> NOTE: This is not an accurate description but rather just an illustration.\n\nProxy servers serve as a single point of control making it easier to enforce security policies. It also provides caching mechanism which stores the requested web pages on the proxy server to improve performance. If the requested web-page is available in cache memory then instead of forwarding the request to the web-server it will send the cached webpage back to the client. This **saves big companies thousands of dollars** by reducing the load on their servers as their website is visited by millions of users every day.\n\n## Forward Proxy Server\n\nA forward proxy is generally implemented on the client side and **sits in front of multiple clients** or client sources. Forward proxy servers are mainly used by companies to **manage the internet usage** of their employees and **restrict content**. It is also used as a **firewall** to secure the company's network by blocking any request which would pose threat to the company's network. Proxy servers are also used to **bypass geo-restriction** and browse content that might be blocked in the user's country. It enables users to **browse anonymously**, as the proxy server masks their details from the website's servers.\n\n![Forward Proxy Description](/guides/proxy/forward-proxy.png)\n\n> NOTE: This is not an accurate description but rather just an illustration\n\n## Reverse Proxy Server\n\nReverse proxy servers are implemented on the **server side** instead of the client side. It **sits in front of multiple webservers** and manages incoming requests by forwarding them to the web servers. It provides anonymity for the **back-end web servers and not the client**. Reverse proxy servers are generally used to perform tasks such as **authentication, content caching, and encryption/decryption** on behalf of the web server. These tasks would **hog CPU cycles** on the web server and degrade the performance of the website by introducing a high amount of delay in loading the webpage. Reverse proxies are also used as **load balancers** to distribute the incoming traffic efficiently among the web servers but it is **not optimized** for this task. In essence, a reverse proxy server is a gateway to a web-server or group of web-servers.\n\n![Reverse Proxy Description](/guides/proxy/reverse-proxy.png)\n\n> NOTE: This is not an accurate description but rather just an illustration. Red lines represent the server's response and black lines represent the initial request from client(s).\n\n## Summary\n\nA proxy server acts as a gateway between client _(you)_ and the internet and separates end-users from the websites you browse. **_The position of the proxy server on the network determines whether it is a forward or a reverse proxy server_**. A Forward proxy is implemented on the client side and **sits in front of multiple clients** or client sources and forwards requests to the web server. Reverse proxy servers are implemented on the **server side** it **sits in front of multiple webservers** and manage the incoming requests by forwarding them to the web servers.\n\nIf all this was too much to take in, I have a simple analogy for you.\n\nAt a restaurant, the waiter/waitress takes your order and gives it to the kitchen head chef. The head chef then calls out the order and assigns tasks to everyone in the kitchen.\n\nIn this analogy:\n\n- You are the client\n- Your order is the web request\n- Waiter/Waitress is your forward proxy server\n- Kitchen head chef is the reverse proxy server\n- Other chefs working in the kitchen are the web servers\n\nWith that said our guide comes to an end. Thank you for reading and feel free to submit any updates to the guide using the links below.\n";
				}
				async function compiledContent$j() {
					return await html$j();
				}
				function getHeadings$j() {
					return [{"depth":2,"slug":"proxy-server","text":"Proxy Server"},{"depth":2,"slug":"forward-proxy-server","text":"Forward Proxy Server"},{"depth":2,"slug":"reverse-proxy-server","text":"Reverse Proxy Server"},{"depth":2,"slug":"summary","text":"Summary"}];
				}

				const Content$j = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$j;
					content.file = file$j;
					content.url = url$j;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$j())}`;
				});

const __vite_glob_0_79 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$j,
	compiledContent: compiledContent$j,
	default: Content$j,
	file: file$j,
	frontmatter: frontmatter$j,
	getHeadings: getHeadings$j,
	rawContent: rawContent$j,
	url: url$j
}, Symbol.toStringTag, { value: 'Module' }));

const html$i = () => "<p>Random numbers are everywhere from computer games to lottery systems, graphics software, statistical sampling, computer simulation and cryptography. Graphic below is a quick explanation to how the random numbers are generated and why they may not be truly random.</p>\n<p><a href=\"/guides/random-numbers.png\"><img src=\"/guides/random-numbers.png\" alt=\"Random Numbers\"></a></p>";

				const frontmatter$i = {"title":"Random Numbers: Are they?","description":"Learn how they are generated and why they may not be truly random.","authorId":"kamran","seo":{"title":"Random Numbers: Are they? - roadmap.sh","description":"Learn how they are generated and why they may not be truly random."},"isNew":false,"type":"visual","date":"2021-03-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$i = "/workspace/src/data/guides/random-numbers.md";
				const url$i = undefined;
				function rawContent$i() {
					return "   \n                                  \n                                                                                 \n                  \n    \n                                                 \n                                                                                   \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nRandom numbers are everywhere from computer games to lottery systems, graphics software, statistical sampling, computer simulation and cryptography. Graphic below is a quick explanation to how the random numbers are generated and why they may not be truly random.\n\n[![Random Numbers](/guides/random-numbers.png)](/guides/random-numbers.png)\n";
				}
				async function compiledContent$i() {
					return await html$i();
				}
				function getHeadings$i() {
					return [];
				}

				const Content$i = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$i;
					content.file = file$i;
					content.url = url$i;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$i())}`;
				});

const __vite_glob_0_80 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$i,
	compiledContent: compiledContent$i,
	default: Content$i,
	file: file$i,
	frontmatter: frontmatter$i,
	getHeadings: getHeadings$i,
	rawContent: rawContent$i,
	url: url$i
}, Symbol.toStringTag, { value: 'Module' }));

const html$h = () => "<p>The chart below aims to give you a really basic understanding of how the capability of a DBMS is increased to handle a growing amount of load.</p>\n<p><a href=\"/guides/scaling-databases.svg\"><img src=\"/guides/scaling-databases.svg\" alt=\"Scaling Databases\"></a></p>";

				const frontmatter$h = {"title":"Scaling Databases","description":"Learn the ups and downs of different database scaling strategies","authorId":"kamran","seo":{"title":"Scaling Databases - roadmap.sh","description":"Learn the ups and downs of different database scaling strategies"},"isNew":false,"type":"visual","date":"2021-02-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$h = "/workspace/src/data/guides/scaling-databases.md";
				const url$h = undefined;
				function rawContent$h() {
					return "   \n                          \n                                                                               \n                  \n    \n                                         \n                                                                                 \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\nThe chart below aims to give you a really basic understanding of how the capability of a DBMS is increased to handle a growing amount of load.\n\n[![Scaling Databases](/guides/scaling-databases.svg)](/guides/scaling-databases.svg)\n";
				}
				async function compiledContent$h() {
					return await html$h();
				}
				function getHeadings$h() {
					return [];
				}

				const Content$h = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$h;
					content.file = file$h;
					content.url = url$h;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$h())}`;
				});

const __vite_glob_0_81 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$h,
	compiledContent: compiledContent$h,
	default: Content$h,
	file: file$h,
	frontmatter: frontmatter$h,
	getHeadings: getHeadings$h,
	rawContent: rawContent$h,
	url: url$h
}, Symbol.toStringTag, { value: 'Module' }));

const html$g = () => "<p><a href=\"/guides/session-authentication.png\"><img src=\"/guides/session-authentication.png\" alt=\"Session Authentication\"></a></p>";

				const frontmatter$g = {"title":"Session Based Authentication","description":"Understand what is session based authentication and how it is implemented","authorId":"kamran","seo":{"title":"Session Based Authentication - roadmap.sh","description":"Understand what is session based authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-05-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$g = "/workspace/src/data/guides/session-authentication.md";
				const url$g = undefined;
				function rawContent$g() {
					return "   \n                                     \n                                                                                        \n                  \n    \n                                                    \n                                                                                          \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Session Authentication](/guides/session-authentication.png)](/guides/session-authentication.png)\n";
				}
				async function compiledContent$g() {
					return await html$g();
				}
				function getHeadings$g() {
					return [];
				}

				const Content$g = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$g;
					content.file = file$g;
					content.url = url$g;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$g())}`;
				});

const __vite_glob_0_82 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$g,
	compiledContent: compiledContent$g,
	default: Content$g,
	file: file$g,
	frontmatter: frontmatter$g,
	getHeadings: getHeadings$g,
	rawContent: rawContent$g,
	url: url$g
}, Symbol.toStringTag, { value: 'Module' }));

const html$f = () => "<p>HTTP is the internet protocol that standardizes how clients and servers interact with each other. When you open a website, among other things, HTTP is the protocol that helps load the website in the browser.</p>\n<h2 id=\"http-is-stateless\">HTTP is Stateless</h2>\n<p>HTTP is a stateless protocol which means that each request made from the client to the server is treated as a standalone request; neither the client nor the server keeps track of the subsequent requests. Sessions allow you to change that; with sessions, the server has a way to associate some information with the client so that when the same client requests the server, it can retrieve that information.</p>\n<p>In this guide, we will learn what is Session-Based Authentication and how to implement it in Node.js. We also have a separate <a href=\"/guides/session-authentication\">visual guide on Session-Based Authentication</a> as well that explains the topic visually.</p>\n<h2 id=\"what-is-session-based-authentication\">What is Session-Based Authentication?</h2>\n<p>Session-based authentication is a stateful authentication technique where we use sessions to keep track of the authenticated user. Here is how Session Based Authentication works:</p>\n<ul>\n<li>User submits the login request for authentication.</li>\n<li>Server validates the credentials. If the credentials are valid, the server initiates a session and stores some information about the client. This information can be stored in memory, file system, or database. The server also generates a unique identifier that it can later use to retrieve this session information from the storage. Server sends this unique session identifier to the client.</li>\n<li>Client saves the session id in a cookie and this cookie is sent to the server in each request made after the authentication.</li>\n<li>Server, upon receiving a request, checks if the session id is present in the request and uses this session id to get information about the client.</li>\n</ul>\n<p>And that is how session-based authentication works.</p>\n<h2 id=\"session-based-authentication-in-nodejs\">Session-Based Authentication in Node.js</h2>\n<p>Now that we know what session-based authentication is, let’s see how we can implement session-based authentication in Node.js.</p>\n<p>Please note that, for the sake of simplicity, I have intentionally kept the project strictly relevant to the Session Based Authentication and have left out a lot of details that a production-ready application may require. Also, if you don’t want to follow along, project <a href=\"https://github.com/kamranahmedse/node-session-auth-example\" target=\"_blank\">codebase can be found on GitHub</a>.</p>\n<p>First things first, create an empty directory that will be holding our application.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">mkdir</span><span style=\"color:#F1FA8C\"> session-auth-example</span></span></code></pre>\n<p>Now run the following command to setup a sample <code>package.json</code> file:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> init</span><span style=\"color:#BD93F9\"> -y</span></span></code></pre>\n<p>Next, we need to install the dependencies:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> express</span><span style=\"color:#F1FA8C\"> express-session</span></span></code></pre>\n<p><code>Express</code> is the application framework, and <code>express-session</code> is the package that helps work with sessions easily.</p>\n<h3 id=\"setting-up-the-server\">Setting up the server</h3>\n<p>Now create an <code>index.js</code> file at the root of the project with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> express </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> sessions </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express-session</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> app </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> express</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  sessions</span><span style=\"color:#F8F8F2\">({</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    secret</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">some secret</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    cookie</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">      maxAge</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> 1000</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 60</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 60</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 24</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#6272A4\">// 24 hours</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    },</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    resave</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    saveUninitialized</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  })</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(express.</span><span style=\"color:#50FA7B\">json</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(express.</span><span style=\"color:#50FA7B\">urlencoded</span><span style=\"color:#F8F8F2\">({ extended</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// @todo register routes</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">listen</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">3000</span><span style=\"color:#F8F8F2\">, () </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`Server Running at port 3000`</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span></code></pre>\n<p>The important piece to note here is the <code>express-session</code> middleware registration which automatically handles the session initialization, cookie parsing and session data retrieval, and so on. In our example here, we are passing the following configuration options:</p>\n<ul>\n<li><code>secret</code>: This is used to sign the session ID cookie. Using a secret that cannot be guessed will reduce the ability to hijack a session.</li>\n<li><code>cookie</code>: Object containing the configuration for session id cookie.</li>\n<li><code>resave</code>: Forces the session to be saved back to the session store, even if the session data was never modified during the request.</li>\n<li><code>saveUninitialized</code>: Forces an “uninitialized” session to be saved to the store, i.e., saves a session to the store even if the session was not initiated.</li>\n</ul>\n<p>Another important option is <code>store</code> which we can configure to change how/where the session data is stored on the server. By default, this data is stored in the memory, i.e., <code>MemoryStore</code>.</p>\n<p>Look at the <a href=\"https://github.com/expressjs/session\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">express-session documentation</a> to learn more about the available options.</p>\n<h3 id=\"creating-handlers\">Creating Handlers</h3>\n<p>Create a directory called the <code>handlers</code> at the project’s root. This is the directory where we will be placing all the route-handling functions.</p>\n<p>Now let’s create the homepage route, which will show the welcome message and a link to log out for the logged-in users and redirect to the login screen for the logged-out users. Create a file at <code>handlers/home.js</code> with the following content.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> HomeHandler</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">!</span><span style=\"color:#F8F8F2\">req.session.userid) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">setHeader</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Content-Type</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">text/HTML</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;h1>Welcome back </span><span style=\"color:#FF79C6\">${</span><span style=\"color:#F8F8F2\">req.session.userid</span><span style=\"color:#FF79C6\">}</span><span style=\"color:#F1FA8C\">&#x3C;/h1></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;a href=\"/logout\">Logout&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  `</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">end</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span></code></pre>\n<p>At the top of this function, you will notice the check <code>req.session.userid</code>. <code>req.session</code> is automatically populated using the session cookie by the <code>express-session</code> middleware that we registered earlier. <code>req.session.userid</code> is one of the data fields that we will set to store the <code>userid</code> of the logged in user.</p>\n<p>Next, we need to register this handler with a route. Open the <code>index.js</code> file at the root of the project and register the following route:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> HomeHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/home.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, HomeHandler);</span></span></code></pre>\n<p>Next, we have the login page, redirecting the user to the home screen if the user is logged in or showing the login form. Create a file at <code>handlers/login.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> LoginHandler</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (req.session.userid) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">setHeader</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Content-Type</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">text/HTML</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;h1>Login&#x3C;/h1></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;form method=\"post\" action=\"/process-login\"></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;input type=\"text\" name=\"username\" placeholder=\"Username\" /> &#x3C;br></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;input type=\"password\" name=\"password\" placeholder=\"Password\" /> &#x3C;br></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;button type=\"submit\">Login&#x3C;/button></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;/form></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  `</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">end</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span></code></pre>\n<p>Again, at the top of the function, we are simply checking if we have <code>userid</code> in the session (which means the user is logged in). If the user is logged in, we redirect them to the homepage; if not, we show the login screen. In the login form, we have the method of <code>post</code>, and we submit the form to <code>/process-login</code>. Please note that, for the sake of simplicity, we have a simple HTML string returned in the response, but in a real-world application, you will probably have a separate view file.</p>\n<p>Let’s first register this page and then implement <code>/process-login</code> endpoint. Open the <code>index.js</code> file from the root of the project and register the following route:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> LoginHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/login.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, LoginHandler);</span></span></code></pre>\n<p>Next, we have to implement the functionality to process the login form submissions. Create a file at <code>handlers/process-login.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> processLogin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (req.body.username </span><span style=\"color:#FF79C6\">!==</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> req.body.password </span><span style=\"color:#FF79C6\">!==</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Invalid username or password</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  req.session.userid </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> req.body.username;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>As you can see, we are simply checking that the username and password should both be <code>admin</code> and <code>admin</code> for a user to authenticate successfully. Upon finding valid credentials, we set the <code>userid</code> in the session by updating <code>req.session.userid</code>. Similarly, you can set any data in the session. For example, if we wanted to store the user role, we would do the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">req.session.role </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<p>And later access this value out of the session anywhere in the subsequent requests.</p>\n<p>Register this route in the <code>index.js</code> file at the root of the project:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> ProcessLoginHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/process-login.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">post</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/process-login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, ProcessLoginHandler);</span></span></code></pre>\n<p>Finally, we have the logout functionality. Create a file at <code>handlers/logout.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> Logout</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  req.session.</span><span style=\"color:#50FA7B\">destroy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span></code></pre>\n<p>We reset the session by calling <code>req.session.destroy()</code> and then redirecting the user to the homepage. Register the logout handler in the <code>index.js</code> file using the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> LogoutHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/logout.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/logout</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, LogoutHandler);</span></span></code></pre>\n<h2 id=\"running-the-application\">Running the Application</h2>\n<p>Open the <code>package.json</code> file and register the <code>start</code> script as follows:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">scripts</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: {</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">  \"</span><span style=\"color:#F1FA8C\">start</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">node index.js</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">},</span></span></code></pre>\n<p>Now you can start the application by running the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#F1FA8C\"> start</span></span></code></pre>\n<p>Now, if you open up your browser and visit the project at <code>http://localhost:3000</code> you will be able to see the Session-Based Authentication in action.</p>";

				const frontmatter$f = {"title":"Session Based Authentication","description":"Learn what is Session Based Authentication and how to implement it in Node.js","authorId":"kamran","seo":{"title":"Session Based Authentication - roadmap.sh","description":"Learn what is Session Based Authentication and how to implement it in Node.js"},"isNew":false,"type":"textual","date":"2022-11-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$f = "/workspace/src/data/guides/session-based-authentication.md";
				const url$f = undefined;
				function rawContent$f() {
					return "   \n                                     \n                                                                                            \n                  \n    \n                                                    \n                                                                                              \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nHTTP is the internet protocol that standardizes how clients and servers interact with each other. When you open a website, among other things, HTTP is the protocol that helps load the website in the browser.\n\n## HTTP is Stateless\n\nHTTP is a stateless protocol which means that each request made from the client to the server is treated as a standalone request; neither the client nor the server keeps track of the subsequent requests. Sessions allow you to change that; with sessions, the server has a way to associate some information with the client so that when the same client requests the server, it can retrieve that information.\n\nIn this guide, we will learn what is Session-Based Authentication and how to implement it in Node.js. We also have a separate [visual guide on Session-Based Authentication](/guides/session-authentication) as well that explains the topic visually.\n\n## What is Session-Based Authentication?\n\nSession-based authentication is a stateful authentication technique where we use sessions to keep track of the authenticated user. Here is how Session Based Authentication works:\n\n- User submits the login request for authentication.\n- Server validates the credentials. If the credentials are valid, the server initiates a session and stores some information about the client. This information can be stored in memory, file system, or database. The server also generates a unique identifier that it can later use to retrieve this session information from the storage. Server sends this unique session identifier to the client.\n- Client saves the session id in a cookie and this cookie is sent to the server in each request made after the authentication.\n- Server, upon receiving a request, checks if the session id is present in the request and uses this session id to get information about the client.\n\nAnd that is how session-based authentication works.\n\n## Session-Based Authentication in Node.js\n\nNow that we know what session-based authentication is, let's see how we can implement session-based authentication in Node.js.\n\nPlease note that, for the sake of simplicity, I have intentionally kept the project strictly relevant to the Session Based Authentication and have left out a lot of details that a production-ready application may require. Also, if you don't want to follow along, project [codebase can be found on GitHub](https://github.com/kamranahmedse/node-session-auth-example).\n\nFirst things first, create an empty directory that will be holding our application.\n\n```shell\nmkdir session-auth-example\n```\n\nNow run the following command to setup a sample `package.json` file:\n\n```shell\nnpm init -y\n```\n\nNext, we need to install the dependencies:\n\n```shell\nnpm install express express-session\n```\n\n`Express` is the application framework, and `express-session` is the package that helps work with sessions easily.\n\n### Setting up the server\n\nNow create an `index.js` file at the root of the project with the following content:\n\n```javascript\nconst express = require('express');\nconst sessions = require('express-session');\n\nconst app = express();\n\napp.use(\n  sessions({\n    secret: 'some secret',\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24, // 24 hours\n    },\n    resave: true,\n    saveUninitialized: false,\n  })\n);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// @todo register routes\n\napp.listen(3000, () => {\n  console.log(`Server Running at port 3000`);\n});\n```\n\nThe important piece to note here is the `express-session` middleware registration which automatically handles the session initialization, cookie parsing and session data retrieval, and so on. In our example here, we are passing the following configuration options:\n\n- `secret`: This is used to sign the session ID cookie. Using a secret that cannot be guessed will reduce the ability to hijack a session.\n- `cookie`: Object containing the configuration for session id cookie.\n- `resave`: Forces the session to be saved back to the session store, even if the session data was never modified during the request.\n- `saveUninitialized`: Forces an \"uninitialized\" session to be saved to the store, i.e., saves a session to the store even if the session was not initiated.\n\nAnother important option is `store` which we can configure to change how/where the session data is stored on the server. By default, this data is stored in the memory, i.e., `MemoryStore`.\n\nLook at the [express-session documentation](https://github.com/expressjs/session) to learn more about the available options.\n\n### Creating Handlers\n\nCreate a directory called the `handlers` at the project's root. This is the directory where we will be placing all the route-handling functions.\n\nNow let's create the homepage route, which will show the welcome message and a link to log out for the logged-in users and redirect to the login screen for the logged-out users. Create a file at `handlers/home.js` with the following content.\n\n```javascript\nmodule.exports = function HomeHandler(req, res) {\n  if (!req.session.userid) {\n    return res.redirect('/login');\n  }\n\n  res.setHeader('Content-Type', 'text/HTML');\n  res.write(`\n    <h1>Welcome back ${req.session.userid}</h1>\n    <a href=\"/logout\">Logout</a>\n  `);\n\n  res.end();\n};\n```\n\nAt the top of this function, you will notice the check `req.session.userid`. `req.session` is automatically populated using the session cookie by the `express-session` middleware that we registered earlier. `req.session.userid` is one of the data fields that we will set to store the `userid` of the logged in user.\n\nNext, we need to register this handler with a route. Open the `index.js` file at the root of the project and register the following route:\n\n```javascript\nconst HomeHandler = require('./handlers/home.js');\n\napp.get('/', HomeHandler);\n```\n\nNext, we have the login page, redirecting the user to the home screen if the user is logged in or showing the login form. Create a file at `handlers/login.js` with the following content:\n\n```javascript\nmodule.exports = function LoginHandler(req, res) {\n  if (req.session.userid) {\n    return res.redirect('/');\n  }\n\n  res.setHeader('Content-Type', 'text/HTML');\n  res.write(`\n    <h1>Login</h1>\n    <form method=\"post\" action=\"/process-login\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\" /> <br>\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" /> <br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n\n  res.end();\n};\n```\n\nAgain, at the top of the function, we are simply checking if we have `userid` in the session (which means the user is logged in). If the user is logged in, we redirect them to the homepage; if not, we show the login screen. In the login form, we have the method of `post`, and we submit the form to `/process-login`. Please note that, for the sake of simplicity, we have a simple HTML string returned in the response, but in a real-world application, you will probably have a separate view file.\n\nLet's first register this page and then implement `/process-login` endpoint. Open the `index.js` file from the root of the project and register the following route:\n\n```javascript\nconst LoginHandler = require('./handlers/login.js');\n\napp.get('/login', LoginHandler);\n```\n\nNext, we have to implement the functionality to process the login form submissions. Create a file at `handlers/process-login.js` with the following content:\n\n```javascript\nmodule.exports = function processLogin(req, res) {\n  if (req.body.username !== 'admin' || req.body.password !== 'admin') {\n    return res.send('Invalid username or password');\n  }\n\n  req.session.userid = req.body.username;\n\n  res.redirect('/');\n}\n```\n\nAs you can see, we are simply checking that the username and password should both be `admin` and `admin` for a user to authenticate successfully. Upon finding valid credentials, we set the `userid` in the session by updating `req.session.userid`. Similarly, you can set any data in the session. For example, if we wanted to store the user role, we would do the following:\n\n```javascript\nreq.session.role = 'admin';\n```\n\nAnd later access this value out of the session anywhere in the subsequent requests.\n\nRegister this route in the `index.js` file at the root of the project:\n\n```javascript\nconst ProcessLoginHandler = require('./handlers/process-login.js');\n\napp.post('/process-login', ProcessLoginHandler);\n```\n\nFinally, we have the logout functionality. Create a file at `handlers/logout.js` with the following content:\n\n```javascript\nmodule.exports = function Logout(req, res) {\n  req.session.destroy();\n  res.redirect('/');\n};\n```\n\nWe reset the session by calling `req.session.destroy()` and then redirecting the user to the homepage. Register the logout handler in the `index.js` file using the following:\n\n```javascript\nconst LogoutHandler = require('./handlers/logout.js');\n\napp.get('/logout', LogoutHandler);\n```\n\n## Running the Application\n\nOpen the `package.json` file and register the `start` script as follows:\n\n```javascript\n\"scripts\": {\n  \"start\": \"node index.js\"\n},\n```\n\nNow you can start the application by running the following command:\n\n```shell\nnpm run start\n```\n\nNow, if you open up your browser and visit the project at `http://localhost:3000` you will be able to see the Session-Based Authentication in action.\n";
				}
				async function compiledContent$f() {
					return await html$f();
				}
				function getHeadings$f() {
					return [{"depth":2,"slug":"http-is-stateless","text":"HTTP is Stateless"},{"depth":2,"slug":"what-is-session-based-authentication","text":"What is Session-Based Authentication?"},{"depth":2,"slug":"session-based-authentication-in-nodejs","text":"Session-Based Authentication in Node.js"},{"depth":3,"slug":"setting-up-the-server","text":"Setting up the server"},{"depth":3,"slug":"creating-handlers","text":"Creating Handlers"},{"depth":2,"slug":"running-the-application","text":"Running the Application"}];
				}

				const Content$f = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$f;
					content.file = file$f;
					content.url = url$f;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$f())}`;
				});

const __vite_glob_0_83 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$f,
	compiledContent: compiledContent$f,
	default: Content$f,
	file: file$f,
	frontmatter: frontmatter$f,
	getHeadings: getHeadings$f,
	rawContent: rawContent$f,
	url: url$f
}, Symbol.toStringTag, { value: 'Module' }));

const html$e = () => "<p>In this tutorial, I will guide you on creating a free Let’s Encrypt SSL certificate for your website that gets automatically renewed. This process requires minimal to no configuration on your part. Let’s get started!</p>\n<p>First and foremost, you need to have a remote server where your web application is deployed. You might have Nginx, Apache, or any other web server. This tutorial will be specific to Nginx or Apache; if you are using another web server, you can go to <a href=\"https://certbot.eff.org/instructions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">certbot documentation</a> and get specific instructions for your platform.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>We need to install <code>snapd</code>, which is the package manager that will allow us to install <code>certbot</code> from Let’s Encrypt for automatic renewal. Run the following commands in your terminal.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> apt-get</span><span style=\"color:#F1FA8C\"> update</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> apt-get</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> snapd</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> snap</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> core</span><span style=\"color:#F8F8F2\">; </span><span style=\"color:#50FA7B\">snap</span><span style=\"color:#F1FA8C\"> refresh</span><span style=\"color:#F1FA8C\"> core</span></span></code></pre>\n<p>Now that <code>snapd</code> is installed, we can install <code>certbot</code> which we will be using to obtain and install the SSL certificate.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> snap</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#BD93F9\"> --classic</span><span style=\"color:#F1FA8C\"> certbot</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> ln</span><span style=\"color:#BD93F9\"> -s</span><span style=\"color:#F1FA8C\"> /snap/bin/certbot</span><span style=\"color:#F1FA8C\"> /usr/bin/certbot</span></span></code></pre>\n<p>Run the following command to verify that <code>certbot</code> is installed.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">certbot</span><span style=\"color:#BD93F9\"> --version</span></span></code></pre>\n<h2 id=\"getting-the-ssl-certificate\">Getting the SSL Certificate</h2>\n<p>Now that <code>certbot</code> is installed, we need to obtain an SSL certificate. The command will ask you for your email address and the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.</p>\n<p>You can either run the following command for the interactive mode where you will be asked several questions to obtain the SSL certificate.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Replace --nginx with --apache if you are using Apache</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#BD93F9\"> --nginx</span></span></code></pre>\n<p>You will be asked to enter your email address and agree to the terms of service. You will also be asked to enter the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.</p>\n<p>Alternatively, you can run the following command to obtain the SSL certificate in a non-interactive mode where you will not be asked any questions. This is useful if you want to automate the process.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#BD93F9\"> --apache</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --agree-tos</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  -m</span><span style=\"color:#F1FA8C\"> you@email.com</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --no-eff-email</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --redirect</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --domains</span><span style=\"color:#F1FA8C\"> news.roadmap.sh</span></span></code></pre>\n<p>This command will obtain an SSL certificate for the specified domain name, install it for you, and redirect HTTP traffic to HTTPS. The SSL certificate is valid for three months, after which it will expire.</p>\n<h2 id=\"auto-renewal-of-ssl-certificate\">Auto-Renewal of SSL Certificate</h2>\n<p>SSL certificate generated using certbot is valid for 3 months; after which you need to renew the certificate. Certbot automatically sets up the renewal for you so you don’t have to worry about.</p>\n<p>For the renewal to work, you need to have a cronjob or a systemd timer set up. To check if the automatic renewal is active, you can use one of two methods:</p>\n<ul>\n<li>\n<p>Check cronjob to see if there is a certbot renewal cron job registered by running the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> crontab</span><span style=\"color:#BD93F9\"> -l</span></span></code></pre>\n</li>\n<li>\n<p>If you don’t find the cron job registered, check the systemd timer by running the following command.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> systemctl</span><span style=\"color:#F1FA8C\"> list-timers</span></span></code></pre>\n<p>There should be a line that includes <code>certbot.timer</code>. This timer is configured to run twice daily—once in the morning and once in the evening—to automatically renew the SSL certificate near expiration.</p>\n</li>\n</ul>\n<p>Alright, so once you have verified that the auto-renewal timer is set up, let’s verify that the actual auto-renewal is working. Let’s do that next.</p>\n<h2 id=\"testing-if-auto-renewal-is-working\">Testing if Auto-Renewal is Working</h2>\n<p>To test if the auto-renewal is working, you can run the following command provided by certbot to dry-run the renewal process.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#F1FA8C\"> renew</span><span style=\"color:#BD93F9\"> --dry-run</span></span></code></pre>\n<p>This will not renew the certificate but will show you the output of the renewal process.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Try visiting your website using HTTPS and you should see a lock icon showing that the connection is secure. Also, upon visiting the HTTP version of your website, you should be redirected to the HTTPS version.</p>\n<p>That’s it! You have successfully obtained and installed a Let’s Encrypt SSL certificate on your web server. You have also set up the auto-renewal so that you don’t have to worry about renewing it manually.</p>";

				const frontmatter$e = {"title":"Guide to Let's Encrypt SSL Setup","description":"Learn how to protect your website using Let's Encrypt SSL Certificates.","authorId":"kamran","seo":{"title":"Guide to Let's Encrypt SSL Setup - roadmap.sh","description":"Learn how to protect your website using Let's Encrypt SSL Certificates."},"isNew":false,"type":"textual","date":"2023-03-13T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$e = "/workspace/src/data/guides/setup-and-auto-renew-ssl-certificates.md";
				const url$e = undefined;
				function rawContent$e() {
					return "   \n                                         \n                                                                                      \n                  \n    \n                                                        \n                                                                                        \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nIn this tutorial, I will guide you on creating a free Let's Encrypt SSL certificate for your website that gets automatically renewed. This process requires minimal to no configuration on your part. Let's get started!\n\nFirst and foremost, you need to have a remote server where your web application is deployed. You might have Nginx, Apache, or any other web server. This tutorial will be specific to Nginx or Apache; if you are using another web server, you can go to [certbot documentation](https://certbot.eff.org/instructions) and get specific instructions for your platform.\n\n## Installation\n\nWe need to install `snapd`, which is the package manager that will allow us to install `certbot` from Let's Encrypt for automatic renewal. Run the following commands in your terminal.\n\n```shell\nsudo apt-get update\nsudo apt-get install snapd\n\nsudo snap install core; snap refresh core\n```\n\nNow that `snapd` is installed, we can install `certbot` which we will be using to obtain and install the SSL certificate.\n\n```shell\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n```\n\nRun the following command to verify that `certbot` is installed.\n\n```shell\ncertbot --version\n```\n\n## Getting the SSL Certificate\n\nNow that `certbot` is installed, we need to obtain an SSL certificate. The command will ask you for your email address and the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.\n\nYou can either run the following command for the interactive mode where you will be asked several questions to obtain the SSL certificate.\n\n```shell\n# Replace --nginx with --apache if you are using Apache\nsudo certbot --nginx\n```\n\nYou will be asked to enter your email address and agree to the terms of service. You will also be asked to enter the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.\n\nAlternatively, you can run the following command to obtain the SSL certificate in a non-interactive mode where you will not be asked any questions. This is useful if you want to automate the process.\n\n```shell\nsudo certbot --apache \\\n  --agree-tos \\\n  -m you@email.com \\\n  --no-eff-email \\\n  --redirect \\\n  --domains news.roadmap.sh\n```\n\nThis command will obtain an SSL certificate for the specified domain name, install it for you, and redirect HTTP traffic to HTTPS. The SSL certificate is valid for three months, after which it will expire.\n\n## Auto-Renewal of SSL Certificate\n\nSSL certificate generated using certbot is valid for 3 months; after which you need to renew the certificate. Certbot automatically sets up the renewal for you so you don't have to worry about.\n\nFor the renewal to work, you need to have a cronjob or a systemd timer set up. To check if the automatic renewal is active, you can use one of two methods:\n\n- Check cronjob to see if there is a certbot renewal cron job registered by running the following command:\n\n  ```shell\n  sudo crontab -l\n  ```\n\n- If you don't find the cron job registered, check the systemd timer by running the following command.\n\n  ```shell\n  sudo systemctl list-timers\n  ```\n\n  There should be a line that includes `certbot.timer`. This timer is configured to run twice daily—once in the morning and once in the evening—to automatically renew the SSL certificate near expiration.\n\nAlright, so once you have verified that the auto-renewal timer is set up, let's verify that the actual auto-renewal is working. Let's do that next.\n\n## Testing if Auto-Renewal is Working\n\nTo test if the auto-renewal is working, you can run the following command provided by certbot to dry-run the renewal process.\n\n```shell\nsudo certbot renew --dry-run\n```\n\nThis will not renew the certificate but will show you the output of the renewal process.\n\n## Conclusion\n\nTry visiting your website using HTTPS and you should see a lock icon showing that the connection is secure. Also, upon visiting the HTTP version of your website, you should be redirected to the HTTPS version.\n\nThat's it! You have successfully obtained and installed a Let's Encrypt SSL certificate on your web server. You have also set up the auto-renewal so that you don't have to worry about renewing it manually.\n";
				}
				async function compiledContent$e() {
					return await html$e();
				}
				function getHeadings$e() {
					return [{"depth":2,"slug":"installation","text":"Installation"},{"depth":2,"slug":"getting-the-ssl-certificate","text":"Getting the SSL Certificate"},{"depth":2,"slug":"auto-renewal-of-ssl-certificate","text":"Auto-Renewal of SSL Certificate"},{"depth":2,"slug":"testing-if-auto-renewal-is-working","text":"Testing if Auto-Renewal is Working"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$e = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$e;
					content.file = file$e;
					content.url = url$e;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$e())}`;
				});

const __vite_glob_0_84 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$e,
	compiledContent: compiledContent$e,
	default: Content$e,
	file: file$e,
	frontmatter: frontmatter$e,
	getHeadings: getHeadings$e,
	rawContent: rawContent$e,
	url: url$e
}, Symbol.toStringTag, { value: 'Module' }));

const html$d = () => "<p>When you are working on a backend application, you are likely to need a database. You can either install it on your machine or use a Docker container. I prefer to use Docker containers because it is easier to setup and doesn’t pollute my machine with unnecessary dependencies.</p>\n<p>This short guide will show you how to spin up a MySQL, PostgreSQL, or MongoDB instance on your local machine using docker. Feel free to submit a PR adding more databases.</p>\n<h2 id=\"postgresql\">PostgreSQL</h2>\n<p>You can run the following command to run PostgreSQL in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> pg</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 5432:5432</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --env</span><span style=\"color:#F1FA8C\"> POSTGRES_PASSWORD=admin</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  postgres</span></span></code></pre>\n<p>Now you can connect and run commands against the instance using the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> pg</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  psql</span><span style=\"color:#BD93F9\"> -U</span><span style=\"color:#F1FA8C\"> postgres</span></span></code></pre>\n<h2 id=\"mysql\">MySQL</h2>\n<p>You can run the following command to run MySQL in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> ms</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 3306:3306</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --env</span><span style=\"color:#F1FA8C\"> MYSQL_ROOT_PASSWORD=admin</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mysql</span></span></code></pre>\n<p>Now, you can use the following to run commands against the MySQL instance:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> ms</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mysql</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> root</span><span style=\"color:#BD93F9\"> -padmin</span></span></code></pre>\n<h2 id=\"mongodb\">MongoDB</h2>\n<p>You can run the following command to run MongoDB in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> mdb</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 27017:27017</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mongo</span></span></code></pre>\n<p>Now, you can use the following to run commands against the MongoDB instance:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> mdb</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mongo</span></span></code></pre>\n<p>Feel free to <a href=\"https://github.com/kamranahmedse/roadmap.sh/tree/master/src/data/guides/single-command-database-setup.md\" target=\"_blank\">submit a pull request</a> by adding additional databases to this guide.</p>";

				const frontmatter$d = {"title":"Single Command Database Setup","description":"Learn how to run MySQL, PostgreSQL, or MongoDB in Docker with single Command","authorId":"kamran","seo":{"title":"Single Command Database Setup - roadmap.sh","description":"Learn how to run MySQL, PostgreSQL, or MongoDB in Docker with single Command"},"isNew":false,"type":"textual","date":"2023-02-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","guide-sitemap"]};
				const file$d = "/workspace/src/data/guides/single-command-database-setup.md";
				const url$d = undefined;
				function rawContent$d() {
					return "   \n                                      \n                                                                                           \n                  \n    \n                                                     \n                                                                                             \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n   \n\nWhen you are working on a backend application, you are likely to need a database. You can either install it on your machine or use a Docker container. I prefer to use Docker containers because it is easier to setup and doesn't pollute my machine with unnecessary dependencies.\n\nThis short guide will show you how to spin up a MySQL, PostgreSQL, or MongoDB instance on your local machine using docker. Feel free to submit a PR adding more databases.\n\n## PostgreSQL\n\nYou can run the following command to run PostgreSQL in a Docker container:\n\n```bash\ndocker run \\\n  --name pg \\\n  --detach \\\n  --publish 5432:5432 \\\n  --env POSTGRES_PASSWORD=admin \\\n  postgres\n```\n\nNow you can connect and run commands against the instance using the following:\n\n```bash\ndocker exec -it pg \\\n  psql -U postgres\n```\n\n## MySQL\n\nYou can run the following command to run MySQL in a Docker container:\n\n```bash\ndocker run \\\n  --name ms \\\n  --publish 3306:3306 \\\n  --detach \\\n  --env MYSQL_ROOT_PASSWORD=admin \\\n  mysql\n```\n\nNow, you can use the following to run commands against the MySQL instance:\n\n```bash\ndocker exec -it ms \\\n  mysql -u root -padmin\n```\n\n## MongoDB\n\nYou can run the following command to run MongoDB in a Docker container:\n\n```bash\ndocker run \\\n  --name mdb \\\n  --publish 27017:27017 \\\n  --detach \\\n  mongo\n```\n\nNow, you can use the following to run commands against the MongoDB instance:\n\n```bash\ndocker exec -it mdb \\\n  mongo\n```\n\nFeel free to [submit a pull request](https://github.com/kamranahmedse/roadmap.sh/tree/master/src/data/guides/single-command-database-setup.md) by adding additional databases to this guide.\n";
				}
				async function compiledContent$d() {
					return await html$d();
				}
				function getHeadings$d() {
					return [{"depth":2,"slug":"postgresql","text":"PostgreSQL"},{"depth":2,"slug":"mysql","text":"MySQL"},{"depth":2,"slug":"mongodb","text":"MongoDB"}];
				}

				const Content$d = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$d;
					content.file = file$d;
					content.url = url$d;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$d())}`;
				});

const __vite_glob_0_85 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$d,
	compiledContent: compiledContent$d,
	default: Content$d,
	file: file$d,
	frontmatter: frontmatter$d,
	getHeadings: getHeadings$d,
	rawContent: rawContent$d,
	url: url$d
}, Symbol.toStringTag, { value: 'Module' }));

const html$c = () => "<p><img src=\"https://assets.roadmap.sh/guest/is-sql-hard-to-learn-a2q9r.jpg\" alt=\"Is SQL hard to learn?\"></p>\n<p>If you’re wondering whether Structured Query Language (SQL) is hard to learn, the honest answer is: <strong>it depends</strong>. But for most people, especially those who stick with it for a few weeks, it’s surprisingly approachable. Our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> is designed for beginner and intermediate learners, guiding you from basic queries to advanced data manipulation so you can build real-world applications.</p>\n<p>At first, SQL can feel intimidating. It’s often tied to enterprise databases, backend systems, and “big data” buzzwords that make it seem out of reach. And calling it a <em>language</em> can make it sound like something you need years to master.</p>\n<p>The good news is <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> isn’t like most programming languages. It’s declarative rather than procedural, more forgiving, and incredibly practical. Think of it like learning to drive a car instead of building one. You have a working vehicle, your database, and you just direct it to fetch exactly the data you need.</p>\n<p>In this guide, I’ll walk you through what makes SQL feel hard at first and why it actually isn’t, once you see it in action. I’ll also share what learning SQL looks like, where people tend to get stuck, and how you can be successful.</p>\n<h2 id=\"what-is-sql\">What is SQL?</h2>\n<p>SQL, short for Structured Query Language, is a programming language used to store, retrieve, and manage data in relational SQL databases. Before SQL came along, managing large datasets was a real challenge. But SQL changed that. Its versatility makes it easier for companies to work with massive amounts of customer records and other data.</p>\n<p>You’ll use SQL to do things like pull reports, update tables, or find specific users. Here’s what that might look like in your day-to-day work:</p>\n<ul>\n<li>Creating or updating tables</li>\n<li>Querying specific data</li>\n<li>Adding new records</li>\n<li>Deleting outdated info</li>\n<li>Updating existing data</li>\n<li>Controlling access to data</li>\n</ul>\n<p>You’ll find SQL in relational database management systems (RDMS) like <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>, Microsoft SQL Server, MySQL, and Oracle. Some common use cases include:</p>\n<ul>\n<li>Web and mobile apps that need to store and retrieve user information</li>\n<li>E-commerce platforms that track products, orders, and inventory</li>\n<li>Reporting tools that analyze large volumes of business data</li>\n<li>Banking systems that manage transactions and account details</li>\n</ul>\n<p>With SQL basics and the use cases covered, let’s take a closer look at some of the myths about learning SQL.</p>\n<h2 id=\"what-makes-people-think-sql-is-hard\">What makes people think SQL is hard?</h2>\n<p>SQL often seems intimidating at first, but that feeling usually comes from a few common misconceptions. Let’s explore these and address them accordingly.</p>\n<p><strong>“It’s a programming language.”</strong></p>\n<p>Technically, yes, it is. But when people hear “programming language,” they immediately think of languages like Python and C++ with complex syntax, loops, and step-by-step logic. It’s declarative, which means instead of telling the database how to do something step by step, you just tell it what you want and let it figure out how to get it done.</p>\n<p>Think of it like ordering food at a restaurant. You don’t go into the kitchen and cook the meal yourself (like you would in Python or C++). You just say, “I’d like stir-fried rice and chicken,” and the kitchen handles the rest.</p>\n<p><strong>“SQL is the database language.”</strong></p>\n<p>Databases power everything from apps to websites to business tools. Since they deal with massive amounts of data, they can sound complicated. However, the core of SQL stays the same whether you’re working with ten records or ten million.</p>\n<p>Even your phone’s contact list is like a simple database. When you search for “John,” it shows matching contacts. With SQL, you’re just asking questions in a structured way.</p>\n<p>For example, getting a contact using JavaScript typically involves connecting to a database, defining models, writing queries, and handling responses. See the snippet below of what that can look like:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Import Sequelize and set up a SQLite connection</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> { Sequelize, DataTypes } </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">sequelize</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Connect to a SQLite database (in-memory for demo)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> sequelize </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6;font-weight:bold\"> new</span><span style=\"color:#50FA7B\"> Sequelize</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">sqlite::memory:</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Define a Contact model</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> Contact </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> sequelize.</span><span style=\"color:#50FA7B\">define</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Contact</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  first_name</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    type</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> DataTypes.</span><span style=\"color:#BD93F9\">STRING</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    allowNull</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> false</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  },</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  last_name</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    type</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> DataTypes.</span><span style=\"color:#BD93F9\">STRING</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    allowNull</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> false</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  },</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  phone</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    type</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> DataTypes.</span><span style=\"color:#BD93F9\">STRING</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    allowNull</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> false</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">async</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> run</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Sync database and seed some data</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  await</span><span style=\"color:#F8F8F2\"> sequelize.</span><span style=\"color:#50FA7B\">sync</span><span style=\"color:#F8F8F2\">({ force</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  await</span><span style=\"color:#F8F8F2\"> Contact.</span><span style=\"color:#50FA7B\">bulkCreate</span><span style=\"color:#F8F8F2\">([</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    { first_name</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">John</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, last_name</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, phone</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">555-1234</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\"> },</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    ......</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  ]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Find all contacts with the first name \"John\"</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  const</span><span style=\"color:#F8F8F2\"> results </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> await</span><span style=\"color:#F8F8F2\"> Contact.</span><span style=\"color:#50FA7B\">findAll</span><span style=\"color:#F8F8F2\">({</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    where</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> { first_name</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">John</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(results.</span><span style=\"color:#50FA7B\">map</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">contact</span><span style=\"color:#FF79C6\"> =></span><span style=\"color:#F8F8F2\"> contact.</span><span style=\"color:#50FA7B\">toJSON</span><span style=\"color:#F8F8F2\">()));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">run</span><span style=\"color:#F8F8F2\">();</span></span></code></pre>\n<p>While in SQL, all you have to do is query your database:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#6272A4\">-- This SQL query finds all contacts with the first name \"John\"</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">SELECT</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#F8F8F2\"> </span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">FROM</span><span style=\"color:#F8F8F2\"> contacts </span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">WHERE</span><span style=\"color:#F8F8F2\"> first_name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">John</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-vs-other-languages-t0nxc.png\" alt=\"SQL vs. other languages\"></p>\n<p><strong>“Only developers and data scientists use it.”</strong></p>\n<p>This is one of the biggest myths when it comes to SQL. Sure, developers, database administrators, and data scientists use SQL, but so do sales analysts, support teams, product managers, marketers, and other professionals without a technical background. You don’t need to be technical to get value from it.</p>\n<p>For example, a marketer could use SQL to pull open rates for an email campaign. No need for loops or advanced code; just clear and direct queries.</p>\n<p><strong>“I need to memorize everything to get started.”</strong></p>\n<p>Like anything new, SQL takes some getting used to. But you don’t need to memorize all the syntax to be productive. Even experienced developers and data scientists use cheat sheets all the time.</p>\n<p>Think of it like Excel. When you first started, you didn’t know every formula by heart. You learned a few, looked up the rest, and got better over time.</p>\n<p>The bottom line is that SQL may seem hard because of how it’s labelled and where it’s used, but at its core, it’s just a structured way to ask questions about data. Once you understand that, learning it becomes a lot less intimidating.</p>\n<p>Now that the myths are out of the way, let’s explore what it is like to actually learn SQL and what makes it easier than other programming languages.</p>\n<h2 id=\"what-is-it-like-to-learn-sql\">What is it like to learn SQL?</h2>\n<p>Learning SQL is actually more approachable than you might think. Compared to other programming languages, it has a gentle learning curve, and many of the concepts will feel familiar, especially if you’ve ever worked with a spreadsheet before. You can even try it out in your browser with <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">our interactive SQL course</a>, no installation needed.</p>\n<p><img src=\"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExaXRlaHF6N2E0MWdvYzRoa3NvMXJxMmkzZGRld3ppbXhhMm9leDNhaSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/2dFhaiTuV5dYKymVi6/giphy.gif\" alt=\"Browser-based interactive course\"></p>\n<p><strong>Simple and readable syntax</strong></p>\n<p>Unlike other programming languages that involve conditionals, error handling, and complex logic, SQL doesn’t require memorizing a long list of commands to start doing something useful. Most SQL statements are written in plain English, and queries often read like simple sentences. For example:</p>\n<ul>\n<li><code>SELECT</code>: choose the data you want</li>\n<li><code>FROM</code>: specify the table</li>\n<li><code>WHERE</code>: filter the results</li>\n<li><code>ORDER BY</code>: sort the output</li>\n<li><code>JOIN</code>: combine data from multiple tables</li>\n</ul>\n<p>Put together, a basic query using all of these might look like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">SELECT</span><span style=\"color:#BD93F9\"> users</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">name</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">orders</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">amount</span><span style=\"color:#6272A4\">       -- choose the data you want</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">FROM</span><span style=\"color:#F8F8F2\"> users                             </span><span style=\"color:#6272A4\">-- specify the main table</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">JOIN</span><span style=\"color:#F8F8F2\"> orders </span><span style=\"color:#FF79C6\">ON</span><span style=\"color:#BD93F9\"> users</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">id</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> orders</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">user_id</span><span style=\"color:#6272A4\">  -- combine data from multiple tables</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">WHERE</span><span style=\"color:#BD93F9\"> orders</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">amount</span><span style=\"color:#FF79C6\"> ></span><span style=\"color:#BD93F9\"> 100</span><span style=\"color:#6272A4\">              -- filter the results</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">ORDER BY</span><span style=\"color:#BD93F9\"> orders</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#BD93F9\">amount</span><span style=\"color:#FF79C6\"> DESC</span><span style=\"color:#F8F8F2\">;           </span><span style=\"color:#6272A4\">-- sort the output</span></span></code></pre>\n<p>This structure makes SQL much easier to pick up than more abstract programming languages.</p>\n<p><strong>Installation and configuration</strong></p>\n<p>You don’t need to set up a complicated tool to start learning SQL. There are many interactive environments online where you can write and run SQL queries directly in your browser. You won’t need to install a database, configure settings, or write any setup code. Simply open a tab and start practicing.</p>\n<p><strong>Similar to Excel or any other spreadsheet</strong></p>\n<p>If you’ve used Excel, Google Sheets, or similar tools, you’re already familiar with the concept of tables, rows, and columns. Think about how you’d filter a spreadsheet to show specific rows or sort a list by price or alphabetically. SQL works with the same logic, but it gives you more power and flexibility to handle those tasks at scale.</p>\n<p>Here’s a simple example that retrieves the names of users who are 18 or older:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">SELECT</span><span style=\"color:#FF79C6\"> name</span><span style=\"color:#FF79C6\"> FROM</span><span style=\"color:#F8F8F2\"> users </span><span style=\"color:#FF79C6\">WHERE</span><span style=\"color:#F8F8F2\"> age </span><span style=\"color:#FF79C6\">>=</span><span style=\"color:#BD93F9\"> 18</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<p>If you read it out loud, it sounds like you’re having a conversation with the database. You’re saying, “Look in the <code>users</code> table, find everyone whose <code>age</code> is 18 or more, and give me their <code>name</code>.” There’s no boilerplate or complex syntax; just a straightforward question and a clear answer.</p>\n<h2 id=\"what-makes-sql-easier-than-other-programming-languages\">What makes SQL easier than other programming languages?</h2>\n<p>If you’ve tried learning a general-purpose language like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> or <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>, you know they often come with strict syntax rules, package managers, and environment setup. That can be overwhelming, especially for beginners. SQL takes a different path:</p>\n<p><strong>SQL is declarative, not procedural</strong></p>\n<p>Instead of writing step-by-step instructions to get something done, you just describe what you want. The database figures out how to do it. This makes SQL easier to grasp than many other languages.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/procedural-programming-vs-sql-u8u3x.png\" alt=\"Procedural programming vs SQL\"></p>\n<p>You might hear people compare Python and SQL, since both read like English. For tasks like querying data, generating reports, or filtering results, SQL is often the simpler option. You don’t need to write custom functions to sort or group data; SQL was designed to handle that. Check out our <a href=\"https://linear.app/hmb-roadmap/issue/HMB-56/may-sql-vs-python-which-should-you-learn-for-data-analysis\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Python vs. SQL</a> deep dive to learn more.</p>\n<p><strong>No variables, loops, or boilerplate required</strong></p>\n<p>In Python or JavaScript, filtering and retrieving data might involve:</p>\n<ul>\n<li>Connecting to a database</li>\n<li>Looping through rows</li>\n<li>Writing logic to filter or sort</li>\n<li>Printing or exporting the output</li>\n</ul>\n<p>In SQL, you can usually do all that with a single line; no setup, no custom functions, no data structures to manage.</p>\n<p><strong>Errors are usually clear and fixable</strong></p>\n<p>SQL error messages tend to be readable, even for beginners. If you mistype a column name, you might see:</p>\n<blockquote>\n<p><code>ERROR: column \"nmae\" does not exist</code></p>\n</blockquote>\n<p>That’s much easier to understand than something like a Python traceback or JavaScript’s <code>undefined is not a function</code>.</p>\n<h2 id=\"what-actually-makes-sql-hard-and-how-to-get-past-it\">What actually makes SQL hard (and how to get past it)?</h2>\n<p>Like any other programming language, SQL has its own learning curve. The good news is that these complex sections are learnable with the right guidance. Below are some of the concepts you might find challenging at first, and how to move past them.</p>\n<p><strong>Understanding JOINs and relational logic</strong></p>\n<p>Most beginners struggle with JOINs. It’s common to wonder why there are different types or how to match rows between tables. But with visual examples and hands-on practice, they start to make sense. That’s why <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">our SQL course</a> includes practical examples and clear visualizations to show what’s happening behind the scenes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/inner-join-vs-left-join-1-sgfro.png\" alt=\"JOINs in SQL\"></p>\n<p><strong>Writing complex queries with subqueries or window functions</strong></p>\n<p>These intermediate features let you do things like rank results, compare values across rows, or summarize data. They look intimidating at first, but they’re really just blocks you stack together. The best way to learn them is by starting small and building up.</p>\n<p><strong>Dealing with NULLs and data types</strong></p>\n<p>NULLs represent missing or unknown values. They behave differently from regular values, which can mess with filters, calculations, and comparisons.</p>\n<p>It also takes practice to understand how text, numbers, and dates work, especially when things don’t behave as expected. A tip you should always follow whenever a query isn’t returning what you think it should: always check for NULLs or mismatched data types.</p>\n<p>While SQL has its tricky parts, its simplicity is also what makes it accessible for everyone. This brings us to an important question: How long does it actually take to feel confident using SQL? Let’s explore that next.</p>\n<h2 id=\"how-long-does-it-take-to-feel-confident-with-sql\">How long does it take to feel confident with SQL?</h2>\n<p>SQL is one of the most beginner-friendly languages, but like anything worthwhile, it takes consistent practice to feel confident.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-learning-journey-xrpzm.png\" alt=\"SQL learning journey\"></p>\n<p><strong>Basic proficiency: 2–3 weeks</strong></p>\n<p>With just a few minutes a day, you can get comfortable writing basic SQL syntax. These commands are part of what is known as the data manipulation language (DML) and include SELECT, WHERE, ORDER BY, and basic filtering. That’s often enough to pull reports, explore tables, and understand how data is stored and retrieved.</p>\n<p><strong>Intermediate skills: 1–2 months</strong></p>\n<p>JOINs, <code>GROUP BY</code>, and nested queries start to make sense with repetition and context. You’ll be able to ask deeper questions, create summaries, and work across multiple tables to perform complex tasks like data analysis, data analytics, and data modeling. These are the skills that most professionals aim for.</p>\n<p><strong>Advanced SQL knowledge: Continuous learning, but approachable</strong></p>\n<p>Concepts like Common Table Expressions (CTEs), window functions, stored procedures, and query optimization are core SQL skills that require more time to master. They build on the fundamentals you already know and allow you to manipulate data in more advanced ways. As you grow more confident, you’ll also come across parts of SQL like Data Control Language (DCL), which helps manage access to data. These concepts aren’t required on day one, and you’ll ease into them over time with the right practice.</p>\n<p>Our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> walks you through each level step by step, so you don’t have to figure it out on your own. It includes practice exercises and real-world use cases, and you can go at your own pace. The key takeaway: consistency matters more than speed. Just 20 minutes of focused practice a few times a week can make a big difference.</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>You don’t need a computer science degree or Python experience to master SQL. You just need a clear path, good examples, and a little consistency. Our SQL course is designed to make learning approachable with step-by-step lessons, hands-on challenges, and built-in AI help when you get stuck. You can start today, even if you’ve never written a query before.</p>\n<p>Start here:</p>\n<ul>\n<li><a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL basic to advanced course</a></li>\n<li><a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL roadmap</a></li>\n</ul>";

				const frontmatter$c = {"title":"Is SQL Hard to Learn? (An Expert's Take)","description":"Wondering whether SQL is hard to learn? A seasoned pro shares insights, beginner tips, and how to make it easier than you think.","authorId":"william","excludedBySlug":"/sql/hard-to-learn","seo":{"title":"Is SQL Hard to Learn? (An Expert's Take)","description":"Wondering whether SQL is hard to learn? A seasoned pro shares insights, beginner tips, and how to make it easier than you think.","ogImageUrl":"https://assets.roadmap.sh/guest/is-sql-hard-to-learn-a2q9r.jpg"},"isNew":true,"type":"textual","date":"2025-06-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$c = "/workspace/src/data/guides/sql-hard-to-learn.md";
				const url$c = undefined;
				function rawContent$c() {
					return "   \n                                               \n                                                                                                                                             \n                 \n                                    \n    \n                                                 \n                                                                                                                                               \n                                                                            \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Is SQL hard to learn?](https://assets.roadmap.sh/guest/is-sql-hard-to-learn-a2q9r.jpg)\n\nIf you're wondering whether Structured Query Language (SQL) is hard to learn, the honest answer is: **it depends**. But for most people, especially those who stick with it for a few weeks, it's surprisingly approachable. Our [SQL course](https://roadmap.sh/courses/sql) is designed for beginner and intermediate learners, guiding you from basic queries to advanced data manipulation so you can build real-world applications.\n\nAt first, SQL can feel intimidating. It's often tied to enterprise databases, backend systems, and \"big data\" buzzwords that make it seem out of reach. And calling it a *language* can make it sound like something you need years to master.\n\nThe good news is [SQL](https://roadmap.sh/sql) isn't like most programming languages. It's declarative rather than procedural, more forgiving, and incredibly practical. Think of it like learning to drive a car instead of building one. You have a working vehicle, your database, and you just direct it to fetch exactly the data you need.\n\nIn this guide, I'll walk you through what makes SQL feel hard at first and why it actually isn't, once you see it in action. I'll also share what learning SQL looks like, where people tend to get stuck, and how you can be successful.\n\n## What is SQL?\n\nSQL, short for Structured Query Language, is a programming language used to store, retrieve, and manage data in relational SQL databases. Before SQL came along, managing large datasets was a real challenge. But SQL changed that. Its versatility makes it easier for companies to work with massive amounts of customer records and other data.\n\nYou'll use SQL to do things like pull reports, update tables, or find specific users. Here's what that might look like in your day-to-day work:\n\n- Creating or updating tables\n- Querying specific data\n- Adding new records\n- Deleting outdated info\n- Updating existing data\n- Controlling access to data\n\nYou'll find SQL in relational database management systems (RDMS) like [PostgreSQL](https://roadmap.sh/postgresql-dba), Microsoft SQL Server, MySQL, and Oracle. Some common use cases include:\n\n- Web and mobile apps that need to store and retrieve user information\n- E-commerce platforms that track products, orders, and inventory\n- Reporting tools that analyze large volumes of business data\n- Banking systems that manage transactions and account details\n\nWith SQL basics and the use cases covered, let's take a closer look at some of the myths about learning SQL.\n\n## What makes people think SQL is hard?\n\nSQL often seems intimidating at first, but that feeling usually comes from a few common misconceptions. Let's explore these and address them accordingly.\n\n**\"It's a programming language.\"**\n\nTechnically, yes, it is. But when people hear \"programming language,\" they immediately think of languages like Python and C++ with complex syntax, loops, and step-by-step logic. It's declarative, which means instead of telling the database how to do something step by step, you just tell it what you want and let it figure out how to get it done.\n\nThink of it like ordering food at a restaurant. You don't go into the kitchen and cook the meal yourself (like you would in Python or C++). You just say, \"I'd like stir-fried rice and chicken,\" and the kitchen handles the rest.\n\n**\"SQL is the database language.\"**\n\nDatabases power everything from apps to websites to business tools. Since they deal with massive amounts of data, they can sound complicated. However, the core of SQL stays the same whether you're working with ten records or ten million.\n\nEven your phone's contact list is like a simple database. When you search for \"John,\" it shows matching contacts. With SQL, you're just asking questions in a structured way.\n\nFor example, getting a contact using JavaScript typically involves connecting to a database, defining models, writing queries, and handling responses. See the snippet below of what that can look like:\n\n```javascript\n// Import Sequelize and set up a SQLite connection\nconst { Sequelize, DataTypes } = require('sequelize');\n\n// Connect to a SQLite database (in-memory for demo)\nconst sequelize = new Sequelize('sqlite::memory:');\n\n// Define a Contact model\nconst Contact = sequelize.define('Contact', {\n  first_name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  last_name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  phone: {\n    type: DataTypes.STRING,\n    allowNull: false\n  }\n});\n\nasync function run() {\n  // Sync database and seed some data\n  await sequelize.sync({ force: true });\n\n  await Contact.bulkCreate([\n    { first_name: 'John', last_name: 'Doe', phone: '555-1234' },\n    ......\n  ]);\n\n  // Find all contacts with the first name \"John\"\n  const results = await Contact.findAll({\n    where: { first_name: 'John' }\n  });\n\n  console.log(results.map(contact => contact.toJSON()));\n}\n\nrun();\n```\n\nWhile in SQL, all you have to do is query your database:\n\n```sql\n-- This SQL query finds all contacts with the first name \"John\"\nSELECT * \nFROM contacts \nWHERE first_name = 'John';\n```\n\n![SQL vs. other languages](https://assets.roadmap.sh/guest/sql-vs-other-languages-t0nxc.png)\n\n**\"Only developers and data scientists use it.\"**\n\nThis is one of the biggest myths when it comes to SQL. Sure, developers, database administrators, and data scientists use SQL, but so do sales analysts, support teams, product managers, marketers, and other professionals without a technical background. You don't need to be technical to get value from it.\n\nFor example, a marketer could use SQL to pull open rates for an email campaign. No need for loops or advanced code; just clear and direct queries.\n\n**\"I need to memorize everything to get started.\"**\n\nLike anything new, SQL takes some getting used to. But you don't need to memorize all the syntax to be productive. Even experienced developers and data scientists use cheat sheets all the time.\n\nThink of it like Excel. When you first started, you didn't know every formula by heart. You learned a few, looked up the rest, and got better over time.\n\nThe bottom line is that SQL may seem hard because of how it's labelled and where it's used, but at its core, it's just a structured way to ask questions about data. Once you understand that, learning it becomes a lot less intimidating.\n\nNow that the myths are out of the way, let's explore what it is like to actually learn SQL and what makes it easier than other programming languages.\n\n## What is it like to learn SQL?\n\nLearning SQL is actually more approachable than you might think. Compared to other programming languages, it has a gentle learning curve, and many of the concepts will feel familiar, especially if you've ever worked with a spreadsheet before. You can even try it out in your browser with [our interactive SQL course](https://roadmap.sh/courses/sql), no installation needed.\n\n![Browser-based interactive course](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExaXRlaHF6N2E0MWdvYzRoa3NvMXJxMmkzZGRld3ppbXhhMm9leDNhaSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/2dFhaiTuV5dYKymVi6/giphy.gif)\n\n**Simple and readable syntax**\n\nUnlike other programming languages that involve conditionals, error handling, and complex logic, SQL doesn't require memorizing a long list of commands to start doing something useful. Most SQL statements are written in plain English, and queries often read like simple sentences. For example:\n\n- `SELECT`: choose the data you want\n- `FROM`: specify the table\n- `WHERE`: filter the results\n- `ORDER BY`: sort the output\n- `JOIN`: combine data from multiple tables\n\nPut together, a basic query using all of these might look like this:\n\n```sql\nSELECT users.name, orders.amount       -- choose the data you want\nFROM users                             -- specify the main table\nJOIN orders ON users.id = orders.user_id  -- combine data from multiple tables\nWHERE orders.amount > 100              -- filter the results\nORDER BY orders.amount DESC;           -- sort the output\n```\n\nThis structure makes SQL much easier to pick up than more abstract programming languages.\n\n**Installation and configuration**\n\nYou don't need to set up a complicated tool to start learning SQL. There are many interactive environments online where you can write and run SQL queries directly in your browser. You won't need to install a database, configure settings, or write any setup code. Simply open a tab and start practicing.\n\n**Similar to Excel or any other spreadsheet**\n\nIf you've used Excel, Google Sheets, or similar tools, you're already familiar with the concept of tables, rows, and columns. Think about how you'd filter a spreadsheet to show specific rows or sort a list by price or alphabetically. SQL works with the same logic, but it gives you more power and flexibility to handle those tasks at scale.\n\nHere's a simple example that retrieves the names of users who are 18 or older:\n\n```sql\nSELECT name FROM users WHERE age >= 18;\n```\n\nIf you read it out loud, it sounds like you're having a conversation with the database. You're saying, \"Look in the `users` table, find everyone whose `age` is 18 or more, and give me their `name`.\" There's no boilerplate or complex syntax; just a straightforward question and a clear answer.\n\n## What makes SQL easier than other programming languages?\n\nIf you've tried learning a general-purpose language like [Python](https://roadmap.sh/python) or [JavaScript](https://roadmap.sh/javascript), you know they often come with strict syntax rules, package managers, and environment setup. That can be overwhelming, especially for beginners. SQL takes a different path:\n\n**SQL is declarative, not procedural**\n\nInstead of writing step-by-step instructions to get something done, you just describe what you want. The database figures out how to do it. This makes SQL easier to grasp than many other languages.\n\n![Procedural programming vs SQL](https://assets.roadmap.sh/guest/procedural-programming-vs-sql-u8u3x.png)\n\nYou might hear people compare Python and SQL, since both read like English. For tasks like querying data, generating reports, or filtering results, SQL is often the simpler option. You don't need to write custom functions to sort or group data; SQL was designed to handle that. Check out our [Python vs. SQL](https://linear.app/hmb-roadmap/issue/HMB-56/may-sql-vs-python-which-should-you-learn-for-data-analysis) deep dive to learn more.\n\n**No variables, loops, or boilerplate required**\n\nIn Python or JavaScript, filtering and retrieving data might involve:\n\n- Connecting to a database\n- Looping through rows\n- Writing logic to filter or sort\n- Printing or exporting the output\n\nIn SQL, you can usually do all that with a single line; no setup, no custom functions, no data structures to manage.\n\n**Errors are usually clear and fixable**\n\nSQL error messages tend to be readable, even for beginners. If you mistype a column name, you might see:\n\n> `ERROR: column \"nmae\" does not exist`\n\nThat's much easier to understand than something like a Python traceback or JavaScript's `undefined is not a function`.\n\n## What actually makes SQL hard (and how to get past it)?\n\nLike any other programming language, SQL has its own learning curve. The good news is that these complex sections are learnable with the right guidance. Below are some of the concepts you might find challenging at first, and how to move past them.\n\n**Understanding JOINs and relational logic**\n\nMost beginners struggle with JOINs. It's common to wonder why there are different types or how to match rows between tables. But with visual examples and hands-on practice, they start to make sense. That's why [our SQL course](https://roadmap.sh/courses/sql) includes practical examples and clear visualizations to show what's happening behind the scenes.\n\n![JOINs in SQL](https://assets.roadmap.sh/guest/inner-join-vs-left-join-1-sgfro.png)\n\n**Writing complex queries with subqueries or window functions**\n\nThese intermediate features let you do things like rank results, compare values across rows, or summarize data. They look intimidating at first, but they're really just blocks you stack together. The best way to learn them is by starting small and building up.\n\n**Dealing with NULLs and data types**\n\nNULLs represent missing or unknown values. They behave differently from regular values, which can mess with filters, calculations, and comparisons.\n\nIt also takes practice to understand how text, numbers, and dates work, especially when things don't behave as expected. A tip you should always follow whenever a query isn't returning what you think it should: always check for NULLs or mismatched data types.\n\nWhile SQL has its tricky parts, its simplicity is also what makes it accessible for everyone. This brings us to an important question: How long does it actually take to feel confident using SQL? Let's explore that next.\n\n## How long does it take to feel confident with SQL?\n\nSQL is one of the most beginner-friendly languages, but like anything worthwhile, it takes consistent practice to feel confident.\n\n![SQL learning journey](https://assets.roadmap.sh/guest/sql-learning-journey-xrpzm.png)\n\n**Basic proficiency: 2–3 weeks**\n\nWith just a few minutes a day, you can get comfortable writing basic SQL syntax. These commands are part of what is known as the data manipulation language (DML) and include SELECT, WHERE, ORDER BY, and basic filtering. That's often enough to pull reports, explore tables, and understand how data is stored and retrieved.\n\n**Intermediate skills: 1–2 months**\n\nJOINs, `GROUP BY`, and nested queries start to make sense with repetition and context. You'll be able to ask deeper questions, create summaries, and work across multiple tables to perform complex tasks like data analysis, data analytics, and data modeling. These are the skills that most professionals aim for.\n\n**Advanced SQL knowledge: Continuous learning, but approachable**\n\nConcepts like Common Table Expressions (CTEs), window functions, stored procedures, and query optimization are core SQL skills that require more time to master. They build on the fundamentals you already know and allow you to manipulate data in more advanced ways. As you grow more confident, you'll also come across parts of SQL like Data Control Language (DCL), which helps manage access to data. These concepts aren't required on day one, and you'll ease into them over time with the right practice.\n\nOur [SQL course](https://roadmap.sh/courses/sql) walks you through each level step by step, so you don't have to figure it out on your own. It includes practice exercises and real-world use cases, and you can go at your own pace. The key takeaway: consistency matters more than speed. Just 20 minutes of focused practice a few times a week can make a big difference.\n\n## Wrapping up\n\nYou don't need a computer science degree or Python experience to master SQL. You just need a clear path, good examples, and a little consistency. Our SQL course is designed to make learning approachable with step-by-step lessons, hands-on challenges, and built-in AI help when you get stuck. You can start today, even if you've never written a query before.\n\nStart here:\n\n- [SQL basic to advanced course](https://roadmap.sh/courses/sql)\n- [SQL roadmap](https://roadmap.sh/sql) ";
				}
				async function compiledContent$c() {
					return await html$c();
				}
				function getHeadings$c() {
					return [{"depth":2,"slug":"what-is-sql","text":"What is SQL?"},{"depth":2,"slug":"what-makes-people-think-sql-is-hard","text":"What makes people think SQL is hard?"},{"depth":2,"slug":"what-is-it-like-to-learn-sql","text":"What is it like to learn SQL?"},{"depth":2,"slug":"what-makes-sql-easier-than-other-programming-languages","text":"What makes SQL easier than other programming languages?"},{"depth":2,"slug":"what-actually-makes-sql-hard-and-how-to-get-past-it","text":"What actually makes SQL hard (and how to get past it)?"},{"depth":2,"slug":"how-long-does-it-take-to-feel-confident-with-sql","text":"How long does it take to feel confident with SQL?"},{"depth":2,"slug":"wrapping-up","text":"Wrapping up"}];
				}

				const Content$c = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$c;
					content.file = file$c;
					content.url = url$c;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$c())}`;
				});

const __vite_glob_0_86 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$c,
	compiledContent: compiledContent$c,
	default: Content$c,
	file: file$c,
	frontmatter: frontmatter$c,
	getHeadings: getHeadings$c,
	rawContent: rawContent$c,
	url: url$c
}, Symbol.toStringTag, { value: 'Module' }));

const html$b = () => "<p><img src=\"https://assets.roadmap.sh/guest/how-long-does-it-take-to-learn-sql-4o4jz.jpg\" alt=\"How Long Does It Take to Learn SQL? (An Expert&#x27;s Take)\"></p>\n<p>With steady practice, you can start grasping basic SQL concepts in just a few days, grow confident writing queries within a month, and reach proficiency in advanced SQL concepts in three to six months.</p>\n<p>However, before you mark your calendar, remember this timeline does not apply to everyone.</p>\n<p>Learning a new skill or language takes time and heavily depends on your goals and learning style. The same is true for SQL. Your prior experience and the effort you dedicate are key to achieving final results.</p>\n<p>Our interactive <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> is designed to guide you through every step of the journey, from SQL basics to advanced SQL. Starting with the basics like database concepts and <code>SELECT</code> queries, it steadily builds up to complex topics such as joins, subqueries, scalar, data definition language, data control language, and window functions. You’ll practice how to write SQL queries to manage data, explore datasets, and perform real-world data analysis.</p>\n<p>To help you make the most of this learning path, it’s important to understand what kind of time commitment SQL requires. This guide will help you understand how long it takes to learn SQL, based on different skill levels, goals, and learning methods. It doesn’t matter if you’re a complete beginner or someone with some experience; we’ll break down clear timelines, essential topics to focus on, and practical tips to stay consistent throughout your learning journey.</p>\n<h2 id=\"your-sql-learning-speed-depends-on-these-factors\">Your SQL learning speed depends on these factors</h2>\n<p>A few core factors determine how quickly you’ll get comfortable with SQL. Knowing where you stand with each one can help you set realistic expectations and tailor your learning path.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/what-affects-how-fast-you-can-learn-sql-s384i.png\" alt=\"What affects how fast you can learn SQL?\"></p>\n<p><strong>Prior programming experience</strong></p>\n<p>If you have some experience with programming languages like Python, JavaScript, or Java, you’ll likely find it easier to pick up SQL. That’s because many SQL concepts, such as logic, conditions, and data operations, feel familiar if you’ve worked with code before.</p>\n<p>But don’t worry if you’re completely new to coding. You don’t need programming experience, but if you’ve worked with code, the logic will click faster. As you start working with queries, you’ll see how SQL’s structured approach aligns closely with the logical thinking used in many programming languages.</p>\n<p><strong>Familiarity with databases or data concepts</strong></p>\n<p>If you are someone who has used spreadsheets like Excel or Google Sheets before, you will pick up SQL faster. Databases store data in tables just like spreadsheets. If you’re already comfortable with basic data concepts (like creating and managing tables, rows, and columns), you can jump right into SQL syntax at the beginning of your learning journey.</p>\n<p><strong>Time spent practicing each week</strong></p>\n<p>Consistency matters more than cramming when learning SQL. Practicing a few times a week using a downloadable tool or an online platform helps reinforce your understanding over time. Regular practice will allow your brain to consolidate new knowledge, reinforce key concepts, and build lasting skills. Structured courses with built-in challenges and instant feedback make this process more effective by encouraging regular practice.</p>\n<p><strong>Learning method</strong></p>\n<p>The resources you choose for learning SQL can also make a difference. Relying only on passive reading or watching is less effective than practicing while learning. Most people, nowadays, believe YouTube tutorials and documentation are enough to learn SQL. The truth is, tutorials can help you understand concepts, but structured practice is where you’ll make the most progress.</p>\n<p>You can join interactive courses for a more engaging and efficient learning experience. Videos and textbooks can also be great sources for learning concepts, but joining an interactive course for immediate feedback and practice is best.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-interactive-course-f1m8m.jpeg\" alt=\"SQL interactive course\"></p>\n<p><strong>Goal: Basic querying vs. job-level proficiency</strong></p>\n<p>What you aim to achieve is another key factor that affects how fast you can learn SQL. Let’s say your purpose for learning SQL is to be able to automate simple data reports. In this case, you won’t need to spend much time learning advanced SQL practice. However, if you aim to build a complex data model or become a data analyst, database administrator, or software engineer, you must acquire complete SQL knowledge.</p>\n<p>To better understand how your skills can progress over time, the next section outlines important learning milestones, from beginner to advanced capabilities.</p>\n<h2 id=\"a-breakdown-of-sql-learning-milestones\">A breakdown of SQL learning milestones</h2>\n<p>Let’s break down the SQL learning journey into practical stages. Whether you’re starting with the basics, working on subqueries and data manipulation language (DML), or exploring advanced SQL functions, this timeline provides a general guide. Your learning speed may vary depending on how much time and effort you put in.</p>\n<p>If you’re still wondering about the difficulty level, check out our guide, <a href=\"https://linear.app/hmb-roadmap/issue/HMB-58/may-is-sql-hard-to-learn-an-expert-take\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Is SQL Hard to Learn</a>? for a deeper look at what to expect and how to overcome common challenges.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/how-long-does-it-take-to-learn-sql-kl92v.png\" alt=\"A breakdown of SQL learning milestones\"></p>\n<p><strong>Day 1 to 7: Get the basics down</strong></p>\n<p>Learning SQL fundamentals and how database structures work will be the first step. Before moving to the use of basic SQL syntax, you will become familiar with the concept of relational databases, database management system, their benefits and limitations, why they’re useful, and how they differ from NoSQL systems. This foundation will help you grasp why SQL is the industry-standard language for working with structured data.</p>\n<p>Next, you’ll dive into SQL statements. You’ll write your first <code>SELECT</code> queries to retrieve specific data, use <code>INSERT INTO</code> to add new records, and apply <code>WHERE</code>, <code>ORDER BY</code>, and <code>JOIN</code> clauses to filter, sort, and combine data across tables. By the end of the week, you’ll be comfortable writing simple queries to explore real datasets. If you’re following a structured learning process, this is a great time to start a <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL roadmap course</a> to test your progress and reinforce what you’ve learned.</p>\n<p><strong>Weeks 2 to 4: Become query-confident</strong></p>\n<p>Now that you’ve covered the basics, you’ll move on to manipulating and summarizing data. You’ll use <a href=\"https://satoricyber.com/glossary/dml-data-manipulation-language\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Data Manipulation Language</a> (DML) commands like <code>UPDATE</code>, <code>DELETE</code>, and <code>MERGE</code>, while also mastering more advanced clauses such as <code>GROUP BY</code>, <code>HAVING</code>, and multiple types of <code>JOINs</code>.</p>\n<p>You’ll write queries that combine customer and order data, summarize sales by category, or calculate total revenue by region. For example, in one of the course challenges, you’ll analyze top-performing books using <code>GROUP BY</code>, <code>COUNT</code>, and <code>SUM</code>, then refine your results using <code>HAVING</code>.</p>\n<p>These real challenges and practice sessions will make you feel more confident.</p>\n<p><strong>Months 2 to 3: Go deeper</strong></p>\n<p>At this point, you’ll start breaking down more complex problems. You’ll use subqueries to nest logic inside queries and apply <a href=\"https://www.atlassian.com/data/sql/using-common-table-expressions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Common Table Expressions</a> (CTEs) to improve readability and modularity. You’ll also work with correlated subqueries when query results depend on data from an outer query.</p>\n<p>You’ll improve query performance by learning how indexes work and using tools like <code>EXPLAIN ANALYZE</code> to diagnose slow queries. You’ll also explore window functions to calculate running totals, ranks, or rolling averages, crucial for time-series data and cohort analysis.</p>\n<p>Additionally, you can explore more advanced SQL features like stored procedures, triggers, and functions to automate tasks and encapsulate logic at the database level.</p>\n<p>You may find new strategies and tips to help write more efficient and faster-executing SQL queries. This phase helps you think like a data professional, making your SQL more efficient, readable, and scalable.</p>\n<p><strong>Beyond 3 months: Apply and build projects</strong></p>\n<p>By now, you’re ready to apply your skills. You’ll work on mini-projects like tracking personal expenses, analyzing product performance, or building a simple task manager, all using SQL as the core engine. You’ll learn how to design database schemas, define tables and relationships, and write optimized queries that handle large datasets.</p>\n<p>The use of SQL and database management would be clear. This is where you transition from learning individual concepts to working on real-world projects.</p>\n<p>You’ll also get to design your own database schemas, plan tables, define columns and relationships, and learn how to write SQL queries that can handle big data.</p>\n<p>Our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> in this stage will help you learn how to use SQL to pull the right data for charts, dashboards, and business intelligence tools like filtering sales by region, summarizing revenue trends, or preparing customer data for visualization in tools like Power BI or Tableau. You can try the <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">course’s Sales Data Analysis or Book Performance exercises</a> to simulate business scenarios. These exercises will provide more extensive datasets and require you to apply a combination of SQL skills to answer business questions and other tasks.</p>\n<p>These practical exercises help reinforce what you’ve learned and give you a feel for how professionals use SQL. However, how quickly you pick up these skills can vary from person to person, depending on your background and experience.</p>\n<h2 id=\"how-does-your-background-change-the-learning-curve\">How does your background change the learning curve?</h2>\n<p>As mentioned earlier, your prior experience and professional background can impact how quickly you learn SQL. Here’s a general idea of how long it might take to learn SQL, based on your profile, whether you’re just starting out or already have some technical experience.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/how-does-your-background-change-the-learning-curve-0n57f.png\" alt=\"How does your background change the learning curve?\"></p>\n<p><strong>Complete beginner (no coding or data background)</strong></p>\n<p>If you are new to coding or learning SQL and starting from scratch, you might take some extra time to reach a higher level. First, get comfortable with basic programming logic and relational data concepts.</p>\n<p>Many SQL commands may seem unfamiliar initially, but soon, you will begin to feel confident with intermediate SQL skills in a month or two. Expect a minimum of one to two months to get comfortable with data concepts and understand query logic and syntax.</p>\n<p><strong>Beginner coder (some programming experience)</strong></p>\n<p>Experience in programming languages (Python, JavaScript, etc.) can help you grasp the basics faster. The logical structure of SQL and the concept of manipulating data will be more familiar to beginner coders.</p>\n<p>You can expect to learn how to write multi-table queries and basic aggregations in about three to four weeks. If you have a coding background, you may find it easier to understand how SQL fits into broader software development processes and real-world data workflows.</p>\n<p><strong>Data-adjacent professionals (experience with Excel, Airtable, or BI dashboards)</strong></p>\n<p>If you have worked on spreadsheets or have experience with BI tools, you might already know how to manipulate data tables. If you’re already comfortable with filtering, sorting, or basic aggregations, you will probably grasp these concepts in SQL sooner than other learners. SQL, in this case, might feel like just another step, offering more knowledge on data manipulation and advanced topics. Most individuals hardly require a month of dedicated learning and practice to excel in this field.</p>\n<p>No matter which profile you belong to, remember that consistency is important. With regular practice, you can improve your skills and achieve the end goal. But before measuring progress, it’s important to understand what “learning SQL” actually means, since it can vary depending on your goals.</p>\n<h2 id=\"what-counts-as-learning-sql-anyway\">What counts as ‘learning SQL’ anyway?</h2>\n<p>Now that you know how long it takes to learn SQL, consider what you want to achieve with your SQL skills. Setting clear goals helps you stay focused and track your progress. Here are some of the common goals that people have when learning SQL.</p>\n<p><strong>Running basic SQL queries</strong></p>\n<p>If your goal is to generate quick insights like pulling a list of active users, filtering transactions above a certain value, or summarizing monthly sales, basic SQL commands are enough. For instance, a marketer may use <code>SELECT</code>, <code>WHERE</code>, and <code>ORDER BY</code> to audit campaign performance across different regions. Product teams often JOIN user data with event logs to identify drop-off points in the user journey.</p>\n<p><strong>Writing more complex queries with subqueries or CTEs</strong></p>\n<p>Need to build a churn report that tracks subscription drop-offs by cohort? Or a sales dashboard that compares revenue across product lines over time? You’ll benefit from learning subqueries, <code>GROUP BY</code> with aggregations, and Common Table Expressions (CTEs). These allow you to modularize logic and pull clean, reusable datasets from raw tables.</p>\n<p><strong>Understanding indexing and performance</strong></p>\n<p>If you’re working with millions of rows of, say, log data from a web app or transactional records from an e-commerce platform, you’ll eventually need to write performance-optimized queries. That includes understanding indexing, choosing the right <code>JOIN</code> types, and analyzing execution plans with <code>EXPLAIN ANALYZE</code>. These skills help ensure your queries run efficiently, even as data grows.</p>\n<p><strong>Using SQL in data science or software engineering</strong></p>\n<p>In roles like data engineering or backend development, SQL is often used alongside Python, Spark, or cloud tools to build data science pipelines or APIs. Data scientists use it to prepare datasets for modeling, like pulling engagement metrics by user segment or identifying outliers in product usage patterns.</p>\n<p>Every person’s requirements are different. Some might need only basic knowledge of SQL queries to generate reports, while others may require mastering them for database optimization. So, determine your goals and practice regularly.</p>\n<p>Once you’re clear on your purpose, staying motivated becomes easier. The next step is figuring out how to stay consistent and accelerate your learning process.</p>\n<h2 id=\"how-to-stay-consistent-and-speed-up-your-learning\">How to stay consistent and speed up your learning</h2>\n<p>From my experience, keeping a note of these practical tips will help you learn SQL faster:</p>\n<p><strong>Consistent practice:</strong> You don’t need to spend hours or a day making notes and learning SQL. All you need to do is be consistent by committing to a short, 30-minute session per day. Half an hour of daily, focused practice will add up and bring quality results.</p>\n<p><strong>Build mini projects:</strong> Instead of working through exercises in isolation, apply SQL to concrete data. Create a sample database, such as a sales record or customer list, and write queries to answer real life scenario questions.</p>\n<p>This practical experience of analyzing a dataset of customer orders will bring you real challenges and build confidence. Several online courses provide real datasets to improve learning and problem solving skills.</p>\n<p><strong>Use SQL course challenges:</strong> Guided lessons and challenges can keep you on track. Our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> covers dozens of practical challenges and quizzes to test your knowledge and develop problem solving skills. From ‘Book Performance’ to ‘Customer Contact List’, you can practice different queries. It also provides a course completion certificate to potential candidates.</p>\n<p><strong>Pair SQL with Python:</strong> If you’re interested in data analysis or software development, learning to use SQL with other programming languages like <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> can be great. These practical experiences will motivate you and expand your capabilities.</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>Many beginners worry that learning SQL will take forever, but the reality is that it depends on your background, goals, and how consistently you practice. With a little dedication, you can start writing basic queries in just a week and become interview-ready in a couple of months, even without prior programming experience.</p>\n<p>Just remember, some learners move faster, applying skills to data analytics or app development, while others take more time to get comfortable with queries. That’s why following a clear, step-by-step path matters. A guided course can help you avoid confusion and build confidence from day one.</p>\n<p>If you’re serious about learning SQL, the <a href=\"https://roadmap.sh/sql\" target=\"_blank\">Roadmap SQL guide</a> is built for you. It breaks down concepts into actionable lessons and supports you through every stage of your journey. Explore more learning paths and connect with experts in our <a href=\"https://discord.com/invite/GBY7zEc3uB\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Discord community</a>. You don’t have to learn alone.</p>";

				const frontmatter$b = {"title":"How Long Does It Take to Learn SQL? (An Expert's Take)","description":"How long does it take to learn SQL? A seasoned expert shares what to expect, from basics to job-ready skills.","authorId":"ekene","excludedBySlug":"/sql/how-long-to-learn","seo":{"title":"How Long Does It Take to Learn SQL? (An Expert's Take)","description":"How long does it take to learn SQL? A seasoned expert shares what to expect, from basics to job-ready skills.","ogImageUrl":"https://assets.roadmap.sh/guest/how-long-does-it-take-to-learn-sql-4o4jz.jpg"},"isNew":true,"type":"textual","date":"2025-06-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$b = "/workspace/src/data/guides/sql-how-long-to-learn.md";
				const url$b = undefined;
				function rawContent$b() {
					return "   \n                                                             \n                                                                                                                          \n               \n                                        \n    \n                                                               \n                                                                                                                            \n                                                                                          \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![How Long Does It Take to Learn SQL? (An Expert's Take)](https://assets.roadmap.sh/guest/how-long-does-it-take-to-learn-sql-4o4jz.jpg)\n\nWith steady practice, you can start grasping basic SQL concepts in just a few days, grow confident writing queries within a month, and reach proficiency in advanced SQL concepts in three to six months.\n\nHowever, before you mark your calendar, remember this timeline does not apply to everyone.\n\nLearning a new skill or language takes time and heavily depends on your goals and learning style. The same is true for SQL. Your prior experience and the effort you dedicate are key to achieving final results.\n\nOur interactive [SQL course](https://roadmap.sh/courses/sql) is designed to guide you through every step of the journey, from SQL basics to advanced SQL. Starting with the basics like database concepts and `SELECT` queries, it steadily builds up to complex topics such as joins, subqueries, scalar, data definition language, data control language, and window functions. You'll practice how to write SQL queries to manage data, explore datasets, and perform real-world data analysis.\n\nTo help you make the most of this learning path, it's important to understand what kind of time commitment SQL requires. This guide will help you understand how long it takes to learn SQL, based on different skill levels, goals, and learning methods. It doesn't matter if you're a complete beginner or someone with some experience; we'll break down clear timelines, essential topics to focus on, and practical tips to stay consistent throughout your learning journey.\n\n## Your SQL learning speed depends on these factors\n\nA few core factors determine how quickly you'll get comfortable with SQL. Knowing where you stand with each one can help you set realistic expectations and tailor your learning path.\n\n![What affects how fast you can learn SQL?](https://assets.roadmap.sh/guest/what-affects-how-fast-you-can-learn-sql-s384i.png)\n\n**Prior programming experience**\n\nIf you have some experience with programming languages like Python, JavaScript, or Java, you'll likely find it easier to pick up SQL. That's because many SQL concepts, such as logic, conditions, and data operations, feel familiar if you've worked with code before.\n\nBut don't worry if you're completely new to coding. You don't need programming experience, but if you've worked with code, the logic will click faster. As you start working with queries, you'll see how SQL's structured approach aligns closely with the logical thinking used in many programming languages.\n\n**Familiarity with databases or data concepts**\n\nIf you are someone who has used spreadsheets like Excel or Google Sheets before, you will pick up SQL faster. Databases store data in tables just like spreadsheets. If you're already comfortable with basic data concepts (like creating and managing tables, rows, and columns), you can jump right into SQL syntax at the beginning of your learning journey.\n\n**Time spent practicing each week**\n\nConsistency matters more than cramming when learning SQL. Practicing a few times a week using a downloadable tool or an online platform helps reinforce your understanding over time. Regular practice will allow your brain to consolidate new knowledge, reinforce key concepts, and build lasting skills. Structured courses with built-in challenges and instant feedback make this process more effective by encouraging regular practice.\n\n**Learning method**\n\nThe resources you choose for learning SQL can also make a difference. Relying only on passive reading or watching is less effective than practicing while learning. Most people, nowadays, believe YouTube tutorials and documentation are enough to learn SQL. The truth is, tutorials can help you understand concepts, but structured practice is where you'll make the most progress.\n\nYou can join interactive courses for a more engaging and efficient learning experience. Videos and textbooks can also be great sources for learning concepts, but joining an interactive course for immediate feedback and practice is best. \n\n![SQL interactive course](https://assets.roadmap.sh/guest/sql-interactive-course-f1m8m.jpeg)\n\n**Goal: Basic querying vs. job-level proficiency**\n\nWhat you aim to achieve is another key factor that affects how fast you can learn SQL. Let's say your purpose for learning SQL is to be able to automate simple data reports. In this case, you won't need to spend much time learning advanced SQL practice. However, if you aim to build a complex data model or become a data analyst, database administrator, or software engineer, you must acquire complete SQL knowledge.\n\nTo better understand how your skills can progress over time, the next section outlines important learning milestones, from beginner to advanced capabilities.\n\n## A breakdown of SQL learning milestones\n\nLet's break down the SQL learning journey into practical stages. Whether you're starting with the basics, working on subqueries and data manipulation language (DML), or exploring advanced SQL functions, this timeline provides a general guide. Your learning speed may vary depending on how much time and effort you put in.\n\nIf you're still wondering about the difficulty level, check out our guide, [Is SQL Hard to Learn](https://linear.app/hmb-roadmap/issue/HMB-58/may-is-sql-hard-to-learn-an-expert-take)? for a deeper look at what to expect and how to overcome common challenges.\n\n![A breakdown of SQL learning milestones](https://assets.roadmap.sh/guest/how-long-does-it-take-to-learn-sql-kl92v.png)\n\n**Day 1 to 7: Get the basics down**\n\nLearning SQL fundamentals and how database structures work will be the first step. Before moving to the use of basic SQL syntax, you will become familiar with the concept of relational databases, database management system, their benefits and limitations, why they're useful, and how they differ from NoSQL systems. This foundation will help you grasp why SQL is the industry-standard language for working with structured data.\n\nNext, you'll dive into SQL statements. You'll write your first `SELECT` queries to retrieve specific data, use `INSERT INTO` to add new records, and apply `WHERE`, `ORDER BY`, and `JOIN` clauses to filter, sort, and combine data across tables. By the end of the week, you'll be comfortable writing simple queries to explore real datasets. If you're following a structured learning process, this is a great time to start a [SQL roadmap course](https://roadmap.sh/courses/sql) to test your progress and reinforce what you've learned.\n\n**Weeks 2 to 4: Become query-confident**\n\nNow that you've covered the basics, you'll move on to manipulating and summarizing data. You'll use [Data Manipulation Language](https://satoricyber.com/glossary/dml-data-manipulation-language) (DML) commands like `UPDATE`, `DELETE`, and `MERGE`, while also mastering more advanced clauses such as `GROUP BY`, `HAVING`, and multiple types of `JOINs`.\n\nYou'll write queries that combine customer and order data, summarize sales by category, or calculate total revenue by region. For example, in one of the course challenges, you'll analyze top-performing books using `GROUP BY`, `COUNT`, and `SUM`, then refine your results using `HAVING`.\n\nThese real challenges and practice sessions will make you feel more confident.\n\n**Months 2 to 3: Go deeper**\n\nAt this point, you'll start breaking down more complex problems. You'll use subqueries to nest logic inside queries and apply [Common Table Expressions](https://www.atlassian.com/data/sql/using-common-table-expressions) (CTEs) to improve readability and modularity. You'll also work with correlated subqueries when query results depend on data from an outer query.\n\nYou'll improve query performance by learning how indexes work and using tools like `EXPLAIN ANALYZE` to diagnose slow queries. You'll also explore window functions to calculate running totals, ranks, or rolling averages, crucial for time-series data and cohort analysis.\n\nAdditionally, you can explore more advanced SQL features like stored procedures, triggers, and functions to automate tasks and encapsulate logic at the database level.\n\nYou may find new strategies and tips to help write more efficient and faster-executing SQL queries. This phase helps you think like a data professional, making your SQL more efficient, readable, and scalable.\n\n**Beyond 3 months: Apply and build projects**\n\nBy now, you're ready to apply your skills. You'll work on mini-projects like tracking personal expenses, analyzing product performance, or building a simple task manager, all using SQL as the core engine. You'll learn how to design database schemas, define tables and relationships, and write optimized queries that handle large datasets. \n\nThe use of SQL and database management would be clear. This is where you transition from learning individual concepts to working on real-world projects.\n\nYou'll also get to design your own database schemas, plan tables, define columns and relationships, and learn how to write SQL queries that can handle big data.\n\nOur [SQL course](https://roadmap.sh/courses/sql) in this stage will help you learn how to use SQL to pull the right data for charts, dashboards, and business intelligence tools like filtering sales by region, summarizing revenue trends, or preparing customer data for visualization in tools like Power BI or Tableau. You can try the [course's Sales Data Analysis or Book Performance exercises](https://roadmap.sh/courses/sql) to simulate business scenarios. These exercises will provide more extensive datasets and require you to apply a combination of SQL skills to answer business questions and other tasks.\n\nThese practical exercises help reinforce what you've learned and give you a feel for how professionals use SQL. However, how quickly you pick up these skills can vary from person to person, depending on your background and experience.\n\n## How does your background change the learning curve?\n\nAs mentioned earlier, your prior experience and professional background can impact how quickly you learn SQL. Here's a general idea of how long it might take to learn SQL, based on your profile, whether you're just starting out or already have some technical experience.\n\n![How does your background change the learning curve?](https://assets.roadmap.sh/guest/how-does-your-background-change-the-learning-curve-0n57f.png)\n\n**Complete beginner (no coding or data background)**\n\nIf you are new to coding or learning SQL and starting from scratch, you might take some extra time to reach a higher level. First, get comfortable with basic programming logic and relational data concepts.\n\nMany SQL commands may seem unfamiliar initially, but soon, you will begin to feel confident with intermediate SQL skills in a month or two. Expect a minimum of one to two months to get comfortable with data concepts and understand query logic and syntax.\n\n**Beginner coder (some programming experience)**\n\nExperience in programming languages (Python, JavaScript, etc.) can help you grasp the basics faster. The logical structure of SQL and the concept of manipulating data will be more familiar to beginner coders.\n\nYou can expect to learn how to write multi-table queries and basic aggregations in about three to four weeks. If you have a coding background, you may find it easier to understand how SQL fits into broader software development processes and real-world data workflows.\n\n**Data-adjacent professionals (experience with Excel, Airtable, or BI dashboards)**\n\nIf you have worked on spreadsheets or have experience with BI tools, you might already know how to manipulate data tables. If you're already comfortable with filtering, sorting, or basic aggregations, you will probably grasp these concepts in SQL sooner than other learners. SQL, in this case, might feel like just another step, offering more knowledge on data manipulation and advanced topics. Most individuals hardly require a month of dedicated learning and practice to excel in this field.\n\nNo matter which profile you belong to, remember that consistency is important. With regular practice, you can improve your skills and achieve the end goal. But before measuring progress, it's important to understand what \"learning SQL\" actually means, since it can vary depending on your goals.\n\n## What counts as 'learning SQL' anyway?\n\nNow that you know how long it takes to learn SQL, consider what you want to achieve with your SQL skills. Setting clear goals helps you stay focused and track your progress. Here are some of the common goals that people have when learning SQL.\n\n**Running basic SQL queries**\n\nIf your goal is to generate quick insights like pulling a list of active users, filtering transactions above a certain value, or summarizing monthly sales, basic SQL commands are enough. For instance, a marketer may use `SELECT`, `WHERE`, and `ORDER BY` to audit campaign performance across different regions. Product teams often JOIN user data with event logs to identify drop-off points in the user journey.\n\n**Writing more complex queries with subqueries or CTEs**\n\nNeed to build a churn report that tracks subscription drop-offs by cohort? Or a sales dashboard that compares revenue across product lines over time? You'll benefit from learning subqueries, `GROUP BY` with aggregations, and Common Table Expressions (CTEs). These allow you to modularize logic and pull clean, reusable datasets from raw tables.\n\n**Understanding indexing and performance**\n\nIf you're working with millions of rows of, say, log data from a web app or transactional records from an e-commerce platform, you'll eventually need to write performance-optimized queries. That includes understanding indexing, choosing the right `JOIN` types, and analyzing execution plans with `EXPLAIN ANALYZE`. These skills help ensure your queries run efficiently, even as data grows.\n\n**Using SQL in data science or software engineering**\n\nIn roles like data engineering or backend development, SQL is often used alongside Python, Spark, or cloud tools to build data science pipelines or APIs. Data scientists use it to prepare datasets for modeling, like pulling engagement metrics by user segment or identifying outliers in product usage patterns.\n\nEvery person's requirements are different. Some might need only basic knowledge of SQL queries to generate reports, while others may require mastering them for database optimization. So, determine your goals and practice regularly.\n\nOnce you're clear on your purpose, staying motivated becomes easier. The next step is figuring out how to stay consistent and accelerate your learning process.\n\n## How to stay consistent and speed up your learning\n\nFrom my experience, keeping a note of these practical tips will help you learn SQL faster:\n\n**Consistent practice:** You don't need to spend hours or a day making notes and learning SQL. All you need to do is be consistent by committing to a short, 30-minute session per day. Half an hour of daily, focused practice will add up and bring quality results. \n\n**Build mini projects:** Instead of working through exercises in isolation, apply SQL to concrete data. Create a sample database, such as a sales record or customer list, and write queries to answer real life scenario questions.\n\nThis practical experience of analyzing a dataset of customer orders will bring you real challenges and build confidence. Several online courses provide real datasets to improve learning and problem solving skills.\n\n**Use SQL course challenges:** Guided lessons and challenges can keep you on track. Our [SQL course](https://roadmap.sh/courses/sql) covers dozens of practical challenges and quizzes to test your knowledge and develop problem solving skills. From 'Book Performance' to 'Customer Contact List', you can practice different queries. It also provides a course completion certificate to potential candidates.\n\n**Pair SQL with Python:** If you're interested in data analysis or software development, learning to use SQL with other programming languages like [Python](https://roadmap.sh/python) can be great. These practical experiences will motivate you and expand your capabilities.\n\n## Wrapping up\n\nMany beginners worry that learning SQL will take forever, but the reality is that it depends on your background, goals, and how consistently you practice. With a little dedication, you can start writing basic queries in just a week and become interview-ready in a couple of months, even without prior programming experience.\n\nJust remember, some learners move faster, applying skills to data analytics or app development, while others take more time to get comfortable with queries. That's why following a clear, step-by-step path matters. A guided course can help you avoid confusion and build confidence from day one.\n\nIf you're serious about learning SQL, the [Roadmap SQL guide](https://roadmap.sh/sql) is built for you. It breaks down concepts into actionable lessons and supports you through every stage of your journey. Explore more learning paths and connect with experts in our [Discord community](https://discord.com/invite/GBY7zEc3uB). You don't have to learn alone. ";
				}
				async function compiledContent$b() {
					return await html$b();
				}
				function getHeadings$b() {
					return [{"depth":2,"slug":"your-sql-learning-speed-depends-on-these-factors","text":"Your SQL learning speed depends on these factors"},{"depth":2,"slug":"a-breakdown-of-sql-learning-milestones","text":"A breakdown of SQL learning milestones"},{"depth":2,"slug":"how-does-your-background-change-the-learning-curve","text":"How does your background change the learning curve?"},{"depth":2,"slug":"what-counts-as-learning-sql-anyway","text":"What counts as ‘learning SQL’ anyway?"},{"depth":2,"slug":"how-to-stay-consistent-and-speed-up-your-learning","text":"How to stay consistent and speed up your learning"},{"depth":2,"slug":"wrapping-up","text":"Wrapping up"}];
				}

				const Content$b = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$b;
					content.file = file$b;
					content.url = url$b;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$b())}`;
				});

const __vite_glob_0_87 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$b,
	compiledContent: compiledContent$b,
	default: Content$b,
	file: file$b,
	frontmatter: frontmatter$b,
	getHeadings: getHeadings$b,
	rawContent: rawContent$b,
	url: url$b
}, Symbol.toStringTag, { value: 'Module' }));

const html$a = () => "<h1 id=\"sql-vs-mysql-whats-the-difference\">SQL vs. MySQL: What’s the Difference?</h1>\n<p>SQL (Structured Query Language) is the standard language used to interact with relational databases. MySQL is an open source database system that understands and runs SQL commands. But there’s more to it than that. Their names get mixed up all the time, and if you’re just starting out, it can be confusing to figure out what to learn, what each one does, and how they fit together in real projects.</p>\n<p>In this guide, I’ll walk you through their key differences, explain when and why to use each, and show how they work together in real-world applications.</p>\n<p>If you’re a beginner or an early career developer trying to learn SQL, roadmap.sh’s <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> is a great place to learn the basics. To go into more advanced topics, check out the <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> offered by roadmap.sh.</p>\n<p>Here’s a quick side-by-side comparison of SQL and MySQL</p>\n<h2 id=\"differences-between-sql-and-mysql\">Differences between SQL and MySQL</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>SQL</strong></th><th><strong>MySQL</strong></th></tr></thead><tbody><tr><td>A programming language for managing Relational Database Management Systems (RDBMS).</td><td>A relational database management system that uses SQL.</td></tr><tr><td>Used to query and process information in databases.</td><td>Allows you to store, delete, modify, and retrieve data in an organized manner.</td></tr><tr><td>Follows a simple standard and does not have regular updates.</td><td>Has many variants and gets regular updates.</td></tr><tr><td>Not subject to licensing because it is a programming language.</td><td>An open-source database; hence, it is free but may have some premium or commercial versions with additional features.</td></tr></tbody></table>\n<h2 id=\"sql-related-key-terms\">SQL-related key terms</h2>\n<p>Before we discuss the definitions of SQL and MySQL, you should be familiar with some key terms that will be used in this guide.</p>\n<p><strong>Database</strong></p>\n<p>A database is an organized collection of data stored electronically and structured in a way that makes data easily accessible.</p>\n<p><strong>Relational Database Management System (RDBMS)</strong></p>\n<p>A relational database management system allows you to identify and access data in relation to another piece of data in the database. It stores data in rows and columns in tables to make processing and querying efficient.</p>\n<p><strong>Storage engine</strong></p>\n<p>A storage engine is the software that a database management system uses to create, read, and update data from a database.</p>\n<p><strong>Open source</strong></p>\n<p>Open source software has publicly accessible code that anyone can use, modify, or share.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-vs-mysql-qf2ph.png\" alt=\"SQL vs MySQL\"></p>\n<h2 id=\"what-is-sql\">What is SQL?</h2>\n<p>SQL stands for Structured Query Language. It is the standard data query language used to interact with relational databases, including Oracle, <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>, MySQL, and SQL Server Express. Most database queries for fetching, adding, and manipulating data are based on SQL syntax.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/what-is-sql-422cl.png\" alt=\"What is SQL?\"></p>\n<p>If you work as a database administrator or a developer, SQL enables you to create, read, update, and delete data also known as CRUD operations. You can also use SQL to maintain and optimize database performance.</p>\n<p>Given a table <code>Users</code> with four columns <code>userid,</code> <code>firstname, lastname and age</code> that looks like this:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/users-table-h3t9k.png\" alt=\"Users table\"></p>\n<p>You can use SQL to fetch all the users from the table using the command below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">SELECT</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#FF79C6\"> FROM</span><span style=\"color:#F8F8F2\"> Users;</span></span></code></pre>\n<p>The code above is a simple SQL statement that gets all the data from the <code>Users</code> table. However, you can also fetch specific columns from the table instead of all the data. The code snippet below shows how to get the <code>FirstName</code> and <code>LastName</code> of each user in the <code>Users</code> table.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">SELECT</span><span style=\"color:#F8F8F2\"> FirstName, LastName </span><span style=\"color:#FF79C6\">FROM</span><span style=\"color:#F8F8F2\"> Users;</span></span></code></pre>\n<p>The result of the query looks like this:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/first-and-lastname-0vh87.png\" alt=\"firstname and lastname columns\"></p>\n<h2 id=\"features-of-sql\">Features of SQL</h2>\n<p>This section will show you some of SQL’s most unique features, which include:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/features-of-sql-uceot.png\" alt=\"Features of SQL\"></p>\n<ul>\n<li><strong>Easy to understand</strong>: SQL uses familiar English verbs like SELECT, CREATE, and UPDATE, making its syntax intuitive, even for non-developers. Columns and tables usually have meaningful names, and you can read SQL statements as English sentences.</li>\n</ul>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">CREATE</span><span style=\"color:#FF79C6\"> TABLE</span><span style=\"color:#50FA7B\"> Users</span><span style=\"color:#F8F8F2\"> (UserId </span><span style=\"color:#FF79C6\">int</span><span style=\"color:#F8F8F2\">, FirstName </span><span style=\"color:#FF79C6\">varchar</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">255</span><span style=\"color:#F8F8F2\">), LastName </span><span style=\"color:#FF79C6\">varchar</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">255</span><span style=\"color:#F8F8F2\">));</span></span></code></pre>\n<p>In the code above, even as a non-technical English speaker, you can understand what the SQL statement is doing by just reading it. It creates a table called <code>Users</code> with columns <code>UserId</code>, <code>FirstName</code>, and <code>LastName</code>.</p>\n<ul>\n<li>\n<p><strong>High performance</strong>: SQL allows you to insert, modify, and delete data in a short amount of time. You can also use it to retrieve a large amount of data quickly and efficiently.</p>\n</li>\n<li>\n<p><strong>Portability</strong>: SQL can be used across multiple RDBMS such as MySQL, PostgreSQL, Microsoft SQL Server, etc.</p>\n</li>\n<li>\n<p><strong>Security</strong>: SQL enables the security of database systems by ensuring that only authorized users can view specific information in a database management system. For example, if you want to prevent a user from accessing a table, you can use the code below:</p>\n</li>\n</ul>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#FF79C6\">REVOKE</span><span style=\"color:#FF79C6\"> SELECT</span><span style=\"color:#FF79C6\"> ON</span><span style=\"color:#F8F8F2\"> Salaries </span><span style=\"color:#FF79C6\">FROM</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">user123</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">@</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span></code></pre>\n<h2 id=\"what-is-mysql\">What is MySQL?</h2>\n<p>MySQL is an open source relational database management system owned by Oracle. It stores and manages data in tables of rows and columns and uses SQL for query execution.</p>\n<h2 id=\"features-of-mysql\">Features of MySQL</h2>\n<p>The main features of MySQL include:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/features-of-mysql-47vgf.png\" alt=\"Features of MySQL\"></p>\n<ul>\n<li><strong>Open source</strong>: MySQL is an open source RDBMS. You can use it for free and customize its source code to meet your needs.</li>\n<li><strong>Cross-platform compatibility</strong>: MySQL can run on various platforms, including Linux, Windows, and UNIX operating systems.</li>\n<li><strong>Regular updates and development</strong>: MySQL has a huge developer community that provides fixes and regular updates.</li>\n<li><strong>Tooling</strong>: MySQL workbench offers a GUI for managing databases.</li>\n</ul>\n<h2 id=\"how-do-they-show-up-in-real-projects\">How do they show up in real projects?</h2>\n<p>When working on a real project, such as creating an e-commerce application and storing the order and user data, you need to choose a database system like MySQL. You will have to connect your backend service with the MySQL database, and either write raw SQL commands or use an Object Relation Mapper (ORM).</p>\n<p>Let’s walk through how SQL and MySQL work together in a basic CRUD application built with <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a>.</p>\n<ol>\n<li>\n<p>First, you need to set up your environment by installing the required tools. The necessary tools include:</p>\n<ul>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Python</a> (version 3.8+)</li>\n<li><a href=\"https://www.mysql.com/downloads/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">MySQL server</a></li>\n<li>pip (Python package manager)</li>\n<li>MySQL driver to access the MySQL database</li>\n</ul>\n<p>To install the MySQL driver, run the command below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">pip</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> mysql-connector-python</span></span></code></pre>\n</li>\n<li>\n<p>Next, create a connection to your MySQL database using the username and password from your database. Then, create a file called <code>application.py</code> and paste the code below into it.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> mysql.connector</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">db </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> mysql.connector.connect(</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  host</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  user</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;username></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  password</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;password></span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span></code></pre>\n</li>\n<li>\n<p>Create the database <code>usersDatabase</code> using the code below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">cursor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> db.cursor()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">CREATE DATABASE usersDatabase</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span></code></pre>\n<p>The code above shows the SQL command for creating a database, which is executed by the MySQL driver.</p>\n</li>\n<li>\n<p>Then, create the <code>Users</code> table using the SQL command <code>Create Table</code>, as shown in the code below.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">CREATE TABLE users (id int, firstName VARCHAR(255), lastName VARCHAR(255))</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span></code></pre>\n</li>\n<li>\n<p>Next, insert a record into the <code>Users</code> table:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">db </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> mysql.connector.connect(</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  host</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  user</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourusername></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  password</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourpassword></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  database</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">usersDatabase</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> db.cursor()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">sqlStatement </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">INSERT INTO users (id, firstName, lastName) VALUES (</span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#F1FA8C\">, </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#F1FA8C\">, </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#F1FA8C\">)</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">value </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">John</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Doe</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(sqlStatement, value)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">db.commit()</span></span></code></pre>\n<p>In the code above, the SQL command that inserts a value into the <code>Users</code> table is defined with <code>INSERT INTO</code> and executed using <code>cursor.execute(...)</code>. The other lines of code are specific to the Python MySQL driver. Finally, <code>db.commit()</code> is called to make the changes to the MySQL database; otherwise, data is not written to the database.</p>\n</li>\n<li>\n<p>Let’s read the user data from the <code>Users</code> table. To do that, we will use the <code>SELECT</code> statement, as seen in the code below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">db </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> mysql.connector.connect(</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  host</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  user</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourusername></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  password</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourpassword></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  database</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">usersDatabase</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> db.cursor()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">SELECT * FROM users</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">result </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> cursor.fetchall()</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">print</span><span style=\"color:#F8F8F2\">(result)</span></span></code></pre>\n<p>In the code above, we fetch the users using SQL from the <code>Users</code> table in the MySQL database and print the result to the console.</p>\n</li>\n<li>\n<p>We can update the user data using the SQL <code>UPDATE</code> statement. The code to do this is shown below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">db </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> mysql.connector.connect(</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  host</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  user</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourusername></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  password</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourpassword></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  database</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">usersDatabase</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> db.cursor()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">sql </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">UPDATE users SET firstName = 'Jane' WHERE id = 1</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(sql)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">db.commit()</span></span></code></pre>\n<p>The SQL command in the code above is used to update the database using the <code>UPDATE</code>, <code>SET</code>, and <code>WHERE</code> SQL statements.</p>\n</li>\n<li>\n<p>To delete data, we will use the SQL <code>DELETE</code> statement.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">db </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> mysql.connector.connect(</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  host</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">localhost</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  user</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourusername></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  password</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">&#x3C;yourpassword></span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFB86C;font-style:italic\">  database</span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">usersDatabase</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> db.cursor()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">sql </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">DELETE FROM users WHERE id = 1</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">cursor.execute(sql)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">db.commit()</span></span></code></pre>\n</li>\n</ol>\n<p>You can also use SQL and MySQL in small to large-scale applications such as:</p>\n<ul>\n<li>A website that stores user data in MySQL database</li>\n<li>An e-commerce site that stores orders, inventory, and users in a MySQL database</li>\n<li>A logistics application that stores the number of deliveries made daily in a MySQL database</li>\n</ul>\n<h2 id=\"alternatives-to-mysql-and-sql\">Alternatives to MySQL and SQL</h2>\n<p>Depending on your project, you may want to use a relational database management systems other than MySQL. Some other popular systems include:</p>\n<ul>\n<li><strong>PostgreSQL</strong>: A popular open source RDBMS known for its reliability, scalability, and support for open technical standards.</li>\n<li><strong>Microsoft SQL Server</strong>: A robust and enterprise RDBMS from Microsoft.</li>\n<li><strong>Oracle database</strong>: A powerful database system used for large scale applications. You require a commercial license to use it.</li>\n<li><strong>Amazon Aurora</strong>: A cloud-based database system managed by AWS.</li>\n<li><strong>MariaDB</strong>: An open source relational database that directly replaces MySQL. It was developed by the same developers who created MySQL.</li>\n<li><strong>SQLite</strong>: A lightweight, file-based database suitable for small-scale applications.</li>\n</ul>\n<p>If you’re exploring alternatives to SQL-based databases, you can look into NoSQL or graph databases.\nSome of the common non-relational databases include:</p>\n<ul>\n<li><a href=\"https://roadmap.sh/mongodb\" target=\"_blank\">MongoDB</a>: A document database that stores data in JSON formats. It has a flexible schema and does not use SQL for its query operations.</li>\n<li><a href=\"https://roadmap.sh/redis\" target=\"_blank\">Redis</a>: An in-memory store that saves data in key-value pairs. It is often used for caching and real time analytics.</li>\n<li><strong>Neo4j</strong>: A graph database that stores data as nodes, relationships, and properties instead of tables or documents.</li>\n</ul>\n<h2 id=\"choosing-the-right-database-systems\">Choosing the right database systems</h2>\n<p>Choosing the right database system depends on what you’re building, your team’s needs, and the data you are dealing with. The following are factors to consider when choosing the right database system for your project.</p>\n<ol>\n<li>\n<p><strong>Data structure and type</strong>: As a developer, you should know how your data is structured and the relationship between your entities. If you have many related entities, such as many-to-many or one-to-many relationships, you should consider relational databases, but if you have mostly one-to-one relationships, then a document database is sufficient.</p>\n</li>\n<li>\n<p><strong>Query complexity</strong>: If you have complex data and want to merge it using joins or subqueries, you should consider using relational databases. However, if you are performing simple CRUD operations on simple entities or key-based access, you should go for document databases.</p>\n</li>\n<li>\n<p><strong>Cost and licensing</strong>: This is an important factor to consider because it helps to manage your resources. It is sufficient for you to use the open-source versions of the database systems if you are working on small to medium sized applications. If you want more features and a higher level of security, then the licensed version is a better option.</p>\n</li>\n<li>\n<p><strong>Developer familiarity</strong>: You should also consider how familiar you are with the database systems. When you know SQL, it is easier for you to work with other relational databases. Make sure you are familiar with whatever database system you decide to use</p>\n</li>\n</ol>\n<h2 id=\"what-should-you-learn-first-sql-or-mysql\">What should you learn first: SQL or MySQL?</h2>\n<p>You should start with SQL because it is the foundation and once you know it, you will be able to work with any relational database management system. SQL’s syntax is approachable for English speakers, which makes it a common first step in learning database management.</p>\n<p>Once you know the basics of SQL, you can move on to learning MySQL. You can transfer your knowledge of MySQL to other relational database systems like PostgreSQL, Microsoft SQL Server, etc.</p>\n<h2 id=\"what-to-do-next-follow-a-learning-path-that-works\">What to do next: Follow a learning path that works</h2>\n<p>Learning SQL and MySQL could seem overwhelming at first, but you don’t have to master everything at once. You also don’t have to choose between SQL and MySQL. You can start with SQL and learn the basic commands, and then MySQL will make sense to you when you pick it up.</p>\n<p>Learning SQL prepares you to work with any relational database management system, including MySQL. You’ve already seen how SQL and MySQL work together in a real app. Now you can explore more by following the roadmap’s <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> track. You can also check out roadmap’s <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> for a comprehensive course on mastering SQL.</p>";

				const frontmatter$a = {"title":"SQL vs. MySQL: What's the Difference?","description":"SQL vs. MySQL trips up every beginner. This guide clears it up once and for all, with real examples and project code to show you how they fit.","authorId":"ekene","excludedBySlug":"/sql/vs-mysql","seo":{"title":"SQL vs. MySQL: What's the Difference?","description":"SQL vs. MySQL trips up every beginner. This guide clears it up once and for all, with real examples and project code to show you how they fit.","ogImageUrl":"https://assets.roadmap.sh/guest/sql-vs-mysql-w6b86.jpg"},"isNew":false,"type":"textual","date":"2025-06-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$a = "/workspace/src/data/guides/sql-vs-mysql.md";
				const url$a = undefined;
				function rawContent$a() {
					return "   \n                                              \n                                                                                                                                                             \n               \n                               \n    \n                                                \n                                                                                                                                                               \n                                                                      \n            \n               \n                \n        \n               \n                      \n     \n         \n                 \n                 \n   \n\n# SQL vs. MySQL: What's the Difference?\n\nSQL (Structured Query Language) is the standard language used to interact with relational databases. MySQL is an open source database system that understands and runs SQL commands. But there's more to it than that. Their names get mixed up all the time, and if you're just starting out, it can be confusing to figure out what to learn, what each one does, and how they fit together in real projects.\n\nIn this guide, I'll walk you through their key differences, explain when and why to use each, and show how they work together in real-world applications.\n\nIf you're a beginner or an early career developer trying to learn SQL, roadmap.sh's [SQL](https://roadmap.sh/sql) is a great place to learn the basics. To go into more advanced topics, check out the [SQL course](https://roadmap.sh/courses/sql) offered by roadmap.sh.\n\nHere's a quick side-by-side comparison of SQL and MySQL\n\n## Differences between SQL and MySQL\n\n| **SQL**                                                                             | **MySQL**                                                                                                             |\n| ----------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| A programming language for managing Relational Database Management Systems (RDBMS). | A relational database management system that uses SQL.                                                                |\n| Used to query and process information in databases.                                 | Allows you to store, delete, modify, and retrieve data in an organized manner.                                        |\n| Follows a simple standard and does not have regular updates.                        | Has many variants and gets regular updates.                                                                           |\n| Not subject to licensing because it is a programming language.                      | An open-source database; hence, it is free but may have some premium or commercial versions with additional features. |\n\n## SQL-related key terms\n\nBefore we discuss the definitions of SQL and MySQL, you should be familiar with some key terms that will be used in this guide.\n\n**Database**\n\nA database is an organized collection of data stored electronically and structured in a way that makes data easily accessible.\n\n**Relational Database Management System (RDBMS)**\n\nA relational database management system allows you to identify and access data in relation to another piece of data in the database. It stores data in rows and columns in tables to make processing and querying efficient.\n\n**Storage engine**\n\nA storage engine is the software that a database management system uses to create, read, and update data from a database.\n\n**Open source**\n\nOpen source software has publicly accessible code that anyone can use, modify, or share.\n\n![SQL vs MySQL](https://assets.roadmap.sh/guest/sql-vs-mysql-qf2ph.png)\n\n## What is SQL?\n\nSQL stands for Structured Query Language. It is the standard data query language used to interact with relational databases, including Oracle, [PostgreSQL](https://roadmap.sh/postgresql-dba), MySQL, and SQL Server Express. Most database queries for fetching, adding, and manipulating data are based on SQL syntax.\n\n![What is SQL?](https://assets.roadmap.sh/guest/what-is-sql-422cl.png)\n\nIf you work as a database administrator or a developer, SQL enables you to create, read, update, and delete data also known as CRUD operations. You can also use SQL to maintain and optimize database performance.\n\nGiven a table `Users` with four columns `userid,` `firstname, lastname and age` that looks like this:\n\n![Users table](https://assets.roadmap.sh/guest/users-table-h3t9k.png)\n\nYou can use SQL to fetch all the users from the table using the command below:\n\n```sql\nSELECT * FROM Users;\n```\n\nThe code above is a simple SQL statement that gets all the data from the `Users` table. However, you can also fetch specific columns from the table instead of all the data. The code snippet below shows how to get the `FirstName` and `LastName` of each user in the `Users` table.\n\n```sql\nSELECT FirstName, LastName FROM Users;\n```\n\nThe result of the query looks like this:\n\n![firstname and lastname columns](https://assets.roadmap.sh/guest/first-and-lastname-0vh87.png)\n\n## Features of SQL\n\nThis section will show you some of SQL's most unique features, which include:\n\n![Features of SQL](https://assets.roadmap.sh/guest/features-of-sql-uceot.png)\n\n- **Easy to understand**: SQL uses familiar English verbs like SELECT, CREATE, and UPDATE, making its syntax intuitive, even for non-developers. Columns and tables usually have meaningful names, and you can read SQL statements as English sentences.\n\n```sql\nCREATE TABLE Users (UserId int, FirstName varchar(255), LastName varchar(255));\n```\n\nIn the code above, even as a non-technical English speaker, you can understand what the SQL statement is doing by just reading it. It creates a table called `Users` with columns `UserId`, `FirstName`, and `LastName`.\n\n- **High performance**: SQL allows you to insert, modify, and delete data in a short amount of time. You can also use it to retrieve a large amount of data quickly and efficiently.\n\n- **Portability**: SQL can be used across multiple RDBMS such as MySQL, PostgreSQL, Microsoft SQL Server, etc.\n\n- **Security**: SQL enables the security of database systems by ensuring that only authorized users can view specific information in a database management system. For example, if you want to prevent a user from accessing a table, you can use the code below:\n\n```sql\nREVOKE SELECT ON Salaries FROM 'user123'@'localhost';\n```\n\n## What is MySQL?\n\nMySQL is an open source relational database management system owned by Oracle. It stores and manages data in tables of rows and columns and uses SQL for query execution.\n\n## Features of MySQL\n\nThe main features of MySQL include:\n\n![Features of MySQL](https://assets.roadmap.sh/guest/features-of-mysql-47vgf.png)\n\n- **Open source**: MySQL is an open source RDBMS. You can use it for free and customize its source code to meet your needs.\n- **Cross-platform compatibility**: MySQL can run on various platforms, including Linux, Windows, and UNIX operating systems.\n- **Regular updates and development**: MySQL has a huge developer community that provides fixes and regular updates.\n- **Tooling**: MySQL workbench offers a GUI for managing databases.\n\n## How do they show up in real projects?\n\nWhen working on a real project, such as creating an e-commerce application and storing the order and user data, you need to choose a database system like MySQL. You will have to connect your backend service with the MySQL database, and either write raw SQL commands or use an Object Relation Mapper (ORM).\n\nLet's walk through how SQL and MySQL work together in a basic CRUD application built with [Python](https://roadmap.sh/python).\n\n1. First, you need to set up your environment by installing the required tools. The necessary tools include:\n\n   - [Python](https://www.python.org/downloads/) (version 3.8+)\n   - [MySQL server](https://www.mysql.com/downloads/)\n   - pip (Python package manager)\n   - MySQL driver to access the MySQL database\n\n   To install the MySQL driver, run the command below:\n\n   ```bash\n   pip install mysql-connector-python\n   ```\n\n2. Next, create a connection to your MySQL database using the username and password from your database. Then, create a file called `application.py` and paste the code below into it.\n\n   ```python\n   import mysql.connector\n\n   db = mysql.connector.connect(\n     host=\"localhost\",\n     user=\"<username>\",\n     password=\"<password>\"\n   )\n   ```\n\n3. Create the database `usersDatabase` using the code below:\n\n   ```python\n   cursor = db.cursor()\n   cursor.execute(\"CREATE DATABASE usersDatabase\")\n   ```\n\n   The code above shows the SQL command for creating a database, which is executed by the MySQL driver.\n\n4. Then, create the `Users` table using the SQL command `Create Table`, as shown in the code below.\n\n   ```python\n   cursor.execute(\"CREATE TABLE users (id int, firstName VARCHAR(255), lastName VARCHAR(255))\")\n   ```\n\n5. Next, insert a record into the `Users` table:\n\n   ```python\n   db = mysql.connector.connect(\n     host=\"localhost\",\n     user=\"<yourusername>\",\n     password=\"<yourpassword>\",\n     database=\"usersDatabase\"\n   )\n   cursor = db.cursor()\n\n   sqlStatement = \"INSERT INTO users (id, firstName, lastName) VALUES (%s, %s, %s)\"\n   value = (1, \"John\", \"Doe\")\n   cursor.execute(sqlStatement, value)\n   db.commit()\n   ```\n\n   In the code above, the SQL command that inserts a value into the `Users` table is defined with `INSERT INTO` and executed using `cursor.execute(...)`. The other lines of code are specific to the Python MySQL driver. Finally, `db.commit()` is called to make the changes to the MySQL database; otherwise, data is not written to the database.\n\n6. Let's read the user data from the `Users` table. To do that, we will use the `SELECT` statement, as seen in the code below:\n\n   ```python\n   db = mysql.connector.connect(\n     host=\"localhost\",\n     user=\"<yourusername>\",\n     password=\"<yourpassword>\",\n     database=\"usersDatabase\"\n   )\n   cursor = db.cursor()\n   cursor.execute(\"SELECT * FROM users\")\n   result = cursor.fetchall()\n   print(result)\n   ```\n\n   In the code above, we fetch the users using SQL from the `Users` table in the MySQL database and print the result to the console.\n\n7. We can update the user data using the SQL `UPDATE` statement. The code to do this is shown below:\n\n   ```python\n   db = mysql.connector.connect(\n     host=\"localhost\",\n     user=\"<yourusername>\",\n     password=\"<yourpassword>\",\n     database=\"usersDatabase\"\n   )\n   cursor = db.cursor()\n   sql = \"UPDATE users SET firstName = 'Jane' WHERE id = 1\"\n   cursor.execute(sql)\n   db.commit()\n   ```\n\n   The SQL command in the code above is used to update the database using the `UPDATE`, `SET`, and `WHERE` SQL statements.\n\n8. To delete data, we will use the SQL `DELETE` statement.\n\n   ```python\n   db = mysql.connector.connect(\n     host=\"localhost\",\n     user=\"<yourusername>\",\n     password=\"<yourpassword>\",\n     database=\"usersDatabase\"\n   )\n   cursor = db.cursor()\n   sql = \"DELETE FROM users WHERE id = 1\"\n   cursor.execute(sql)\n   db.commit()\n   ```\n\nYou can also use SQL and MySQL in small to large-scale applications such as:\n\n- A website that stores user data in MySQL database\n- An e-commerce site that stores orders, inventory, and users in a MySQL database\n- A logistics application that stores the number of deliveries made daily in a MySQL database\n\n## Alternatives to MySQL and SQL\n\nDepending on your project, you may want to use a relational database management systems other than MySQL. Some other popular systems include:\n\n- **PostgreSQL**: A popular open source RDBMS known for its reliability, scalability, and support for open technical standards.\n- **Microsoft SQL Server**: A robust and enterprise RDBMS from Microsoft.\n- **Oracle database**: A powerful database system used for large scale applications. You require a commercial license to use it.\n- **Amazon Aurora**: A cloud-based database system managed by AWS.\n- **MariaDB**: An open source relational database that directly replaces MySQL. It was developed by the same developers who created MySQL.\n- **SQLite**: A lightweight, file-based database suitable for small-scale applications.\n\nIf you're exploring alternatives to SQL-based databases, you can look into NoSQL or graph databases.\nSome of the common non-relational databases include:\n\n- [MongoDB](https://roadmap.sh/mongodb): A document database that stores data in JSON formats. It has a flexible schema and does not use SQL for its query operations.\n- [Redis](https://roadmap.sh/redis): An in-memory store that saves data in key-value pairs. It is often used for caching and real time analytics.\n- **Neo4j**: A graph database that stores data as nodes, relationships, and properties instead of tables or documents.\n\n## Choosing the right database systems\n\nChoosing the right database system depends on what you're building, your team's needs, and the data you are dealing with. The following are factors to consider when choosing the right database system for your project.\n\n1. **Data structure and type**: As a developer, you should know how your data is structured and the relationship between your entities. If you have many related entities, such as many-to-many or one-to-many relationships, you should consider relational databases, but if you have mostly one-to-one relationships, then a document database is sufficient.\n\n2. **Query complexity**: If you have complex data and want to merge it using joins or subqueries, you should consider using relational databases. However, if you are performing simple CRUD operations on simple entities or key-based access, you should go for document databases.\n\n3. **Cost and licensing**: This is an important factor to consider because it helps to manage your resources. It is sufficient for you to use the open-source versions of the database systems if you are working on small to medium sized applications. If you want more features and a higher level of security, then the licensed version is a better option.\n\n4. **Developer familiarity**: You should also consider how familiar you are with the database systems. When you know SQL, it is easier for you to work with other relational databases. Make sure you are familiar with whatever database system you decide to use\n\n## What should you learn first: SQL or MySQL?\n\nYou should start with SQL because it is the foundation and once you know it, you will be able to work with any relational database management system. SQL's syntax is approachable for English speakers, which makes it a common first step in learning database management.\n\nOnce you know the basics of SQL, you can move on to learning MySQL. You can transfer your knowledge of MySQL to other relational database systems like PostgreSQL, Microsoft SQL Server, etc.\n\n## What to do next: Follow a learning path that works\n\nLearning SQL and MySQL could seem overwhelming at first, but you don't have to master everything at once. You also don't have to choose between SQL and MySQL. You can start with SQL and learn the basic commands, and then MySQL will make sense to you when you pick it up.\n\nLearning SQL prepares you to work with any relational database management system, including MySQL. You've already seen how SQL and MySQL work together in a real app. Now you can explore more by following the roadmap's [SQL](https://roadmap.sh/sql) track. You can also check out roadmap's [SQL course](https://roadmap.sh/courses/sql) for a comprehensive course on mastering SQL.\n";
				}
				async function compiledContent$a() {
					return await html$a();
				}
				function getHeadings$a() {
					return [{"depth":1,"slug":"sql-vs-mysql-whats-the-difference","text":"SQL vs. MySQL: What’s the Difference?"},{"depth":2,"slug":"differences-between-sql-and-mysql","text":"Differences between SQL and MySQL"},{"depth":2,"slug":"sql-related-key-terms","text":"SQL-related key terms"},{"depth":2,"slug":"what-is-sql","text":"What is SQL?"},{"depth":2,"slug":"features-of-sql","text":"Features of SQL"},{"depth":2,"slug":"what-is-mysql","text":"What is MySQL?"},{"depth":2,"slug":"features-of-mysql","text":"Features of MySQL"},{"depth":2,"slug":"how-do-they-show-up-in-real-projects","text":"How do they show up in real projects?"},{"depth":2,"slug":"alternatives-to-mysql-and-sql","text":"Alternatives to MySQL and SQL"},{"depth":2,"slug":"choosing-the-right-database-systems","text":"Choosing the right database systems"},{"depth":2,"slug":"what-should-you-learn-first-sql-or-mysql","text":"What should you learn first: SQL or MySQL?"},{"depth":2,"slug":"what-to-do-next-follow-a-learning-path-that-works","text":"What to do next: Follow a learning path that works"}];
				}

				const Content$a = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$a;
					content.file = file$a;
					content.url = url$a;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$a())}`;
				});

const __vite_glob_0_88 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$a,
	compiledContent: compiledContent$a,
	default: Content$a,
	file: file$a,
	frontmatter: frontmatter$a,
	getHeadings: getHeadings$a,
	rawContent: rawContent$a,
	url: url$a
}, Symbol.toStringTag, { value: 'Module' }));

const html$9 = () => "<p><img src=\"https://assets.roadmap.sh/guest/sql-vs-python-geefc.jpg\" alt=\"Learning SQL vs Python - compared\"></p>\n<p>Start with <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL</a> if you want to access, retrieve, and filter data from databases. Start with <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> if your focus is data cleaning, analysis, visualization, or building predictive models.</p>\n<p>Most data projects require both. SQL helps you <em>get</em> the data. Python helps you <em>work</em> with it.</p>\n<p>In this guide, you’ll learn how SQL and Python differ, when to use each, and how they complement each other in practical workflows. We’ll also break down career paths, key features, and a practical walkthrough of a data analysis project that uses both.</p>\n<p>If you’re looking to build your skills, our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> is a complete learning path. It takes you from writing your first queries to mastering advanced concepts like joins, subqueries, and performance optimization used in professional data work.</p>\n<p>Here’s a quick side-by-side comparison to help you decide:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>SQL</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td>Purpose</td><td>Used for querying and managing data stored in relational databases.</td><td>Used for a wide range of tasks beyond data querying, such as building web applications, data science, research, and many more.</td></tr><tr><td>Learning curve</td><td>Easy for beginners to learn.</td><td>Also easy for beginners to learn.</td></tr><tr><td>Use cases</td><td>Data retrieval, database management, data analytics.</td><td>Web development, machine learning, data analytics, scientific computing, data manipulation, artificial intelligence.</td></tr><tr><td>Libraries and ecosystem</td><td>Has different implementations, such as Microsoft SQL Server, <a href=\"https://roadmap.sh/postgresql-dba\" target=\"_blank\">PostgreSQL</a>, MySQL, and SQLite.</td><td>Has programming libraries such as Numpy, Pandas, and Scikit-learn.</td></tr><tr><td>Debugging and execution</td><td>You can execute SQL queries separately to debug, but execution occurs without breakpoints.</td><td>Debugging is easier with breakpoints, which allow you to pause execution when you encounter bugs.</td></tr><tr><td>Career paths</td><td>Database administrator, database architect, business intelligence analyst.</td><td>Data scientist, data analyst, machine learning engineer, software engineer.</td></tr></tbody></table>\n<h2 id=\"what-are-sql-and-python\">What are SQL and Python?</h2>\n<p>SQL is a specialized language for handling structured data in relational databases. SQL allows you to extract, modify, and delete records to generate insights that support data-driven decision-making. SQL is beginner-friendly, and you can perform database interactions and queries using understandable commands.</p>\n<p>On the other hand, Python is a general-purpose programming language used to build web and desktop applications, perform data analysis, and automate tasks, among other uses. Python has a simple and readable syntax, making it a good language to learn when starting your programming journey.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-vs-python-5jnjh.png\" alt=\"SQL vs. Python\"></p>\n<h2 id=\"key-features-of-sql\">Key features of SQL</h2>\n<p>Some key features of SQL include:</p>\n<ul>\n<li>\n<p><strong>Declarative language:</strong> SQL uses a declarative programming approach where you describe what you want to achieve rather than explicitly defining how to achieve it. For example, the SQL statement <code>SELECT * FROM Users</code> means “fetch all the users from a database table.” The database engine then performs its magic behind the scenes to execute the command.</p>\n</li>\n<li>\n<p><strong>Easy syntax:</strong> SQL is straightforward to learn and understand, even if you have no prior programming knowledge.</p>\n</li>\n<li>\n<p><strong>Usage:</strong> Almost all Relational Database Management Systems (RDBMS), such as MySQL, PostgreSQL, Oracle, and Microsoft SQL Server, adopt SQL.</p>\n</li>\n<li>\n<p><strong>Scalability</strong>: You can use SQL to add new tables, edit tables, and delete old tables. This means you can use it to scale up or down to accommodate datasets according to business needs.</p>\n</li>\n<li>\n<p><strong>Wide range of commands</strong>: SQL supports different types of commands. These commands can be divided into the following:</p>\n<ul>\n<li>\n<p><strong>Data Query Language (DQL)</strong>: The primary focus of DQL is to retrieve data without modifying it. The primary command here is <code>SELECT</code>.</p>\n</li>\n<li>\n<p><strong>Data Definition Language (DDL)</strong>: You use these commands to define and modify the structure of database objects such as tables, schemas, indexes, and so on. The key commands here are <code>CREATE</code>, <code>ALTER</code>, and <code>DROP</code>.</p>\n</li>\n<li>\n<p><strong>Data Control Language (DCL)</strong>: You use these commands to control access to data in a database by granting or revoking user permissions. Examples include <code>GRANT</code>, and  <code>REVOKE</code>.</p>\n</li>\n<li>\n<p><strong>Data Manipulation Language (DML)</strong>: This is a subset of SQL you use to insert, update, and delete data from database tables. Examples include <code>INSERT</code>, <code>DELETE</code>, and <code>UPDATE</code>.</p>\n</li>\n<li>\n<p><strong>Transaction Control Language (TCL)</strong>: You use these commands to manage transactions in a database. They help ensure the data is secure and consistent. Examples include <code>COMMIT</code> and <code>ROLLBACK</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>You’ll get to practice using all these command types hands-on in our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a>. Each lesson focuses on practical query writing and real use cases, which helps you understand when and how to apply what you learn.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-interactive-course-f1m8m.jpeg\" alt=\"SQL course\"></p>\n<h2 id=\"key-features-of-python\">Key features of Python</h2>\n<p>Here are some of the key features of Python:</p>\n<ul>\n<li>\n<p><strong>Easy to read and understand</strong>: Python syntax is clean and readable. Instead of curly braces, it uses indentation for code blocks, making it easier to scan and debug.</p>\n</li>\n<li>\n<p><strong>Object-oriented programming language</strong>: Python uses object-oriented programming concepts that solve problems using objects. OOP improves code reusability.</p>\n</li>\n<li>\n<p><strong>Free and open-source</strong>: Being open-source, Python has a massive ecosystem and community. You’ll find beginner-friendly issues, helpful tutorials, and thousands of open libraries.</p>\n</li>\n<li>\n<p><strong>Portability</strong>: Python code can run on various operating systems, including Windows, Linux, and macOS, as well as on embedded platforms such as Raspberry Pi, STM32, and ESP32.</p>\n</li>\n</ul>\n<h2 id=\"how-sql-and-python-work-together-in-data-projects\">How SQL and Python work together in data projects</h2>\n<p>You use SQL for data management, i.e., retrieving, filtering, organizing, and inserting data. On the other hand, you use Python for more general programming applications, such as data manipulation, statistical analysis, machine learning, and automation.</p>\n<p>Let’s walk through a practical scenario demonstrating how to use both for data analysis. Suppose you’re assigned a project to analyze the sales data of an e-commerce company and develop a sales forecast. Here’s how you might approach it:</p>\n<ol>\n<li>\n<p><strong>Data collection</strong>: This involves gathering all relevant data from the client, which may be in different locations and formats. Your goal is to consolidate the data into a unified structure for analysis. If the data is in the client’s database, you can use SQL to extract and migrate it to a destination database. If the data is accessible via an API, you can use Python to fetch it and store it in your database for further processing.</p>\n</li>\n<li>\n<p><strong>Data cleaning:</strong> Before analysis, you should make sure the data is accurate, consistent, and reliable. This step involves identifying and correcting errors, handling missing values, and resolving inconsistencies. You can use SQL basic cleaning tasks, such as:</p>\n<ul>\n<li>Removing rows with missing data</li>\n<li>Dropping unwanted columns</li>\n<li>Setting default values</li>\n<li>Filtering and grouping data based on specific criteria</li>\n<li>Combining data from multiple tables</li>\n</ul>\n<p>However, Python is more suitable for complex cleaning operations, such as handling nested structures, working with unstructured data, and data transformation. NumPy and Pandas are popular Python libraries that provide powerful tools and functions for advanced data cleaning and manipulation.</p>\n</li>\n<li>\n<p><strong>Data manipulation:</strong> Once the data is cleaned, the next step is to organize it in a way that makes it easier to analyze and interpret. Use Python to analyze and manipulate data. Python’s Numpy and Pandas libraries offer robust tools for reshaping, filtering, and aggregating your cleaned data as well as restructuring data, making it ready for visualization and further analysis.</p>\n</li>\n<li>\n<p><strong>Data visualization</strong>: For basic visualizations, you can use some data analytics tools based on SQL. However, Python is more commonly used for creating detailed and customizable visualizations. Python libraries like Matplotlib and Seaborn are widely used in the data science community and support 2D and 3D plots.</p>\n</li>\n<li>\n<p><strong>Making predictions</strong>: After cleaning and exploring the data, you can use it to build predictive models. This stage is typically handled entirely in Python, as SQL is not designed for machine learning. Python offers extensive libraries, like Scikit-learn and TensorFlow, which provide a wide range of regression, classification, and clustering algorithms. By training and evaluating models using these tools, you can generate accurate sales forecasts based on the data.</p>\n</li>\n</ol>\n<h2 id=\"should-you-learn-sql-or-python-first\">Should you learn SQL or Python first?</h2>\n<p>Start with SQL if your primary goal is to work with databases, and learn Python next to expand what you can do with that data. I began my career by learning SQL first, and it turned out to be the right decision. It helped me understand how data is stored, structured, and queried, which made it much easier to learn Python later. Once I had the data in hand, Python gave me the flexibility to clean, analyze, and build models on top of it. Learning SQL first gave me a strong foundation that I still rely on today.</p>\n<p>If you’re just getting started, check out our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a>. The course offers interactive query writing with instant feedback, which helps solidify your understanding.</p>\n<p>However, deciding which language to learn first depends on your goals and interests. But if you want to succeed in the data field, mastering both SQL and Python is important. They complement each other and make you a more effective data professional.</p>\n<h2 id=\"is-sql-a-dying-language\">Is SQL a dying language?</h2>\n<p>There is an <a href=\"https://www.reddit.com/r/SQL/comments/svc7ju/is_sql_still_has_viable_as_it_was_several_years/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ongoing debate</a> about whether SQL is becoming obsolete and if it’s still worth learning. My answer is no. SQL is not dying. In fact, it remains one of the most widely used languages in data analysis and management.</p>\n<p>While technologies like NoSQL databases and other document and graph-based databases have gained popularity, they haven’t replaced SQL. Instead, SQL has continued to evolve and adapt to modern data needs, including large-scale data processing. As long as organizations store data in relational databases, SQL will remain a valuable skill in the data professional’s toolkit.</p>\n<h2 id=\"sql-vs-python-key-differences-that-trip-people-up\">SQL vs. Python: Key differences that trip people up</h2>\n<p>Whether you’re a beginner or an experienced developer, it’s normal to get confused when switching between SQL and Python. You may wonder when to use each one, where they overlap, and what sets them apart.</p>\n<p>To help clear things up, here are some of the key differences between SQL and Python:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>SQL</strong></th><th><strong>Python</strong></th></tr></thead><tbody><tr><td>A declarative language, which means you just state what you want. For example,<br><code>SELECT * FROM Users WHERE age > 18</code></td><td>An imperative language; you specify how to achieve what you want. For example,<br><code>result = [users for user in users if users.age > 18]</code></td></tr><tr><td>Works on tables (rows and columns).</td><td>Uses different data structures such as lists, dictionaries, sets, tuples, dataframes, etc.</td></tr><tr><td>Used within tools like MySQL, PostgreSQL, and Microsoft SQL Server.</td><td>It is a full-fledged programming language, not embedded in another tool.</td></tr><tr><td>Queries are stateless and are self contained.</td><td>You can mutate the state of variables and data structures across the code base.</td></tr><tr><td>Runs in a database engine.</td><td>Runs on a machine or server.</td></tr><tr><td>It is strongly typed per column, e.g., VARCHAR, INT, DATE</td><td>Can be strongly or dynamically typed.</td></tr></tbody></table>\n<h2 id=\"sql-vs-python-career-paths\">SQL vs. Python: Career paths</h2>\n<p>SQL and Python offer you a wide range of career opportunities across various software domains. Mastering both can broaden your career prospects.</p>\n<p>SQL is widely used in data science and analytics. Proficiency in SQL can qualify you for the following roles:</p>\n<ul>\n<li>\n<p><strong>Database architect</strong>: As a database architect, you are responsible for designing the most suitable database systems to support applications. Your role also involves developing strategies that make databases reliable and secure. This helps to ensure data integrity. According to the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/database-administrators.htm#tab-5\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">United States Bureau of Labor Statistics</a>, the average salary of a database architect is $135,980.</p>\n</li>\n<li>\n<p><strong>Database administrator</strong>: As a database administrator, you are responsible for making sure that databases operate efficiently, securely, and reliably. Your duties include managing user access, assigning user permissions to access or modify database objects, and maintaining up-to-date backups to prevent data loss. The <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/database-administrators.htm#tab-5\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a database administrator is $104,620.</p>\n</li>\n<li>\n<p><strong>Business intelligence analyst:</strong> With your knowledge of SQL, you can pursue a career as a business intelligence analyst. In this role, you use data to generate insights that help to make strategic business decisions. Your responsibilities include extracting data from databases, analyzing trends, and creating visualizations and dashboards to present findings to stakeholders.</p>\n</li>\n<li>\n<p><strong>Software developer:</strong> Your SQL skills are valuable in software development. As a software developer, you’ll build applications that rely on data in databases. Knowing how to write SQL queries allows you to efficiently retrieve, manipulate, and manage this data as needed. Many software developers use SQL regularly as part of their daily work. The <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm#tab-5\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a software developer is $133,080.</p>\n</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/sql-career-opportunities-kfuer.png\" alt=\"SQL career opportunities\"></p>\n<p>Python is in high demand in the data field, and it is a core requirement for many roles in data science, data engineering, analytics, and software development. With your Python skills, you can pursue the following career paths:</p>\n<ul>\n<li>\n<p><strong>Data scientist</strong>: As a data scientist, you’ll use Python for data cleaning, exploration, visualization, and predictive modeling. Strong knowledge of mathematics and statistics is also essential for this role. The <a href=\"https://www.bls.gov/ooh/math/data-scientists.htm#tab-5\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a data scientist in the U.S. is $112,590.</p>\n</li>\n<li>\n<p><strong>Data analyst</strong>: In this role, you’ll use Python and other tools like Power BI or Tableau to analyze data and address business problems. While data analysts focus on solving business problems by interpreting data, data scientists often apply machine learning techniques to predict trends. The <a href=\"https://www.indeed.com/career/data-analyst/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a data analyst is $82,841.</p>\n</li>\n<li>\n<p><strong>Machine learning engineer</strong>: As a machine learning engineer, you’ll develop algorithms that use input data and leverage statistical models to make predictions. Python and libraries like TensorFlow and Scikit-learn are central to this role. The <a href=\"https://www.indeed.com/career/machine-learning-engineer/salaries\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a machine learning engineer is $166,574.</p>\n</li>\n<li>\n<p><strong>Software engineer</strong>: Python is used widely in software engineering, especially for building full-stack applications. Python frameworks like Django and Flask enable you to build robust and scalable backend systems. The <a href=\"https://www.levels.fyi/t/software-engineer/locations/united-states\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">average salary</a> of a software engineer is $166,512.</p>\n</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/python-career-opportunities-glis9.png\" alt=\"Python career opportunities\"></p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>As outlined in this guide, SQL and Python are popular programming languages that data professionals use. Using both languages together may provide more benefits, but you do not have to know both languages to succeed in your data science career.</p>\n<p>Mastering SQL is your entry ticket into the data field. By starting with SQL, you’ll build a solid foundation that makes learning other languages, such as Python, easier. You should dedicate focused time each day to practicing SQL, and this will improve how you work with data.</p>\n<p>Our <a href=\"https://roadmap.sh/courses/sql\" target=\"_blank\">SQL course</a> gives you everything you need to go from beginner to a confident data professional. It’s fully interactive, beginner-friendly, and built around the types of queries and data tasks you’ll face on the job. You can also explore our <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL roadmap</a> for a step-by-step guide on learning SQL.</p>\n<p>Once you have gained confidence with SQL, you can start learning Python. Python enables you to do more complex analysis, automation, and build applications. Check out the <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python roadmap</a> to follow a clear path from beginner to expert.</p>";

				const frontmatter$9 = {"title":"SQL vs. Python: Which should you learn for data analysis?","description":"Choosing between SQL vs Python? This guide helps you pick the right tool for data analysis, based on real-world use.","authorId":"william","excludedBySlug":"/sql/vs-python","seo":{"title":"SQL vs. Python: Which should you learn for data analysis?","description":"Choosing between SQL vs Python? This guide helps you pick the right tool for data analysis, based on real-world use.","ogImageUrl":"https://assets.roadmap.sh/guest/sql-vs-python-geefc.jpg"},"isNew":true,"type":"textual","date":"2025-06-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$9 = "/workspace/src/data/guides/sql-vs-python.md";
				const url$9 = undefined;
				function rawContent$9() {
					return "   \n                                                                  \n                                                                                                                                   \n                 \n                                \n    \n                                                                    \n                                                                                                                                     \n                                                                       \n           \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\n![Learning SQL vs Python - compared](https://assets.roadmap.sh/guest/sql-vs-python-geefc.jpg)\n\nStart with [SQL](https://roadmap.sh/sql) if you want to access, retrieve, and filter data from databases. Start with [Python](https://roadmap.sh/python) if your focus is data cleaning, analysis, visualization, or building predictive models.\n\nMost data projects require both. SQL helps you *get* the data. Python helps you *work* with it.\n\nIn this guide, you'll learn how SQL and Python differ, when to use each, and how they complement each other in practical workflows. We'll also break down career paths, key features, and a practical walkthrough of a data analysis project that uses both.\n\nIf you're looking to build your skills, our [SQL course](https://roadmap.sh/courses/sql) is a complete learning path. It takes you from writing your first queries to mastering advanced concepts like joins, subqueries, and performance optimization used in professional data work.\n\nHere's a quick side-by-side comparison to help you decide:\n\n| **Feature**             | **SQL**                                                                                                                          | **Python**                                                                                                                     |\n| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| Purpose                 | Used for querying and managing data stored in relational databases.                                                              | Used for a wide range of tasks beyond data querying, such as building web applications, data science, research, and many more. |\n| Learning curve          | Easy for beginners to learn.                                                                                                     | Also easy for beginners to learn.                                                                                              |\n| Use cases               | Data retrieval, database management, data analytics.                                                                             | Web development, machine learning, data analytics, scientific computing, data manipulation, artificial intelligence.           |\n| Libraries and ecosystem | Has different implementations, such as Microsoft SQL Server, [PostgreSQL](https://roadmap.sh/postgresql-dba), MySQL, and SQLite. | Has programming libraries such as Numpy, Pandas, and Scikit-learn.                                                             |\n| Debugging and execution | You can execute SQL queries separately to debug, but execution occurs without breakpoints.                                       | Debugging is easier with breakpoints, which allow you to pause execution when you encounter bugs.                              |\n| Career paths            | Database administrator, database architect, business intelligence analyst.                                                       | Data scientist, data analyst, machine learning engineer, software engineer.                                                    |\n\n## What are SQL and Python?\n\nSQL is a specialized language for handling structured data in relational databases. SQL allows you to extract, modify, and delete records to generate insights that support data-driven decision-making. SQL is beginner-friendly, and you can perform database interactions and queries using understandable commands.\n\nOn the other hand, Python is a general-purpose programming language used to build web and desktop applications, perform data analysis, and automate tasks, among other uses. Python has a simple and readable syntax, making it a good language to learn when starting your programming journey.\n\n![SQL vs. Python](https://assets.roadmap.sh/guest/sql-vs-python-5jnjh.png)\n\n## Key features of SQL\n\nSome key features of SQL include:\n\n- **Declarative language:** SQL uses a declarative programming approach where you describe what you want to achieve rather than explicitly defining how to achieve it. For example, the SQL statement `SELECT * FROM Users` means \"fetch all the users from a database table.\" The database engine then performs its magic behind the scenes to execute the command.\n\n- **Easy syntax:** SQL is straightforward to learn and understand, even if you have no prior programming knowledge.\n\n- **Usage:** Almost all Relational Database Management Systems (RDBMS), such as MySQL, PostgreSQL, Oracle, and Microsoft SQL Server, adopt SQL.\n\n- **Scalability**: You can use SQL to add new tables, edit tables, and delete old tables. This means you can use it to scale up or down to accommodate datasets according to business needs.\n\n- **Wide range of commands**: SQL supports different types of commands. These commands can be divided into the following:\n    - **Data Query Language (DQL)**: The primary focus of DQL is to retrieve data without modifying it. The primary command here is `SELECT`. \n    \n    - **Data Definition Language (DDL)**: You use these commands to define and modify the structure of database objects such as tables, schemas, indexes, and so on. The key commands here are `CREATE`, `ALTER`, and `DROP`.\n        \n    - **Data Control Language (DCL)**: You use these commands to control access to data in a database by granting or revoking user permissions. Examples include `GRANT`, and  `REVOKE`.\n\n    - **Data Manipulation Language (DML)**: This is a subset of SQL you use to insert, update, and delete data from database tables. Examples include `INSERT`, `DELETE`, and `UPDATE`.\n\n    - **Transaction Control Language (TCL)**: You use these commands to manage transactions in a database. They help ensure the data is secure and consistent. Examples include `COMMIT` and `ROLLBACK`.\n\nYou'll get to practice using all these command types hands-on in our [SQL course](https://roadmap.sh/courses/sql). Each lesson focuses on practical query writing and real use cases, which helps you understand when and how to apply what you learn.\n\n![SQL course](https://assets.roadmap.sh/guest/sql-interactive-course-f1m8m.jpeg)\n\n## Key features of Python\n\nHere are some of the key features of Python:\n\n- **Easy to read and understand**: Python syntax is clean and readable. Instead of curly braces, it uses indentation for code blocks, making it easier to scan and debug.\n\n- **Object-oriented programming language**: Python uses object-oriented programming concepts that solve problems using objects. OOP improves code reusability.\n\n- **Free and open-source**: Being open-source, Python has a massive ecosystem and community. You'll find beginner-friendly issues, helpful tutorials, and thousands of open libraries.\n\n- **Portability**: Python code can run on various operating systems, including Windows, Linux, and macOS, as well as on embedded platforms such as Raspberry Pi, STM32, and ESP32.\n\n## How SQL and Python work together in data projects\n\nYou use SQL for data management, i.e., retrieving, filtering, organizing, and inserting data. On the other hand, you use Python for more general programming applications, such as data manipulation, statistical analysis, machine learning, and automation.\n\nLet's walk through a practical scenario demonstrating how to use both for data analysis. Suppose you're assigned a project to analyze the sales data of an e-commerce company and develop a sales forecast. Here's how you might approach it:\n\n1. **Data collection**: This involves gathering all relevant data from the client, which may be in different locations and formats. Your goal is to consolidate the data into a unified structure for analysis. If the data is in the client's database, you can use SQL to extract and migrate it to a destination database. If the data is accessible via an API, you can use Python to fetch it and store it in your database for further processing.\n\n2. **Data cleaning:** Before analysis, you should make sure the data is accurate, consistent, and reliable. This step involves identifying and correcting errors, handling missing values, and resolving inconsistencies. You can use SQL basic cleaning tasks, such as:\n\n    - Removing rows with missing data\n    - Dropping unwanted columns\n    - Setting default values \n    - Filtering and grouping data based on specific criteria\n    - Combining data from multiple tables\n\n    However, Python is more suitable for complex cleaning operations, such as handling nested structures, working with unstructured data, and data transformation. NumPy and Pandas are popular Python libraries that provide powerful tools and functions for advanced data cleaning and manipulation.\n    \n3. **Data manipulation:** Once the data is cleaned, the next step is to organize it in a way that makes it easier to analyze and interpret. Use Python to analyze and manipulate data. Python's Numpy and Pandas libraries offer robust tools for reshaping, filtering, and aggregating your cleaned data as well as restructuring data, making it ready for visualization and further analysis.\n\n4. **Data visualization**: For basic visualizations, you can use some data analytics tools based on SQL. However, Python is more commonly used for creating detailed and customizable visualizations. Python libraries like Matplotlib and Seaborn are widely used in the data science community and support 2D and 3D plots.\n\n5. **Making predictions**: After cleaning and exploring the data, you can use it to build predictive models. This stage is typically handled entirely in Python, as SQL is not designed for machine learning. Python offers extensive libraries, like Scikit-learn and TensorFlow, which provide a wide range of regression, classification, and clustering algorithms. By training and evaluating models using these tools, you can generate accurate sales forecasts based on the data.\n\n## Should you learn SQL or Python first?\n\nStart with SQL if your primary goal is to work with databases, and learn Python next to expand what you can do with that data. I began my career by learning SQL first, and it turned out to be the right decision. It helped me understand how data is stored, structured, and queried, which made it much easier to learn Python later. Once I had the data in hand, Python gave me the flexibility to clean, analyze, and build models on top of it. Learning SQL first gave me a strong foundation that I still rely on today.\n\nIf you're just getting started, check out our [SQL course](https://roadmap.sh/courses/sql). The course offers interactive query writing with instant feedback, which helps solidify your understanding.\n\nHowever, deciding which language to learn first depends on your goals and interests. But if you want to succeed in the data field, mastering both SQL and Python is important. They complement each other and make you a more effective data professional.\n\n## Is SQL a dying language?\n\nThere is an [ongoing debate](https://www.reddit.com/r/SQL/comments/svc7ju/is_sql_still_has_viable_as_it_was_several_years/) about whether SQL is becoming obsolete and if it's still worth learning. My answer is no. SQL is not dying. In fact, it remains one of the most widely used languages in data analysis and management. \n\nWhile technologies like NoSQL databases and other document and graph-based databases have gained popularity, they haven't replaced SQL. Instead, SQL has continued to evolve and adapt to modern data needs, including large-scale data processing. As long as organizations store data in relational databases, SQL will remain a valuable skill in the data professional's toolkit.\n\n## SQL vs. Python: Key differences that trip people up\n\nWhether you're a beginner or an experienced developer, it's normal to get confused when switching between SQL and Python. You may wonder when to use each one, where they overlap, and what sets them apart. \n\nTo help clear things up, here are some of the key differences between SQL and Python:\n\n| **SQL**                                                                                                                | **Python**                                                                                                                               |\n| ---------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| A declarative language, which means you just state what you want. For example,<br>`SELECT * FROM Users WHERE age > 18` | An imperative language; you specify how to achieve what you want. For example,<br>`result = [users for user in users if users.age > 18]` |\n| Works on tables (rows and columns).                                                                                    | Uses different data structures such as lists, dictionaries, sets, tuples, dataframes, etc.                                               |\n| Used within tools like MySQL, PostgreSQL, and Microsoft SQL Server.                                                    | It is a full-fledged programming language, not embedded in another tool.                                                                 |\n| Queries are stateless and are self contained.                                                                          | You can mutate the state of variables and data structures across the code base.                                                          |\n| Runs in a database engine.                                                                                             | Runs on a machine or server.                                                                                                             |\n| It is strongly typed per column, e.g., VARCHAR, INT, DATE                                                              | Can be strongly or dynamically typed.                                                                                                    |\n\n## SQL vs. Python: Career paths\n\nSQL and Python offer you a wide range of career opportunities across various software domains. Mastering both can broaden your career prospects.\n\nSQL is widely used in data science and analytics. Proficiency in SQL can qualify you for the following roles:\n\n- **Database architect**: As a database architect, you are responsible for designing the most suitable database systems to support applications. Your role also involves developing strategies that make databases reliable and secure. This helps to ensure data integrity. According to the [United States Bureau of Labor Statistics](https://www.bls.gov/ooh/computer-and-information-technology/database-administrators.htm#tab-5), the average salary of a database architect is $135,980. \n\n- **Database administrator**: As a database administrator, you are responsible for making sure that databases operate efficiently, securely, and reliably. Your duties include managing user access, assigning user permissions to access or modify database objects, and maintaining up-to-date backups to prevent data loss. The [average salary](https://www.bls.gov/ooh/computer-and-information-technology/database-administrators.htm#tab-5) of a database administrator is $104,620.\n\n- **Business intelligence analyst:** With your knowledge of SQL, you can pursue a career as a business intelligence analyst. In this role, you use data to generate insights that help to make strategic business decisions. Your responsibilities include extracting data from databases, analyzing trends, and creating visualizations and dashboards to present findings to stakeholders.\n\n- **Software developer:** Your SQL skills are valuable in software development. As a software developer, you'll build applications that rely on data in databases. Knowing how to write SQL queries allows you to efficiently retrieve, manipulate, and manage this data as needed. Many software developers use SQL regularly as part of their daily work. The [average salary](https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm#tab-5) of a software developer is $133,080.\n\n![SQL career opportunities](https://assets.roadmap.sh/guest/sql-career-opportunities-kfuer.png)\n\nPython is in high demand in the data field, and it is a core requirement for many roles in data science, data engineering, analytics, and software development. With your Python skills, you can pursue the following career paths:\n\n- **Data scientist**: As a data scientist, you'll use Python for data cleaning, exploration, visualization, and predictive modeling. Strong knowledge of mathematics and statistics is also essential for this role. The [average salary](https://www.bls.gov/ooh/math/data-scientists.htm#tab-5) of a data scientist in the U.S. is $112,590.\n\n- **Data analyst**: In this role, you'll use Python and other tools like Power BI or Tableau to analyze data and address business problems. While data analysts focus on solving business problems by interpreting data, data scientists often apply machine learning techniques to predict trends. The [average salary](https://www.indeed.com/career/data-analyst/salaries) of a data analyst is $82,841.\n\n- **Machine learning engineer**: As a machine learning engineer, you'll develop algorithms that use input data and leverage statistical models to make predictions. Python and libraries like TensorFlow and Scikit-learn are central to this role. The [average salary](https://www.indeed.com/career/machine-learning-engineer/salaries) of a machine learning engineer is $166,574.\n\n- **Software engineer**: Python is used widely in software engineering, especially for building full-stack applications. Python frameworks like Django and Flask enable you to build robust and scalable backend systems. The [average salary](https://www.levels.fyi/t/software-engineer/locations/united-states) of a software engineer is $166,512.\n\n![Python career opportunities](https://assets.roadmap.sh/guest/python-career-opportunities-glis9.png)\n\n## Next steps\n\nAs outlined in this guide, SQL and Python are popular programming languages that data professionals use. Using both languages together may provide more benefits, but you do not have to know both languages to succeed in your data science career. \n\nMastering SQL is your entry ticket into the data field. By starting with SQL, you'll build a solid foundation that makes learning other languages, such as Python, easier. You should dedicate focused time each day to practicing SQL, and this will improve how you work with data. \n\nOur [SQL course](https://roadmap.sh/courses/sql) gives you everything you need to go from beginner to a confident data professional. It's fully interactive, beginner-friendly, and built around the types of queries and data tasks you'll face on the job. You can also explore our [SQL roadmap](https://roadmap.sh/sql) for a step-by-step guide on learning SQL.\n\nOnce you have gained confidence with SQL, you can start learning Python. Python enables you to do more complex analysis, automation, and build applications. Check out the [Python roadmap](https://roadmap.sh/python) to follow a clear path from beginner to expert. ";
				}
				async function compiledContent$9() {
					return await html$9();
				}
				function getHeadings$9() {
					return [{"depth":2,"slug":"what-are-sql-and-python","text":"What are SQL and Python?"},{"depth":2,"slug":"key-features-of-sql","text":"Key features of SQL"},{"depth":2,"slug":"key-features-of-python","text":"Key features of Python"},{"depth":2,"slug":"how-sql-and-python-work-together-in-data-projects","text":"How SQL and Python work together in data projects"},{"depth":2,"slug":"should-you-learn-sql-or-python-first","text":"Should you learn SQL or Python first?"},{"depth":2,"slug":"is-sql-a-dying-language","text":"Is SQL a dying language?"},{"depth":2,"slug":"sql-vs-python-key-differences-that-trip-people-up","text":"SQL vs. Python: Key differences that trip people up"},{"depth":2,"slug":"sql-vs-python-career-paths","text":"SQL vs. Python: Career paths"},{"depth":2,"slug":"next-steps","text":"Next steps"}];
				}

				const Content$9 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$9;
					content.file = file$9;
					content.url = url$9;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$9())}`;
				});

const __vite_glob_0_89 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$9,
	compiledContent: compiledContent$9,
	default: Content$9,
	file: file$9,
	frontmatter: frontmatter$9,
	getHeadings: getHeadings$9,
	rawContent: rawContent$9,
	url: url$9
}, Symbol.toStringTag, { value: 'Module' }));

const html$8 = () => "<p><a href=\"/guides/ssl-tls-https-ssh.png\"><img src=\"/guides/ssl-tls-https-ssh.png\" alt=\"SSL vs TLS vs HTTPs vs SSH\"></a></p>";

				const frontmatter$8 = {"title":"SSL vs TLS vs SSH","description":"Quick tidbit on the differences between SSL, TLS, HTTPS and SSH","authorId":"kamran","seo":{"title":"SSL vs TLS vs SSH - roadmap.sh","description":"Quick tidbit on the differences between SSL, TLS, HTTPS and SSH"},"isNew":false,"type":"visual","date":"2021-04-22T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$8 = "/workspace/src/data/guides/ssl-tls-https-ssh.md";
				const url$8 = undefined;
				function rawContent$8() {
					return "   \n                          \n                                                                              \n                  \n    \n                                         \n                                                                                \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![SSL vs TLS vs HTTPs vs SSH](/guides/ssl-tls-https-ssh.png)](/guides/ssl-tls-https-ssh.png)\n";
				}
				async function compiledContent$8() {
					return await html$8();
				}
				function getHeadings$8() {
					return [];
				}

				const Content$8 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$8;
					content.file = file$8;
					content.url = url$8;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$8())}`;
				});

const __vite_glob_0_90 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$8,
	compiledContent: compiledContent$8,
	default: Content$8,
	file: file$8,
	frontmatter: frontmatter$8,
	getHeadings: getHeadings$8,
	rawContent: rawContent$8,
	url: url$8
}, Symbol.toStringTag, { value: 'Module' }));

const html$7 = () => "<p><a href=\"/guides/sso.png\"><img src=\"/guides/sso.png\" alt=\"SSO\"></a></p>";

				const frontmatter$7 = {"title":"SSO — Single Sign On","description":"Learn the basics of SAML and understand how does Single Sign On work.","authorId":"kamran","seo":{"title":"SSO — Single Sign On - roadmap.sh","description":"Learn the basics of SAML and understand how does Single Sign On work."},"isNew":false,"type":"visual","date":"2021-07-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$7 = "/workspace/src/data/guides/sso.md";
				const url$7 = undefined;
				function rawContent$7() {
					return "   \n                             \n                                                                                    \n                  \n    \n                                            \n                                                                                      \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![SSO](/guides/sso.png)](/guides/sso.png)\n";
				}
				async function compiledContent$7() {
					return await html$7();
				}
				function getHeadings$7() {
					return [];
				}

				const Content$7 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$7;
					content.file = file$7;
					content.url = url$7;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$7())}`;
				});

const __vite_glob_0_91 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$7,
	compiledContent: compiledContent$7,
	default: Content$7,
	file: file$7,
	frontmatter: frontmatter$7,
	getHeadings: getHeadings$7,
	rawContent: rawContent$7,
	url: url$7
}, Symbol.toStringTag, { value: 'Module' }));

const html$6 = () => "<p><a href=\"/guides/token-authentication.png\"><img src=\"/guides/token-authentication.png\" alt=\"Token based Authentication\"></a></p>";

				const frontmatter$6 = {"title":"Token Based Authentication","description":"Understand what is token based authentication and how it is implemented","authorId":"kamran","seo":{"title":"Token Based Authentication - roadmap.sh","description":"Understand what is token based authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-06-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$6 = "/workspace/src/data/guides/token-authentication.md";
				const url$6 = undefined;
				function rawContent$6() {
					return "   \n                                   \n                                                                                      \n                  \n    \n                                                  \n                                                                                        \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Token based Authentication](/guides/token-authentication.png)](/guides/token-authentication.png)\n";
				}
				async function compiledContent$6() {
					return await html$6();
				}
				function getHeadings$6() {
					return [];
				}

				const Content$6 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$6;
					content.file = file$6;
					content.url = url$6;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$6())}`;
				});

const __vite_glob_0_92 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$6,
	compiledContent: compiledContent$6,
	default: Content$6,
	file: file$6,
	frontmatter: frontmatter$6,
	getHeadings: getHeadings$6,
	rawContent: rawContent$6,
	url: url$6
}, Symbol.toStringTag, { value: 'Module' }));

const html$5 = () => "<p>BitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you’re reading now), participants in the BitTorrent network, called <strong>peers</strong>, download pieces of files from <em>each other</em>—this is what makes it a <strong>peer-to-peer</strong> protocol. In this article we will investigate how this works, and build our own client that can find peers and exchange data between them.</p>\n<p><img src=\"/guides/torrent-client/client-server-p2p.png\" alt=\"diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships\"></p>\n<p>The protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We’ll be implementing the <a href=\"https://www.bittorrent.org/beps/bep_0003.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">original spec</a> from 2001 to keep this a weekend-sized project.</p>\n<p>I’ll be using a <a href=\"https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Debian ISO</a> file as my guinea pig because it’s big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we’ll avoid the legal and ethical issues related to downloading pirated content.</p>\n<h2 id=\"finding-peers\">Finding peers</h2>\n<p>Here’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind trackers, which are central servers that introduce peers to each other. They’re just web servers running over HTTP, and you can find Debian’s at <code>http://bttracker.debian.org:6969/</code>.</p>\n<p><img src=\"/guides/torrent-client/trackers.png\" alt=\"illustration of a desktop computer and laptop sitting at a pub\"></p>\n<p>Of course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and Kickass Torrents getting seized and shut down. New methods cut out the middleman by making even <strong>peer discovery</strong> a distributed process. We won’t be implementing them, but if you’re interested, some terms you can research are <strong>DHT</strong>, <strong>PEX</strong>, and <strong>magnet links</strong>.</p>\n<h3 id=\"parsing-a-torrent-file\">Parsing a .torrent file</h3>\n<p>A .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It’s all we need in order to kickstart the process of downloading a torrent. Debian’s .torrent file looks like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:\"Debian CD from cdimage.debian.org\"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)ee</span></span></code></pre>\n<p>That mess is encoded in a format called <strong>Bencode</strong> (pronounced <em>bee-encode</em>), and we’ll need to decode it.</p>\n<p>Bencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it’s really simple to parse from a stream. Strings come with a length prefix, and look like <code>4:spam</code>. Integers go between <em>start</em> and <em>end</em> markers, so <code>7</code> would encode to <code>i7e</code>. Lists and dictionaries work in a similar way: <code>l4:spami7ee</code> represents <code>['spam', 7]</code>, while <code>d4:spami7ee</code> means <code>{spam: 7}</code>.</p>\n<p>In a prettier format, our .torrent file looks like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">8:announce</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">41:http://bttracker.debian.org:6969/announce</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">7:comment</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">35:\"Debian CD from cdimage.debian.org\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">13:creation date</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i1573903810e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">4:info</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">6:length</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i351272960e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">4:name</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">31:debian-10.2.0-amd64-netinst.iso</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">12:piece length</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i262144e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">6:pieces</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span></code></pre>\n<p>In this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each <strong>piece</strong>, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of <em>thousands</em> of pieces. We’ll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we’ve got a file!</p>\n<p><img src=\"/guides/torrent-client/pieces.png\" alt=\"&#x22;illustration of a file being cut with scissors into multiple pieces, starting with piece 0\"></p>\n<p>This mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional <strong>torrent poisoning</strong>. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.</p>\n<p>It would be really fun to write a bencode parser, but parsing isn’t our focus today. But I found Fredrik Lundh’s <a href=\"https://effbot.org/zone/bencode.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">50 line parser</a> to be especially illuminating. For this project, I used <a href=\"https://github.com/jackpal/bencode-go\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">github.com/jackpal/bencode-go</a>:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/jackpal/bencode-go</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeInfo</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPieces      </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"pieces\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPieceLength </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">bencode:\"piece length\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tLength      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">bencode:\"length\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tName        </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"name\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeTorrent</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tAnnounce </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\">      `</span><span style=\"color:#F1FA8C\">bencode:\"announce\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tInfo     </span><span style=\"color:#8BE9FD;font-style:italic\">bencodeInfo</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"info\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Open parses a torrent file</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">bencodeTorrent</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbto </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeTorrent</span><span style=\"color:#F8F8F2\">{}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> bencode.</span><span style=\"color:#50FA7B\">Unmarshal</span><span style=\"color:#F8F8F2\">(r, </span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">bto)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#F8F8F2\">bto, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>Because I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named <code>TorrentFile</code> and wrote a few helper functions to convert between the two.</p>\n<p>Notably, I split <code>pieces</code> (previously a string) into a slice of hashes (each <code>[20]byte</code>) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded <code>info</code> dict (the one which contained the name, size, and piece hashes). We know this as the <strong>infohash</strong> and it uniquely identifies files when we talk to trackers and peers. More on this later.</p>\n<p><img src=\"/guides/torrent-client/info-hash.png\" alt=\"a name tag saying &#x27;Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074&#x27;\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> TorrentFile</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tAnnounce    </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tInfoHash    [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPieceHashes [][</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPieceLength </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tLength      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tName        </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bto </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">bencodeTorrent</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">toTorrentFile</span><span style=\"color:#F8F8F2\">() (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">TorrentFile</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"retrieving-peers-from-the-tracker\">Retrieving peers from the tracker</h3>\n<p>Now that we have information about the file and its tracker, let’s talk to the tracker to <strong>announce</strong> our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the <code>announce</code> URL supplied in the .torrent file, with a few query parameters:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">t </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">TorrentFile</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">buildTrackerURL</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peerID</span><span style=\"color:#F8F8F2\"> [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">port</span><span style=\"color:#8BE9FD;font-style:italic\"> uint16</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbase, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> url.</span><span style=\"color:#50FA7B\">Parse</span><span style=\"color:#F8F8F2\">(t.Announce)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#E9F284\"> \"\"</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tparams </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> url</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Values</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">info_hash</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:  []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">(t.InfoHash[:])},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">peer_id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:    []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">(peerID[:])},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">port</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:       []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">(Port))},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">uploaded</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:   []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">0</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">downloaded</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">0</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">compact</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:    []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">1</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\t\"</span><span style=\"color:#F1FA8C\">left</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:       []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(t.Length)},</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbase.RawQuery </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> params.</span><span style=\"color:#50FA7B\">Encode</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> base.</span><span style=\"color:#50FA7B\">String</span><span style=\"color:#F8F8F2\">(), </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>The important ones:</p>\n<ul>\n<li><strong>info_hash</strong>: Identifies the <em>file</em> we’re trying to download. It’s the infohash we calculated earlier from the bencoded <code>info</code> dict. The tracker will use this to figure out which peers to show us.</li>\n<li><strong>peer_id</strong>: A 20 byte name to identify <em>ourselves</em> to trackers and peers. We’ll just generate 20 random bytes for this. Real BitTorrent clients have IDs like <code>-TR2940-k8hj0wgej6ch</code> which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.</li>\n</ul>\n<p><img src=\"/guides/torrent-client/info-hash-peer-id.png\" alt=\"a file with a name tag saying &#x27;info_hash&#x27; and a person with a name tag &#x27;peer_id&#x27;\"></p>\n<h3 id=\"parsing-the-tracker-response\">Parsing the tracker response</h3>\n<p>We get back a bencoded response:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">8:interval</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i900e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">5:peers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">252:(another long binary blob)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span></code></pre>\n<p><code>Interval</code> tells us how often we’re supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).</p>\n<p><code>Peers</code> is another long binary blob containing the IP addresses of each peer. It’s made out of <strong>groups of six bytes</strong>. The first four bytes in each group represent the peer’s IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian <code>uint16</code>. <strong>Big-endian</strong>, or <strong>network order</strong>, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes <code>0x1A</code>, <code>0xE1</code> make <code>0x1AE1</code>, or 6881 in decimal.</p>\n<p><img src=\"/guides/torrent-client/address.png\" alt=\"diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Peer encodes connection information for a peer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Peer</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tIP   </span><span style=\"color:#8BE9FD;font-style:italic\">net</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">IP</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPort </span><span style=\"color:#8BE9FD;font-style:italic\">uint16</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Unmarshal parses peer IP addresses and ports from a buffer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Unmarshal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peersBin</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">) ([]</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tconst</span><span style=\"color:#BD93F9\"> peerSize</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 6</span><span style=\"color:#6272A4\"> // 4 for IP, 2 for port</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tnumPeers </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(peersBin) </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> peerSize</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(peersBin)</span><span style=\"color:#FF79C6\">%</span><span style=\"color:#F8F8F2\">peerSize </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> fmt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Received malformed peers</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tpeers </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, numPeers)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tfor</span><span style=\"color:#F8F8F2\"> i </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">; i </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> numPeers; i</span><span style=\"color:#FF79C6\">++</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\toffset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> i </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#F8F8F2\"> peerSize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tpeers[i].IP </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> net.</span><span style=\"color:#50FA7B\">IP</span><span style=\"color:#F8F8F2\">(peersBin[offset : offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tpeers[i].Port </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> binary.BigEndian.</span><span style=\"color:#50FA7B\">Uint16</span><span style=\"color:#F8F8F2\">(peersBin[offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\"> : offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">6</span><span style=\"color:#F8F8F2\">])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> peers, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h2 id=\"downloading-from-peers\">Downloading from peers</h2>\n<p>Now that we have a list of peers, it’s time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:</p>\n<ol>\n<li>Start a TCP connection with the peer. This is like starting a phone call.</li>\n<li>Complete a two-way BitTorrent <strong>handshake</strong>. <em>“Hello?” “Hello.”</em></li>\n<li>Exchange <strong>messages</strong> to download <strong>pieces</strong>. <em>“I’d like piece #231 please.”</em></li>\n</ol>\n<h2 id=\"start-a-tcp-connection\">Start a TCP connection</h2>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">conn, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> net.</span><span style=\"color:#50FA7B\">DialTimeout</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">tcp</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.</span><span style=\"color:#50FA7B\">String</span><span style=\"color:#F8F8F2\">(), </span><span style=\"color:#BD93F9\">3</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#F8F8F2\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>I set a timeout so that I don’t waste too much time on peers that aren’t going to let me connect. For the most part, it’s a pretty standard TCP connection.</p>\n<h3 id=\"complete-the-handshake\">Complete the handshake</h3>\n<p>We’ve just set up a connection with a peer, but we want to do a handshake to validate our assumptions that the peer</p>\n<ul>\n<li>can communicate using the BitTorrent protocol</li>\n<li>is able to understand and respond to our messages</li>\n<li>has the file that we want, or at least knows what we’re talking about</li>\n</ul>\n<p><img src=\"/guides/torrent-client/handshake.png\" alt=\"Two computers communicating. One asks &#x27;do you speak BitTorrent and have this file?&#x27; and the other replies &#x27;I speak BitTorrent and have that file&#x27;\"></p>\n<p>My father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it’s made up of five parts:</p>\n<ol>\n<li>The length of the protocol identifier, which is always 19 (0x13 in hex)</li>\n<li>The protocol identifier, called the <strong>pstr</strong> which is always <code>BitTorrent protocol</code></li>\n<li>Eight <strong>reserved bytes</strong>, all set to 0. We’d flip some of them to 1 to indicate that we support certain <a href=\"http://www.bittorrent.org/beps/bep_0010.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">extensions</a>. But we don’t, so we’ll keep them at 0.</li>\n<li>The <strong>infohash</strong> that we calculated earlier to identify which file we want</li>\n<li>The <strong>Peer ID</strong> that we made up to identify ourselves</li>\n</ol>\n<p>Put together, a handshake string might look like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">\\x13BitTorrent protocol\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x86\\xd4\\xc8\\x00\\x24\\xa4\\x69\\xbe\\x4c\\x50\\xbc\\x5a\\x10\\x2c\\xf7\\x17\\x80\\x31\\x00\\x74-TR2940-k8hj0wgej6ch</span></span></code></pre>\n<p>After we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we’re talking about the same file. If everything goes as planned, we’re good to go. If not, we can sever the connection because there’s something wrong. <em>“Hello?” “这是谁？ 你想要什么？” “Okay, wow, wrong number.”</em></p>\n<p>In our code, let’s make a struct to represent a handshake, and write a few methods for serializing and reading them:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// A Handshake is a special message that a peer uses to identify itself</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Handshake</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPstr     </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tInfoHash [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPeerID   [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serialize serializes the handshake to a buffer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">h </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Handshake</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">Serialize</span><span style=\"color:#F8F8F2\">() []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(h.Pstr)</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">49</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbuf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> byte</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(h.Pstr))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tcurr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tcurr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.Pstr)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tcurr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], </span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">8</span><span style=\"color:#F8F8F2\">)) </span><span style=\"color:#6272A4\">// 8 reserved bytes</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tcurr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.InfoHash[:])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tcurr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.PeerID[:])</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> buf</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Read parses a handshake from a stream</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Read</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Handshake</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// Do Serialize(), but backwards</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"send-and-receive-messages\">Send and receive messages</h3>\n<p>Once we’ve completed the initial handshake, we can send and receive <strong>messages</strong>. Well, not quite—if the other peer isn’t ready to accept messages, we can’t send any until they tell us they’re ready. In this state, we’re considered <strong>choked</strong> by the other peer. They’ll send us an <strong>unchoke</strong> message to let us know that we can begin asking them for data. By default, we assume that we’re choked until proven otherwise.</p>\n<p>Once we’ve been unchoked, we can then begin sending <strong>requests</strong> for pieces, and they can send us messages back containing pieces.</p>\n<p><img src=\"/guides/torrent-client/choke.png\" alt=\"&#x22;A cartoon in which person 1 says &#x27;hello I would like piece number—&#x27; and person 2 grabs him by the neck and says &#x27;00 00 00 01 00 (choke)&#x27;\"></p>\n<h4 id=\"interpreting-messages\">Interpreting messages</h4>\n<p>A message has a length, an <strong>ID</strong> and a <strong>payload</strong>. On the wire, it looks like:</p>\n<p><img src=\"/guides/torrent-client/message.png\" alt=\"A message with 4 byte for the length, 1 byte for ID, and an optional payload\"></p>\n<p>A message starts with a length indicator which tells us how many bytes long the message will be. It’s a 32-bit integer, meaning it’s made out of four bytes smooshed together in big-endian order. The next byte, the <strong>ID</strong>, tells us which type of message we’re receiving—for example, a <code>2</code> byte means “interested.” Finally, the optional <strong>payload</strong> fills out the remaining length of the message.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> messageID</span><span style=\"color:#8BE9FD;font-style:italic\"> uint8</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgChoke</span><span style=\"color:#8BE9FD;font-style:italic\">         messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgUnchoke</span><span style=\"color:#8BE9FD;font-style:italic\">       messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgInterested</span><span style=\"color:#8BE9FD;font-style:italic\">    messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgNotInterested</span><span style=\"color:#8BE9FD;font-style:italic\"> messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgHave</span><span style=\"color:#8BE9FD;font-style:italic\">          messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 4</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgBitfield</span><span style=\"color:#8BE9FD;font-style:italic\">      messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 5</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgRequest</span><span style=\"color:#8BE9FD;font-style:italic\">       messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 6</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgPiece</span><span style=\"color:#8BE9FD;font-style:italic\">         messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 7</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">\tMsgCancel</span><span style=\"color:#8BE9FD;font-style:italic\">        messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Message stores ID and payload of a message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Message</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tID      </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tPayload []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serialize serializes a message into a buffer of the form</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// &#x3C;length prefix>&#x3C;message ID>&#x3C;payload></span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Interprets `nil` as a keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">m </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Message</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">Serialize</span><span style=\"color:#F8F8F2\">() []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> m </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlength </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> uint32</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(m.Payload) </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 1</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#6272A4\">// +1 for id</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#F8F8F2\">length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbinary.BigEndian.</span><span style=\"color:#50FA7B\">PutUint32</span><span style=\"color:#F8F8F2\">(buf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">:</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">], length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbuf[</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> byte</span><span style=\"color:#F8F8F2\">(m.ID)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tcopy</span><span style=\"color:#F8F8F2\">(buf[</span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">:], m.Payload)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> buf</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<p>To read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a <code>uint32</code> to get the <strong>length</strong> of the message. Then, we read that number of bytes to get the <strong>ID</strong> (the first byte) and the <strong>payload</strong> (the remaining bytes).</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Read parses a message from a stream. Returns `nil` on keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Read</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Message</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlengthBuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t_, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> io.</span><span style=\"color:#50FA7B\">ReadFull</span><span style=\"color:#F8F8F2\">(r, lengthBuf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlength </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> binary.BigEndian.</span><span style=\"color:#50FA7B\">Uint32</span><span style=\"color:#F8F8F2\">(lengthBuf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> length </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tmessageBuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t_, err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> io.</span><span style=\"color:#50FA7B\">ReadFull</span><span style=\"color:#F8F8F2\">(r, messageBuf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tm </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> Message</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tID:      </span><span style=\"color:#50FA7B\">messageID</span><span style=\"color:#F8F8F2\">(messageBuf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">]),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tPayload: messageBuf[</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">:],</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#F8F8F2\">m, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h4 id=\"bitfields\">Bitfields</h4>\n<p>One of the most interesting types of message is the <strong>bitfield</strong>, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the <em>bits</em> set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all <code>0</code>, and flip bits to <code>1</code> to mark their positions as “stamped.”</p>\n<p><img src=\"/guides/torrent-client/bitfield.png\" alt=\"a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010\"></p>\n<p>By working with <em>bits</em> instead of <em>bytes</em>, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a <code>bool</code>. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// A Bitfield represents the pieces that a peer has</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Bitfield</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// HasPiece tells if a bitfield has a particular index set</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bf </span><span style=\"color:#8BE9FD;font-style:italic\">Bitfield</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">HasPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">index</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#8BE9FD;font-style:italic\">bool</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbyteIndex </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\toffset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">%</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> bf[byteIndex]</span><span style=\"color:#FF79C6\">>></span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">7</span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\">offset)</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#FF79C6\"> !=</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// SetPiece sets a bit in the bitfield</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bf </span><span style=\"color:#8BE9FD;font-style:italic\">Bitfield</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">SetPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">index</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbyteIndex </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\toffset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">%</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbf[byteIndex] </span><span style=\"color:#FF79C6\">|=</span><span style=\"color:#BD93F9\"> 1</span><span style=\"color:#FF79C6\"> &#x3C;&#x3C;</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9\">7</span><span style=\"color:#FF79C6\"> -</span><span style=\"color:#F8F8F2\"> offset)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h3 id=\"putting-it-all-together\">Putting it all together</h3>\n<p>We now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the <strong>concurrency</strong> involved in talking to multiple peers at once, and managing the <strong>state</strong> of our peers as we interact with them. These are both classically Hard problems.</p>\n<h4 id=\"managing-concurrency-channels-as-queues\">Managing concurrency: channels as queues</h4>\n<p>In Go, we <a href=\"https://blog.golang.org/share-memory-by-communicating\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">share memory by communicating</a>, and we can think of a Go channel as a cheap thread-safe queue.</p>\n<p>We’ll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Init queues for workers to retrieve work and send results</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">workQueue </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(t.PieceHashes))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">results </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> index, hash </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> t.PieceHashes {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlength </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">calculatePieceSize</span><span style=\"color:#F8F8F2\">(index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tworkQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">{index, hash, length}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Start workers</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> _, peer </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> t.Peers {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tgo</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">startDownloadWorker</span><span style=\"color:#F8F8F2\">(peer, workQueue, results)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Collect results into a buffer until full</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">buf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, t.Length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">donePieces </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> donePieces </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(t.PieceHashes) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tres </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> &#x3C;-</span><span style=\"color:#F8F8F2\">results</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbegin, end </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">calculateBoundsForPiece</span><span style=\"color:#F8F8F2\">(res.index)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">\tcopy</span><span style=\"color:#F8F8F2\">(buf[begin:end], res.buf)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tdonePieces</span><span style=\"color:#FF79C6\">++</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">(workQueue)</span></span></code></pre>\n<p>We’ll spawn a worker goroutine for each peer we’ve received from the tracker. It’ll connect and handshake with the peer, and then start retrieving work from the <code>workQueue</code>, attempting to download it, and sending downloaded pieces back through the <code>results</code> channel.</p>\n<p><img src=\"/guides/torrent-client/download.png\" alt=\"a flow chart of the download strategy\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">t </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Torrent</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">startDownloadWorker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peer</span><span style=\"color:#8BE9FD;font-style:italic\"> peers</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">workQueue</span><span style=\"color:#FF79C6\"> chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">results</span><span style=\"color:#FF79C6\"> chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tc, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> client.</span><span style=\"color:#50FA7B\">New</span><span style=\"color:#F8F8F2\">(peer, t.PeerID, t.InfoHash)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Could not handshake with </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#F1FA8C\">. Disconnecting</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.IP)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tdefer</span><span style=\"color:#F8F8F2\"> c.Conn.</span><span style=\"color:#50FA7B\">Close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tlog.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Completed handshake with </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.IP)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tc.</span><span style=\"color:#50FA7B\">SendUnchoke</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tc.</span><span style=\"color:#50FA7B\">SendInterested</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tfor</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> workQueue {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#FF79C6\"> !</span><span style=\"color:#F8F8F2\">c.Bitfield.</span><span style=\"color:#50FA7B\">HasPiece</span><span style=\"color:#F8F8F2\">(pw.index) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tworkQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\tcontinue</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t// Download the piece</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tbuf, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> attemptDownloadPiece</span><span style=\"color:#F8F8F2\">(c, pw)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tlog.</span><span style=\"color:#50FA7B\">Println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Exiting</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tworkQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\treturn</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\terr </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> checkIntegrity</span><span style=\"color:#F8F8F2\">(pw, buf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tlog.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Piece #</span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\"> failed integrity check</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, pw.index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\tworkQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\tcontinue</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tc.</span><span style=\"color:#50FA7B\">SendHave</span><span style=\"color:#F8F8F2\">(pw.index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tresults </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">{pw.index, buf}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h4 id=\"managing-state\">Managing state</h4>\n<p>We’ll keep track of each peer in a struct, and modify that struct as we read messages. It’ll include data like how much we’ve downloaded from the peer, how much we’ve requested from them, and whether we’re choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> pieceProgress</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tindex      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tclient     </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">client</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Client</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbuf        []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tdownloaded </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\trequested  </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tbacklog    </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">state </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">pieceProgress</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">readMessage</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tmsg, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> state.client.</span><span style=\"color:#50FA7B\">Read</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#6272A4\">// this call blocks</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tswitch</span><span style=\"color:#F8F8F2\"> msg.ID {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tcase</span><span style=\"color:#F8F8F2\"> message.MsgUnchoke:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tstate.client.Choked </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tcase</span><span style=\"color:#F8F8F2\"> message.MsgChoke:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tstate.client.Choked </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tcase</span><span style=\"color:#F8F8F2\"> message.MsgHave:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tindex, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> message.</span><span style=\"color:#50FA7B\">ParseHave</span><span style=\"color:#F8F8F2\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tstate.client.Bitfield.</span><span style=\"color:#50FA7B\">SetPiece</span><span style=\"color:#F8F8F2\">(index)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tcase</span><span style=\"color:#F8F8F2\"> message.MsgPiece:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tn, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> message.</span><span style=\"color:#50FA7B\">ParsePiece</span><span style=\"color:#F8F8F2\">(state.index, state.buf, msg)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tstate.downloaded </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> n</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tstate.backlog</span><span style=\"color:#FF79C6\">--</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#BD93F9\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h4 id=\"time-to-make-requests\">Time to make requests!</h4>\n<p>Files, pieces, and piece hashes aren’t the full story—we can go further by breaking down pieces into <strong>blocks</strong>. A block is a part of a piece, and we can fully define a block by the <strong>index</strong> of the piece it’s part of, its byte <strong>offset</strong> within the piece, and its <strong>length</strong>. When we make requests for data from peers, we are actually requesting <em>blocks</em>. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.</p>\n<p>A peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they’re often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it’s probably better to stick with the spec.</p>\n<h4 id=\"pipelining\">Pipelining</h4>\n<p>Network round-trips are expensive, and requesting each block one by one will absolutely thank the performance of our download. Therefore, it’s important to <strong>pipeline</strong> our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.</p>\n<p><img src=\"/guides/torrent-client/pipelining.png\" alt=\"Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.\"></p>\n<p>Classically, BitTorrent clients kept a queue of five pipelined requests, and that’s the value I’ll be using. I found that increasing it can up to double the speed of a download. Newer clients use an <a href=\"https://luminarys.com/posts/writing-a-bittorrent-client.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">adaptive</a> queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it’s pretty low hanging fruit for future performance optimization.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// MaxBlockSize is the largest number of bytes a request can ask for</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#BD93F9\"> MaxBlockSize</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 16384</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#BD93F9\"> MaxBacklog</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> attemptDownloadPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">client</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Client</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">pw</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">) ([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tstate </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> pieceProgress</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tindex:  pw.index,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tclient: c,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tbuf:    </span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, pw.length),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// Setting a deadline helps get unresponsive peers unstuck.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t// 30 seconds is more than enough time to download a 262 KB piece</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tc.Conn.</span><span style=\"color:#50FA7B\">SetDeadline</span><span style=\"color:#F8F8F2\">(time.</span><span style=\"color:#50FA7B\">Now</span><span style=\"color:#F8F8F2\">().</span><span style=\"color:#50FA7B\">Add</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">30</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#F8F8F2\"> time.Second))</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tdefer</span><span style=\"color:#F8F8F2\"> c.Conn.</span><span style=\"color:#50FA7B\">SetDeadline</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">time</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Time</span><span style=\"color:#F8F8F2\">{}) </span><span style=\"color:#6272A4\">// Disable the deadline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tfor</span><span style=\"color:#F8F8F2\"> state.downloaded </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> pw.length {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t// If unchoked, send requests until we have enough unfulfilled requests</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#FF79C6\"> !</span><span style=\"color:#F8F8F2\">state.client.Choked {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\tfor</span><span style=\"color:#F8F8F2\"> state.backlog </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> MaxBacklog </span><span style=\"color:#FF79C6\">&#x26;&#x26;</span><span style=\"color:#F8F8F2\"> state.requested </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> pw.length {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\tblockSize </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> MaxBlockSize</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">\t\t\t\t// Last block might be shorter than the typical block</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\t\tif</span><span style=\"color:#F8F8F2\"> pw.length</span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\">state.requested </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> blockSize {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\t\tblockSize </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> pw.length </span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\"> state.requested</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">SendRequest</span><span style=\"color:#F8F8F2\">(pw.index, state.requested, blockSize)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\t\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\t\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\tstate.backlog</span><span style=\"color:#FF79C6\">++</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t\tstate.requested </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> blockSize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\terr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> state.</span><span style=\"color:#50FA7B\">readMessage</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\t\t\treturn</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\treturn</span><span style=\"color:#F8F8F2\"> state.buf, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<h4 id=\"maingo\">main.go</h4>\n<p>This is a short one. We’re almost there.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">log</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">os</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E9F284\">\t\"</span><span style=\"color:#F1FA8C\">github.com/veggiedefender/torrent-client/torrentfile</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\tinPath </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.Args[</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">]</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\toutPath </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.Args[</span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\ttf, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> torrentfile.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(inPath)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\terr </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> tf.</span><span style=\"color:#50FA7B\">DownloadToFile</span><span style=\"color:#F8F8F2\">(outPath)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">\tif</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t\tlog.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span></code></pre>\n<script id=\"asciicast-xqRSB0Jec8RN91Zt89rbb9PcL\" src=\"https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL.js\" async></script>\n<h2 id=\"this-isnt-the-full-story\">This isn’t the full story</h2>\n<p>For brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my <a href=\"https://github.com/veggiedefender/torrent-client\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full implementation</a> if you’re interested.</p>";

				const frontmatter$5 = {"title":"Building a BitTorrent Client","description":"Learn everything you need to know about BitTorrent by writing a client in Go","authorId":"jesse-li","seo":{"title":"Building a BitTorrent Client - roadmap.sh","description":"Learn everything you need to know about BitTorrent by writing a client in Go"},"isNew":false,"canonicalUrl":"https://blog.jse.li/posts/torrent/","type":"textual","date":"2021-01-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$5 = "/workspace/src/data/guides/torrent-client.md";
				const url$5 = undefined;
				function rawContent$5() {
					return "   \n                                     \n                                                                                           \n                    \n    \n                                                    \n                                                                                             \n            \n                                                  \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nBitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you're reading now), participants in the BitTorrent network, called **peers**, download pieces of files from _each other_—this is what makes it a **peer-to-peer** protocol. In this article we will investigate how this works, and build our own client that can find peers and exchange data between them.\n\n![diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships](/guides/torrent-client/client-server-p2p.png)\n\nThe protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We'll be implementing the [original spec](https://www.bittorrent.org/beps/bep_0003.html) from 2001 to keep this a weekend-sized project.\n\nI'll be using a [Debian ISO](https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist) file as my guinea pig because it's big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we'll avoid the legal and ethical issues related to downloading pirated content.\n\n## Finding peers\n\nHere’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind trackers, which are central servers that introduce peers to each other. They’re just web servers running over HTTP, and you can find Debian’s at `http://bttracker.debian.org:6969/`.\n\n![illustration of a desktop computer and laptop sitting at a pub](/guides/torrent-client/trackers.png)\n\nOf course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and Kickass Torrents getting seized and shut down. New methods cut out the middleman by making even **peer discovery** a distributed process. We won't be implementing them, but if you're interested, some terms you can research are **DHT**, **PEX**, and **magnet links**.\n\n### Parsing a .torrent file\n\nA .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It's all we need in order to kickstart the process of downloading a torrent. Debian's .torrent file looks like this:\n\n```markdown\nd8:announce41:http://bttracker.debian.org:6969/announce7:comment35:\"Debian CD from cdimage.debian.org\"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)ee\n```\n\nThat mess is encoded in a format called **Bencode** (pronounced _bee-encode_), and we'll need to decode it.\n\nBencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it's really simple to parse from a stream. Strings come with a length prefix, and look like `4:spam`. Integers go between _start_ and _end_ markers, so `7` would encode to `i7e`. Lists and dictionaries work in a similar way: `l4:spami7ee` represents `['spam', 7]`, while `d4:spami7ee` means `{spam: 7}`.\n\nIn a prettier format, our .torrent file looks like this:\n\n```markdown\nd\n8:announce\n41:http://bttracker.debian.org:6969/announce\n7:comment\n35:\"Debian CD from cdimage.debian.org\"\n13:creation date\ni1573903810e\n4:info\nd\n6:length\ni351272960e\n4:name\n31:debian-10.2.0-amd64-netinst.iso\n12:piece length\ni262144e\n6:pieces\n26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)\ne\ne\n```\n\nIn this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each **piece**, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of _thousands_ of pieces. We'll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we've got a file!\n\n![\"illustration of a file being cut with scissors into multiple pieces, starting with piece 0](/guides/torrent-client/pieces.png)\n\nThis mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional **torrent poisoning**. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.\n\nIt would be really fun to write a bencode parser, but parsing isn't our focus today. But I found Fredrik Lundh's [50 line parser](https://effbot.org/zone/bencode.htm) to be especially illuminating. For this project, I used [github.com/jackpal/bencode-go](https://github.com/jackpal/bencode-go):\n\n```go\nimport (\n\t\"github.com/jackpal/bencode-go\"\n)\n\ntype bencodeInfo struct {\n\tPieces      string `bencode:\"pieces\"`\n\tPieceLength int    `bencode:\"piece length\"`\n\tLength      int    `bencode:\"length\"`\n\tName        string `bencode:\"name\"`\n}\n\ntype bencodeTorrent struct {\n\tAnnounce string      `bencode:\"announce\"`\n\tInfo     bencodeInfo `bencode:\"info\"`\n}\n\n// Open parses a torrent file\nfunc Open(r io.Reader) (*bencodeTorrent, error) {\n\tbto := bencodeTorrent{}\n\terr := bencode.Unmarshal(r, &bto)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &bto, nil\n}\n```\n\nBecause I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named `TorrentFile` and wrote a few helper functions to convert between the two.\n\nNotably, I split `pieces` (previously a string) into a slice of hashes (each `[20]byte`) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded `info` dict (the one which contained the name, size, and piece hashes). We know this as the **infohash** and it uniquely identifies files when we talk to trackers and peers. More on this later.\n\n![a name tag saying 'Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074'](/guides/torrent-client/info-hash.png)\n\n```go\ntype TorrentFile struct {\n\tAnnounce    string\n\tInfoHash    [20]byte\n\tPieceHashes [][20]byte\n\tPieceLength int\n\tLength      int\n\tName        string\n}\n\nfunc (bto *bencodeTorrent) toTorrentFile() (*TorrentFile, error) {\n\t// ...\n}\n```\n\n### Retrieving peers from the tracker\n\nNow that we have information about the file and its tracker, let's talk to the tracker to **announce** our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the `announce` URL supplied in the .torrent file, with a few query parameters:\n\n```go\nfunc (t *TorrentFile) buildTrackerURL(peerID [20]byte, port uint16) (string, error) {\n\tbase, err := url.Parse(t.Announce)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tparams := url.Values{\n\t\t\"info_hash\":  []string{string(t.InfoHash[:])},\n\t\t\"peer_id\":    []string{string(peerID[:])},\n\t\t\"port\":       []string{strconv.Itoa(int(Port))},\n\t\t\"uploaded\":   []string{\"0\"},\n\t\t\"downloaded\": []string{\"0\"},\n\t\t\"compact\":    []string{\"1\"},\n\t\t\"left\":       []string{strconv.Itoa(t.Length)},\n\t}\n\tbase.RawQuery = params.Encode()\n\treturn base.String(), nil\n}\n```\n\nThe important ones:\n\n- **info_hash**: Identifies the _file_ we're trying to download. It's the infohash we calculated earlier from the bencoded `info` dict. The tracker will use this to figure out which peers to show us.\n- **peer_id**: A 20 byte name to identify _ourselves_ to trackers and peers. We'll just generate 20 random bytes for this. Real BitTorrent clients have IDs like `-TR2940-k8hj0wgej6ch` which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.\n\n![a file with a name tag saying 'info_hash' and a person with a name tag 'peer_id'](/guides/torrent-client/info-hash-peer-id.png)\n\n### Parsing the tracker response\n\nWe get back a bencoded response:\n\n```markdown\nd\n8:interval\ni900e\n5:peers\n252:(another long binary blob)\ne\n```\n\n`Interval` tells us how often we're supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).\n\n`Peers` is another long binary blob containing the IP addresses of each peer. It's made out of **groups of six bytes**. The first four bytes in each group represent the peer's IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian `uint16`. **Big-endian**, or **network order**, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes `0x1A`, `0xE1` make `0x1AE1`, or 6881 in decimal.\n\n![diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881](/guides/torrent-client/address.png)\n\n```go\n// Peer encodes connection information for a peer\ntype Peer struct {\n\tIP   net.IP\n\tPort uint16\n}\n\n// Unmarshal parses peer IP addresses and ports from a buffer\nfunc Unmarshal(peersBin []byte) ([]Peer, error) {\n\tconst peerSize = 6 // 4 for IP, 2 for port\n\tnumPeers := len(peersBin) / peerSize\n\tif len(peersBin)%peerSize != 0 {\n\t\terr := fmt.Errorf(\"Received malformed peers\")\n\t\treturn nil, err\n\t}\n\tpeers := make([]Peer, numPeers)\n\tfor i := 0; i < numPeers; i++ {\n\t\toffset := i * peerSize\n\t\tpeers[i].IP = net.IP(peersBin[offset : offset+4])\n\t\tpeers[i].Port = binary.BigEndian.Uint16(peersBin[offset+4 : offset+6])\n\t}\n\treturn peers, nil\n}\n```\n\n## Downloading from peers\n\nNow that we have a list of peers, it's time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:\n\n1. Start a TCP connection with the peer. This is like starting a phone call.\n2. Complete a two-way BitTorrent **handshake**. _\"Hello?\" \"Hello.\"_\n3. Exchange **messages** to download **pieces**. _\"I'd like piece #231 please.\"_\n\n## Start a TCP connection\n\n```go\nconn, err := net.DialTimeout(\"tcp\", peer.String(), 3*time.Second)\nif err != nil {\n\treturn nil, err\n}\n```\n\nI set a timeout so that I don't waste too much time on peers that aren't going to let me connect. For the most part, it's a pretty standard TCP connection.\n\n### Complete the handshake\n\nWe've just set up a connection with a peer, but we want to do a handshake to validate our assumptions that the peer\n\n- can communicate using the BitTorrent protocol\n- is able to understand and respond to our messages\n- has the file that we want, or at least knows what we're talking about\n\n![Two computers communicating. One asks 'do you speak BitTorrent and have this file?' and the other replies 'I speak BitTorrent and have that file'](/guides/torrent-client/handshake.png)\n\nMy father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it's made up of five parts:\n\n1. The length of the protocol identifier, which is always 19 (0x13 in hex)\n2. The protocol identifier, called the **pstr** which is always `BitTorrent protocol`\n3. Eight **reserved bytes**, all set to 0. We'd flip some of them to 1 to indicate that we support certain [extensions](http://www.bittorrent.org/beps/bep_0010.html). But we don't, so we'll keep them at 0.\n4. The **infohash** that we calculated earlier to identify which file we want\n5. The **Peer ID** that we made up to identify ourselves\n\nPut together, a handshake string might look like this:\n\n```markdown\n\\x13BitTorrent protocol\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x86\\xd4\\xc8\\x00\\x24\\xa4\\x69\\xbe\\x4c\\x50\\xbc\\x5a\\x10\\x2c\\xf7\\x17\\x80\\x31\\x00\\x74-TR2940-k8hj0wgej6ch\n```\n\nAfter we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we're talking about the same file. If everything goes as planned, we're good to go. If not, we can sever the connection because there's something wrong. _\"Hello?\" \"这是谁？ 你想要什么？\" \"Okay, wow, wrong number.\"_\n\nIn our code, let's make a struct to represent a handshake, and write a few methods for serializing and reading them:\n\n```go\n// A Handshake is a special message that a peer uses to identify itself\ntype Handshake struct {\n\tPstr     string\n\tInfoHash [20]byte\n\tPeerID   [20]byte\n}\n\n// Serialize serializes the handshake to a buffer\nfunc (h *Handshake) Serialize() []byte {\n\tbuf := make([]byte, len(h.Pstr)+49)\n\tbuf[0] = byte(len(h.Pstr))\n\tcurr := 1\n\tcurr += copy(buf[curr:], h.Pstr)\n\tcurr += copy(buf[curr:], make([]byte, 8)) // 8 reserved bytes\n\tcurr += copy(buf[curr:], h.InfoHash[:])\n\tcurr += copy(buf[curr:], h.PeerID[:])\n\treturn buf\n}\n\n// Read parses a handshake from a stream\nfunc Read(r io.Reader) (*Handshake, error) {\n\t// Do Serialize(), but backwards\n\t// ...\n}\n```\n\n### Send and receive messages\n\nOnce we've completed the initial handshake, we can send and receive **messages**. Well, not quite—if the other peer isn't ready to accept messages, we can't send any until they tell us they're ready. In this state, we're considered **choked** by the other peer. They'll send us an **unchoke** message to let us know that we can begin asking them for data. By default, we assume that we're choked until proven otherwise.\n\nOnce we've been unchoked, we can then begin sending **requests** for pieces, and they can send us messages back containing pieces.\n\n![\"A cartoon in which person 1 says 'hello I would like piece number—' and person 2 grabs him by the neck and says '00 00 00 01 00 (choke)'](/guides/torrent-client/choke.png)\n\n#### Interpreting messages\n\nA message has a length, an **ID** and a **payload**. On the wire, it looks like:\n\n![A message with 4 byte for the length, 1 byte for ID, and an optional payload](/guides/torrent-client/message.png)\n\nA message starts with a length indicator which tells us how many bytes long the message will be. It's a 32-bit integer, meaning it's made out of four bytes smooshed together in big-endian order. The next byte, the **ID**, tells us which type of message we're receiving—for example, a `2` byte means \"interested.\" Finally, the optional **payload** fills out the remaining length of the message.\n\n```go\ntype messageID uint8\n\nconst (\n\tMsgChoke         messageID = 0\n\tMsgUnchoke       messageID = 1\n\tMsgInterested    messageID = 2\n\tMsgNotInterested messageID = 3\n\tMsgHave          messageID = 4\n\tMsgBitfield      messageID = 5\n\tMsgRequest       messageID = 6\n\tMsgPiece         messageID = 7\n\tMsgCancel        messageID = 8\n)\n\n// Message stores ID and payload of a message\ntype Message struct {\n\tID      messageID\n\tPayload []byte\n}\n\n// Serialize serializes a message into a buffer of the form\n// <length prefix><message ID><payload>\n// Interprets `nil` as a keep-alive message\nfunc (m *Message) Serialize() []byte {\n\tif m == nil {\n\t\treturn make([]byte, 4)\n\t}\n\tlength := uint32(len(m.Payload) + 1) // +1 for id\n\tbuf := make([]byte, 4+length)\n\tbinary.BigEndian.PutUint32(buf[0:4], length)\n\tbuf[4] = byte(m.ID)\n\tcopy(buf[5:], m.Payload)\n\treturn buf\n}\n```\n\nTo read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a `uint32` to get the **length** of the message. Then, we read that number of bytes to get the **ID** (the first byte) and the **payload** (the remaining bytes).\n\n```go\n// Read parses a message from a stream. Returns `nil` on keep-alive message\nfunc Read(r io.Reader) (*Message, error) {\n\tlengthBuf := make([]byte, 4)\n\t_, err := io.ReadFull(r, lengthBuf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tlength := binary.BigEndian.Uint32(lengthBuf)\n\n\t// keep-alive message\n\tif length == 0 {\n\t\treturn nil, nil\n\t}\n\n\tmessageBuf := make([]byte, length)\n\t_, err = io.ReadFull(r, messageBuf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := Message{\n\t\tID:      messageID(messageBuf[0]),\n\t\tPayload: messageBuf[1:],\n\t}\n\n\treturn &m, nil\n}\n```\n\n#### Bitfields\n\nOne of the most interesting types of message is the **bitfield**, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the _bits_ set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all `0`, and flip bits to `1` to mark their positions as \"stamped.\"\n\n![a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010](/guides/torrent-client/bitfield.png)\n\nBy working with _bits_ instead of _bytes_, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a `bool`. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:\n\n```go\n// A Bitfield represents the pieces that a peer has\ntype Bitfield []byte\n\n// HasPiece tells if a bitfield has a particular index set\nfunc (bf Bitfield) HasPiece(index int) bool {\n\tbyteIndex := index / 8\n\toffset := index % 8\n\treturn bf[byteIndex]>>(7-offset)&1 != 0\n}\n\n// SetPiece sets a bit in the bitfield\nfunc (bf Bitfield) SetPiece(index int) {\n\tbyteIndex := index / 8\n\toffset := index % 8\n\tbf[byteIndex] |= 1 << (7 - offset)\n}\n```\n\n### Putting it all together\n\nWe now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the **concurrency** involved in talking to multiple peers at once, and managing the **state** of our peers as we interact with them. These are both classically Hard problems.\n\n#### Managing concurrency: channels as queues\n\nIn Go, we [share memory by communicating](https://blog.golang.org/share-memory-by-communicating), and we can think of a Go channel as a cheap thread-safe queue.\n\nWe'll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.\n\n```go\n// Init queues for workers to retrieve work and send results\nworkQueue := make(chan *pieceWork, len(t.PieceHashes))\nresults := make(chan *pieceResult)\nfor index, hash := range t.PieceHashes {\n\tlength := t.calculatePieceSize(index)\n\tworkQueue <- &pieceWork{index, hash, length}\n}\n\n// Start workers\nfor _, peer := range t.Peers {\n\tgo t.startDownloadWorker(peer, workQueue, results)\n}\n\n// Collect results into a buffer until full\nbuf := make([]byte, t.Length)\ndonePieces := 0\nfor donePieces < len(t.PieceHashes) {\n\tres := <-results\n\tbegin, end := t.calculateBoundsForPiece(res.index)\n\tcopy(buf[begin:end], res.buf)\n\tdonePieces++\n}\nclose(workQueue)\n```\n\nWe'll spawn a worker goroutine for each peer we've received from the tracker. It'll connect and handshake with the peer, and then start retrieving work from the `workQueue`, attempting to download it, and sending downloaded pieces back through the `results` channel.\n\n![a flow chart of the download strategy](/guides/torrent-client/download.png)\n\n```go\nfunc (t *Torrent) startDownloadWorker(peer peers.Peer, workQueue chan *pieceWork, results chan *pieceResult) {\n\tc, err := client.New(peer, t.PeerID, t.InfoHash)\n\tif err != nil {\n\t\tlog.Printf(\"Could not handshake with %s. Disconnecting\\n\", peer.IP)\n\t\treturn\n\t}\n\tdefer c.Conn.Close()\n\tlog.Printf(\"Completed handshake with %s\\n\", peer.IP)\n\n\tc.SendUnchoke()\n\tc.SendInterested()\n\n\tfor pw := range workQueue {\n\t\tif !c.Bitfield.HasPiece(pw.index) {\n\t\t\tworkQueue <- pw // Put piece back on the queue\n\t\t\tcontinue\n\t\t}\n\n\t\t// Download the piece\n\t\tbuf, err := attemptDownloadPiece(c, pw)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Exiting\", err)\n\t\t\tworkQueue <- pw // Put piece back on the queue\n\t\t\treturn\n\t\t}\n\n\t\terr = checkIntegrity(pw, buf)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Piece #%d failed integrity check\\n\", pw.index)\n\t\t\tworkQueue <- pw // Put piece back on the queue\n\t\t\tcontinue\n\t\t}\n\n\t\tc.SendHave(pw.index)\n\t\tresults <- &pieceResult{pw.index, buf}\n\t}\n}\n```\n\n#### Managing state\n\nWe'll keep track of each peer in a struct, and modify that struct as we read messages. It'll include data like how much we've downloaded from the peer, how much we've requested from them, and whether we're choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.\n\n```go\ntype pieceProgress struct {\n\tindex      int\n\tclient     *client.Client\n\tbuf        []byte\n\tdownloaded int\n\trequested  int\n\tbacklog    int\n}\n\nfunc (state *pieceProgress) readMessage() error {\n\tmsg, err := state.client.Read() // this call blocks\n\tswitch msg.ID {\n\tcase message.MsgUnchoke:\n\t\tstate.client.Choked = false\n\tcase message.MsgChoke:\n\t\tstate.client.Choked = true\n\tcase message.MsgHave:\n\t\tindex, err := message.ParseHave(msg)\n\t\tstate.client.Bitfield.SetPiece(index)\n\tcase message.MsgPiece:\n\t\tn, err := message.ParsePiece(state.index, state.buf, msg)\n\t\tstate.downloaded += n\n\t\tstate.backlog--\n\t}\n\treturn nil\n}\n```\n\n#### Time to make requests!\n\nFiles, pieces, and piece hashes aren't the full story—we can go further by breaking down pieces into **blocks**. A block is a part of a piece, and we can fully define a block by the **index** of the piece it's part of, its byte **offset** within the piece, and its **length**. When we make requests for data from peers, we are actually requesting _blocks_. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.\n\nA peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they're often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it's probably better to stick with the spec.\n\n#### Pipelining\n\nNetwork round-trips are expensive, and requesting each block one by one will absolutely thank the performance of our download. Therefore, it's important to **pipeline** our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.\n\n![Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.](/guides/torrent-client/pipelining.png)\n\nClassically, BitTorrent clients kept a queue of five pipelined requests, and that's the value I'll be using. I found that increasing it can up to double the speed of a download. Newer clients use an [adaptive](https://luminarys.com/posts/writing-a-bittorrent-client.html) queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it's pretty low hanging fruit for future performance optimization.\n\n```go\n// MaxBlockSize is the largest number of bytes a request can ask for\nconst MaxBlockSize = 16384\n\n// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline\nconst MaxBacklog = 5\n\nfunc attemptDownloadPiece(c *client.Client, pw *pieceWork) ([]byte, error) {\n\tstate := pieceProgress{\n\t\tindex:  pw.index,\n\t\tclient: c,\n\t\tbuf:    make([]byte, pw.length),\n\t}\n\n\t// Setting a deadline helps get unresponsive peers unstuck.\n\t// 30 seconds is more than enough time to download a 262 KB piece\n\tc.Conn.SetDeadline(time.Now().Add(30 * time.Second))\n\tdefer c.Conn.SetDeadline(time.Time{}) // Disable the deadline\n\n\tfor state.downloaded < pw.length {\n\t\t// If unchoked, send requests until we have enough unfulfilled requests\n\t\tif !state.client.Choked {\n\t\t\tfor state.backlog < MaxBacklog && state.requested < pw.length {\n\t\t\t\tblockSize := MaxBlockSize\n\t\t\t\t// Last block might be shorter than the typical block\n\t\t\t\tif pw.length-state.requested < blockSize {\n\t\t\t\t\tblockSize = pw.length - state.requested\n\t\t\t\t}\n\n\t\t\t\terr := c.SendRequest(pw.index, state.requested, blockSize)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tstate.backlog++\n\t\t\t\tstate.requested += blockSize\n\t\t\t}\n\t\t}\n\n\t\terr := state.readMessage()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn state.buf, nil\n}\n```\n\n#### main.go\n\nThis is a short one. We're almost there.\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/veggiedefender/torrent-client/torrentfile\"\n)\n\nfunc main() {\n\tinPath := os.Args[1]\n\toutPath := os.Args[2]\n\n\ttf, err := torrentfile.Open(inPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\terr = tf.DownloadToFile(outPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n<script id=\"asciicast-xqRSB0Jec8RN91Zt89rbb9PcL\" src=\"https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL.js\" async></script>\n\n## This isn't the full story\n\nFor brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my [full implementation](https://github.com/veggiedefender/torrent-client) if you're interested.\n";
				}
				async function compiledContent$5() {
					return await html$5();
				}
				function getHeadings$5() {
					return [{"depth":2,"slug":"finding-peers","text":"Finding peers"},{"depth":3,"slug":"parsing-a-torrent-file","text":"Parsing a .torrent file"},{"depth":3,"slug":"retrieving-peers-from-the-tracker","text":"Retrieving peers from the tracker"},{"depth":3,"slug":"parsing-the-tracker-response","text":"Parsing the tracker response"},{"depth":2,"slug":"downloading-from-peers","text":"Downloading from peers"},{"depth":2,"slug":"start-a-tcp-connection","text":"Start a TCP connection"},{"depth":3,"slug":"complete-the-handshake","text":"Complete the handshake"},{"depth":3,"slug":"send-and-receive-messages","text":"Send and receive messages"},{"depth":4,"slug":"interpreting-messages","text":"Interpreting messages"},{"depth":4,"slug":"bitfields","text":"Bitfields"},{"depth":3,"slug":"putting-it-all-together","text":"Putting it all together"},{"depth":4,"slug":"managing-concurrency-channels-as-queues","text":"Managing concurrency: channels as queues"},{"depth":4,"slug":"managing-state","text":"Managing state"},{"depth":4,"slug":"time-to-make-requests","text":"Time to make requests!"},{"depth":4,"slug":"pipelining","text":"Pipelining"},{"depth":4,"slug":"maingo","text":"main.go"},{"depth":2,"slug":"this-isnt-the-full-story","text":"This isn’t the full story"}];
				}

				const Content$5 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$5;
					content.file = file$5;
					content.url = url$5;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$5())}`;
				});

const __vite_glob_0_93 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$5,
	compiledContent: compiledContent$5,
	default: Content$5,
	file: file$5,
	frontmatter: frontmatter$5,
	getHeadings: getHeadings$5,
	rawContent: rawContent$5,
	url: url$5
}, Symbol.toStringTag, { value: 'Module' }));

const html$4 = () => "<p><a href=\"/guides/unfamiliar-codebase.png\"><img src=\"/guides/unfamiliar-codebase.png\" alt=\"Unfamiliar Codebase\"></a></p>";

				const frontmatter$4 = {"title":"Unfamiliar Codebase","description":"Tips on getting familiar with an unfamiliar codebase","authorId":"kamran","seo":{"title":"Unfamiliar Codebase - roadmap.sh","description":"Tips on getting familiar with an unfamiliar codebase"},"isNew":false,"type":"visual","date":"2021-05-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$4 = "/workspace/src/data/guides/unfamiliar-codebase.md";
				const url$4 = undefined;
				function rawContent$4() {
					return "   \n                            \n                                                                   \n                  \n    \n                                           \n                                                                     \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Unfamiliar Codebase](/guides/unfamiliar-codebase.png)](/guides/unfamiliar-codebase.png)\n";
				}
				async function compiledContent$4() {
					return await html$4();
				}
				function getHeadings$4() {
					return [];
				}

				const Content$4 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$4;
					content.file = file$4;
					content.url = url$4;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$4())}`;
				});

const __vite_glob_0_94 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$4,
	compiledContent: compiledContent$4,
	default: Content$4,
	file: file$4,
	frontmatter: frontmatter$4,
	getHeadings: getHeadings$4,
	rawContent: rawContent$4,
	url: url$4
}, Symbol.toStringTag, { value: 'Module' }));

const html$3 = () => "<p><a href=\"/guides/web-vitals.png\"><img src=\"/guides/web-vitals.png\" alt=\"Web Vitals\"></a></p>";

				const frontmatter$3 = {"title":"What are Web Vitals?","description":"Learn what are the core web vitals and how to measure them.","authorId":"kamran","seo":{"title":"What are Web Vitals? - roadmap.sh","description":"Learn what are the core web vitals and how to measure them."},"isNew":false,"type":"visual","date":"2021-09-05T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$3 = "/workspace/src/data/guides/what-are-web-vitals.md";
				const url$3 = undefined;
				function rawContent$3() {
					return "   \n                             \n                                                                          \n                  \n    \n                                            \n                                                                            \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![Web Vitals](/guides/web-vitals.png)](/guides/web-vitals.png)\n";
				}
				async function compiledContent$3() {
					return await html$3();
				}
				function getHeadings$3() {
					return [];
				}

				const Content$3 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$3;
					content.file = file$3;
					content.url = url$3;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$3())}`;
				});

const __vite_glob_0_95 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$3,
	compiledContent: compiledContent$3,
	default: Content$3,
	file: file$3,
	frontmatter: frontmatter$3,
	getHeadings: getHeadings$3,
	rawContent: rawContent$3,
	url: url$3
}, Symbol.toStringTag, { value: 'Module' }));

const html$2 = () => "<p>Since the explosive growth of web-based applications, every developer stands to benefit from understanding how the Internet works. Through this article and its accompanying introductory series of short videos about the Internet from <a href=\"https://code.org\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">code.org</a>, you will learn the basics of the Internet and how it works. After going through this article, you will be able to answer the following questions:</p>\n<ul>\n<li>What is the Internet?</li>\n<li>How does the information move on the internet?</li>\n<li>How do the networks talk to each other and the protocols involved?</li>\n<li>What’s the relationship between packets, routers, and reliability?</li>\n<li>HTTP and the HTML – How are you viewing this webpage in your browser?</li>\n<li>How is the information transfer on the internet made secure?</li>\n<li>What is cybersecurity and what are some common internet crimes?</li>\n</ul>\n<h2 id=\"what-is-the-internet\">What is the Internet?</h2>\n<p>The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.</p>\n<p>In the video below, Vint Cerf, one of the “fathers of the internet,” explains the history of how the Internet works and how no one person or organization is really in charge of it.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/Dxcc6ycZ73M\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"wires-cables-and-wi-fi\">Wires, Cables, and Wi-Fi</h2>\n<p>Information on the Internet moves from one computer to another in the form of bits over various mediums, including Ethernet cables, fiber optic cables, and wireless signals (i.e., radio waves).</p>\n<p>In the video linked below, you will learn about the different mediums for data transfer on the Internet and the pros and cons for each.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZhEf7e4kopM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"ip-addresses-and-dns\">IP Addresses and DNS</h2>\n<p>Now that you know about the physical medium for the data transfer over the internet, it’s time to learn about the protocols involved. How does the information traverse from one computer to another in this massive global network of computers?</p>\n<p>In the video below, you will get a brief introduction to IP, DNS, and how these protocols make the Internet work.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/5o8CwafCxnU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"packets-routing-and-reliability\">Packets, Routing, and Reliability</h2>\n<p>Information transfer on the Internet from one computer to another does not need to follow a fixed path; in fact, it may change paths during the transfer. This information transfer is done in the form of packets and these packets may follow different routes depending on certain factors.</p>\n<p>In this video, you will learn about how the packets of information are routed from one computer to another to reach the destination.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AYdF7b3nMto\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"http-and-html\">HTTP and HTML</h2>\n<p>HTTP is the standard protocol by which webpages are transferred over the Internet. The video below is a brief introduction to HTTP and how web browsers load websites for you.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/kBXQZMmiA4s\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"encryption-and-public-keys\">Encryption and Public Keys</h2>\n<p>Cryptography is what keeps our communication secure on the Internet. In this short video, you will learn the basics of cryptography, SSL/TLS, and how they help make the communication on the Internet secure.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZghMPWGXexs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"cybersecurity-and-crime\">Cybersecurity and Crime</h2>\n<p>Cybersecurity refers to the protective measures against criminal activity accomplished through using a network, technological devices, and the internet. In this video, you will learn about the basics of cybersecurity and common cybercrimes.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AuYNXgO_f3Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>And that wraps it up for this article. To learn more about the Internet, <a href=\"https://twitter.com/kamrify\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Kamran Ahmed</a> has a nice little guide on <a href=\"/guides/dns-in-one-picture\">DNS: How a website is found on the Internet</a>. Also, go through the episodes of <a href=\"https://howdns.works/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">howdns.works</a> and read this <a href=\"https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">cartoon intro to DNS over HTTPS</a>.</p>";

				const frontmatter$2 = {"title":"How does the internet work?","description":"Learn the basics of internet and everything involved with this short video series","authorId":"kamran","seo":{"title":"How does the internet work? - roadmap.sh","description":"Learn the basics of internet and everything involved with this short video series"},"isNew":false,"type":"textual","date":"2021-03-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$2 = "/workspace/src/data/guides/what-is-internet.md";
				const url$2 = undefined;
				function rawContent$2() {
					return "   \n                                    \n                                                                                                \n                  \n    \n                                                   \n                                                                                                  \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nSince the explosive growth of web-based applications, every developer stands to benefit from understanding how the Internet works. Through this article and its accompanying introductory series of short videos about the Internet from [code.org](https://code.org), you will learn the basics of the Internet and how it works. After going through this article, you will be able to answer the following questions:\n\n- What is the Internet?\n- How does the information move on the internet?\n- How do the networks talk to each other and the protocols involved?\n- What's the relationship between packets, routers, and reliability?\n- HTTP and the HTML – How are you viewing this webpage in your browser?\n- How is the information transfer on the internet made secure?\n- What is cybersecurity and what are some common internet crimes?\n\n## What is the Internet?\n\nThe Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.\n\nIn the video below, Vint Cerf, one of the \"fathers of the internet,\" explains the history of how the Internet works and how no one person or organization is really in charge of it.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/Dxcc6ycZ73M\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Wires, Cables, and Wi-Fi\n\nInformation on the Internet moves from one computer to another in the form of bits over various mediums, including Ethernet cables, fiber optic cables, and wireless signals (i.e., radio waves).\n\nIn the video linked below, you will learn about the different mediums for data transfer on the Internet and the pros and cons for each.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZhEf7e4kopM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## IP Addresses and DNS\n\nNow that you know about the physical medium for the data transfer over the internet, it's time to learn about the protocols involved. How does the information traverse from one computer to another in this massive global network of computers?\n\nIn the video below, you will get a brief introduction to IP, DNS, and how these protocols make the Internet work.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/5o8CwafCxnU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Packets, Routing, and Reliability\n\nInformation transfer on the Internet from one computer to another does not need to follow a fixed path; in fact, it may change paths during the transfer. This information transfer is done in the form of packets and these packets may follow different routes depending on certain factors.\n\nIn this video, you will learn about how the packets of information are routed from one computer to another to reach the destination.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AYdF7b3nMto\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## HTTP and HTML\n\nHTTP is the standard protocol by which webpages are transferred over the Internet. The video below is a brief introduction to HTTP and how web browsers load websites for you.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/kBXQZMmiA4s\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Encryption and Public Keys\n\nCryptography is what keeps our communication secure on the Internet. In this short video, you will learn the basics of cryptography, SSL/TLS, and how they help make the communication on the Internet secure.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZghMPWGXexs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Cybersecurity and Crime\n\nCybersecurity refers to the protective measures against criminal activity accomplished through using a network, technological devices, and the internet. In this video, you will learn about the basics of cybersecurity and common cybercrimes.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AuYNXgO_f3Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nAnd that wraps it up for this article. To learn more about the Internet, [Kamran Ahmed](https://twitter.com/kamrify) has a nice little guide on [DNS: How a website is found on the Internet](/guides/dns-in-one-picture). Also, go through the episodes of [howdns.works](https://howdns.works/) and read this [cartoon intro to DNS over HTTPS](https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/).\n";
				}
				async function compiledContent$2() {
					return await html$2();
				}
				function getHeadings$2() {
					return [{"depth":2,"slug":"what-is-the-internet","text":"What is the Internet?"},{"depth":2,"slug":"wires-cables-and-wi-fi","text":"Wires, Cables, and Wi-Fi"},{"depth":2,"slug":"ip-addresses-and-dns","text":"IP Addresses and DNS"},{"depth":2,"slug":"packets-routing-and-reliability","text":"Packets, Routing, and Reliability"},{"depth":2,"slug":"http-and-html","text":"HTTP and HTML"},{"depth":2,"slug":"encryption-and-public-keys","text":"Encryption and Public Keys"},{"depth":2,"slug":"cybersecurity-and-crime","text":"Cybersecurity and Crime"}];
				}

				const Content$2 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$2;
					content.file = file$2;
					content.url = url$2;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$2())}`;
				});

const __vite_glob_0_96 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$2,
	compiledContent: compiledContent$2,
	default: Content$2,
	file: file$2,
	frontmatter: frontmatter$2,
	getHeadings: getHeadings$2,
	rawContent: rawContent$2,
	url: url$2
}, Symbol.toStringTag, { value: 'Module' }));

const html$1 = () => "<p><a href=\"/guides/sli-slo-sla.jpeg\"><img src=\"/guides/sli-slo-sla.jpeg\" alt=\"SLI vs SLO vs SLA\"></a></p>";

				const frontmatter$1 = {"title":"SLIs, SLOs and SLAs","description":"Learn what are different indicators for performance identification of any service.","authorId":"kamran","seo":{"title":"SLIs, SLOs and SLAs - roadmap.sh","description":"Learn what are different indicators for performance identification of any service."},"isNew":false,"type":"visual","date":"2021-08-31T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1 = "/workspace/src/data/guides/what-is-sli-slo-sla.md";
				const url$1 = undefined;
				function rawContent$1() {
					return "   \n                            \n                                                                                                 \n                  \n    \n                                           \n                                                                                                   \n            \n              \n                \n        \n               \n                      \n     \n           \n                  \n                   \n   \n\n[![SLI vs SLO vs SLA](/guides/sli-slo-sla.jpeg)](/guides/sli-slo-sla.jpeg)\n";
				}
				async function compiledContent$1() {
					return await html$1();
				}
				function getHeadings$1() {
					return [];
				}

				const Content$1 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1;
					content.file = file$1;
					content.url = url$1;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1())}`;
				});

const __vite_glob_0_97 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1,
	compiledContent: compiledContent$1,
	default: Content$1,
	file: file$1,
	frontmatter: frontmatter$1,
	getHeadings: getHeadings$1,
	rawContent: rawContent$1,
	url: url$1
}, Symbol.toStringTag, { value: 'Module' }));

const html = () => "<p>We all have heard the mantra <em>“build it and they will come”</em> many times. Stories of people building a startup or project and seemingly stumbling upon a goldmine aren’t few, but they aren’t the rule. These stories are still the exception in the mass of launched projects and startups.</p>\n<p>Before the <a href=\"https://en.wikipedia.org/wiki/Wright_brothers\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Wright brothers</a> built their Kitty Hawk, people generally believed heavy objects could not fly - physics simply forbade it. The idea of regularly boarding airplanes as we do it these days was unthinkable. It was considered an unrealistic daydream for humans to ever claim the sky. When the first airplanes took off, people were fascinated, of course. It was a topic people continued to talk about for ages. Technology had made something impossible possible. While the wording “build it and they will come” originated from the movie <a href=\"https://en.wikipedia.org/wiki/Field_of_Dreams\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Field of Dreams</a>, this and similar historic events gave birth to the idea behind it.</p>\n<p>The engineers’ and inventors’ dreams came true: spend time doing what you love while success follows magically. The internet and web-standards democratized access to this dream. But with it, the idea behind it faded and became less and less powerful. In 2020, there are very strong signs the popular saying isn’t correct anymore.</p>\n<h2 id=\"why-doesnt-build-it-and-they-will-come-work-anymore\">Why doesn’t “build it and they will come” work anymore?</h2>\n<p>There are a few reasons for working hard to make “build it and they will come” a thing of the past. This being said, it doesn’t mean you can’t succeed in building a side-project anymore. You’ve just got to adjust the way you are building it.</p>\n<h3 id=\"building-got-much-easier\">Building got much easier</h3>\n<p>As a software engineer, some websites are a blessing. Most of us couldn’t work without GitHub, Stackoverflow and of course Google, ahem, DuckDuckGo. These powerful sites help us to solve problems, learn new techniques and find the right libraries to make building projects easier. If any of these sites are down, most engineers take a break and go for a coffee instead of trying to continue working. Combine this with more sophisticated web-standards and easier access to tooling, and you arrive at a world where building projects isn’t just a job for highly specialist developers anymore. Powerful frameworks such as <a href=\"https://laravel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Laravel</a> and <a href=\"https://quasar.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Quasar Framework</a> are available for anyone to build projects on - for free.</p>\n<p>In fact, building projects got to a point where some people simply build them as an exercise or hobby. If you spend some time browsing GitHub you will be surprised by the open source projects people built without any commercial goals. “Low code” and “No code” are the next wave of people building projects with a less technological background.</p>\n<h3 id=\"too-much-going-on-information-overload\">Too much going on: information overload</h3>\n<p>We are living in a world with information overload. In the online sphere, you can find a lot of useful information. But there is also a lot of noise. For each piece of information or advice, you can find a number of opposing statements. This is partly due to the fact that the internet made it much easier to publish and share information. Everyone has been given a voice - for good or bad. This makes it much harder to reach potential users. Your new project probably just drowns amongst kitten videos, opinions, and news. Never has the average lifetime of published content been so low. You’ve got to come up with a marketing plan before setting out on the journey.</p>\n<h3 id=\"smaller-problems\">Smaller Problems</h3>\n<p>Besides building is easier than ever before and attention is in short supply, there is another issue making the life of makers, inventors, and engineers harder: today’s problems are much smaller. Back when the previously mentioned Wright Brothers set out, they fascinated people with the problem they were aiming to address: flying. Unless your name is Elon, your problem is unlikely to attract many people naturally. As a solo developer or indie hacker, the chances are higher of having a much smaller problem in a niche (of a niche). With the information overload mentioned before, niches are pretty much the only way to build a side-project or startup and succeed.</p>\n<p>Does sound pretty grim for inventors, developers, and engineers? Well, yes and no. We’ve got to tweak the approach to get in front of the eye of potential users and customers.</p>\n<h2 id=\"how-to-market-your-project-nowadays\">How to market your project nowadays?</h2>\n<p>The very first step to improving the odds of success is <a href=\"https://peterthaleikis.com/business-idea-validation/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">idea validation</a>. While this sounds fairly obvious, many engineers and developers still don’t validate their ideas before starting to build the MVP. The result is another stale project and wasted effort. To succeed you need to work on marketing before you start building anything. In the link mentioned before, I describe my approach to validation and collecting useful marketing information at the same time.</p>\n<h3 id=\"build-your-audience-first-and-the-project-after\">Build your Audience first and the project after.</h3>\n<p>Build your audience before you build your project. Spend your time connecting with potential users, learning from their needs, and talking about their problems. This will help you market your project later on. The audience first, projects second. There are numerous ways to build an audience. One of the simplest and easiest is to start with a personal or <a href=\"https://startupnamecheck.com/blog/how-to-start-a-small-business-blog\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">project blog</a>.</p>\n<p>Don’t use Medium or a similar service - opt for a self-hosted blog as it allows you to build the blog freely to your needs and have decent links back to your project later on. Don’t forget to add a newsletter. Newsletters are a key to reconnecting in our world of short attention spans.</p>\n<h3 id=\"tool-by-tool\">Tool by Tool</h3>\n<p>Another approach is the “Tool by Tool” approach. I first noticed this approach being used by Shopify. The team at Shopify is providing little tools such as a <a href=\"https://hatchful.shopify.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">logo generator</a> and releasing these tools free for anyone to use. This not just builds goodwill with people; it also allows Shopify to attract powerful backlinks to their projects. As developers, we are in the perfect position to build such mini-tools. It boosts morale and drives attention at the same time.</p>\n<p>Spend some time evaluating where your project or product will deliver value to the end-user. Look at options to split off small, independent tools. Build these and launch them before launching the whole product. This allows you to practice launching and promoting your part-projects at the same time. With each backlink to your part-projects, you will enhance your ranking in Google. An example of a maker following this approach is <a href=\"https://kambanthemaker.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Kamban</a> with <a href=\"https://flatga.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">FlatGA</a>. He built FlatGA as phase one of a bigger project currently in development.</p>\n<h3 id=\"join-a-maker-community\">Join a Maker community</h3>\n<p>While you are building your part-projects, don’t forget to discuss the progress publicly. This helps to attract an audience around your work and makes the launches easier. You can use Twitter threads and Reddit posts to share updates. A maker community such as <a href=\"https://getmakerlog.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">makerlog</a> or <a href=\"https://wip.chat\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">WIP.chat</a> can also extend your reach. These allow you to get instant feedback, and keep yourself accountable and they will enhance your reach at the same time.</p>\n<h3 id=\"getting-ready-to-launch\">Getting ready to Launch</h3>\n<p>Launching seems like this special moment when you release your project into the wide world. Often this moment is combined with high expectations and developers consider launching their project the key - if not only - part of their approach to marketing. While launching can help to attract some initial customers, it shouldn’t be your only idea when it comes to marketing. You should also know that launching isn’t a single event. You can (and should) launch again and again. Every time you launch you are increasing the chance to reach more new customers. After the launch is before the launch.</p>\n<h3 id=\"marketing-is-an-on-going-fight\">Marketing Is an On-going Fight</h3>\n<p>Many developers plan to launch their product on a few sites and see where it takes their project from there on. This works well if your product goes viral by luck. A much more sustainable approach is constantly working a little on it. Marketing is most effective if done consistently. That holds true for blogging as well as most other forms of marketing. A simple approach to keep you on the path to marketing your project regularly is subscribing to a free <a href=\"https://wheretopost.email\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">newsletter with small marketing opportunities</a>. This way, you are regularly reminded and given bite-sized tasks to complete.</p>\n<h2 id=\"closing-words\">Closing Words</h2>\n<p>I hope the article helped you to wrap your head around the idea that building side-projects alone doesn’t solve any issues anymore. If you like what you’ve just read and want to read more, please consider subscribing to <a href=\"https://peterthaleikis.com/newsletter\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">my newsletter</a>. I’ll send out the occasional email about interesting new articles or side-projects.</p>\n<h2 id=\"about-the-author\">About the author</h2>\n<p><a href=\"https://peterthaleikis.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Peter Thaleikis</a> a software engineer and business owner. He has been developing web applications since around 2000. Before he started his own software development company <a href=\"https://bringyourownideas.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Bring Your Own Ideas Ltd.</a>, he has been a Lead Developer for multiple organizations.</p>";

				const frontmatter = {"title":"Build it and they will come?","description":"Why “build it and they will come” alone won’t work anymore","authorId":"peter-thaleikis","seo":{"title":"Build it and they will come? - roadmap.sh","description":"Why “build it and they will come” alone won’t work anymore"},"isNew":false,"type":"textual","date":"2021-05-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file = "/workspace/src/data/guides/why-build-it-and-they-will-come-wont-work-anymore.md";
				const url = undefined;
				function rawContent() {
					return "   \n                                     \n                                                                         \n                           \n    \n                                                    \n                                                                           \n            \n               \n                \n        \n               \n                      \n     \n           \n                   \n                   \n   \n\nWe all have heard the mantra _\"build it and they will come\"_ many times. Stories of people building a startup or project and seemingly stumbling upon a goldmine aren't few, but they aren't the rule. These stories are still the exception in the mass of launched projects and startups.\n\nBefore the [Wright brothers](https://en.wikipedia.org/wiki/Wright_brothers) built their Kitty Hawk, people generally believed heavy objects could not fly - physics simply forbade it. The idea of regularly boarding airplanes as we do it these days was unthinkable. It was considered an unrealistic daydream for humans to ever claim the sky. When the first airplanes took off, people were fascinated, of course. It was a topic people continued to talk about for ages. Technology had made something impossible possible. While the wording \"build it and they will come\" originated from the movie [Field of Dreams](https://en.wikipedia.org/wiki/Field_of_Dreams), this and similar historic events gave birth to the idea behind it.\n\nThe engineers' and inventors' dreams came true: spend time doing what you love while success follows magically. The internet and web-standards democratized access to this dream. But with it, the idea behind it faded and became less and less powerful. In 2020, there are very strong signs the popular saying isn't correct anymore.\n\n## Why doesn't \"build it and they will come\" work anymore?\n\nThere are a few reasons for working hard to make \"build it and they will come\" a thing of the past. This being said, it doesn't mean you can't succeed in building a side-project anymore. You've just got to adjust the way you are building it.\n\n### Building got much easier\n\nAs a software engineer, some websites are a blessing. Most of us couldn't work without GitHub, Stackoverflow and of course Google, ahem, DuckDuckGo. These powerful sites help us to solve problems, learn new techniques and find the right libraries to make building projects easier. If any of these sites are down, most engineers take a break and go for a coffee instead of trying to continue working. Combine this with more sophisticated web-standards and easier access to tooling, and you arrive at a world where building projects isn't just a job for highly specialist developers anymore. Powerful frameworks such as [Laravel](https://laravel.com/) and [Quasar Framework](https://quasar.dev/) are available for anyone to build projects on - for free.\n\nIn fact, building projects got to a point where some people simply build them as an exercise or hobby. If you spend some time browsing GitHub you will be surprised by the open source projects people built without any commercial goals. \"Low code\" and \"No code\" are the next wave of people building projects with a less technological background.\n\n### Too much going on: information overload\n\nWe are living in a world with information overload. In the online sphere, you can find a lot of useful information. But there is also a lot of noise. For each piece of information or advice, you can find a number of opposing statements. This is partly due to the fact that the internet made it much easier to publish and share information. Everyone has been given a voice - for good or bad. This makes it much harder to reach potential users. Your new project probably just drowns amongst kitten videos, opinions, and news. Never has the average lifetime of published content been so low. You've got to come up with a marketing plan before setting out on the journey.\n\n### Smaller Problems\n\nBesides building is easier than ever before and attention is in short supply, there is another issue making the life of makers, inventors, and engineers harder: today's problems are much smaller. Back when the previously mentioned Wright Brothers set out, they fascinated people with the problem they were aiming to address: flying. Unless your name is Elon, your problem is unlikely to attract many people naturally. As a solo developer or indie hacker, the chances are higher of having a much smaller problem in a niche (of a niche). With the information overload mentioned before, niches are pretty much the only way to build a side-project or startup and succeed.\n\nDoes sound pretty grim for inventors, developers, and engineers? Well, yes and no. We've got to tweak the approach to get in front of the eye of potential users and customers.\n\n## How to market your project nowadays?\n\nThe very first step to improving the odds of success is [idea validation](https://peterthaleikis.com/business-idea-validation/). While this sounds fairly obvious, many engineers and developers still don't validate their ideas before starting to build the MVP. The result is another stale project and wasted effort. To succeed you need to work on marketing before you start building anything. In the link mentioned before, I describe my approach to validation and collecting useful marketing information at the same time.\n\n### Build your Audience first and the project after.\n\nBuild your audience before you build your project. Spend your time connecting with potential users, learning from their needs, and talking about their problems. This will help you market your project later on. The audience first, projects second. There are numerous ways to build an audience. One of the simplest and easiest is to start with a personal or [project blog](https://startupnamecheck.com/blog/how-to-start-a-small-business-blog).\n\nDon't use Medium or a similar service - opt for a self-hosted blog as it allows you to build the blog freely to your needs and have decent links back to your project later on. Don't forget to add a newsletter. Newsletters are a key to reconnecting in our world of short attention spans.\n\n### Tool by Tool\n\nAnother approach is the \"Tool by Tool\" approach. I first noticed this approach being used by Shopify. The team at Shopify is providing little tools such as a [logo generator](https://hatchful.shopify.com/) and releasing these tools free for anyone to use. This not just builds goodwill with people; it also allows Shopify to attract powerful backlinks to their projects. As developers, we are in the perfect position to build such mini-tools. It boosts morale and drives attention at the same time.\n\nSpend some time evaluating where your project or product will deliver value to the end-user. Look at options to split off small, independent tools. Build these and launch them before launching the whole product. This allows you to practice launching and promoting your part-projects at the same time. With each backlink to your part-projects, you will enhance your ranking in Google. An example of a maker following this approach is [Kamban](https://kambanthemaker.com/) with [FlatGA](https://flatga.io/). He built FlatGA as phase one of a bigger project currently in development.\n\n### Join a Maker community\n\nWhile you are building your part-projects, don't forget to discuss the progress publicly. This helps to attract an audience around your work and makes the launches easier. You can use Twitter threads and Reddit posts to share updates. A maker community such as [makerlog](https://getmakerlog.com/) or [WIP.chat](https://wip.chat) can also extend your reach. These allow you to get instant feedback, and keep yourself accountable and they will enhance your reach at the same time.\n\n### Getting ready to Launch\n\nLaunching seems like this special moment when you release your project into the wide world. Often this moment is combined with high expectations and developers consider launching their project the key - if not only - part of their approach to marketing. While launching can help to attract some initial customers, it shouldn't be your only idea when it comes to marketing. You should also know that launching isn't a single event. You can (and should) launch again and again. Every time you launch you are increasing the chance to reach more new customers. After the launch is before the launch.\n\n### Marketing Is an On-going Fight\n\nMany developers plan to launch their product on a few sites and see where it takes their project from there on. This works well if your product goes viral by luck. A much more sustainable approach is constantly working a little on it. Marketing is most effective if done consistently. That holds true for blogging as well as most other forms of marketing. A simple approach to keep you on the path to marketing your project regularly is subscribing to a free [newsletter with small marketing opportunities](https://wheretopost.email). This way, you are regularly reminded and given bite-sized tasks to complete.\n\n## Closing Words\n\nI hope the article helped you to wrap your head around the idea that building side-projects alone doesn't solve any issues anymore. If you like what you've just read and want to read more, please consider subscribing to [my newsletter](https://peterthaleikis.com/newsletter). I'll send out the occasional email about interesting new articles or side-projects.\n\n## About the author\n\n[Peter Thaleikis](https://peterthaleikis.com/) a software engineer and business owner. He has been developing web applications since around 2000. Before he started his own software development company [Bring Your Own Ideas Ltd.](https://bringyourownideas.com/), he has been a Lead Developer for multiple organizations.\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"why-doesnt-build-it-and-they-will-come-work-anymore","text":"Why doesn’t “build it and they will come” work anymore?"},{"depth":3,"slug":"building-got-much-easier","text":"Building got much easier"},{"depth":3,"slug":"too-much-going-on-information-overload","text":"Too much going on: information overload"},{"depth":3,"slug":"smaller-problems","text":"Smaller Problems"},{"depth":2,"slug":"how-to-market-your-project-nowadays","text":"How to market your project nowadays?"},{"depth":3,"slug":"build-your-audience-first-and-the-project-after","text":"Build your Audience first and the project after."},{"depth":3,"slug":"tool-by-tool","text":"Tool by Tool"},{"depth":3,"slug":"join-a-maker-community","text":"Join a Maker community"},{"depth":3,"slug":"getting-ready-to-launch","text":"Getting ready to Launch"},{"depth":3,"slug":"marketing-is-an-on-going-fight","text":"Marketing Is an On-going Fight"},{"depth":2,"slug":"closing-words","text":"Closing Words"},{"depth":2,"slug":"about-the-author","text":"About the author"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html())}`;
				});

const __vite_glob_0_98 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_45 as $, __vite_glob_0_71 as A, __vite_glob_0_70 as B, __vite_glob_0_69 as C, __vite_glob_0_68 as D, __vite_glob_0_67 as E, __vite_glob_0_66 as F, __vite_glob_0_65 as G, __vite_glob_0_64 as H, __vite_glob_0_63 as I, __vite_glob_0_62 as J, __vite_glob_0_61 as K, __vite_glob_0_60 as L, __vite_glob_0_59 as M, __vite_glob_0_58 as N, __vite_glob_0_57 as O, __vite_glob_0_56 as P, __vite_glob_0_55 as Q, __vite_glob_0_54 as R, __vite_glob_0_53 as S, __vite_glob_0_52 as T, __vite_glob_0_51 as U, __vite_glob_0_50 as V, __vite_glob_0_49 as W, __vite_glob_0_48 as X, __vite_glob_0_47 as Y, __vite_glob_0_46 as Z, __vite_glob_0_98 as _, __vite_glob_0_97 as a, __vite_glob_0_44 as a0, __vite_glob_0_43 as a1, __vite_glob_0_42 as a2, __vite_glob_0_41 as a3, __vite_glob_0_40 as a4, __vite_glob_0_39 as a5, __vite_glob_0_38 as a6, __vite_glob_0_37 as a7, __vite_glob_0_36 as a8, __vite_glob_0_35 as a9, __vite_glob_0_8 as aA, __vite_glob_0_7 as aB, __vite_glob_0_6 as aC, __vite_glob_0_5 as aD, __vite_glob_0_4 as aE, __vite_glob_0_3 as aF, __vite_glob_0_2 as aG, __vite_glob_0_1 as aH, __vite_glob_0_0 as aI, __vite_glob_0_34 as aa, __vite_glob_0_33 as ab, __vite_glob_0_32 as ac, __vite_glob_0_31 as ad, __vite_glob_0_30 as ae, __vite_glob_0_29 as af, __vite_glob_0_28 as ag, __vite_glob_0_27 as ah, __vite_glob_0_26 as ai, __vite_glob_0_25 as aj, __vite_glob_0_24 as ak, __vite_glob_0_23 as al, __vite_glob_0_22 as am, __vite_glob_0_21 as an, __vite_glob_0_20 as ao, __vite_glob_0_19 as ap, __vite_glob_0_18 as aq, __vite_glob_0_17 as ar, __vite_glob_0_16 as as, __vite_glob_0_15 as at, __vite_glob_0_14 as au, __vite_glob_0_13 as av, __vite_glob_0_12 as aw, __vite_glob_0_11 as ax, __vite_glob_0_10 as ay, __vite_glob_0_9 as az, __vite_glob_0_96 as b, __vite_glob_0_95 as c, __vite_glob_0_94 as d, __vite_glob_0_93 as e, __vite_glob_0_92 as f, __vite_glob_0_91 as g, __vite_glob_0_90 as h, __vite_glob_0_89 as i, __vite_glob_0_88 as j, __vite_glob_0_87 as k, __vite_glob_0_86 as l, __vite_glob_0_85 as m, __vite_glob_0_84 as n, __vite_glob_0_83 as o, __vite_glob_0_82 as p, __vite_glob_0_81 as q, __vite_glob_0_80 as r, __vite_glob_0_79 as s, __vite_glob_0_78 as t, __vite_glob_0_77 as u, __vite_glob_0_76 as v, __vite_glob_0_75 as w, __vite_glob_0_74 as x, __vite_glob_0_73 as y, __vite_glob_0_72 as z };
